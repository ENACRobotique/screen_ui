
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00022120  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003118  900223c0  900223c0  000423c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  900254d8  900254d8  000454d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  90025500  90025500  000df898  2**0
                  CONTENTS
  6 .ARM          00000000  90025500  90025500  000df898  2**0
                  CONTENTS
  7 .preinit_array 00000000  90025500  90025500  000df898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  90025500  90025500  00045500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002551c  9002551c  0004551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000148  24000000  90025524  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000148  9002566c  00050148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00020c40  24005b48  9002b06c  00055b48  2**3
                  ALLOC
 13 ._user_heap_stack 00002000  24026788  9002b06c  00056788  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000df898  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00000640  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 0000001c  90200640  90200640  00060640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0007f23c  9020065c  9020065c  0006065c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  000e0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  000e0000  2**2
                  ALLOC
 20 .debug_line   0006f5c4  00000000  00000000  000df8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_info   000c8dee  00000000  00000000  0014ee8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0001545b  00000000  00000000  00217c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003090  00000000  00000000  0022d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0019ddcb  00000000  00000000  00230168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 0000a860  00000000  00000000  003cdf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00048eba  00000000  00000000  003d8798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000cf  00000000  00000000  00421652  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000a158  00000000  00000000  00421724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loc    00052ac7  00000000  00000000  0042b87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b48 	.word	0x24005b48
900002bc:	00000000 	.word	0x00000000
900002c0:	900223a8 	.word	0x900223a8

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b4c 	.word	0x24005b4c
900002dc:	900223a8 	.word	0x900223a8

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	; (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	; (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	; (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	; (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	; (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fa1f 	bl	900067ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f020 ff81 	bl	900212b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f003 fd91 	bl	90003ed8 <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	90025524 	.word	0x90025524
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000148 	.word	0x24000148
  ldr  r2, =_sbss
900003c8:	24005b48 	.word	0x24005b48
  ldr  r3, = _ebss
900003cc:	24026788 	.word	0x24026788

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003d4:	4770      	bx	lr
900003d6:	bf00      	nop

900003d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003d8:	4770      	bx	lr
900003da:	bf00      	nop

900003dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003dc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003de:	f001 fef7 	bl	900021d0 <touchgfx_components_init>
  touchgfx_init();
}
900003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900003e6:	f001 be7b 	b.w	900020e0 <touchgfx_init>
900003ea:	bf00      	nop

900003ec <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900003ec:	f001 bef2 	b.w	900021d4 <touchgfx_taskEntry>

900003f0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900003f0:	6840      	ldr	r0, [r0, #4]
    }
900003f2:	4770      	bx	lr

900003f4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900003f4:	6041      	str	r1, [r0, #4]
    }
900003f6:	4770      	bx	lr

900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900003f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900003fc:	4b08      	ldr	r3, [pc, #32]	; (90000420 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900003fe:	4a09      	ldr	r2, [pc, #36]	; (90000424 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000400:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000404:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000408:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000040c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000410:	430a      	orrs	r2, r1
90000412:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000416:	681a      	ldr	r2, [r3, #0]
90000418:	f042 0201 	orr.w	r2, r2, #1
9000041c:	601a      	str	r2, [r3, #0]
}
9000041e:	4770      	bx	lr
90000420:	e0001000 	.word	0xe0001000
90000424:	c5acce55 	.word	0xc5acce55

90000428 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000428:	1a51      	subs	r1, r2, r1
9000042a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000042e:	fbb1 f0f3 	udiv	r0, r1, r3
90000432:	4770      	bx	lr

90000434 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000434:	4b01      	ldr	r3, [pc, #4]	; (9000043c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000436:	6858      	ldr	r0, [r3, #4]
}
90000438:	4770      	bx	lr
9000043a:	bf00      	nop
9000043c:	e0001000 	.word	0xe0001000

90000440 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000440:	4770      	bx	lr
90000442:	bf00      	nop

90000444 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000444:	b510      	push	{r4, lr}
90000446:	4604      	mov	r4, r0
90000448:	210c      	movs	r1, #12
9000044a:	f020 feba 	bl	900211c2 <_ZdlPvj>
9000044e:	4620      	mov	r0, r4
90000450:	bd10      	pop	{r4, pc}
90000452:	bf00      	nop

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000454:	6803      	ldr	r3, [r0, #0]
90000456:	4a0c      	ldr	r2, [pc, #48]	; (90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000458:	691b      	ldr	r3, [r3, #16]
{
9000045a:	b510      	push	{r4, lr}
9000045c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000045e:	b149      	cbz	r1, 90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000460:	4293      	cmp	r3, r2
90000462:	d10d      	bne.n	90000480 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000464:	4b09      	ldr	r3, [pc, #36]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000466:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000468:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000046a:	6863      	ldr	r3, [r4, #4]
9000046c:	1a9b      	subs	r3, r3, r2
9000046e:	4418      	add	r0, r3
90000470:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000472:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000474:	4293      	cmp	r3, r2
90000476:	d105      	bne.n	90000484 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000478:	4b04      	ldr	r3, [pc, #16]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000047a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000047c:	60a0      	str	r0, [r4, #8]
}
9000047e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4798      	blx	r3
90000482:	e7f1      	b.n	90000468 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90000484:	4798      	blx	r3
90000486:	e7f9      	b.n	9000047c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000488:	90000435 	.word	0x90000435
9000048c:	e0001000 	.word	0xe0001000

90000490 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000490:	4770      	bx	lr
90000492:	bf00      	nop
90000494:	0000      	movs	r0, r0
	...

90000498 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90000498:	b500      	push	{lr}
9000049a:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
9000049c:	2208      	movs	r2, #8
9000049e:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004a0:	2000      	movs	r0, #0
900004a2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004c0 <_ZN20STM32TouchController4initEv+0x28>
900004a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004ac:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004b0:	f006 f8ac 	bl	9000660c <BSP_TS_Init>
}
900004b4:	b005      	add	sp, #20
900004b6:	f85d fb04 	ldr.w	pc, [sp], #4
900004ba:	bf00      	nop
900004bc:	f3af 8000 	nop.w
900004c0:	000001e0 	.word	0x000001e0
900004c4:	00000110 	.word	0x00000110

900004c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004c8:	b530      	push	{r4, r5, lr}
900004ca:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004cc:	2000      	movs	r0, #0
{
900004ce:	460d      	mov	r5, r1
900004d0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004d2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004d4:	9001      	str	r0, [sp, #4]
900004d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004da:	f006 f925 	bl	90006728 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004de:	9801      	ldr	r0, [sp, #4]
900004e0:	b120      	cbz	r0, 900004ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900004e2:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900004e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900004e8:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900004ea:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900004ec:	b005      	add	sp, #20
900004ee:	bd30      	pop	{r4, r5, pc}

900004f0 <_ZN20STM32TouchControllerD0Ev>:
900004f0:	b510      	push	{r4, lr}
900004f2:	4604      	mov	r4, r0
900004f4:	2104      	movs	r1, #4
900004f6:	f020 fe64 	bl	900211c2 <_ZdlPvj>
900004fa:	4620      	mov	r0, r4
900004fc:	bd10      	pop	{r4, pc}
900004fe:	bf00      	nop

90000500 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000500:	2108      	movs	r1, #8
90000502:	4810      	ldr	r0, [pc, #64]	; (90000544 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000504:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000506:	f006 fe7d 	bl	90007204 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000050a:	2801      	cmp	r0, #1
9000050c:	d101      	bne.n	90000512 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000050e:	4b0e      	ldr	r3, [pc, #56]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000510:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000512:	2180      	movs	r1, #128	; 0x80
90000514:	480d      	ldr	r0, [pc, #52]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000516:	f006 fe75 	bl	90007204 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000051a:	2801      	cmp	r0, #1
9000051c:	d101      	bne.n	90000522 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000051e:	4b0a      	ldr	r3, [pc, #40]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000520:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000522:	2140      	movs	r1, #64	; 0x40
90000524:	4809      	ldr	r0, [pc, #36]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000526:	f006 fe6d 	bl	90007204 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b06      	ldr	r3, [pc, #24]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000532:	2140      	movs	r1, #64	; 0x40
90000534:	4806      	ldr	r0, [pc, #24]	; (90000550 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000536:	f006 fe65 	bl	90007204 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b02      	ldr	r3, [pc, #8]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	60d8      	str	r0, [r3, #12]
}
90000542:	bd08      	pop	{r3, pc}
90000544:	58021800 	.word	0x58021800
90000548:	24005b64 	.word	0x24005b64
9000054c:	58020400 	.word	0x58020400
90000550:	58020000 	.word	0x58020000

90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000554:	2803      	cmp	r0, #3
90000556:	d827      	bhi.n	900005a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000558:	e8df f000 	tbb	[pc, r0]
9000055c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000560:	4b12      	ldr	r3, [pc, #72]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000562:	2140      	movs	r1, #64	; 0x40
90000564:	4812      	ldr	r0, [pc, #72]	; (900005b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000566:	68da      	ldr	r2, [r3, #12]
90000568:	fab2 f282 	clz	r2, r2
9000056c:	0952      	lsrs	r2, r2, #5
9000056e:	f006 be4f 	b.w	90007210 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000572:	4b0e      	ldr	r3, [pc, #56]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000574:	2140      	movs	r1, #64	; 0x40
90000576:	480f      	ldr	r0, [pc, #60]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000578:	689a      	ldr	r2, [r3, #8]
9000057a:	fab2 f282 	clz	r2, r2
9000057e:	0952      	lsrs	r2, r2, #5
90000580:	f006 be46 	b.w	90007210 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
90000584:	4b09      	ldr	r3, [pc, #36]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000586:	2180      	movs	r1, #128	; 0x80
90000588:	480a      	ldr	r0, [pc, #40]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
9000058a:	685a      	ldr	r2, [r3, #4]
9000058c:	fab2 f282 	clz	r2, r2
90000590:	0952      	lsrs	r2, r2, #5
90000592:	f006 be3d 	b.w	90007210 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
90000596:	4b05      	ldr	r3, [pc, #20]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000598:	2108      	movs	r1, #8
9000059a:	4807      	ldr	r0, [pc, #28]	; (900005b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
9000059c:	681a      	ldr	r2, [r3, #0]
9000059e:	fab2 f282 	clz	r2, r2
900005a2:	0952      	lsrs	r2, r2, #5
900005a4:	f006 be34 	b.w	90007210 <HAL_GPIO_WritePin>
}
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop
900005ac:	24005b64 	.word	0x24005b64
900005b0:	58020000 	.word	0x58020000
900005b4:	58020400 	.word	0x58020400
900005b8:	58021800 	.word	0x58021800

900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005bc:	2803      	cmp	r0, #3
900005be:	d827      	bhi.n	90000610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005c0:	e8df f000 	tbb	[pc, r0]
900005c4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005c8:	4b12      	ldr	r3, [pc, #72]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ca:	2140      	movs	r1, #64	; 0x40
900005cc:	4812      	ldr	r0, [pc, #72]	; (90000618 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ce:	68da      	ldr	r2, [r3, #12]
900005d0:	3a00      	subs	r2, #0
900005d2:	bf18      	it	ne
900005d4:	2201      	movne	r2, #1
900005d6:	f006 be1b 	b.w	90007210 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005da:	4b0e      	ldr	r3, [pc, #56]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005dc:	2140      	movs	r1, #64	; 0x40
900005de:	480f      	ldr	r0, [pc, #60]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005e0:	689a      	ldr	r2, [r3, #8]
900005e2:	3a00      	subs	r2, #0
900005e4:	bf18      	it	ne
900005e6:	2201      	movne	r2, #1
900005e8:	f006 be12 	b.w	90007210 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900005ec:	4b09      	ldr	r3, [pc, #36]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ee:	2180      	movs	r1, #128	; 0x80
900005f0:	480a      	ldr	r0, [pc, #40]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005f2:	685a      	ldr	r2, [r3, #4]
900005f4:	3a00      	subs	r2, #0
900005f6:	bf18      	it	ne
900005f8:	2201      	movne	r2, #1
900005fa:	f006 be09 	b.w	90007210 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900005fe:	4b05      	ldr	r3, [pc, #20]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000600:	2108      	movs	r1, #8
90000602:	4807      	ldr	r0, [pc, #28]	; (90000620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000604:	681a      	ldr	r2, [r3, #0]
90000606:	3a00      	subs	r2, #0
90000608:	bf18      	it	ne
9000060a:	2201      	movne	r2, #1
9000060c:	f006 be00 	b.w	90007210 <HAL_GPIO_WritePin>
}
90000610:	4770      	bx	lr
90000612:	bf00      	nop
90000614:	24005b64 	.word	0x24005b64
90000618:	58020000 	.word	0x58020000
9000061c:	58020400 	.word	0x58020400
90000620:	58021800 	.word	0x58021800

90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000624:	2803      	cmp	r0, #3
90000626:	d813      	bhi.n	90000650 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000628:	e8df f000 	tbb	[pc, r0]
9000062c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000630:	2140      	movs	r1, #64	; 0x40
90000632:	4808      	ldr	r0, [pc, #32]	; (90000654 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000634:	f006 bdf0 	b.w	90007218 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000638:	2140      	movs	r1, #64	; 0x40
9000063a:	4807      	ldr	r0, [pc, #28]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000063c:	f006 bdec 	b.w	90007218 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000640:	2180      	movs	r1, #128	; 0x80
90000642:	4805      	ldr	r0, [pc, #20]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000644:	f006 bde8 	b.w	90007218 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000648:	2108      	movs	r1, #8
9000064a:	4804      	ldr	r0, [pc, #16]	; (9000065c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000064c:	f006 bde4 	b.w	90007218 <HAL_GPIO_TogglePin>
}
90000650:	4770      	bx	lr
90000652:	bf00      	nop
90000654:	58020000 	.word	0x58020000
90000658:	58020400 	.word	0x58020400
9000065c:	58021800 	.word	0x58021800

90000660 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000660:	2000      	movs	r0, #0
90000662:	4770      	bx	lr

90000664 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000664:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000666:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000066a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000066e:	4770      	bx	lr

90000670 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000670:	2000      	movs	r0, #0
90000672:	4770      	bx	lr

90000674 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000674:	1e0a      	subs	r2, r1, #0
90000676:	4b03      	ldr	r3, [pc, #12]	; (90000684 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000678:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000067a:	bf18      	it	ne
9000067c:	2201      	movne	r2, #1
9000067e:	701a      	strb	r2, [r3, #0]
    }
90000680:	4770      	bx	lr
90000682:	bf00      	nop
90000684:	240264e3 	.word	0x240264e3

90000688 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000688:	2000      	movs	r0, #0
9000068a:	4770      	bx	lr

9000068c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
9000068c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
9000068e:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000690:	b103      	cbz	r3, 90000694 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000692:	4718      	bx	r3
        }
    }
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
90000698:	f64f 70ff 	movw	r0, #65535	; 0xffff
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop

900006a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006a4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006a6:	4b09      	ldr	r3, [pc, #36]	; (900006cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006a8:	881b      	ldrh	r3, [r3, #0]
900006aa:	428b      	cmp	r3, r1
900006ac:	d808      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ae:	4b08      	ldr	r3, [pc, #32]	; (900006d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006b0:	881b      	ldrh	r3, [r3, #0]
900006b2:	4293      	cmp	r3, r2
900006b4:	d804      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006b6:	4807      	ldr	r0, [pc, #28]	; (900006d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006b8:	4b07      	ldr	r3, [pc, #28]	; (900006d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006ba:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006bc:	801a      	strh	r2, [r3, #0]
    }
900006be:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c0:	4b06      	ldr	r3, [pc, #24]	; (900006dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006c2:	219e      	movs	r1, #158	; 0x9e
900006c4:	4a06      	ldr	r2, [pc, #24]	; (900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006c6:	4807      	ldr	r0, [pc, #28]	; (900006e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006c8:	f020 fdaa 	bl	90021220 <__assert_func>
900006cc:	240264d8 	.word	0x240264d8
900006d0:	240264da 	.word	0x240264da
900006d4:	240264de 	.word	0x240264de
900006d8:	240264e0 	.word	0x240264e0
900006dc:	90022440 	.word	0x90022440
900006e0:	900224a4 	.word	0x900224a4
900006e4:	900224e8 	.word	0x900224e8

900006e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900006e8:	b510      	push	{r4, lr}
900006ea:	4604      	mov	r4, r0
        swapFrameBuffers();
900006ec:	f010 f824 	bl	90010738 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900006f0:	6823      	ldr	r3, [r4, #0]
900006f2:	4620      	mov	r0, r4
900006f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900006fc:	4718      	bx	r3
900006fe:	bf00      	nop

90000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000700:	f001 be42 	b.w	90002388 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000704 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000704:	f001 be46 	b.w	90002394 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000708 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000708:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000070a:	f001 ff05 	bl	90002518 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000070e:	4812      	ldr	r0, [pc, #72]	; (90000758 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000710:	2300      	movs	r3, #0
90000712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000071a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000071e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000722:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000726:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000072a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000072e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000732:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000734:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000738:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000073e:	1c5a      	adds	r2, r3, #1
90000740:	d1f8      	bne.n	90000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000742:	f1ac 0c20 	sub.w	ip, ip, #32
90000746:	f11c 0f20 	cmn.w	ip, #32
9000074a:	d1f0      	bne.n	9000072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000754:	bd10      	pop	{r4, pc}
90000756:	bf00      	nop
90000758:	e000ed00 	.word	0xe000ed00

9000075c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000075c:	f001 bdf0 	b.w	90002340 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000760 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000760:	f002 b800 	b.w	90002764 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000764 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000764:	f001 bfea 	b.w	9000273c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000768 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000768:	f001 bdf4 	b.w	90002354 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000076c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000076c:	f00f ba3c 	b.w	9000fbe8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000770 <_ZN11TouchGFXHALD0Ev>:
90000770:	b510      	push	{r4, lr}
90000772:	4604      	mov	r4, r0
90000774:	2188      	movs	r1, #136	; 0x88
90000776:	f020 fd24 	bl	900211c2 <_ZdlPvj>
9000077a:	4620      	mov	r0, r4
9000077c:	bd10      	pop	{r4, pc}
9000077e:	bf00      	nop

90000780 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000780:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000784:	b11b      	cbz	r3, 9000078e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000786:	6840      	ldr	r0, [r0, #4]
90000788:	6803      	ldr	r3, [r0, #0]
9000078a:	681b      	ldr	r3, [r3, #0]
9000078c:	4718      	bx	r3
    }
9000078e:	4618      	mov	r0, r3
90000790:	4770      	bx	lr
90000792:	bf00      	nop

90000794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000794:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
9000079c:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
9000079e:	4b0b      	ldr	r3, [pc, #44]	; (900007cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007a0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007a2:	d00b      	beq.n	900007bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007a4:	b94a      	cbnz	r2, 900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007a6:	4a0a      	ldr	r2, [pc, #40]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007a8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007ac:	4909      	ldr	r1, [pc, #36]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ae:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007b0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007b6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b8:	8013      	strh	r3, [r2, #0]
        }
    }
900007ba:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007bc:	2a00      	cmp	r2, #0
900007be:	d0fc      	beq.n	900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007c0:	4a03      	ldr	r2, [pc, #12]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007c2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007c6:	4903      	ldr	r1, [pc, #12]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007c8:	e7f1      	b.n	900007ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ca:	bf00      	nop
900007cc:	240264dc 	.word	0x240264dc
900007d0:	240264da 	.word	0x240264da
900007d4:	240264d8 	.word	0x240264d8

900007d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007d8:	6840      	ldr	r0, [r0, #4]
900007da:	4a04      	ldr	r2, [pc, #16]	; (900007ec <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007dc:	6803      	ldr	r3, [r0, #0]
900007de:	699b      	ldr	r3, [r3, #24]
900007e0:	4293      	cmp	r3, r2
900007e2:	d101      	bne.n	900007e8 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900007e4:	2000      	movs	r0, #0
900007e6:	4770      	bx	lr
        return dma.getDMAType();
900007e8:	4718      	bx	r3
900007ea:	bf00      	nop
900007ec:	90000661 	.word	0x90000661

900007f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900007f0:	b1a9      	cbz	r1, 9000081e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900007f2:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f4:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900007f6:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f8:	bf18      	it	ne
900007fa:	2201      	movne	r2, #1
900007fc:	490c      	ldr	r1, [pc, #48]	; (90000830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900007fe:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000800:	6802      	ldr	r2, [r0, #0]
90000802:	490c      	ldr	r1, [pc, #48]	; (90000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000808:	428a      	cmp	r2, r1
9000080a:	d106      	bne.n	9000081a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000080c:	1e19      	subs	r1, r3, #0
9000080e:	4a0a      	ldr	r2, [pc, #40]	; (90000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000810:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000812:	bf18      	it	ne
90000814:	2101      	movne	r1, #1
90000816:	7011      	strb	r1, [r2, #0]
90000818:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000081a:	4619      	mov	r1, r3
9000081c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000081e:	4b07      	ldr	r3, [pc, #28]	; (9000083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000820:	f240 21d2 	movw	r1, #722	; 0x2d2
90000824:	4a06      	ldr	r2, [pc, #24]	; (90000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000826:	4807      	ldr	r0, [pc, #28]	; (90000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000828:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000082a:	f020 fcf9 	bl	90021220 <__assert_func>
9000082e:	bf00      	nop
90000830:	240264e2 	.word	0x240264e2
90000834:	90000675 	.word	0x90000675
90000838:	240264e3 	.word	0x240264e3
9000083c:	90022530 	.word	0x90022530
90000840:	90022568 	.word	0x90022568
90000844:	900224e8 	.word	0x900224e8

90000848 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000848:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000084a:	6803      	ldr	r3, [r0, #0]
{
9000084c:	4604      	mov	r4, r0
9000084e:	4d17      	ldr	r5, [pc, #92]	; (900008ac <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000854:	4798      	blx	r3
    enableInterrupts();
90000856:	6823      	ldr	r3, [r4, #0]
90000858:	4620      	mov	r0, r4
9000085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000085c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000085e:	f001 f8c7 	bl	900019f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000862:	6823      	ldr	r3, [r4, #0]
90000864:	4620      	mov	r0, r4
90000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000868:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000086a:	2201      	movs	r2, #1
9000086c:	2104      	movs	r1, #4
9000086e:	4810      	ldr	r0, [pc, #64]	; (900008b0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000870:	f006 fcce 	bl	90007210 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000874:	2201      	movs	r2, #1
90000876:	2180      	movs	r1, #128	; 0x80
90000878:	480e      	ldr	r0, [pc, #56]	; (900008b4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000087a:	f006 fcc9 	bl	90007210 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000087e:	2201      	movs	r2, #1
90000880:	480d      	ldr	r0, [pc, #52]	; (900008b8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000882:	4611      	mov	r1, r2
90000884:	f006 fcc4 	bl	90007210 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000888:	f001 f8b2 	bl	900019f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
9000088c:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
9000088e:	4620      	mov	r0, r4
90000890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000892:	42ab      	cmp	r3, r5
90000894:	d107      	bne.n	900008a6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000896:	f00f ff4f 	bl	90010738 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000089a:	6823      	ldr	r3, [r4, #0]
9000089c:	4620      	mov	r0, r4
9000089e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008a2:	4798      	blx	r3
    }
900008a4:	e7f0      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008a6:	4798      	blx	r3
900008a8:	e7ee      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008aa:	bf00      	nop
900008ac:	900006e9 	.word	0x900006e9
900008b0:	58020000 	.word	0x58020000
900008b4:	58020c00 	.word	0x58020c00
900008b8:	58022800 	.word	0x58022800

900008bc <_ZN11TouchGFXHAL10initializeEv>:
{
900008bc:	b538      	push	{r3, r4, r5, lr}
900008be:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008c0:	f001 ff5a 	bl	90002778 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008c4:	4817      	ldr	r0, [pc, #92]	; (90000924 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008c6:	6823      	ldr	r3, [r4, #0]
900008c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008d0:	4285      	cmp	r5, r0
900008d2:	d119      	bne.n	90000908 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008d4:	b1f9      	cbz	r1, 90000916 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008d6:	3a00      	subs	r2, #0
900008d8:	4913      	ldr	r1, [pc, #76]	; (90000928 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008de:	bf18      	it	ne
900008e0:	2201      	movne	r2, #1
900008e2:	4812      	ldr	r0, [pc, #72]	; (9000092c <_ZN11TouchGFXHAL10initializeEv+0x70>)
900008e4:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008e6:	4912      	ldr	r1, [pc, #72]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008e8:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
900008ea:	d111      	bne.n	90000910 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008ec:	4b11      	ldr	r3, [pc, #68]	; (90000934 <_ZN11TouchGFXHAL10initializeEv+0x78>)
900008ee:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008f0:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008f2:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
900008f4:	f104 057c 	add.w	r5, r4, #124	; 0x7c
900008f8:	4628      	mov	r0, r5
900008fa:	f7ff fd7d 	bl	900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900008fe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000900:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000902:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000906:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000908:	4b09      	ldr	r3, [pc, #36]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000090a:	4620      	mov	r0, r4
9000090c:	47a8      	blx	r5
9000090e:	e7f1      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000910:	4620      	mov	r0, r4
90000912:	4798      	blx	r3
90000914:	e7ee      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000916:	4b08      	ldr	r3, [pc, #32]	; (90000938 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000918:	f240 21d2 	movw	r1, #722	; 0x2d2
9000091c:	4a07      	ldr	r2, [pc, #28]	; (9000093c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000091e:	4808      	ldr	r0, [pc, #32]	; (90000940 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000920:	f020 fc7e 	bl	90021220 <__assert_func>
90000924:	900007f1 	.word	0x900007f1
90000928:	90000675 	.word	0x90000675
9000092c:	240264e2 	.word	0x240264e2
90000930:	d0000000 	.word	0xd0000000
90000934:	240264e3 	.word	0x240264e3
90000938:	90022530 	.word	0x90022530
9000093c:	90022568 	.word	0x90022568
90000940:	900224e8 	.word	0x900224e8

90000944 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000944:	b508      	push	{r3, lr}
        return instance;
90000946:	4b07      	ldr	r3, [pc, #28]	; (90000964 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000948:	b128      	cbz	r0, 90000956 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000094a:	6818      	ldr	r0, [r3, #0]
9000094c:	2101      	movs	r1, #1
9000094e:	f00f ff0d 	bl	9001076c <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000952:	2001      	movs	r0, #1
90000954:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000956:	4601      	mov	r1, r0
90000958:	6818      	ldr	r0, [r3, #0]
9000095a:	f00f ff07 	bl	9001076c <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000095e:	2001      	movs	r0, #1
90000960:	bd08      	pop	{r3, pc}
90000962:	bf00      	nop
90000964:	240264e4 	.word	0x240264e4

90000968 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000968:	6940      	ldr	r0, [r0, #20]
9000096a:	4770      	bx	lr

9000096c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000096c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000974:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000976:	b10b      	cbz	r3, 9000097c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000978:	2001      	movs	r0, #1
}
9000097a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000097c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000097e:	3800      	subs	r0, #0
90000980:	bf18      	it	ne
90000982:	2001      	movne	r0, #1
90000984:	4770      	bx	lr
90000986:	bf00      	nop

90000988 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000988:	6880      	ldr	r0, [r0, #8]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
9000098c:	4770      	bx	lr
9000098e:	bf00      	nop

90000990 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000990:	3004      	adds	r0, #4
{
90000992:	468c      	mov	ip, r1
    *data = videoInfo;
90000994:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
9000099a:	4770      	bx	lr

9000099c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009a0:	b508      	push	{r3, lr}
    assert(0);
900009a2:	4a03      	ldr	r2, [pc, #12]	; (900009b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009a4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009a8:	4b02      	ldr	r3, [pc, #8]	; (900009b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009aa:	4803      	ldr	r0, [pc, #12]	; (900009b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009ac:	f020 fc38 	bl	90021220 <__assert_func>
900009b0:	90022694 	.word	0x90022694
900009b4:	90022690 	.word	0x90022690
900009b8:	900226f0 	.word	0x900226f0

900009bc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
900009c0:	2148      	movs	r1, #72	; 0x48
900009c2:	f020 fbfe 	bl	900211c2 <_ZdlPvj>
900009c6:	4620      	mov	r0, r4
900009c8:	bd10      	pop	{r4, pc}
900009ca:	bf00      	nop

900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009d0:	b085      	sub	sp, #20
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d2:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009d6:	4604      	mov	r4, r0
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
900009d8:	4e65      	ldr	r6, [pc, #404]	; (90000b70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009da:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009dc:	2002      	movs	r0, #2
    DMA2D_output_Is_Paused = 1;

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
900009de:	4d65      	ldr	r5, [pc, #404]	; (90000b74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009e0:	f8cb 0010 	str.w	r0, [fp, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009e4:	68e0      	ldr	r0, [r4, #12]
    JPEG_OUT_Read_BufferIndex = 0;
900009e6:	4f64      	ldr	r7, [pc, #400]	; (90000b78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009e8:	0704      	lsls	r4, r0, #28
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
900009ea:	f44f 7470 	mov.w	r4, #960	; 0x3c0
    DMA2D_output_Is_Paused = 1;
900009ee:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009f2:	bf18      	it	ne
900009f4:	f020 000f 	bicne.w	r0, r0, #15
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
900009f8:	f8cb 4004 	str.w	r4, [fp, #4]
    FrameBufferAddress = output;
900009fc:	4c5f      	ldr	r4, [pc, #380]	; (90000b7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009fe:	bf18      	it	ne
90000a00:	3010      	addne	r0, #16
90000a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a06:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 90000bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e4>
90000a0a:	f8cb 0000 	str.w	r0, [fp]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a0e:	0900      	lsrs	r0, r0, #4
90000a10:	f8cb 000c 	str.w	r0, [fp, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90000a18:	01c0      	lsls	r0, r0, #7
90000a1a:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a1c:	9803      	ldr	r0, [sp, #12]
    FrameBufferAddress = output;
90000a1e:	6023      	str	r3, [r4, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a20:	6900      	ldr	r0, [r0, #16]
    JPEG_OUT_Write_BufferIndex = 0;
90000a22:	4b57      	ldr	r3, [pc, #348]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a24:	f000 000f 	and.w	r0, r0, #15
90000a28:	4c56      	ldr	r4, [pc, #344]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
90000a2a:	f1c0 0010 	rsb	r0, r0, #16
90000a2e:	f8cb 0008 	str.w	r0, [fp, #8]
    Output_Is_Paused = 0;
90000a32:	2000      	movs	r0, #0
    JPEG_OUT_Write_BufferIndex = 0;
90000a34:	6018      	str	r0, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a36:	4b54      	ldr	r3, [pc, #336]	; (90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    Output_Is_Paused = 0;
90000a38:	6030      	str	r0, [r6, #0]
    JPEG_InputImageIndex = 0;
90000a3a:	6018      	str	r0, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a3c:	4b53      	ldr	r3, [pc, #332]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a3e:	7028      	strb	r0, [r5, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a40:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a42:	4b53      	ldr	r3, [pc, #332]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a44:	60a8      	str	r0, [r5, #8]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a46:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a4c:	4b51      	ldr	r3, [pc, #324]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a4e:	7328      	strb	r0, [r5, #12]
    MCU_BlockIndex = 0;
90000a50:	6018      	str	r0, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a52:	2301      	movs	r3, #1
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a54:	6168      	str	r0, [r5, #20]
    JPEG_OUT_Read_BufferIndex = 0;
90000a56:	6038      	str	r0, [r7, #0]
    DMA2D_output_Is_Paused = 1;
90000a58:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a5c:	484e      	ldr	r0, [pc, #312]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a5e:	686b      	ldr	r3, [r5, #4]
90000a60:	f007 fcec 	bl	9000843c <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a64:	f8d8 3000 	ldr.w	r3, [r8]
90000a68:	b11b      	cbz	r3, 90000a72 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa6>
90000a6a:	4b4c      	ldr	r3, [pc, #304]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000a6c:	681b      	ldr	r3, [r3, #0]
90000a6e:	2b00      	cmp	r3, #0
90000a70:	d17c      	bne.n	90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a72:	683b      	ldr	r3, [r7, #0]
90000a74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a78:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a7c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a80:	2901      	cmp	r1, #1
90000a82:	d040      	beq.n	90000b06 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000a84:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000a86:	2b01      	cmp	r3, #1
90000a88:	d028      	beq.n	90000adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x110>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000a8a:	6833      	ldr	r3, [r6, #0]
90000a8c:	b9bb      	cbnz	r3, 90000abe <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf2>
90000a8e:	f8da 2000 	ldr.w	r2, [sl]
  {
      return 2;
90000a92:	2a00      	cmp	r2, #0
90000a94:	bf08      	it	eq
90000a96:	2302      	moveq	r3, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000a98:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000a9a:	6823      	ldr	r3, [r4, #0]
90000a9c:	2b02      	cmp	r3, #2
90000a9e:	d013      	beq.n	90000ac8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfc>
      while(JpegProcessing_End != 1);
90000aa0:	6823      	ldr	r3, [r4, #0]
90000aa2:	2b01      	cmp	r3, #1
90000aa4:	d1de      	bne.n	90000a64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x98>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000aa6:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000aa8:	4a3c      	ldr	r2, [pc, #240]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000aaa:	e9c9 3302 	strd	r3, r3, [r9, #8]
90000aae:	f8c9 3004 	str.w	r3, [r9, #4]
      Jpeg_HWDecodingEnd = 0;
90000ab2:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_CopyBufferEnd = 0;
90000ab6:	6013      	str	r3, [r2, #0]
}
90000ab8:	b005      	add	sp, #20
90000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  return 0;
90000abe:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ac0:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ac2:	6823      	ldr	r3, [r4, #0]
90000ac4:	2b02      	cmp	r3, #2
90000ac6:	d1eb      	bne.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd4>
          SEM_WAIT(semDecodingDone);
90000ac8:	4b35      	ldr	r3, [pc, #212]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>)
90000aca:	f04f 31ff 	mov.w	r1, #4294967295
90000ace:	6818      	ldr	r0, [r3, #0]
90000ad0:	f00b f944 	bl	9000bd5c <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000ad4:	6823      	ldr	r3, [r4, #0]
90000ad6:	2b01      	cmp	r3, #1
90000ad8:	d1c4      	bne.n	90000a64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x98>
90000ada:	e7e4      	b.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xda>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000adc:	4b28      	ldr	r3, [pc, #160]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000ade:	681b      	ldr	r3, [r3, #0]
90000ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000ae4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000ae8:	2b00      	cmp	r3, #0
90000aea:	d1ce      	bne.n	90000a8a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000aec:	683b      	ldr	r3, [r7, #0]
90000aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000af2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000af6:	2b00      	cmp	r3, #0
90000af8:	d1c7      	bne.n	90000a8a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000afa:	2102      	movs	r1, #2
90000afc:	4826      	ldr	r0, [pc, #152]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
      Output_Is_Paused = 0;
90000afe:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b00:	f007 fde6 	bl	900086d0 <HAL_JPEG_Resume>
90000b04:	e7c1      	b.n	90000a8a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b06:	f8da 1000 	ldr.w	r1, [sl]
90000b0a:	2901      	cmp	r1, #1
90000b0c:	d1ba      	bne.n	90000a84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb8>
      buffer_[tail_] = job;
90000b0e:	f8d9 1008 	ldr.w	r1, [r9, #8]
      JPEG_OUT_Read_BufferIndex++;
90000b12:	3301      	adds	r3, #1
      };
90000b14:	481f      	ldr	r0, [pc, #124]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b16:	f8d9 c000 	ldr.w	ip, [r9]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000b1a:	2b01      	cmp	r3, #1
      };
90000b1c:	f8d0 e000 	ldr.w	lr, [r0]
90000b20:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000b24:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000b28:	bf88      	it	hi
90000b2a:	2300      	movhi	r3, #0
90000b2c:	f849 e031 	str.w	lr, [r9, r1, lsl #3]
90000b30:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
90000b34:	603b      	str	r3, [r7, #0]
      DMA2D_output_Is_Paused = 0;
90000b36:	2300      	movs	r3, #0
90000b38:	604a      	str	r2, [r1, #4]
      count_++;
90000b3a:	f8d9 100c 	ldr.w	r1, [r9, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b3e:	fbb0 f2fc 	udiv	r2, r0, ip
90000b42:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000b46:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000b48:	f8c9 0008 	str.w	r0, [r9, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b4c:	4811      	ldr	r0, [pc, #68]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      count_++;
90000b4e:	f8c9 100c 	str.w	r1, [r9, #12]
90000b52:	6802      	ldr	r2, [r0, #0]
90000b54:	f8db 100c 	ldr.w	r1, [fp, #12]
90000b58:	440a      	add	r2, r1
90000b5a:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b5c:	9a03      	ldr	r2, [sp, #12]
      DMA2D_output_Is_Paused = 0;
90000b5e:	f8ca 3000 	str.w	r3, [sl]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b62:	6c50      	ldr	r0, [r2, #68]	; 0x44
      dma.start();
90000b64:	6803      	ldr	r3, [r0, #0]
90000b66:	691b      	ldr	r3, [r3, #16]
90000b68:	4798      	blx	r3
90000b6a:	e78b      	b.n	90000a84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb8>
      return 1;
90000b6c:	2301      	movs	r3, #1
90000b6e:	e793      	b.n	90000a98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xcc>
90000b70:	24005ba4 	.word	0x24005ba4
90000b74:	24000004 	.word	0x24000004
90000b78:	24005b8c 	.word	0x24005b8c
90000b7c:	24005b7c 	.word	0x24005b7c
90000b80:	24005b90 	.word	0x24005b90
90000b84:	24005b94 	.word	0x24005b94
90000b88:	24005b84 	.word	0x24005b84
90000b8c:	24005b80 	.word	0x24005b80
90000b90:	24005b88 	.word	0x24005b88
90000b94:	24005b9c 	.word	0x24005b9c
90000b98:	2400b180 	.word	0x2400b180
90000b9c:	24005b74 	.word	0x24005b74
90000ba0:	24005be0 	.word	0x24005be0
90000ba4:	24005ba8 	.word	0x24005ba8
90000ba8:	24005b78 	.word	0x24005b78
90000bac:	24005b98 	.word	0x24005b98
90000bb0:	24005bbc 	.word	0x24005bbc

90000bb4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bb6:	6803      	ldr	r3, [r0, #0]
90000bb8:	2901      	cmp	r1, #1
90000bba:	4e29      	ldr	r6, [pc, #164]	; (90000c60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xac>)
{
90000bbc:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bc0:	bf38      	it	cc
90000bc2:	2101      	movcc	r1, #1
90000bc4:	42b3      	cmp	r3, r6
90000bc6:	460d      	mov	r5, r1
90000bc8:	d13a      	bne.n	90000c40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x8c>
    return videoInfo.number_of_frames;
90000bca:	6880      	ldr	r0, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000bcc:	42a8      	cmp	r0, r5
90000bce:	d204      	bcs.n	90000bda <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x26>
        frameNumber = getNumberOfFrames();
90000bd0:	6823      	ldr	r3, [r4, #0]
90000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bd4:	42b3      	cmp	r3, r6
90000bd6:	d135      	bne.n	90000c44 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x90>
    return videoInfo.number_of_frames;
90000bd8:	68a5      	ldr	r5, [r4, #8]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bda:	1e6b      	subs	r3, r5, #1
90000bdc:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bde:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000be0:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000be4:	b338      	cbz	r0, 90000c36 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
        if (length > aviBufferLength)
90000be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000be8:	2b0f      	cmp	r3, #15
90000bea:	d92f      	bls.n	90000c4c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x98>
        reader->seek(offset);
90000bec:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bee:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000bf2:	68db      	ldr	r3, [r3, #12]
90000bf4:	4631      	mov	r1, r6
90000bf6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000bf8:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000bfa:	2210      	movs	r2, #16
90000bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000bfe:	6803      	ldr	r3, [r0, #0]
90000c00:	691b      	ldr	r3, [r3, #16]
90000c02:	4798      	blx	r3
90000c04:	b198      	cbz	r0, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7a>
    if (reader != 0)
90000c06:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000c08:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000c0a:	b1a3      	cbz	r3, 90000c36 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000c0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c0e:	7a93      	ldrb	r3, [r2, #10]
90000c10:	7a51      	ldrb	r1, [r2, #9]
90000c12:	041b      	lsls	r3, r3, #16
90000c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c18:	7a11      	ldrb	r1, [r2, #8]
90000c1a:	7ad2      	ldrb	r2, [r2, #11]
90000c1c:	430b      	orrs	r3, r1
90000c1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c22:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c24:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c26:	3a04      	subs	r2, #4
90000c28:	4413      	add	r3, r2
90000c2a:	61a3      	str	r3, [r4, #24]
}
90000c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000c2e:	230d      	movs	r3, #13
90000c30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c34:	e7e7      	b.n	90000c06 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x52>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c36:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c3c:	58d3      	ldr	r3, [r2, r3]
90000c3e:	e7f0      	b.n	90000c22 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x6e>
    if (frameNumber > getNumberOfFrames())
90000c40:	4798      	blx	r3
90000c42:	e7c3      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x18>
        frameNumber = getNumberOfFrames();
90000c44:	4620      	mov	r0, r4
90000c46:	4798      	blx	r3
90000c48:	4605      	mov	r5, r0
90000c4a:	e7c6      	b.n	90000bda <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x26>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c4c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c4e:	4b05      	ldr	r3, [pc, #20]	; (90000c64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
90000c50:	4a05      	ldr	r2, [pc, #20]	; (90000c68 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c52:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c54:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c58:	4804      	ldr	r0, [pc, #16]	; (90000c6c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c5a:	f020 fae1 	bl	90021220 <__assert_func>
90000c5e:	bf00      	nop
90000c60:	90000989 	.word	0x90000989
90000c64:	90022748 	.word	0x90022748
90000c68:	9002275c 	.word	0x9002275c
90000c6c:	900226f0 	.word	0x900226f0

90000c70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c74:	4604      	mov	r4, r0
    if (reader != 0)
90000c76:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c78:	b083      	sub	sp, #12
90000c7a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c7c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c7e:	2800      	cmp	r0, #0
90000c80:	f000 80e3 	beq.w	90000e4a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1da>
        if (length > aviBufferLength)
90000c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000c86:	2b07      	cmp	r3, #7
90000c88:	f240 80e6 	bls.w	90000e58 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e8>
        reader->seek(offset);
90000c8c:	6803      	ldr	r3, [r0, #0]
90000c8e:	4631      	mov	r1, r6
90000c90:	68db      	ldr	r3, [r3, #12]
90000c92:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c94:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c96:	2208      	movs	r2, #8
90000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c9a:	6803      	ldr	r3, [r0, #0]
90000c9c:	691b      	ldr	r3, [r3, #16]
90000c9e:	4798      	blx	r3
90000ca0:	2800      	cmp	r0, #0
90000ca2:	f000 80ce 	beq.w	90000e42 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d2>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000ca6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000caa:	1d3b      	adds	r3, r7, #4
        aviBufferStartOffset = offset;
90000cac:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cae:	2800      	cmp	r0, #0
90000cb0:	f000 80db 	beq.w	90000e6a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fa>
        const uint32_t index = offset - aviBufferStartOffset;
90000cb4:	1b9e      	subs	r6, r3, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cb6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cb8:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cbc:	1991      	adds	r1, r2, r6
90000cbe:	5d92      	ldrb	r2, [r2, r6]
90000cc0:	788e      	ldrb	r6, [r1, #2]
90000cc2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000cc6:	0436      	lsls	r6, r6, #16
90000cc8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000ccc:	4316      	orrs	r6, r2
90000cce:	78ca      	ldrb	r2, [r1, #3]
90000cd0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cd4:	42b3      	cmp	r3, r6
90000cd6:	f0c0 80bf 	bcc.w	90000e58 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e8>
        reader->seek(offset);
90000cda:	6803      	ldr	r3, [r0, #0]
90000cdc:	4639      	mov	r1, r7
90000cde:	68db      	ldr	r3, [r3, #12]
90000ce0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ce4:	4632      	mov	r2, r6
90000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ce8:	6803      	ldr	r3, [r0, #0]
90000cea:	691b      	ldr	r3, [r3, #16]
90000cec:	4798      	blx	r3
90000cee:	b910      	cbnz	r0, 90000cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000cf0:	230d      	movs	r3, #13
90000cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000cf8:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000cfa:	2d00      	cmp	r5, #0
90000cfc:	d052      	beq.n	90000da4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000cfe:	4a5c      	ldr	r2, [pc, #368]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d00:	4b5c      	ldr	r3, [pc, #368]	; (90000e74 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d02:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d04:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d06:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d0c:	4d5a      	ldr	r5, [pc, #360]	; (90000e78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d0e:	4f5b      	ldr	r7, [pc, #364]	; (90000e7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d14:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d16:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d18:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d1a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d1e:	4a58      	ldr	r2, [pc, #352]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d24:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d26:	4a57      	ldr	r2, [pc, #348]	; (90000e84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d28:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d2c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d2e:	4a56      	ldr	r2, [pc, #344]	; (90000e88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d30:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d34:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d36:	4a55      	ldr	r2, [pc, #340]	; (90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d38:	4855      	ldr	r0, [pc, #340]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d3a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d3c:	4a55      	ldr	r2, [pc, #340]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d42:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d44:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d4a:	4e53      	ldr	r6, [pc, #332]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d4c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d50:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d52:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d56:	f007 fb71 	bl	9000843c <HAL_JPEG_Decode_DMA>
    return 0;
90000d5a:	e007      	b.n	90000d6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfc>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5c:	f8da 2000 	ldr.w	r2, [sl]
      return 2;
90000d60:	2a00      	cmp	r2, #0
90000d62:	bf08      	it	eq
90000d64:	2302      	moveq	r3, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d66:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d68:	6833      	ldr	r3, [r6, #0]
90000d6a:	b9db      	cbnz	r3, 90000da4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d6c:	f8d9 3000 	ldr.w	r3, [r9]
90000d70:	b11b      	cbz	r3, 90000d7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10a>
90000d72:	4b4a      	ldr	r3, [pc, #296]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d74:	681b      	ldr	r3, [r3, #0]
90000d76:	2b00      	cmp	r3, #0
90000d78:	d161      	bne.n	90000e3e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ce>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d7a:	f8d8 3000 	ldr.w	r3, [r8]
90000d7e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d82:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d86:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d8a:	2901      	cmp	r1, #1
90000d8c:	d024      	beq.n	90000dd8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x168>
  if((Output_Is_Paused == 1) && \
90000d8e:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000d90:	2b01      	cmp	r3, #1
90000d92:	d00b      	beq.n	90000dac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13c>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d94:	683b      	ldr	r3, [r7, #0]
90000d96:	2b00      	cmp	r3, #0
90000d98:	d0e0      	beq.n	90000d5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000d9a:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d9c:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d9e:	6833      	ldr	r3, [r6, #0]
90000da0:	2b00      	cmp	r3, #0
90000da2:	d0e3      	beq.n	90000d6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfc>
}
90000da4:	2001      	movs	r0, #1
90000da6:	b003      	add	sp, #12
90000da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dac:	4b34      	ldr	r3, [pc, #208]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000dae:	681b      	ldr	r3, [r3, #0]
90000db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000db4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000db8:	2b00      	cmp	r3, #0
90000dba:	d1eb      	bne.n	90000d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dbc:	f8d8 3000 	ldr.w	r3, [r8]
90000dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dc4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dc8:	2b00      	cmp	r3, #0
90000dca:	d1e3      	bne.n	90000d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dcc:	2102      	movs	r1, #2
90000dce:	4830      	ldr	r0, [pc, #192]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000dd0:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd2:	f007 fc7d 	bl	900086d0 <HAL_JPEG_Resume>
90000dd6:	e7dd      	b.n	90000d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dd8:	f8da 1000 	ldr.w	r1, [sl]
90000ddc:	2901      	cmp	r1, #1
90000dde:	d1d6      	bne.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x11e>
90000de0:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000de4:	3301      	adds	r3, #1
      };
90000de6:	482b      	ldr	r0, [pc, #172]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000de8:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dec:	2b01      	cmp	r3, #1
      };
90000dee:	f8d0 e000 	ldr.w	lr, [r0]
90000df2:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000df6:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000dfa:	bf88      	it	hi
90000dfc:	2300      	movhi	r3, #0
90000dfe:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e02:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e06:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e0a:	2300      	movs	r3, #0
90000e0c:	604a      	str	r2, [r1, #4]
      count_++;
90000e0e:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e12:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e16:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e18:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e1c:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e20:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e24:	4912      	ldr	r1, [pc, #72]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e26:	481b      	ldr	r0, [pc, #108]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e28:	68c9      	ldr	r1, [r1, #12]
90000e2a:	6802      	ldr	r2, [r0, #0]
90000e2c:	440a      	add	r2, r1
90000e2e:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e30:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e32:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e36:	6803      	ldr	r3, [r0, #0]
90000e38:	691b      	ldr	r3, [r3, #16]
90000e3a:	4798      	blx	r3
90000e3c:	e7a7      	b.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x11e>
      return 1;
90000e3e:	2301      	movs	r3, #1
90000e40:	e791      	b.n	90000d66 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf6>
            lastError = AVI_ERROR_EOF_REACHED;
90000e42:	230d      	movs	r3, #13
90000e44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e48:	e72d      	b.n	90000ca6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e4a:	1d33      	adds	r3, r6, #4
    if (reader != 0)
90000e4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e4e:	f106 0208 	add.w	r2, r6, #8
90000e52:	58ce      	ldr	r6, [r1, r3]
    return movieData + offset;
90000e54:	4411      	add	r1, r2
90000e56:	e750      	b.n	90000cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e58:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e5a:	4b11      	ldr	r3, [pc, #68]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e5c:	4a11      	ldr	r2, [pc, #68]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e5e:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e60:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e64:	4810      	ldr	r0, [pc, #64]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e66:	f020 f9db 	bl	90021220 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6a:	463e      	mov	r6, r7
90000e6c:	e7ee      	b.n	90000e4c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
90000e6e:	bf00      	nop
90000e70:	24005ba8 	.word	0x24005ba8
90000e74:	24005b7c 	.word	0x24005b7c
90000e78:	24000004 	.word	0x24000004
90000e7c:	24005ba4 	.word	0x24005ba4
90000e80:	24005b90 	.word	0x24005b90
90000e84:	24005b84 	.word	0x24005b84
90000e88:	24005b80 	.word	0x24005b80
90000e8c:	24005b88 	.word	0x24005b88
90000e90:	2400b180 	.word	0x2400b180
90000e94:	24005b9c 	.word	0x24005b9c
90000e98:	24005b94 	.word	0x24005b94
90000e9c:	24005b74 	.word	0x24005b74
90000ea0:	90022748 	.word	0x90022748
90000ea4:	9002275c 	.word	0x9002275c
90000ea8:	900226f0 	.word	0x900226f0
90000eac:	24005b8c 	.word	0x24005b8c
90000eb0:	24005b78 	.word	0x24005b78
90000eb4:	24005b98 	.word	0x24005b98
90000eb8:	24005bbc 	.word	0x24005bbc

90000ebc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ebc:	6943      	ldr	r3, [r0, #20]
{
90000ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ec2:	2b00      	cmp	r3, #0
90000ec4:	f000 8098 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ec8:	4605      	mov	r5, r0
    if (reader != 0)
90000eca:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000ecc:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000ece:	2800      	cmp	r0, #0
90000ed0:	f000 8082 	beq.w	90000fd8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ed4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ed6:	2b07      	cmp	r3, #7
90000ed8:	f240 8083 	bls.w	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000edc:	6803      	ldr	r3, [r0, #0]
90000ede:	4621      	mov	r1, r4
90000ee0:	68db      	ldr	r3, [r3, #12]
90000ee2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ee4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000ee6:	2208      	movs	r2, #8
90000ee8:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000eea:	6803      	ldr	r3, [r0, #0]
90000eec:	691b      	ldr	r3, [r3, #16]
90000eee:	4798      	blx	r3
90000ef0:	2800      	cmp	r0, #0
90000ef2:	d06d      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef4:	69aa      	ldr	r2, [r5, #24]
    if (reader != 0)
90000ef6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef8:	1d13      	adds	r3, r2, #4
        aviBufferStartOffset = offset;
90000efa:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000efc:	2800      	cmp	r0, #0
90000efe:	d06d      	beq.n	90000fdc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f00:	1b1b      	subs	r3, r3, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f02:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f04:	18e1      	adds	r1, r4, r3
90000f06:	5ce4      	ldrb	r4, [r4, r3]
90000f08:	788b      	ldrb	r3, [r1, #2]
90000f0a:	784e      	ldrb	r6, [r1, #1]
90000f0c:	041b      	lsls	r3, r3, #16
90000f0e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
90000f12:	4323      	orrs	r3, r4
90000f14:	78cc      	ldrb	r4, [r1, #3]
90000f16:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f1a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f1c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f20:	e039      	b.n	90000f96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f24:	2b07      	cmp	r3, #7
90000f26:	d95c      	bls.n	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f28:	6803      	ldr	r3, [r0, #0]
90000f2a:	4621      	mov	r1, r4
90000f2c:	68db      	ldr	r3, [r3, #12]
90000f2e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f32:	2208      	movs	r2, #8
90000f34:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f36:	6803      	ldr	r3, [r0, #0]
90000f38:	691b      	ldr	r3, [r3, #16]
90000f3a:	4798      	blx	r3
90000f3c:	b908      	cbnz	r0, 90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f3e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f42:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f44:	69ab      	ldr	r3, [r5, #24]
        aviBufferStartOffset = offset;
90000f46:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f48:	2800      	cmp	r0, #0
90000f4a:	d053      	beq.n	90000ff4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f4c:	1b1c      	subs	r4, r3, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f4e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
90000f50:	1913      	adds	r3, r2, r4
90000f52:	5d11      	ldrb	r1, [r2, r4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f54:	799c      	ldrb	r4, [r3, #6]
90000f56:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f5a:	0424      	lsls	r4, r4, #16
90000f5c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f60:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f64:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f68:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f70:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f74:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f76:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f7a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f7e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f82:	f246 3264 	movw	r2, #25444	; 0x6364
90000f86:	42b1      	cmp	r1, r6
90000f88:	bf08      	it	eq
90000f8a:	4293      	cmpeq	r3, r2
90000f8c:	bf0c      	ite	eq
90000f8e:	2301      	moveq	r3, #1
90000f90:	2300      	movne	r3, #0
90000f92:	d01a      	beq.n	90000fca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000f94:	69aa      	ldr	r2, [r5, #24]
90000f96:	4414      	add	r4, r2
90000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000f9a:	f104 0208 	add.w	r2, r4, #8
90000f9e:	429a      	cmp	r2, r3
90000fa0:	d20e      	bcs.n	90000fc0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fa2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa4:	3409      	adds	r4, #9
        frameNumber++;
90000fa6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa8:	f024 0401 	bic.w	r4, r4, #1
90000fac:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fb0:	2800      	cmp	r0, #0
90000fb2:	d1b6      	bne.n	90000f22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fb6:	191a      	adds	r2, r3, r4
90000fb8:	5b19      	ldrh	r1, [r3, r4]
90000fba:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fbc:	6854      	ldr	r4, [r2, #4]
90000fbe:	e7e0      	b.n	90000f82 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fc0:	2101      	movs	r1, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fc2:	6a2a      	ldr	r2, [r5, #32]
    return false;
90000fc4:	2300      	movs	r3, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fc6:	e9c5 1205 	strd	r1, r2, [r5, #20]
}
90000fca:	4618      	mov	r0, r3
90000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000fd0:	230d      	movs	r3, #13
90000fd2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000fd6:	e78d      	b.n	90000ef4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000fd8:	1d23      	adds	r3, r4, #4
90000fda:	4622      	mov	r2, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000fde:	58cc      	ldr	r4, [r1, r3]
90000fe0:	e79b      	b.n	90000f1a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fe2:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000fe4:	4b07      	ldr	r3, [pc, #28]	; (90001004 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90000fe6:	4a08      	ldr	r2, [pc, #32]	; (90001008 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90000fe8:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fea:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90000fee:	4807      	ldr	r0, [pc, #28]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90000ff0:	f020 f916 	bl	90021220 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90000ff4:	461c      	mov	r4, r3
90000ff6:	e7dd      	b.n	90000fb4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ff8:	4b05      	ldr	r3, [pc, #20]	; (90001010 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90000ffa:	21ec      	movs	r1, #236	; 0xec
90000ffc:	4a05      	ldr	r2, [pc, #20]	; (90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90000ffe:	4803      	ldr	r0, [pc, #12]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001000:	f020 f90e 	bl	90021220 <__assert_func>
90001004:	90022748 	.word	0x90022748
90001008:	9002275c 	.word	0x9002275c
9000100c:	900226f0 	.word	0x900226f0
90001010:	900227a0 	.word	0x900227a0
90001014:	900227ec 	.word	0x900227ec

90001018 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	6943      	ldr	r3, [r0, #20]
{
9000101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000101e:	2b00      	cmp	r3, #0
90001020:	f000 8097 	beq.w	90001152 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13a>
    readData(currentMovieOffset, 8);
90001024:	4604      	mov	r4, r0
    if (reader != 0)
90001026:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001028:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000102a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000102c:	2800      	cmp	r0, #0
9000102e:	d05d      	beq.n	900010ec <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd4>
        if (length > aviBufferLength)
90001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001032:	2b07      	cmp	r3, #7
90001034:	f240 8093 	bls.w	9000115e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        reader->seek(offset);
90001038:	6803      	ldr	r3, [r0, #0]
9000103a:	4629      	mov	r1, r5
9000103c:	68db      	ldr	r3, [r3, #12]
9000103e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001040:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001042:	2208      	movs	r2, #8
90001044:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001046:	6803      	ldr	r3, [r0, #0]
90001048:	691b      	ldr	r3, [r3, #16]
9000104a:	4798      	blx	r3
9000104c:	2800      	cmp	r0, #0
9000104e:	d048      	beq.n	900010e2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xca>
    if (reader != 0)
90001050:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001052:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001054:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001056:	2800      	cmp	r0, #0
90001058:	d047      	beq.n	900010ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000105a:	1d0a      	adds	r2, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000105c:	f101 0c02 	add.w	ip, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001062:	1b52      	subs	r2, r2, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001064:	ebac 0c05 	sub.w	ip, ip, r5
90001068:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000106a:	189f      	adds	r7, r3, r2
9000106c:	5c9a      	ldrb	r2, [r3, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000106e:	eb03 0805 	add.w	r8, r3, r5
90001072:	f813 e005 	ldrb.w	lr, [r3, r5]
90001076:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000107a:	f897 8001 	ldrb.w	r8, [r7, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000107e:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001082:	78bd      	ldrb	r5, [r7, #2]
90001084:	042d      	lsls	r5, r5, #16
90001086:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
9000108a:	4315      	orrs	r5, r2
9000108c:	78fa      	ldrb	r2, [r7, #3]
9000108e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001092:	eb03 020c 	add.w	r2, r3, ip
90001096:	f813 300c 	ldrb.w	r3, [r3, ip]
9000109a:	7852      	ldrb	r2, [r2, #1]
9000109c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010a0:	194a      	adds	r2, r1, r5
900010a2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010a4:	f102 0c08 	add.w	ip, r2, #8
900010a8:	45bc      	cmp	ip, r7
900010aa:	d213      	bcs.n	900010d4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010ac:	f243 0730 	movw	r7, #12336	; 0x3030
900010b0:	45be      	cmp	lr, r7
900010b2:	d124      	bne.n	900010fe <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xe6>
900010b4:	f246 3764 	movw	r7, #25444	; 0x6364
900010b8:	42bb      	cmp	r3, r7
900010ba:	d120      	bne.n	900010fe <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xe6>
900010bc:	bb1d      	cbnz	r5, 90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
          currentMovieOffset += 8;
900010be:	4662      	mov	r2, ip
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c0:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c4:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010c8:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010ca:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010cc:	d002      	beq.n	900010d4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>
900010ce:	2001      	movs	r0, #1
}
900010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010d4:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010d6:	6a23      	ldr	r3, [r4, #32]
900010d8:	2000      	movs	r0, #0
900010da:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900010de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900010e2:	230d      	movs	r3, #13
900010e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900010e8:	e7b2      	b.n	90001050 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900010ea:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900010ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900010ee:	4629      	mov	r1, r5
900010f0:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900010f2:	f832 e005 	ldrh.w	lr, [r2, r5]
900010f6:	442a      	add	r2, r5
900010f8:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900010fa:	6855      	ldr	r5, [r2, #4]
900010fc:	e7d0      	b.n	900010a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x88>
        currentMovieOffset += chunkSize;
900010fe:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001100:	2d00      	cmp	r5, #0
90001102:	d1dd      	bne.n	900010c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa8>
90001104:	e7db      	b.n	900010be <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa6>
            currentMovieOffset += 8;
90001106:	f101 0708 	add.w	r7, r1, #8
9000110a:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
9000110c:	b1f0      	cbz	r0, 9000114c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x134>
        if (length > aviBufferLength)
9000110e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001110:	429d      	cmp	r5, r3
90001112:	d824      	bhi.n	9000115e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        reader->seek(offset);
90001114:	6803      	ldr	r3, [r0, #0]
90001116:	4639      	mov	r1, r7
90001118:	68db      	ldr	r3, [r3, #12]
9000111a:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000111c:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000111e:	462a      	mov	r2, r5
90001120:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001122:	6803      	ldr	r3, [r0, #0]
90001124:	691b      	ldr	r3, [r3, #16]
90001126:	4798      	blx	r3
90001128:	b910      	cbnz	r0, 90001130 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x118>
            lastError = AVI_ERROR_EOF_REACHED;
9000112a:	230d      	movs	r3, #13
9000112c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001130:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90001132:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
90001134:	b126      	cbz	r6, 90001140 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x128>
90001136:	4633      	mov	r3, r6
90001138:	462a      	mov	r2, r5
9000113a:	4620      	mov	r0, r4
9000113c:	f7ff fc46 	bl	900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001140:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
90001144:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
90001146:	442a      	add	r2, r5
            frameNumber++;
90001148:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
9000114a:	e7b9      	b.n	900010c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa8>
    return movieData + offset;
9000114c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000114e:	4439      	add	r1, r7
90001150:	e7f0      	b.n	90001134 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x11c>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001152:	4b07      	ldr	r3, [pc, #28]	; (90001170 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
90001154:	21b8      	movs	r1, #184	; 0xb8
90001156:	4a07      	ldr	r2, [pc, #28]	; (90001174 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
90001158:	4807      	ldr	r0, [pc, #28]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000115a:	f020 f861 	bl	90021220 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000115e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001160:	4b06      	ldr	r3, [pc, #24]	; (9000117c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001162:	4a07      	ldr	r2, [pc, #28]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001164:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001166:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
9000116a:	4803      	ldr	r0, [pc, #12]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000116c:	f020 f858 	bl	90021220 <__assert_func>
90001170:	900227a0 	.word	0x900227a0
90001174:	90022820 	.word	0x90022820
90001178:	900226f0 	.word	0x900226f0
9000117c:	90022748 	.word	0x90022748
90001180:	9002275c 	.word	0x9002275c

90001184 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001184:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001186:	2500      	movs	r5, #0
90001188:	4b0f      	ldr	r3, [pc, #60]	; (900011c8 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000118a:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
9000118c:	6003      	str	r3, [r0, #0]
9000118e:	63c5      	str	r5, [r0, #60]	; 0x3c
90001190:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
90001194:	e9c0 5505 	strd	r5, r5, [r0, #20]
90001198:	e9c0 5507 	strd	r5, r5, [r0, #28]
9000119c:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
900011a0:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011a4:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011a8:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011b0:	f002 fa3c 	bl	9000362c <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011b4:	462a      	mov	r2, r5
900011b6:	4629      	mov	r1, r5
900011b8:	2001      	movs	r0, #1
900011ba:	f00a fd7f 	bl	9000bcbc <osSemaphoreNew>
900011be:	4b03      	ldr	r3, [pc, #12]	; (900011cc <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011c0:	4602      	mov	r2, r0
}
900011c2:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011c4:	601a      	str	r2, [r3, #0]
}
900011c6:	bd38      	pop	{r3, r4, r5, pc}
900011c8:	900229a0 	.word	0x900229a0
900011cc:	24005be0 	.word	0x24005be0

900011d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011d4:	2100      	movs	r1, #0
    if (reader != 0)
900011d6:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900011d8:	b083      	sub	sp, #12
900011da:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900011dc:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900011de:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900011e2:	2e00      	cmp	r6, #0
900011e4:	f000 81ba 	beq.w	9000155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38c>
        if (length > aviBufferLength)
900011e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
900011ea:	2b47      	cmp	r3, #71	; 0x47
900011ec:	f240 8212 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900011f0:	6833      	ldr	r3, [r6, #0]
900011f2:	4630      	mov	r0, r6
900011f4:	68db      	ldr	r3, [r3, #12]
900011f6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900011f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
900011fa:	2248      	movs	r2, #72	; 0x48
900011fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
900011fe:	6803      	ldr	r3, [r0, #0]
90001200:	691b      	ldr	r3, [r3, #16]
90001202:	4798      	blx	r3
90001204:	2800      	cmp	r0, #0
90001206:	f000 80bd 	beq.w	90001384 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        aviBufferStartOffset = offset;
9000120a:	2300      	movs	r3, #0
    if (reader != 0)
9000120c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
9000120e:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001210:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
90001212:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
90001214:	2e00      	cmp	r6, #0
90001216:	f000 81a2 	beq.w	9000155e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000121a:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000121e:	2204      	movs	r2, #4
90001220:	49c6      	ldr	r1, [pc, #792]	; (9000153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001222:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
90001226:	4658      	mov	r0, fp
90001228:	f020 fcb4 	bl	90021b94 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
9000122c:	2800      	cmp	r0, #0
9000122e:	f040 8201 	bne.w	90001634 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x464>
    currentMovieOffset += 8;
90001232:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001236:	2204      	movs	r2, #4
90001238:	49c1      	ldr	r1, [pc, #772]	; (90001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x370>)
    currentMovieOffset += 8;
9000123a:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
9000123c:	4440      	add	r0, r8
9000123e:	f020 fca9 	bl	90021b94 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
90001242:	2800      	cmp	r0, #0
90001244:	f040 820a 	bne.w	9000165c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>
    currentMovieOffset += 4;
90001248:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
9000124c:	2204      	movs	r2, #4
9000124e:	49bd      	ldr	r1, [pc, #756]	; (90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x374>)
90001250:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
90001254:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001258:	f020 fc9c 	bl	90021b94 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
9000125c:	9001      	str	r0, [sp, #4]
9000125e:	2800      	cmp	r0, #0
90001260:	f040 81f2 	bne.w	90001648 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x478>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001264:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001268:	f89b 2011 	ldrb.w	r2, [fp, #17]
9000126c:	0424      	lsls	r4, r4, #16
9000126e:	f89b 3013 	ldrb.w	r3, [fp, #19]
90001272:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90001276:	f89b 2010 	ldrb.w	r2, [fp, #16]
9000127a:	4314      	orrs	r4, r2
    assert(aviListSize);
9000127c:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001280:	f000 81d1 	beq.w	90001626 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x456>
    uint32_t offset =  currentMovieOffset + 8;
90001284:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001288:	2204      	movs	r2, #4
9000128a:	49af      	ldr	r1, [pc, #700]	; (90001548 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x378>)
9000128c:	4440      	add	r0, r8
9000128e:	f020 fc81 	bl	90021b94 <strncmp>
    if (compare(offset, "hdrl", 4))
90001292:	2800      	cmp	r0, #0
90001294:	d07a      	beq.n	9000138c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
90001296:	2306      	movs	r3, #6
        foundFrame = false;
90001298:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
9000129c:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012a0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012a4:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012a6:	2204      	movs	r2, #4
900012a8:	49a8      	ldr	r1, [pc, #672]	; (9000154c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x37c>)
900012aa:	f020 fc73 	bl	90021b94 <strncmp>
    if (compare(offset, "avih", 4))
900012ae:	2800      	cmp	r0, #0
900012b0:	f000 8088 	beq.w	900013c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f4>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012b4:	2307      	movs	r3, #7
900012b6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012ba:	4454      	add	r4, sl
900012bc:	3408      	adds	r4, #8
    if (reader != 0)
900012be:	f1b9 0f00 	cmp.w	r9, #0
900012c2:	f000 80dd 	beq.w	90001480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b0>
        if (length > aviBufferLength)
900012c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012c8:	2b0b      	cmp	r3, #11
900012ca:	f240 81a3 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900012ce:	f8d9 3000 	ldr.w	r3, [r9]
900012d2:	4621      	mov	r1, r4
900012d4:	4648      	mov	r0, r9
900012d6:	68db      	ldr	r3, [r3, #12]
900012d8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900012da:	6b28      	ldr	r0, [r5, #48]	; 0x30
900012dc:	220c      	movs	r2, #12
900012de:	6b69      	ldr	r1, [r5, #52]	; 0x34
900012e0:	6803      	ldr	r3, [r0, #0]
900012e2:	691b      	ldr	r3, [r3, #16]
900012e4:	4798      	blx	r3
900012e6:	2800      	cmp	r0, #0
900012e8:	f000 8122 	beq.w	90001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900012ec:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900012f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900012f2:	63ec      	str	r4, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
900012f4:	f8df 825c 	ldr.w	r8, [pc, #604]	; 90001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x384>
            lastError = AVI_ERROR_EOF_REACHED;
900012f8:	f04f 090d 	mov.w	r9, #13
900012fc:	e003      	b.n	90001306 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x136>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900012fe:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
    if (reader != 0)
90001302:	6b2e      	ldr	r6, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
90001304:	63ec      	str	r4, [r5, #60]	; 0x3c
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001306:	f104 0708 	add.w	r7, r4, #8
    if (reader != 0)
9000130a:	2e00      	cmp	r6, #0
9000130c:	d048      	beq.n	900013a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000130e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
90001310:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001312:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001314:	4641      	mov	r1, r8
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001316:	1afb      	subs	r3, r7, r3
90001318:	4418      	add	r0, r3
    return strncmp(src, str, num);
9000131a:	f020 fc3b 	bl	90021b94 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000131e:	2800      	cmp	r0, #0
90001320:	d047      	beq.n	900013b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e2>
90001322:	f1ba 0f00 	cmp.w	sl, #0
90001326:	d147      	bne.n	900013b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
90001328:	6aab      	ldr	r3, [r5, #40]	; 0x28
9000132a:	42a3      	cmp	r3, r4
9000132c:	f240 80ab 	bls.w	90001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b6>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
90001330:	3404      	adds	r4, #4
    if (reader != 0)
90001332:	b386      	cbz	r6, 90001396 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c6>
        const uint32_t index = offset - aviBufferStartOffset;
90001334:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001336:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
9000133a:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000133c:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000133e:	eb01 0204 	add.w	r2, r1, r4
90001342:	5d09      	ldrb	r1, [r1, r4]
90001344:	7894      	ldrb	r4, [r2, #2]
90001346:	7850      	ldrb	r0, [r2, #1]
90001348:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000134c:	78d2      	ldrb	r2, [r2, #3]
9000134e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001352:	ea44 0401 	orr.w	r4, r4, r1
90001356:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
9000135a:	443c      	add	r4, r7
        if (length > aviBufferLength)
9000135c:	f240 815a 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
90001360:	6833      	ldr	r3, [r6, #0]
90001362:	4621      	mov	r1, r4
90001364:	4630      	mov	r0, r6
90001366:	68db      	ldr	r3, [r3, #12]
90001368:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000136a:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000136c:	220c      	movs	r2, #12
9000136e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001370:	6803      	ldr	r3, [r0, #0]
90001372:	691b      	ldr	r3, [r3, #16]
90001374:	4798      	blx	r3
90001376:	2800      	cmp	r0, #0
90001378:	d1c1      	bne.n	900012fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x12e>
            lastError = AVI_ERROR_EOF_REACHED;
9000137a:	f04f 0a0d 	mov.w	sl, #13
9000137e:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
90001382:	e7be      	b.n	90001302 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x132>
90001384:	230d      	movs	r3, #13
90001386:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
9000138a:	e73e      	b.n	9000120a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
9000138c:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
90001390:	f04f 0b01 	mov.w	fp, #1
90001394:	e786      	b.n	900012a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd4>
        listOffset += listSize;
90001396:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
90001398:	591c      	ldr	r4, [r3, r4]
9000139a:	443c      	add	r4, r7
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000139c:	f104 0708 	add.w	r7, r4, #8
        src = (const char*)movieData + offset;
900013a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
900013a2:	2204      	movs	r2, #4
900013a4:	4641      	mov	r1, r8
        src = (const char*)movieData + offset;
900013a6:	2600      	movs	r6, #0
900013a8:	4438      	add	r0, r7
    return strncmp(src, str, num);
900013aa:	f020 fbf3 	bl	90021b94 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900013ae:	2800      	cmp	r0, #0
900013b0:	d1b7      	bne.n	90001322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x152>
    if (lastError != AVI_NO_ERROR)
900013b2:	f1ba 0f00 	cmp.w	sl, #0
900013b6:	d066      	beq.n	90001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013b8:	230a      	movs	r3, #10
900013ba:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013be:	b003      	add	sp, #12
900013c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (foundFrame)
900013c4:	f1bb 0f00 	cmp.w	fp, #0
900013c8:	f43f af77 	beq.w	900012ba <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xea>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013cc:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013d0:	f1b9 0f00 	cmp.w	r9, #0
900013d4:	f000 8102 	beq.w	900015dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x40c>
        const uint32_t index = offset - aviBufferStartOffset;
900013d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013da:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900013dc:	1ac9      	subs	r1, r1, r3
900013de:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
900013e2:	f8df c174 	ldr.w	ip, [pc, #372]	; 90001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x388>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013e6:	f812 8001 	ldrb.w	r8, [r2, r1]
900013ea:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900013ee:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900013f2:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900013f6:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013f8:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
900013fc:	4439      	add	r1, r7
900013fe:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001400:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001404:	f89e e003 	ldrb.w	lr, [lr, #3]
90001408:	041b      	lsls	r3, r3, #16
9000140a:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
9000140e:	ea43 0308 	orr.w	r3, r3, r8
90001412:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001416:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141a:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000141e:	099b      	lsrs	r3, r3, #6
90001420:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001422:	f89c 3002 	ldrb.w	r3, [ip, #2]
90001426:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000142a:	041b      	lsls	r3, r3, #16
9000142c:	f812 e000 	ldrb.w	lr, [r2, r0]
90001430:	f89c c003 	ldrb.w	ip, [ip, #3]
90001434:	1850      	adds	r0, r2, r1
90001436:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000143a:	ea43 030e 	orr.w	r3, r3, lr
9000143e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001442:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001444:	7883      	ldrb	r3, [r0, #2]
90001446:	f890 c001 	ldrb.w	ip, [r0, #1]
9000144a:	041b      	lsls	r3, r3, #16
9000144c:	5c51      	ldrb	r1, [r2, r1]
9000144e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001452:	430b      	orrs	r3, r1
90001454:	78c1      	ldrb	r1, [r0, #3]
90001456:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000145a:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
9000145c:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000145e:	788b      	ldrb	r3, [r1, #2]
90001460:	7848      	ldrb	r0, [r1, #1]
90001462:	041b      	lsls	r3, r3, #16
90001464:	5dd2      	ldrb	r2, [r2, r7]
90001466:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000146a:	4313      	orrs	r3, r2
9000146c:	78ca      	ldrb	r2, [r1, #3]
9000146e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    uint32_t listOffset = aviListOffset + aviListSize + 8;
90001472:	4454      	add	r4, sl
        videoInfo.frame_height = getU32(offset + 36);
90001474:	612b      	str	r3, [r5, #16]
    uint32_t listOffset = aviListOffset + aviListSize + 8;
90001476:	3408      	adds	r4, #8
    if (reader != 0)
90001478:	f1b9 0f00 	cmp.w	r9, #0
9000147c:	f47f af23 	bne.w	900012c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf6>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001480:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
90001484:	e736      	b.n	900012f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x124>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001486:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000148a:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000148c:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
9000148e:	2e00      	cmp	r6, #0
90001490:	f000 80b8 	beq.w	90001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x434>
        const uint32_t index = offset - aviBufferStartOffset;
90001494:	6beb      	ldr	r3, [r5, #60]	; 0x3c
90001496:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
90001498:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000149c:	f104 0e02 	add.w	lr, r4, #2
900014a0:	f104 0c01 	add.w	ip, r4, #1
900014a4:	f811 8004 	ldrb.w	r8, [r1, r4]
900014a8:	1ce0      	adds	r0, r4, #3
900014aa:	f811 300e 	ldrb.w	r3, [r1, lr]
        if (length > aviBufferLength)
900014ae:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014b0:	f811 900c 	ldrb.w	r9, [r1, ip]
900014b4:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014b8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014bc:	ea43 0308 	orr.w	r3, r3, r8
900014c0:	f811 8000 	ldrb.w	r8, [r1, r0]
900014c4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014c8:	443b      	add	r3, r7
900014ca:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014cc:	f811 300e 	ldrb.w	r3, [r1, lr]
900014d0:	f811 c00c 	ldrb.w	ip, [r1, ip]
900014d4:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014d8:	5d0c      	ldrb	r4, [r1, r4]
900014da:	5c09      	ldrb	r1, [r1, r0]
900014dc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
900014e0:	ea43 0304 	orr.w	r3, r3, r4
900014e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    listOffset += listSize;
900014e8:	441f      	add	r7, r3
        if (length > aviBufferLength)
900014ea:	f240 8093 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900014ee:	6833      	ldr	r3, [r6, #0]
900014f0:	4639      	mov	r1, r7
900014f2:	4630      	mov	r0, r6
900014f4:	68db      	ldr	r3, [r3, #12]
900014f6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014fa:	2204      	movs	r2, #4
900014fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014fe:	6803      	ldr	r3, [r0, #0]
90001500:	691b      	ldr	r3, [r3, #16]
90001502:	4798      	blx	r3
90001504:	2800      	cmp	r0, #0
90001506:	d05f      	beq.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3f8>
    if (reader != 0)
90001508:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
9000150a:	63ef      	str	r7, [r5, #60]	; 0x3c
    if (reader != 0)
9000150c:	2b00      	cmp	r3, #0
9000150e:	f000 80af 	beq.w	90001670 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001512:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001514:	2204      	movs	r2, #4
90001516:	490e      	ldr	r1, [pc, #56]	; (90001550 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x380>)
90001518:	f020 fb3c 	bl	90021b94 <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000151c:	2800      	cmp	r0, #0
9000151e:	d16b      	bne.n	900015f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x428>
    frameNumber = 1; //next frame number is 1
90001520:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001522:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001524:	61ef      	str	r7, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001526:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
90001528:	622b      	str	r3, [r5, #32]
}
9000152a:	b003      	add	sp, #12
9000152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90001530:	230d      	movs	r3, #13
90001532:	469a      	mov	sl, r3
90001534:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90001538:	e6da      	b.n	900012f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x120>
9000153a:	bf00      	nop
9000153c:	9002287c 	.word	0x9002287c
90001540:	90022934 	.word	0x90022934
90001544:	9002292c 	.word	0x9002292c
90001548:	90022924 	.word	0x90022924
9000154c:	9002290c 	.word	0x9002290c
90001550:	9002291c 	.word	0x9002291c
90001554:	90022914 	.word	0x90022914
90001558:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
9000155c:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
9000155e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
90001562:	2204      	movs	r2, #4
90001564:	4944      	ldr	r1, [pc, #272]	; (90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
        src = (const char*)movieData + offset;
90001566:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
9000156a:	4620      	mov	r0, r4
9000156c:	f020 fb12 	bl	90021b94 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001570:	2800      	cmp	r0, #0
90001572:	d15f      	bne.n	90001634 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x464>
    currentMovieOffset += 8;
90001574:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001578:	2204      	movs	r2, #4
9000157a:	4940      	ldr	r1, [pc, #256]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
    currentMovieOffset += 8;
9000157c:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
9000157e:	4440      	add	r0, r8
90001580:	f020 fb08 	bl	90021b94 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
90001584:	2800      	cmp	r0, #0
90001586:	d169      	bne.n	9000165c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>
    currentMovieOffset += 4;
90001588:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
9000158c:	2204      	movs	r2, #4
9000158e:	493c      	ldr	r1, [pc, #240]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001590:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
90001594:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001598:	f020 fafc 	bl	90021b94 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
9000159c:	4683      	mov	fp, r0
9000159e:	2800      	cmp	r0, #0
900015a0:	d152      	bne.n	90001648 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x478>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015a2:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
900015a4:	2c00      	cmp	r4, #0
900015a6:	d03e      	beq.n	90001626 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x456>
    uint32_t offset =  currentMovieOffset + 8;
900015a8:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900015ac:	2204      	movs	r2, #4
900015ae:	4935      	ldr	r1, [pc, #212]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
900015b0:	4440      	add	r0, r8
900015b2:	f020 faef 	bl	90021b94 <strncmp>
    if (compare(offset, "hdrl", 4))
900015b6:	b958      	cbnz	r0, 900015d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x400>
    offset += 4;
900015b8:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015bc:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015c0:	4440      	add	r0, r8
900015c2:	f04f 0900 	mov.w	r9, #0
900015c6:	e66e      	b.n	900012a6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
            lastError = AVI_ERROR_EOF_REACHED;
900015c8:	230d      	movs	r3, #13
900015ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015ce:	e79b      	b.n	90001508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x338>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d0:	2306      	movs	r3, #6
    offset += 4;
900015d2:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015da:	e7f1      	b.n	900015c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3f0>
900015dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015de:	585a      	ldr	r2, [r3, r1]
900015e0:	441f      	add	r7, r3
900015e2:	4b29      	ldr	r3, [pc, #164]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
900015e4:	fba3 2302 	umull	r2, r3, r3, r2
900015e8:	099b      	lsrs	r3, r3, #6
900015ea:	606b      	str	r3, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015ee:	60ab      	str	r3, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015f2:	60eb      	str	r3, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900015f6:	e73c      	b.n	90001472 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900015f8:	230b      	movs	r3, #11
900015fa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015fe:	b003      	add	sp, #12
90001600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001604:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
90001606:	5903      	ldr	r3, [r0, r4]
90001608:	443b      	add	r3, r7
9000160a:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
9000160c:	5903      	ldr	r3, [r0, r4]
9000160e:	441f      	add	r7, r3
        src = (const char*)movieData + offset;
90001610:	4438      	add	r0, r7
90001612:	e77f      	b.n	90001514 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x344>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001614:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001616:	4b1d      	ldr	r3, [pc, #116]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4bc>)
90001618:	4a1d      	ldr	r2, [pc, #116]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c0>)
9000161a:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000161c:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001620:	481c      	ldr	r0, [pc, #112]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001622:	f01f fdfd 	bl	90021220 <__assert_func>
    assert(aviListSize);
90001626:	4b1c      	ldr	r3, [pc, #112]	; (90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c8>)
90001628:	f240 1149 	movw	r1, #329	; 0x149
9000162c:	4a1b      	ldr	r2, [pc, #108]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000162e:	4819      	ldr	r0, [pc, #100]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001630:	f01f fdf6 	bl	90021220 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
90001634:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001636:	4b1a      	ldr	r3, [pc, #104]	; (900016a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d0>)
90001638:	4a18      	ldr	r2, [pc, #96]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000163a:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
9000163e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
90001642:	4814      	ldr	r0, [pc, #80]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001644:	f01f fdec 	bl	90021220 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001648:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
9000164a:	4b16      	ldr	r3, [pc, #88]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d4>)
9000164c:	4a13      	ldr	r2, [pc, #76]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000164e:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001652:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
90001656:	480f      	ldr	r0, [pc, #60]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001658:	f01f fde2 	bl	90021220 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000165c:	2004      	movs	r0, #4
        assert(!"AVI header not found");
9000165e:	4b12      	ldr	r3, [pc, #72]	; (900016a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d8>)
90001660:	4a0e      	ldr	r2, [pc, #56]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
90001662:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001666:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
9000166a:	480a      	ldr	r0, [pc, #40]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
9000166c:	f01f fdd8 	bl	90021220 <__assert_func>
        src = (const char*)movieData + offset;
90001670:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90001672:	4438      	add	r0, r7
90001674:	e74e      	b.n	90001514 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x344>
90001676:	bf00      	nop
90001678:	9002287c 	.word	0x9002287c
9000167c:	90022934 	.word	0x90022934
90001680:	9002292c 	.word	0x9002292c
90001684:	90022924 	.word	0x90022924
90001688:	10624dd3 	.word	0x10624dd3
9000168c:	90022748 	.word	0x90022748
90001690:	9002275c 	.word	0x9002275c
90001694:	900226f0 	.word	0x900226f0
90001698:	90022900 	.word	0x90022900
9000169c:	900228a0 	.word	0x900228a0
900016a0:	90022884 	.word	0x90022884
900016a4:	900228e8 	.word	0x900228e8
900016a8:	900228d0 	.word	0x900228d0

900016ac <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900016ac:	b410      	push	{r4}
    reader = 0; //not using reader
900016ae:	2400      	movs	r4, #0
    movieLength = length;
900016b0:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
900016b4:	6304      	str	r4, [r0, #48]	; 0x30
}
900016b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016ba:	f7ff bd89 	b.w	900011d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016be:	bf00      	nop

900016c0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016c0:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016c2:	680b      	ldr	r3, [r1, #0]
{
900016c4:	4604      	mov	r4, r0
    movieData = 0;
900016c6:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016c8:	4608      	mov	r0, r1
900016ca:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016cc:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016d0:	4798      	blx	r3
900016d2:	4603      	mov	r3, r0
    readVideoHeader();
900016d4:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016d6:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016dc:	f7ff bd78 	b.w	900011d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016e0 <HAL_JPEG_InfoReadyCallback>:
{
900016e0:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016e2:	684b      	ldr	r3, [r1, #4]
{
900016e4:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016e6:	2b01      	cmp	r3, #1
900016e8:	d01a      	beq.n	90001720 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016ea:	2b02      	cmp	r3, #2
900016ec:	d010      	beq.n	90001710 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016ee:	b94b      	cbnz	r3, 90001704 <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016f0:	68cb      	ldr	r3, [r1, #12]
900016f2:	0759      	lsls	r1, r3, #29
900016f4:	d12f      	bne.n	90001756 <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016f6:	6883      	ldr	r3, [r0, #8]
900016f8:	075a      	lsls	r2, r3, #29
900016fa:	d003      	beq.n	90001704 <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900016fc:	f023 0307 	bic.w	r3, r3, #7
90001700:	3308      	adds	r3, #8
90001702:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001704:	4a1a      	ldr	r2, [pc, #104]	; (90001770 <HAL_JPEG_InfoReadyCallback+0x90>)
90001706:	491b      	ldr	r1, [pc, #108]	; (90001774 <HAL_JPEG_InfoReadyCallback+0x94>)
90001708:	f00d ff1e 	bl	9000f548 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000170c:	bb40      	cbnz	r0, 90001760 <HAL_JPEG_InfoReadyCallback+0x80>
}
9000170e:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
90001710:	68cb      	ldr	r3, [r1, #12]
90001712:	071a      	lsls	r2, r3, #28
90001714:	d0ef      	beq.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90001716:	f023 030f 	bic.w	r3, r3, #15
9000171a:	3310      	adds	r3, #16
9000171c:	60cb      	str	r3, [r1, #12]
9000171e:	e7ea      	b.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001720:	68cb      	ldr	r3, [r1, #12]
90001722:	071a      	lsls	r2, r3, #28
90001724:	d003      	beq.n	9000172e <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90001726:	f023 030f 	bic.w	r3, r3, #15
9000172a:	3310      	adds	r3, #16
9000172c:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
9000172e:	6883      	ldr	r3, [r0, #8]
90001730:	0719      	lsls	r1, r3, #28
90001732:	d003      	beq.n	9000173c <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
90001734:	f023 030f 	bic.w	r3, r3, #15
90001738:	3310      	adds	r3, #16
9000173a:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000173c:	4a0c      	ldr	r2, [pc, #48]	; (90001770 <HAL_JPEG_InfoReadyCallback+0x90>)
9000173e:	490d      	ldr	r1, [pc, #52]	; (90001774 <HAL_JPEG_InfoReadyCallback+0x94>)
90001740:	f001 fefe 	bl	90003540 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001744:	2800      	cmp	r0, #0
90001746:	d0e2      	beq.n	9000170e <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001748:	4b0b      	ldr	r3, [pc, #44]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x98>)
9000174a:	f240 212e 	movw	r1, #558	; 0x22e
9000174e:	4a0b      	ldr	r2, [pc, #44]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x9c>)
90001750:	480b      	ldr	r0, [pc, #44]	; (90001780 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001752:	f01f fd65 	bl	90021220 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
90001756:	f023 0307 	bic.w	r3, r3, #7
9000175a:	3308      	adds	r3, #8
9000175c:	60c3      	str	r3, [r0, #12]
9000175e:	e7ca      	b.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001760:	4b05      	ldr	r3, [pc, #20]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x98>)
90001762:	f44f 7112 	mov.w	r1, #584	; 0x248
90001766:	4a05      	ldr	r2, [pc, #20]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x9c>)
90001768:	4805      	ldr	r0, [pc, #20]	; (90001780 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000176a:	f01f fd59 	bl	90021220 <__assert_func>
9000176e:	bf00      	nop
90001770:	24005ba0 	.word	0x24005ba0
90001774:	24005bdc 	.word	0x24005bdc
90001778:	9002293c 	.word	0x9002293c
9000177c:	90022950 	.word	0x90022950
90001780:	900226f0 	.word	0x900226f0

90001784 <HAL_JPEG_GetDataCallback>:
  JPEG_InputImageIndex += NbDecodedData;
90001784:	4b0c      	ldr	r3, [pc, #48]	; (900017b8 <HAL_JPEG_GetDataCallback+0x34>)
{
90001786:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
90001788:	681a      	ldr	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000178a:	4c0c      	ldr	r4, [pc, #48]	; (900017bc <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
9000178c:	440a      	add	r2, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000178e:	6824      	ldr	r4, [r4, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001790:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001792:	42a2      	cmp	r2, r4
90001794:	d302      	bcc.n	9000179c <HAL_JPEG_GetDataCallback+0x18>
}
90001796:	f85d 4b04 	ldr.w	r4, [sp], #4
9000179a:	4770      	bx	lr
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000179c:	4b08      	ldr	r3, [pc, #32]	; (900017c0 <HAL_JPEG_GetDataCallback+0x3c>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
9000179e:	1aa2      	subs	r2, r4, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a0:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a6:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017a8:	bf28      	it	cs
900017aa:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
900017ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017b2:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017b4:	f006 bebc 	b.w	90008530 <HAL_JPEG_ConfigInputBuffer>
900017b8:	24005b84 	.word	0x24005b84
900017bc:	24005b88 	.word	0x24005b88
900017c0:	24005b80 	.word	0x24005b80

900017c4 <HAL_JPEG_DataReadyCallback>:
{
900017c4:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017c6:	4e1e      	ldr	r6, [pc, #120]	; (90001840 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017c8:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ca:	2001      	movs	r0, #1
900017cc:	4c1d      	ldr	r4, [pc, #116]	; (90001844 <HAL_JPEG_DataReadyCallback+0x80>)
900017ce:	6833      	ldr	r3, [r6, #0]
900017d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017d4:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017d6:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017da:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017e0:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017e2:	d91a      	bls.n	9000181a <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017e4:	2200      	movs	r2, #0
900017e6:	4613      	mov	r3, r2
900017e8:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017ee:	005a      	lsls	r2, r3, #1
900017f0:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017f4:	b9c9      	cbnz	r1, 9000182a <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017f6:	4914      	ldr	r1, [pc, #80]	; (90001848 <HAL_JPEG_DataReadyCallback+0x84>)
900017f8:	4413      	add	r3, r2
900017fa:	4628      	mov	r0, r5
900017fc:	68ca      	ldr	r2, [r1, #12]
900017fe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
90001802:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90001806:	6861      	ldr	r1, [r4, #4]
90001808:	01d2      	lsls	r2, r2, #7
9000180a:	f006 fe95 	bl	90008538 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
9000180e:	4b0f      	ldr	r3, [pc, #60]	; (9000184c <HAL_JPEG_DataReadyCallback+0x88>)
}
90001810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
90001814:	6818      	ldr	r0, [r3, #0]
90001816:	f00a bad5 	b.w	9000bdc4 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
9000181a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
9000181e:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001820:	005a      	lsls	r2, r3, #1
90001822:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
90001826:	2900      	cmp	r1, #0
90001828:	d0e5      	beq.n	900017f6 <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
9000182a:	2102      	movs	r1, #2
9000182c:	4628      	mov	r0, r5
9000182e:	f006 fe47 	bl	900084c0 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
90001832:	4a07      	ldr	r2, [pc, #28]	; (90001850 <HAL_JPEG_DataReadyCallback+0x8c>)
90001834:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001836:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001838:	6011      	str	r1, [r2, #0]
9000183a:	fa03 f201 	lsl.w	r2, r3, r1
9000183e:	e7da      	b.n	900017f6 <HAL_JPEG_DataReadyCallback+0x32>
90001840:	24005b90 	.word	0x24005b90
90001844:	24000004 	.word	0x24000004
90001848:	24005ba8 	.word	0x24005ba8
9000184c:	24005be0 	.word	0x24005be0
90001850:	24005ba4 	.word	0x24005ba4

90001854 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
90001854:	b672      	cpsid	i
  while (1)
90001856:	e7fe      	b.n	90001856 <HAL_JPEG_ErrorCallback+0x2>

90001858 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001858:	4b01      	ldr	r3, [pc, #4]	; (90001860 <HAL_JPEG_DecodeCpltCallback+0x8>)
9000185a:	2201      	movs	r2, #1
9000185c:	601a      	str	r2, [r3, #0]
}
9000185e:	4770      	bx	lr
90001860:	24005b98 	.word	0x24005b98

90001864 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
90001864:	b5f0      	push	{r4, r5, r6, r7, lr}
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001866:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001868:	4c1a      	ldr	r4, [pc, #104]	; (900018d4 <DMA2D_CopyBuffer+0x70>)
9000186a:	6806      	ldr	r6, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
9000186c:	4d1a      	ldr	r5, [pc, #104]	; (900018d8 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000186e:	6822      	ldr	r2, [r4, #0]
90001870:	0131      	lsls	r1, r6, #4
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001872:	636b      	str	r3, [r5, #52]	; 0x34

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001874:	4b19      	ldr	r3, [pc, #100]	; (900018dc <DMA2D_CopyBuffer+0x78>)
90001876:	681f      	ldr	r7, [r3, #0]
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001878:	fbb1 f3f2 	udiv	r3, r1, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
9000187c:	fb02 1113 	mls	r1, r2, r3, r1
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001880:	6862      	ldr	r2, [r4, #4]
90001882:	fb02 f303 	mul.w	r3, r2, r3
90001886:	6922      	ldr	r2, [r4, #16]
90001888:	ea4f 1c03 	mov.w	ip, r3, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000188c:	68e3      	ldr	r3, [r4, #12]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000188e:	fb01 f202 	mul.w	r2, r1, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001892:	eba7 0e03 	sub.w	lr, r7, r3
90001896:	4576      	cmp	r6, lr
90001898:	d317      	bcc.n	900018ca <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
9000189a:	68a1      	ldr	r1, [r4, #8]
9000189c:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
900018a0:	6469      	str	r1, [r5, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018a2:	490f      	ldr	r1, [pc, #60]	; (900018e0 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018a4:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018a8:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
900018aa:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018ac:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ae:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b0:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018b2:	4411      	add	r1, r2
900018b4:	4a08      	ldr	r2, [pc, #32]	; (900018d8 <DMA2D_CopyBuffer+0x74>)
900018b6:	4461      	add	r1, ip
900018b8:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ba:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018bc:	4909      	ldr	r1, [pc, #36]	; (900018e4 <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018be:	4b0a      	ldr	r3, [pc, #40]	; (900018e8 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018c0:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018c2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018c4:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018c6:	6013      	str	r3, [r2, #0]
}
900018c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018ca:	0519      	lsls	r1, r3, #20
900018cc:	f041 0110 	orr.w	r1, r1, #16
900018d0:	6469      	str	r1, [r5, #68]	; 0x44
900018d2:	e7e6      	b.n	900018a2 <DMA2D_CopyBuffer+0x3e>
900018d4:	24005ba8 	.word	0x24005ba8
900018d8:	52001000 	.word	0x52001000
900018dc:	24005ba0 	.word	0x24005ba0
900018e0:	24005b7c 	.word	0x24005b7c
900018e4:	ff09000b 	.word	0xff09000b
900018e8:	00010201 	.word	0x00010201

900018ec <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018ec:	2200      	movs	r2, #0
900018ee:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018f0:	490b      	ldr	r1, [pc, #44]	; (90001920 <DMA2D_ExternalJobCompleted+0x34>)
900018f2:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018f4:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018f6:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
900018f8:	b911      	cbnz	r1, 90001900 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
900018fa:	4b0a      	ldr	r3, [pc, #40]	; (90001924 <DMA2D_ExternalJobCompleted+0x38>)
900018fc:	2201      	movs	r2, #1
900018fe:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001900:	4b09      	ldr	r3, [pc, #36]	; (90001928 <DMA2D_ExternalJobCompleted+0x3c>)
90001902:	490a      	ldr	r1, [pc, #40]	; (9000192c <DMA2D_ExternalJobCompleted+0x40>)
90001904:	681b      	ldr	r3, [r3, #0]
90001906:	68c9      	ldr	r1, [r1, #12]
90001908:	6802      	ldr	r2, [r0, #0]
9000190a:	1a5b      	subs	r3, r3, r1
9000190c:	429a      	cmp	r2, r3
9000190e:	d302      	bcc.n	90001916 <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001910:	4b07      	ldr	r3, [pc, #28]	; (90001930 <DMA2D_ExternalJobCompleted+0x44>)
90001912:	2201      	movs	r2, #1
90001914:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
90001916:	4b07      	ldr	r3, [pc, #28]	; (90001934 <DMA2D_ExternalJobCompleted+0x48>)
90001918:	6818      	ldr	r0, [r3, #0]
9000191a:	f00a ba53 	b.w	9000bdc4 <osSemaphoreRelease>
9000191e:	bf00      	nop
90001920:	24005bbc 	.word	0x24005bbc
90001924:	24005b78 	.word	0x24005b78
90001928:	24005ba0 	.word	0x24005ba0
9000192c:	24005ba8 	.word	0x24005ba8
90001930:	24005b74 	.word	0x24005b74
90001934:	24005be0 	.word	0x24005be0

90001938 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001938:	4b03      	ldr	r3, [pc, #12]	; (90001948 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
9000193a:	2200      	movs	r2, #0
9000193c:	2102      	movs	r1, #2
9000193e:	60da      	str	r2, [r3, #12]
90001940:	6019      	str	r1, [r3, #0]
90001942:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
90001946:	4770      	bx	lr
90001948:	24005bbc 	.word	0x24005bbc

9000194c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000194c:	2101      	movs	r1, #1
9000194e:	2200      	movs	r2, #0
{
90001950:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001952:	4608      	mov	r0, r1
90001954:	f00a f9b2 	bl	9000bcbc <osSemaphoreNew>
90001958:	4b0b      	ldr	r3, [pc, #44]	; (90001988 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
9000195a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
9000195c:	b140      	cbz	r0, 90001970 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
9000195e:	2200      	movs	r2, #0
90001960:	2104      	movs	r1, #4
90001962:	2001      	movs	r0, #1
90001964:	f00a fa5a 	bl	9000be1c <osMessageQueueNew>
90001968:	4b08      	ldr	r3, [pc, #32]	; (9000198c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
9000196a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
9000196c:	b130      	cbz	r0, 9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
9000196e:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001970:	4b07      	ldr	r3, [pc, #28]	; (90001990 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
90001972:	2128      	movs	r1, #40	; 0x28
90001974:	4a07      	ldr	r2, [pc, #28]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001976:	4808      	ldr	r0, [pc, #32]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001978:	f01f fc52 	bl	90021220 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
9000197c:	4b07      	ldr	r3, [pc, #28]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
9000197e:	212c      	movs	r1, #44	; 0x2c
90001980:	4a04      	ldr	r2, [pc, #16]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001982:	4805      	ldr	r0, [pc, #20]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001984:	f01f fc4c 	bl	90021220 <__assert_func>
90001988:	24005be8 	.word	0x24005be8
9000198c:	24005be4 	.word	0x24005be4
90001990:	900229dc 	.word	0x900229dc
90001994:	90022a28 	.word	0x90022a28
90001998:	90022a58 	.word	0x90022a58
9000199c:	90022aa4 	.word	0x90022aa4

900019a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900019a0:	4b02      	ldr	r3, [pc, #8]	; (900019ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900019a2:	f04f 31ff 	mov.w	r1, #4294967295
900019a6:	6818      	ldr	r0, [r3, #0]
900019a8:	f00a b9d8 	b.w	9000bd5c <osSemaphoreAcquire>
900019ac:	24005be8 	.word	0x24005be8

900019b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900019b0:	4b01      	ldr	r3, [pc, #4]	; (900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900019b2:	6818      	ldr	r0, [r3, #0]
900019b4:	f00a ba06 	b.w	9000bdc4 <osSemaphoreRelease>
900019b8:	24005be8 	.word	0x24005be8

900019bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019bc:	4b02      	ldr	r3, [pc, #8]	; (900019c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019be:	2100      	movs	r1, #0
900019c0:	6818      	ldr	r0, [r3, #0]
900019c2:	f00a b9cb 	b.w	9000bd5c <osSemaphoreAcquire>
900019c6:	bf00      	nop
900019c8:	24005be8 	.word	0x24005be8

900019cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019cc:	4b01      	ldr	r3, [pc, #4]	; (900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019ce:	6818      	ldr	r0, [r3, #0]
900019d0:	f00a b9f8 	b.w	9000bdc4 <osSemaphoreRelease>
900019d4:	24005be8 	.word	0x24005be8

900019d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019d8:	4803      	ldr	r0, [pc, #12]	; (900019e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019da:	2300      	movs	r3, #0
900019dc:	4903      	ldr	r1, [pc, #12]	; (900019ec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019de:	461a      	mov	r2, r3
900019e0:	6800      	ldr	r0, [r0, #0]
900019e2:	f00a ba55 	b.w	9000be90 <osMessageQueuePut>
900019e6:	bf00      	nop
900019e8:	24005be4 	.word	0x24005be4
900019ec:	2400001c 	.word	0x2400001c

900019f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019f0:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019f2:	2300      	movs	r3, #0
{
900019f4:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019f6:	4c07      	ldr	r4, [pc, #28]	; (90001a14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
900019f8:	461a      	mov	r2, r3
900019fa:	a901      	add	r1, sp, #4
900019fc:	6820      	ldr	r0, [r4, #0]
900019fe:	f00a fa89 	bl	9000bf14 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001a02:	f04f 33ff 	mov.w	r3, #4294967295
90001a06:	2200      	movs	r2, #0
90001a08:	a901      	add	r1, sp, #4
90001a0a:	6820      	ldr	r0, [r4, #0]
90001a0c:	f00a fa82 	bl	9000bf14 <osMessageQueueGet>
}
90001a10:	b002      	add	sp, #8
90001a12:	bd10      	pop	{r4, pc}
90001a14:	24005be4 	.word	0x24005be4

90001a18 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a18:	6803      	ldr	r3, [r0, #0]
90001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a1c:	4718      	bx	r3
90001a1e:	bf00      	nop

90001a20 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a20:	2001      	movs	r0, #1
90001a22:	4770      	bx	lr

90001a24 <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a24:	4905      	ldr	r1, [pc, #20]	; (90001a3c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a2a:	4b05      	ldr	r3, [pc, #20]	; (90001a40 <_ZN8STM32DMAD1Ev+0x1c>)
90001a2c:	6001      	str	r1, [r0, #0]
90001a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a36:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a3a:	4770      	bx	lr
90001a3c:	90022c4c 	.word	0x90022c4c
90001a40:	e000e100 	.word	0xe000e100

90001a44 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a44:	4b0f      	ldr	r3, [pc, #60]	; (90001a84 <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a46:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a48:	490f      	ldr	r1, [pc, #60]	; (90001a88 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a4e:	480f      	ldr	r0, [pc, #60]	; (90001a8c <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a50:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a54:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a5a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a5e:	f002 0210 	and.w	r2, r2, #16
90001a62:	9201      	str	r2, [sp, #4]
90001a64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a66:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a68:	f042 0210 	orr.w	r2, r2, #16
90001a6c:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a70:	f022 0210 	bic.w	r2, r2, #16
90001a74:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a76:	4b06      	ldr	r3, [pc, #24]	; (90001a90 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a7c:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a7e:	b002      	add	sp, #8
90001a80:	4770      	bx	lr
90001a82:	bf00      	nop
90001a84:	58024400 	.word	0x58024400
90001a88:	2400b118 	.word	0x2400b118
90001a8c:	90001e3d 	.word	0x90001e3d
90001a90:	e000e100 	.word	0xe000e100

90001a94 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a94:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001a98:	4770      	bx	lr
90001a9a:	bf00      	nop

90001a9c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001a9c:	4909      	ldr	r1, [pc, #36]	; (90001ac4 <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aa2:	4b09      	ldr	r3, [pc, #36]	; (90001ac8 <_ZN8STM32DMAD0Ev+0x2c>)
90001aa4:	b510      	push	{r4, lr}
90001aa6:	6001      	str	r1, [r0, #0]
90001aa8:	4604      	mov	r4, r0
90001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001ab2:	f3bf 8f6f 	isb	sy
}
90001ab6:	f640 51a8 	movw	r1, #3496	; 0xda8
90001aba:	f01f fb82 	bl	900211c2 <_ZdlPvj>
90001abe:	4620      	mov	r0, r4
90001ac0:	bd10      	pop	{r4, pc}
90001ac2:	bf00      	nop
90001ac4:	90022c4c 	.word	0x90022c4c
90001ac8:	e000e100 	.word	0xe000e100

90001acc <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001acc:	b510      	push	{r4, lr}
90001ace:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ad0:	f04f 31ff 	mov.w	r1, #4294967295
90001ad4:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ad8:	f00a f8aa 	bl	9000bc30 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001adc:	6860      	ldr	r0, [r4, #4]
90001ade:	6803      	ldr	r3, [r0, #0]
90001ae0:	681b      	ldr	r3, [r3, #0]
90001ae2:	4798      	blx	r3
90001ae4:	b978      	cbnz	r0, 90001b06 <_ZN8STM32DMA5startEv+0x3a>
90001ae6:	7a63      	ldrb	r3, [r4, #9]
90001ae8:	b16b      	cbz	r3, 90001b06 <_ZN8STM32DMA5startEv+0x3a>
90001aea:	7a23      	ldrb	r3, [r4, #8]
90001aec:	b92b      	cbnz	r3, 90001afa <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001aee:	6822      	ldr	r2, [r4, #0]
90001af0:	4620      	mov	r0, r4
            started_by_external_job = false;
90001af2:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001af6:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001af8:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001afa:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b02:	f00a b8b9 	b.w	9000bc78 <osMutexRelease>
      return count_ == 0;
90001b06:	4b0b      	ldr	r3, [pc, #44]	; (90001b34 <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001b08:	68da      	ldr	r2, [r3, #12]
90001b0a:	2a00      	cmp	r2, #0
90001b0c:	d0f5      	beq.n	90001afa <_ZN8STM32DMA5startEv+0x2e>
90001b0e:	7a22      	ldrb	r2, [r4, #8]
90001b10:	2a00      	cmp	r2, #0
90001b12:	d1f2      	bne.n	90001afa <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001b14:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001b16:	2201      	movs	r2, #1
      return buffer_[head_];
90001b18:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b1a:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b1e:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b20:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b24:	f7ff fe9e 	bl	90001864 <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b28:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b30:	f00a b8a2 	b.w	9000bc78 <osMutexRelease>
90001b34:	24005bbc 	.word	0x24005bbc

90001b38 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b38:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b3a:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b3e:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b40:	b943      	cbnz	r3, 90001b54 <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b42:	6803      	ldr	r3, [r0, #0]
90001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b46:	4798      	blx	r3
      return count_ == 0;
90001b48:	4b15      	ldr	r3, [pc, #84]	; (90001ba0 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b4a:	68da      	ldr	r2, [r3, #12]
90001b4c:	b10a      	cbz	r2, 90001b52 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b4e:	7a22      	ldrb	r2, [r4, #8]
90001b50:	b1d2      	cbz	r2, 90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b52:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b54:	4b12      	ldr	r3, [pc, #72]	; (90001ba0 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b56:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b58:	2a00      	cmp	r2, #0
90001b5a:	d0fa      	beq.n	90001b52 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b5c:	7a01      	ldrb	r1, [r0, #8]
90001b5e:	2900      	cmp	r1, #0
90001b60:	d0f7      	beq.n	90001b52 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b62:	2100      	movs	r1, #0
      count_--;
90001b64:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b66:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b6a:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b6c:	1c41      	adds	r1, r0, #1
      count_--;
90001b6e:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b70:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b72:	fbb1 f2f5 	udiv	r2, r1, r5
90001b76:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b7e:	6059      	str	r1, [r3, #4]
    }
90001b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b84:	f7ff beb2 	b.w	900018ec <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b88:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b8a:	2201      	movs	r2, #1
      return buffer_[head_];
90001b8c:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b8e:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b92:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001b9c:	f7ff be62 	b.w	90001864 <DMA2D_CopyBuffer>
90001ba0:	24005bbc 	.word	0x24005bbc

90001ba4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001ba4:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001ba6:	7f8b      	ldrb	r3, [r1, #30]
90001ba8:	2b0a      	cmp	r3, #10
90001baa:	d83e      	bhi.n	90001c2a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001bac:	e8df f003 	tbb	[pc, r3]
90001bb0:	3d2a063b 	.word	0x3d2a063b
90001bb4:	063d3d3d 	.word	0x063d3d3d
90001bb8:	0606      	.short	0x0606
90001bba:	06          	.byte	0x06
90001bbb:	00          	.byte	0x00
90001bbc:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bbe:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001bc2:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bc4:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bc6:	4b1c      	ldr	r3, [pc, #112]	; (90001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bcc:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bd0:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bd2:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bd4:	6908      	ldr	r0, [r1, #16]
90001bd6:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bd8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001bda:	680d      	ldr	r5, [r1, #0]
90001bdc:	2d08      	cmp	r5, #8
90001bde:	d013      	beq.n	90001c08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001be0:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001be2:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001be4:	4c15      	ldr	r4, [pc, #84]	; (90001c3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001be6:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001be8:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bea:	0a0a      	lsrs	r2, r1, #8
90001bec:	0948      	lsrs	r0, r1, #5
90001bee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bf2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bf6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001bfa:	4302      	orrs	r2, r0
90001bfc:	430a      	orrs	r2, r1
90001bfe:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001c00:	601c      	str	r4, [r3, #0]
    }
}
90001c02:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c04:	2400      	movs	r4, #0
90001c06:	e7da      	b.n	90001bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c08:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c0a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c0e:	4a0c      	ldr	r2, [pc, #48]	; (90001c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001c10:	7f0c      	ldrb	r4, [r1, #28]
90001c12:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c16:	4c0b      	ldr	r4, [pc, #44]	; (90001c44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c18:	61da      	str	r2, [r3, #28]
90001c1a:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c1c:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c1e:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c20:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c22:	601c      	str	r4, [r3, #0]
}
90001c24:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c26:	2402      	movs	r4, #2
90001c28:	e7c9      	b.n	90001bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c2a:	4b07      	ldr	r3, [pc, #28]	; (90001c48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c2c:	2188      	movs	r1, #136	; 0x88
90001c2e:	4a07      	ldr	r2, [pc, #28]	; (90001c4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c30:	4807      	ldr	r0, [pc, #28]	; (90001c50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c32:	f01f faf5 	bl	90021220 <__assert_func>
90001c36:	bf00      	nop
90001c38:	52001000 	.word	0x52001000
90001c3c:	00030201 	.word	0x00030201
90001c40:	00010009 	.word	0x00010009
90001c44:	00020201 	.word	0x00020201
90001c48:	90022ae8 	.word	0x90022ae8
90001c4c:	90022b04 	.word	0x90022b04
90001c50:	90022b50 	.word	0x90022b50

90001c54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c56:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c5a:	f1be 0f0b 	cmp.w	lr, #11
90001c5e:	f200 80c1 	bhi.w	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c62:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c66:	0063      	.short	0x0063
90001c68:	004c0065 	.word	0x004c0065
90001c6c:	00bf00bf 	.word	0x00bf00bf
90001c70:	00bf00bf 	.word	0x00bf00bf
90001c74:	000c000c 	.word	0x000c000c
90001c78:	000c000c 	.word	0x000c000c
90001c7c:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c7e:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c80:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c84:	f1bc 0f0b 	cmp.w	ip, #11
90001c88:	f200 80ac 	bhi.w	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c8c:	e8df f00c 	tbb	[pc, ip]
90001c90:	aa0e4b52 	.word	0xaa0e4b52
90001c94:	06aaaaaa 	.word	0x06aaaaaa
90001c98:	06060606 	.word	0x06060606
    switch (format)
90001c9c:	f1ac 0307 	sub.w	r3, ip, #7
90001ca0:	2b03      	cmp	r3, #3
90001ca2:	f200 80a5 	bhi.w	90001df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001ca6:	2605      	movs	r6, #5
90001ca8:	2701      	movs	r7, #1
90001caa:	e001      	b.n	90001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cac:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001cae:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb0:	8a8b      	ldrh	r3, [r1, #20]
90001cb2:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cb4:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cb6:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb8:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cba:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cbc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc0:	4b52      	ldr	r3, [pc, #328]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc4:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cc6:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cc8:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cca:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ccc:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cce:	6908      	ldr	r0, [r1, #16]
90001cd0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cd2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cd4:	680a      	ldr	r2, [r1, #0]
90001cd6:	2a80      	cmp	r2, #128	; 0x80
90001cd8:	d03b      	beq.n	90001d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001cda:	d812      	bhi.n	90001d02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001cdc:	2a20      	cmp	r2, #32
90001cde:	d02c      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce0:	2a40      	cmp	r2, #64	; 0x40
90001ce2:	d02a      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce4:	2a04      	cmp	r2, #4
90001ce6:	d169      	bne.n	90001dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001ce8:	7f0a      	ldrb	r2, [r1, #28]
90001cea:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cee:	4a48      	ldr	r2, [pc, #288]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf0:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001cf4:	61dd      	str	r5, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cf6:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cf8:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cfa:	601a      	str	r2, [r3, #0]
}
90001cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cfe:	2500      	movs	r5, #0
90001d00:	e7be      	b.n	90001c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001d02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001d06:	d067      	beq.n	90001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001d08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001d0c:	d156      	bne.n	90001dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d0e:	7f0c      	ldrb	r4, [r1, #28]
90001d10:	4a40      	ldr	r2, [pc, #256]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001d12:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001d16:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d18:	4a3d      	ldr	r2, [pc, #244]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d1a:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d1c:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d1e:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d20:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d22:	601a      	str	r2, [r3, #0]
}
90001d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d26:	2601      	movs	r6, #1
90001d28:	4637      	mov	r7, r6
90001d2a:	e7c1      	b.n	90001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d2c:	2502      	movs	r5, #2
90001d2e:	e7a7      	b.n	90001c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d30:	2501      	movs	r5, #1
90001d32:	e7a5      	b.n	90001c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d34:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d36:	4637      	mov	r7, r6
90001d38:	e7ba      	b.n	90001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d3a:	7f0b      	ldrb	r3, [r1, #28]
90001d3c:	4a33      	ldr	r2, [pc, #204]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d3e:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d42:	4b33      	ldr	r3, [pc, #204]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d44:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d48:	61d5      	str	r5, [r2, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d4a:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d4c:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d4e:	6013      	str	r3, [r2, #0]
}
90001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d52:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d54:	1d14      	adds	r4, r2, #4
90001d56:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d58:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d5a:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d5c:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d60:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d64:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d66:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d68:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d6a:	b9b1      	cbnz	r1, 90001d9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d6c:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d6e:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d70:	69d8      	ldr	r0, [r3, #28]
90001d72:	4a29      	ldr	r2, [pc, #164]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d74:	3901      	subs	r1, #1
90001d76:	4002      	ands	r2, r0
90001d78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d7c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d7e:	4a23      	ldr	r2, [pc, #140]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d80:	69d3      	ldr	r3, [r2, #28]
90001d82:	f043 0320 	orr.w	r3, r3, #32
90001d86:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d88:	69d3      	ldr	r3, [r2, #28]
90001d8a:	069b      	lsls	r3, r3, #26
90001d8c:	d4fc      	bmi.n	90001d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d8e:	2310      	movs	r3, #16
90001d90:	6093      	str	r3, [r2, #8]
            if(blend)
90001d92:	b324      	cbz	r4, 90001dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d94:	4b1e      	ldr	r3, [pc, #120]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d96:	6013      	str	r3, [r2, #0]
}
90001d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001d9a:	2901      	cmp	r1, #1
90001d9c:	d12e      	bne.n	90001dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d9e:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001da0:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001da2:	69d8      	ldr	r0, [r3, #28]
90001da4:	4a1c      	ldr	r2, [pc, #112]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001da6:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001daa:	bf18      	it	ne
90001dac:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001dae:	4002      	ands	r2, r0
90001db0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001db4:	f042 0210 	orr.w	r2, r2, #16
90001db8:	61da      	str	r2, [r3, #28]
                break;
90001dba:	e7e0      	b.n	90001d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dbc:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001dbe:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc0:	4b12      	ldr	r3, [pc, #72]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001dc2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dc6:	bf14      	ite	ne
90001dc8:	4a14      	ldrne	r2, [pc, #80]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dca:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dce:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dd2:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dd4:	601a      	str	r2, [r3, #0]
}
90001dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dd8:	7f0c      	ldrb	r4, [r1, #28]
90001dda:	4a11      	ldr	r2, [pc, #68]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001ddc:	e799      	b.n	90001d12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dde:	4b0f      	ldr	r3, [pc, #60]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001de0:	6013      	str	r3, [r2, #0]
}
90001de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001de4:	4b0f      	ldr	r3, [pc, #60]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001de6:	2167      	movs	r1, #103	; 0x67
90001de8:	4a0f      	ldr	r2, [pc, #60]	; (90001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001dea:	4810      	ldr	r0, [pc, #64]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dec:	f01f fa18 	bl	90021220 <__assert_func>
        assert(0 && "Unsupported Format!");
90001df0:	4b0c      	ldr	r3, [pc, #48]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001df2:	2188      	movs	r1, #136	; 0x88
90001df4:	4a0e      	ldr	r2, [pc, #56]	; (90001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001df6:	480d      	ldr	r0, [pc, #52]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001df8:	f01f fa12 	bl	90021220 <__assert_func>
                assert(0 && "Unsupported format");
90001dfc:	4b0d      	ldr	r3, [pc, #52]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001dfe:	f44f 7189 	mov.w	r1, #274	; 0x112
90001e02:	4a0d      	ldr	r2, [pc, #52]	; (90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001e04:	4809      	ldr	r0, [pc, #36]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e06:	f01f fa0b 	bl	90021220 <__assert_func>
90001e0a:	bf00      	nop
90001e0c:	52001000 	.word	0x52001000
90001e10:	00020201 	.word	0x00020201
90001e14:	00020009 	.word	0x00020009
90001e18:	ffff00ef 	.word	0xffff00ef
90001e1c:	00010201 	.word	0x00010201
90001e20:	0002000a 	.word	0x0002000a
90001e24:	90022ae8 	.word	0x90022ae8
90001e28:	90022b9c 	.word	0x90022b9c
90001e2c:	90022b50 	.word	0x90022b50
90001e30:	90022b04 	.word	0x90022b04
90001e34:	90022be8 	.word	0x90022be8
90001e38:	90022c04 	.word	0x90022c04

90001e3c <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e3c:	4b1f      	ldr	r3, [pc, #124]	; (90001ebc <DMA2D_XferCpltCallback+0x80>)
90001e3e:	4920      	ldr	r1, [pc, #128]	; (90001ec0 <DMA2D_XferCpltCallback+0x84>)
90001e40:	681b      	ldr	r3, [r3, #0]
    {
90001e42:	b570      	push	{r4, r5, r6, lr}
90001e44:	685c      	ldr	r4, [r3, #4]
90001e46:	6823      	ldr	r3, [r4, #0]
90001e48:	695a      	ldr	r2, [r3, #20]
90001e4a:	428a      	cmp	r2, r1
90001e4c:	d125      	bne.n	90001e9a <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e4e:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e52:	b942      	cbnz	r2, 90001e66 <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e56:	4620      	mov	r0, r4
90001e58:	4798      	blx	r3
      return count_ == 0;
90001e5a:	4b1a      	ldr	r3, [pc, #104]	; (90001ec4 <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e5c:	68da      	ldr	r2, [r3, #12]
90001e5e:	b10a      	cbz	r2, 90001e64 <DMA2D_XferCpltCallback+0x28>
90001e60:	7a22      	ldrb	r2, [r4, #8]
90001e62:	b1f2      	cbz	r2, 90001ea2 <DMA2D_XferCpltCallback+0x66>
    }
90001e64:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e66:	4b17      	ldr	r3, [pc, #92]	; (90001ec4 <DMA2D_XferCpltCallback+0x88>)
90001e68:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e6a:	2a00      	cmp	r2, #0
90001e6c:	d0fa      	beq.n	90001e64 <DMA2D_XferCpltCallback+0x28>
90001e6e:	7a21      	ldrb	r1, [r4, #8]
90001e70:	2900      	cmp	r1, #0
90001e72:	d0f7      	beq.n	90001e64 <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e74:	2100      	movs	r1, #0
      count_--;
90001e76:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e78:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e7c:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e7e:	1c41      	adds	r1, r0, #1
      count_--;
90001e80:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e82:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e84:	fbb1 f2f5 	udiv	r2, r1, r5
90001e88:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e8c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e94:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e96:	f7ff bd29 	b.w	900018ec <DMA2D_ExternalJobCompleted>
90001e9a:	4620      	mov	r0, r4
90001e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ea0:	4710      	bx	r2
      return buffer_[head_];
90001ea2:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001ea4:	2201      	movs	r2, #1
      return buffer_[head_];
90001ea6:	3002      	adds	r0, #2
                started_by_external_job = true;
90001ea8:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001eac:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001eae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001eb6:	f7ff bcd5 	b.w	90001864 <DMA2D_CopyBuffer>
90001eba:	bf00      	nop
90001ebc:	240264e4 	.word	0x240264e4
90001ec0:	90001b39 	.word	0x90001b39
90001ec4:	24005bbc 	.word	0x24005bbc

90001ec8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001ec8:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eca:	4b10      	ldr	r3, [pc, #64]	; (90001f0c <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001ecc:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ece:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001ed0:	2500      	movs	r5, #0
90001ed2:	300c      	adds	r0, #12
90001ed4:	2260      	movs	r2, #96	; 0x60
90001ed6:	7235      	strb	r5, [r6, #8]
90001ed8:	7275      	strb	r5, [r6, #9]
90001eda:	6070      	str	r0, [r6, #4]
90001edc:	f844 3b20 	str.w	r3, [r4], #32
90001ee0:	4621      	mov	r1, r4
90001ee2:	f00e fd6d 	bl	900109c0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001ee6:	4621      	mov	r1, r4
90001ee8:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001eec:	60cd      	str	r5, [r1, #12]
90001eee:	3124      	adds	r1, #36	; 0x24
90001ef0:	428b      	cmp	r3, r1
90001ef2:	d1fb      	bne.n	90001eec <_ZN8STM32DMAC1Ev+0x24>
90001ef4:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001ef8:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001efa:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001efe:	f009 fe5d 	bl	9000bbbc <osMutexNew>
90001f02:	4603      	mov	r3, r0
}
90001f04:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001f06:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001f0a:	bd70      	pop	{r4, r5, r6, pc}
90001f0c:	90022c4c 	.word	0x90022c4c

90001f10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001f10:	2001      	movs	r0, #1
90001f12:	4770      	bx	lr

90001f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001f14:	2038      	movs	r0, #56	; 0x38
90001f16:	4770      	bx	lr

90001f18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
90001f1c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    }
90001f20:	3008      	adds	r0, #8
90001f22:	4770      	bx	lr

90001f24 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
90001f28:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    }
90001f2c:	3008      	adds	r0, #8
90001f2e:	4770      	bx	lr

90001f30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f30:	2001      	movs	r0, #1
90001f32:	4770      	bx	lr

90001f34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f34:	f44f 7067 	mov.w	r0, #924	; 0x39c
90001f38:	4770      	bx	lr
90001f3a:	bf00      	nop

90001f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f3c:	f44f 7367 	mov.w	r3, #924	; 0x39c
90001f40:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f44:	3008      	adds	r0, #8
90001f46:	4770      	bx	lr

90001f48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f48:	f44f 7367 	mov.w	r3, #924	; 0x39c
90001f4c:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f50:	3008      	adds	r0, #8
90001f52:	4770      	bx	lr

90001f54 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f54:	2001      	movs	r0, #1
90001f56:	4770      	bx	lr

90001f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f58:	2010      	movs	r0, #16
90001f5a:	4770      	bx	lr

90001f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f5c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f60:	3008      	adds	r0, #8
90001f62:	4770      	bx	lr

90001f64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f64:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f68:	3008      	adds	r0, #8
90001f6a:	4770      	bx	lr

90001f6c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001f6c:	4608      	mov	r0, r1
90001f6e:	f002 bf71 	b.w	90004e54 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001f72:	bf00      	nop

90001f74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001f74:	4b03      	ldr	r3, [pc, #12]	; (90001f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
90001f76:	b510      	push	{r4, lr}
90001f78:	4604      	mov	r4, r0
90001f7a:	6003      	str	r3, [r0, #0]
90001f7c:	f00d fb7d 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f80:	4620      	mov	r0, r4
90001f82:	bd10      	pop	{r4, pc}
90001f84:	90022d04 	.word	0x90022d04

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
90001f88:	4b05      	ldr	r3, [pc, #20]	; (90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev+0x18>)
90001f8a:	b510      	push	{r4, lr}
90001f8c:	4604      	mov	r4, r0
90001f8e:	6003      	str	r3, [r0, #0]
90001f90:	f00d fb73 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f94:	2140      	movs	r1, #64	; 0x40
90001f96:	4620      	mov	r0, r4
90001f98:	f01f f913 	bl	900211c2 <_ZdlPvj>
90001f9c:	4620      	mov	r0, r4
90001f9e:	bd10      	pop	{r4, pc}
90001fa0:	90022d04 	.word	0x90022d04

90001fa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fa4:	4b03      	ldr	r3, [pc, #12]	; (90001fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fa6:	b510      	push	{r4, lr}
90001fa8:	4604      	mov	r4, r0
90001faa:	6003      	str	r3, [r0, #0]
90001fac:	f00d fb65 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fb0:	4620      	mov	r0, r4
90001fb2:	bd10      	pop	{r4, pc}
90001fb4:	90022cd0 	.word	0x90022cd0

90001fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fb8:	4b06      	ldr	r3, [pc, #24]	; (90001fd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90001fba:	b510      	push	{r4, lr}
90001fbc:	4604      	mov	r4, r0
90001fbe:	6003      	str	r3, [r0, #0]
90001fc0:	f00d fb5b 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fc4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
90001fc8:	4620      	mov	r0, r4
90001fca:	f01f f8fa 	bl	900211c2 <_ZdlPvj>
90001fce:	4620      	mov	r0, r4
90001fd0:	bd10      	pop	{r4, pc}
90001fd2:	bf00      	nop
90001fd4:	90022cd0 	.word	0x90022cd0

90001fd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fd8:	4b03      	ldr	r3, [pc, #12]	; (90001fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fda:	b510      	push	{r4, lr}
90001fdc:	4604      	mov	r4, r0
90001fde:	6003      	str	r3, [r0, #0]
90001fe0:	f00d fb4b 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fe4:	4620      	mov	r0, r4
90001fe6:	bd10      	pop	{r4, pc}
90001fe8:	90022c9c 	.word	0x90022c9c

90001fec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fec:	4b05      	ldr	r3, [pc, #20]	; (90002004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fee:	b510      	push	{r4, lr}
90001ff0:	4604      	mov	r4, r0
90001ff2:	6003      	str	r3, [r0, #0]
90001ff4:	f00d fb41 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001ff8:	2118      	movs	r1, #24
90001ffa:	4620      	mov	r0, r4
90001ffc:	f01f f8e1 	bl	900211c2 <_ZdlPvj>
90002000:	4620      	mov	r0, r4
90002002:	bd10      	pop	{r4, pc}
90002004:	90022c9c 	.word	0x90022c9c

90002008 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002008:	b510      	push	{r4, lr}
9000200a:	4a0c      	ldr	r2, [pc, #48]	; (9000203c <_ZN12FrontendHeapD1Ev+0x34>)
9000200c:	4604      	mov	r4, r0
9000200e:	4b0c      	ldr	r3, [pc, #48]	; (90002040 <_ZN12FrontendHeapD1Ev+0x38>)
90002010:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
90002014:	6022      	str	r2, [r4, #0]
90002016:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
9000201a:	f00d fb2e 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
9000201e:	4620      	mov	r0, r4
90002020:	4b08      	ldr	r3, [pc, #32]	; (90002044 <_ZN12FrontendHeapD1Ev+0x3c>)
90002022:	f840 3f2c 	str.w	r3, [r0, #44]!
90002026:	f00d fb28 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
9000202a:	4620      	mov	r0, r4
9000202c:	4b06      	ldr	r3, [pc, #24]	; (90002048 <_ZN12FrontendHeapD1Ev+0x40>)
9000202e:	f840 3f14 	str.w	r3, [r0, #20]!
90002032:	f00d fb22 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90002036:	4620      	mov	r0, r4
90002038:	bd10      	pop	{r4, pc}
9000203a:	bf00      	nop
9000203c:	90022d38 	.word	0x90022d38
90002040:	90022d04 	.word	0x90022d04
90002044:	90022cd0 	.word	0x90022cd0
90002048:	90022c9c 	.word	0x90022c9c

9000204c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
9000204c:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
9000204e:	4c0c      	ldr	r4, [pc, #48]	; (90002080 <__tcf_0+0x34>)
90002050:	4a0c      	ldr	r2, [pc, #48]	; (90002084 <__tcf_0+0x38>)
90002052:	4b0d      	ldr	r3, [pc, #52]	; (90002088 <__tcf_0+0x3c>)
90002054:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
90002058:	6022      	str	r2, [r4, #0]
9000205a:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
9000205e:	f00d fb0c 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
90002062:	4620      	mov	r0, r4
90002064:	4b09      	ldr	r3, [pc, #36]	; (9000208c <__tcf_0+0x40>)
90002066:	f840 3f2c 	str.w	r3, [r0, #44]!
9000206a:	f00d fb06 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
9000206e:	4620      	mov	r0, r4
90002070:	4b07      	ldr	r3, [pc, #28]	; (90002090 <__tcf_0+0x44>)
        static FrontendHeap instance;
90002072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90002076:	f840 3f14 	str.w	r3, [r0, #20]!
9000207a:	f00d bafe 	b.w	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
9000207e:	bf00      	nop
90002080:	24005bf0 	.word	0x24005bf0
90002084:	90022d38 	.word	0x90022d38
90002088:	90022d04 	.word	0x90022d04
9000208c:	90022cd0 	.word	0x90022cd0
90002090:	90022c9c 	.word	0x90022c9c

90002094 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002094:	b510      	push	{r4, lr}
90002096:	4a0e      	ldr	r2, [pc, #56]	; (900020d0 <_ZN12FrontendHeapD0Ev+0x3c>)
90002098:	4604      	mov	r4, r0
9000209a:	4b0e      	ldr	r3, [pc, #56]	; (900020d4 <_ZN12FrontendHeapD0Ev+0x40>)
9000209c:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
900020a0:	6022      	str	r2, [r4, #0]
900020a2:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
900020a6:	f00d fae8 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
900020aa:	4620      	mov	r0, r4
900020ac:	4b0a      	ldr	r3, [pc, #40]	; (900020d8 <_ZN12FrontendHeapD0Ev+0x44>)
900020ae:	f840 3f2c 	str.w	r3, [r0, #44]!
900020b2:	f00d fae2 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
900020b6:	4b09      	ldr	r3, [pc, #36]	; (900020dc <_ZN12FrontendHeapD0Ev+0x48>)
900020b8:	4620      	mov	r0, r4
900020ba:	f840 3f14 	str.w	r3, [r0, #20]!
900020be:	f00d fadc 	bl	9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>
900020c2:	4620      	mov	r0, r4
900020c4:	f240 5174 	movw	r1, #1396	; 0x574
900020c8:	f01f f87b 	bl	900211c2 <_ZdlPvj>
900020cc:	4620      	mov	r0, r4
900020ce:	bd10      	pop	{r4, pc}
900020d0:	90022d38 	.word	0x90022d38
900020d4:	90022d04 	.word	0x90022d04
900020d8:	90022cd0 	.word	0x90022cd0
900020dc:	90022c9c 	.word	0x90022c9c

900020e0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900020e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900020e4:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900020e6:	2400      	movs	r4, #0
900020e8:	f002 fcd2 	bl	90004a90 <_ZN14BitmapDatabase11getInstanceEv>
900020ec:	4605      	mov	r5, r0
900020ee:	f002 fcd3 	bl	90004a98 <_ZN14BitmapDatabase15getInstanceSizeEv>
900020f2:	4623      	mov	r3, r4
900020f4:	4601      	mov	r1, r0
900020f6:	4622      	mov	r2, r4
900020f8:	4628      	mov	r0, r5
900020fa:	9400      	str	r4, [sp, #0]
900020fc:	f013 fa6c 	bl	900155d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
90002100:	4b28      	ldr	r3, [pc, #160]	; (900021a4 <touchgfx_init+0xc4>)
90002102:	4a29      	ldr	r2, [pc, #164]	; (900021a8 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
90002104:	4620      	mov	r0, r4
        static FrontendHeap instance;
90002106:	4c29      	ldr	r4, [pc, #164]	; (900021ac <touchgfx_init+0xcc>)
90002108:	601a      	str	r2, [r3, #0]
9000210a:	f003 f96b 	bl	900053e4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
9000210e:	4828      	ldr	r0, [pc, #160]	; (900021b0 <touchgfx_init+0xd0>)
90002110:	f013 f9ca 	bl	900154a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
90002114:	7823      	ldrb	r3, [r4, #0]
90002116:	f3bf 8f5b 	dmb	ish
9000211a:	07db      	lsls	r3, r3, #31
9000211c:	d505      	bpl.n	9000212a <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
9000211e:	4825      	ldr	r0, [pc, #148]	; (900021b4 <touchgfx_init+0xd4>)
}
90002120:	b002      	add	sp, #8
90002122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002126:	f7fe bbc9 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
9000212a:	4620      	mov	r0, r4
9000212c:	f01f f84b 	bl	900211c6 <__cxa_guard_acquire>
90002130:	2800      	cmp	r0, #0
90002132:	d0f4      	beq.n	9000211e <touchgfx_init+0x3e>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002134:	4d20      	ldr	r5, [pc, #128]	; (900021b8 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90002136:	4b21      	ldr	r3, [pc, #132]	; (900021bc <touchgfx_init+0xdc>)
90002138:	f505 6683 	add.w	r6, r5, #1048	; 0x418
9000213c:	f105 0014 	add.w	r0, r5, #20
90002140:	f105 082c 	add.w	r8, r5, #44	; 0x2c
90002144:	f505 7774 	add.w	r7, r5, #976	; 0x3d0
90002148:	602b      	str	r3, [r5, #0]
9000214a:	60ef      	str	r7, [r5, #12]
9000214c:	612e      	str	r6, [r5, #16]
9000214e:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002152:	f00d fa93 	bl	9000f67c <_ZN8touchgfx17AbstractPartitionC1Ev>
90002156:	4b1a      	ldr	r3, [pc, #104]	; (900021c0 <touchgfx_init+0xe0>)
90002158:	4640      	mov	r0, r8
9000215a:	616b      	str	r3, [r5, #20]
9000215c:	f00d fa8e 	bl	9000f67c <_ZN8touchgfx17AbstractPartitionC1Ev>
90002160:	4b18      	ldr	r3, [pc, #96]	; (900021c4 <touchgfx_init+0xe4>)
90002162:	4638      	mov	r0, r7
90002164:	62eb      	str	r3, [r5, #44]	; 0x2c
90002166:	f00d fa89 	bl	9000f67c <_ZN8touchgfx17AbstractPartitionC1Ev>
9000216a:	4b17      	ldr	r3, [pc, #92]	; (900021c8 <touchgfx_init+0xe8>)
9000216c:	f505 6082 	add.w	r0, r5, #1040	; 0x410
90002170:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
90002174:	f003 f9b8 	bl	900054e8 <_ZN5ModelC1Ev>
90002178:	462a      	mov	r2, r5
9000217a:	f505 6182 	add.w	r1, r5, #1040	; 0x410
9000217e:	4630      	mov	r0, r6
90002180:	f003 f9a6 	bl	900054d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002184:	4630      	mov	r0, r6
90002186:	f002 fe65 	bl	90004e54 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
9000218a:	4810      	ldr	r0, [pc, #64]	; (900021cc <touchgfx_init+0xec>)
9000218c:	f01f f866 	bl	9002125c <atexit>
90002190:	4620      	mov	r0, r4
90002192:	f01f f824 	bl	900211de <__cxa_guard_release>
90002196:	4807      	ldr	r0, [pc, #28]	; (900021b4 <touchgfx_init+0xd4>)
}
90002198:	b002      	add	sp, #8
9000219a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000219e:	f7fe bb8d 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
900021a2:	bf00      	nop
900021a4:	24026540 	.word	0x24026540
900021a8:	24006f98 	.word	0x24006f98
900021ac:	24005bec 	.word	0x24005bec
900021b0:	24000020 	.word	0x24000020
900021b4:	24006f10 	.word	0x24006f10
900021b8:	24005bf0 	.word	0x24005bf0
900021bc:	90022d38 	.word	0x90022d38
900021c0:	90022c9c 	.word	0x90022c9c
900021c4:	90022cd0 	.word	0x90022cd0
900021c8:	90022d04 	.word	0x90022d04
900021cc:	9000204d 	.word	0x9000204d

900021d0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900021d0:	4770      	bx	lr
900021d2:	bf00      	nop

900021d4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900021d4:	4801      	ldr	r0, [pc, #4]	; (900021dc <touchgfx_taskEntry+0x8>)
900021d6:	f7fe bb37 	b.w	90000848 <_ZN11TouchGFXHAL9taskEntryEv>
900021da:	bf00      	nop
900021dc:	24006f10 	.word	0x24006f10

900021e0 <_GLOBAL__sub_I_touchgfx_init>:
}
900021e0:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900021e2:	4b26      	ldr	r3, [pc, #152]	; (9000227c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900021e4:	4c26      	ldr	r4, [pc, #152]	; (90002280 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900021e6:	4e27      	ldr	r6, [pc, #156]	; (90002284 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900021e8:	4d27      	ldr	r5, [pc, #156]	; (90002288 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900021ea:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900021ec:	4630      	mov	r0, r6
900021ee:	f7ff fe6b 	bl	90001ec8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900021f2:	4628      	mov	r0, r5
900021f4:	f016 fafa 	bl	900187ec <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
900021f8:	4b24      	ldr	r3, [pc, #144]	; (9000228c <_GLOBAL__sub_I_touchgfx_init+0xac>)
900021fa:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900021fc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002200:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002204:	62da      	str	r2, [r3, #44]	; 0x2c
90002206:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
90002208:	669a      	str	r2, [r3, #104]	; 0x68
9000220a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
9000220e:	671a      	str	r2, [r3, #112]	; 0x70
90002210:	e9c3 4203 	strd	r4, r2, [r3, #12]
90002214:	4c1e      	ldr	r4, [pc, #120]	; (90002290 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
90002216:	665c      	str	r4, [r3, #100]	; 0x64
90002218:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
9000221c:	675c      	str	r4, [r3, #116]	; 0x74
9000221e:	2401      	movs	r4, #1
90002220:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
90002224:	4c1b      	ldr	r4, [pc, #108]	; (90002294 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
90002226:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002228:	4c1b      	ldr	r4, [pc, #108]	; (90002298 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
9000222a:	8020      	strh	r0, [r4, #0]
9000222c:	4c1b      	ldr	r4, [pc, #108]	; (9000229c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lastRenderMethod(HARDWARE)
9000222e:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002232:	8020      	strh	r0, [r4, #0]
          lastRenderMethod(HARDWARE)
90002234:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002238:	4c19      	ldr	r4, [pc, #100]	; (900022a0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
9000223a:	481a      	ldr	r0, [pc, #104]	; (900022a4 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          lastRenderMethod(HARDWARE)
9000223c:	649d      	str	r5, [r3, #72]	; 0x48
9000223e:	e9c3 2205 	strd	r2, r2, [r3, #20]
90002242:	e9c3 2207 	strd	r2, r2, [r3, #28]
90002246:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
9000224a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
9000224e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
90002252:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
90002256:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
9000225a:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000225e:	8021      	strh	r1, [r4, #0]
90002260:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
90002262:	4c11      	ldr	r4, [pc, #68]	; (900022a8 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
90002264:	4811      	ldr	r0, [pc, #68]	; (900022ac <_GLOBAL__sub_I_touchgfx_init+0xcc>)
90002266:	4912      	ldr	r1, [pc, #72]	; (900022b0 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
          cc_in(0)
90002268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
9000226c:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
9000226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
90002272:	6018      	str	r0, [r3, #0]
90002274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90002278:	67d9      	str	r1, [r3, #124]	; 0x7c
}
9000227a:	bd70      	pop	{r4, r5, r6, pc}
9000227c:	90022430 	.word	0x90022430
90002280:	24006164 	.word	0x24006164
90002284:	24006168 	.word	0x24006168
90002288:	24006f9c 	.word	0x24006f9c
9000228c:	24006f10 	.word	0x24006f10
90002290:	01000001 	.word	0x01000001
90002294:	240264e4 	.word	0x240264e4
90002298:	240264d8 	.word	0x240264d8
9000229c:	240264de 	.word	0x240264de
900022a0:	240264da 	.word	0x240264da
900022a4:	240264e0 	.word	0x240264e0
900022a8:	240264dc 	.word	0x240264dc
900022ac:	900225c0 	.word	0x900225c0
900022b0:	90022408 	.word	0x90022408

900022b4 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
900022b4:	4801      	ldr	r0, [pc, #4]	; (900022bc <_GLOBAL__sub_D_touchgfx_init+0x8>)
900022b6:	f7ff bbb5 	b.w	90001a24 <_ZN8STM32DMAD1Ev>
900022ba:	bf00      	nop
900022bc:	24006168 	.word	0x24006168

900022c0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900022c0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900022c4:	b112      	cbz	r2, 900022cc <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900022c6:	6803      	ldr	r3, [r0, #0]
900022c8:	695b      	ldr	r3, [r3, #20]
900022ca:	4718      	bx	r3
        }
    }
900022cc:	4770      	bx	lr
900022ce:	bf00      	nop

900022d0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900022d0:	2000      	movs	r0, #0
900022d2:	4770      	bx	lr

900022d4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900022d4:	8081      	strh	r1, [r0, #4]
    }
900022d6:	4770      	bx	lr

900022d8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900022d8:	80c1      	strh	r1, [r0, #6]
    }
900022da:	4770      	bx	lr

900022dc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900022dc:	8101      	strh	r1, [r0, #8]
    }
900022de:	4770      	bx	lr

900022e0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900022e0:	8141      	strh	r1, [r0, #10]
    }
900022e2:	4770      	bx	lr

900022e4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900022e4:	4770      	bx	lr
900022e6:	bf00      	nop

900022e8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900022e8:	4770      	bx	lr
900022ea:	bf00      	nop

900022ec <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900022ec:	4770      	bx	lr
900022ee:	bf00      	nop

900022f0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900022f0:	4770      	bx	lr
900022f2:	bf00      	nop

900022f4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900022f4:	4770      	bx	lr
900022f6:	bf00      	nop

900022f8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900022f8:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900022fc:	6803      	ldr	r3, [r0, #0]
900022fe:	eba2 020c 	sub.w	r2, r2, ip
90002302:	f8b0 c004 	ldrh.w	ip, [r0, #4]
90002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002308:	eba1 010c 	sub.w	r1, r1, ip
9000230c:	b212      	sxth	r2, r2
9000230e:	b209      	sxth	r1, r1
90002310:	4718      	bx	r3
90002312:	bf00      	nop

90002314 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002314:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002316:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
9000231a:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000231e:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
90002322:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
90002326:	6010      	str	r0, [r2, #0]
    }
90002328:	4770      	bx	lr
9000232a:	bf00      	nop

9000232c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
9000232c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002330:	b11a      	cbz	r2, 9000233a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
90002332:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
90002336:	b102      	cbz	r2, 9000233a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002338:	6018      	str	r0, [r3, #0]
        }
    }
9000233a:	4770      	bx	lr

9000233c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
9000233c:	2000      	movs	r0, #0
9000233e:	4770      	bx	lr

90002340 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002340:	4b03      	ldr	r3, [pc, #12]	; (90002350 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
90002342:	2290      	movs	r2, #144	; 0x90
90002344:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002348:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
9000234c:	4770      	bx	lr
9000234e:	bf00      	nop
90002350:	e000e100 	.word	0xe000e100

90002354 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002354:	4a09      	ldr	r2, [pc, #36]	; (9000237c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
90002356:	490a      	ldr	r1, [pc, #40]	; (90002380 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002358:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000235a:	480a      	ldr	r0, [pc, #40]	; (90002384 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000235c:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002360:	3b01      	subs	r3, #1
90002362:	b29b      	uxth	r3, r3
90002364:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002366:	6911      	ldr	r1, [r2, #16]
90002368:	f3c1 010a 	ubfx	r1, r1, #0, #11
9000236c:	3901      	subs	r1, #1
9000236e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002370:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
90002372:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002374:	f043 0301 	orr.w	r3, r3, #1
90002378:	6353      	str	r3, [r2, #52]	; 0x34
}
9000237a:	4770      	bx	lr
9000237c:	50001000 	.word	0x50001000
90002380:	24007018 	.word	0x24007018
90002384:	24007016 	.word	0x24007016

90002388 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002388:	4b01      	ldr	r3, [pc, #4]	; (90002390 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
9000238a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
9000238e:	4770      	bx	lr
90002390:	50001000 	.word	0x50001000

90002394 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002394:	4b02      	ldr	r3, [pc, #8]	; (900023a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002396:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002398:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000239c:	625a      	str	r2, [r3, #36]	; 0x24
}
9000239e:	4770      	bx	lr
900023a0:	50001000 	.word	0x50001000

900023a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
900023a4:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
900023a8:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
900023aa:	4770      	bx	lr

900023ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023ac:	4770      	bx	lr
900023ae:	bf00      	nop

900023b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
900023b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
900023b4:	4611      	mov	r1, r2
900023b6:	6840      	ldr	r0, [r0, #4]
900023b8:	6803      	ldr	r3, [r0, #0]
900023ba:	68db      	ldr	r3, [r3, #12]
900023bc:	4718      	bx	r3
900023be:	bf00      	nop

900023c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023c0:	b510      	push	{r4, lr}
900023c2:	4604      	mov	r4, r0
900023c4:	2148      	movs	r1, #72	; 0x48
900023c6:	f01e fefc 	bl	900211c2 <_ZdlPvj>
900023ca:	4620      	mov	r0, r4
900023cc:	bd10      	pop	{r4, pc}
900023ce:	bf00      	nop

900023d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900023d0:	b911      	cbnz	r1, 900023d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900023d2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900023d6:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900023d8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900023da:	4a03      	ldr	r2, [pc, #12]	; (900023e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900023dc:	f44f 71b8 	mov.w	r1, #368	; 0x170
900023e0:	4b02      	ldr	r3, [pc, #8]	; (900023ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900023e2:	4803      	ldr	r0, [pc, #12]	; (900023f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900023e4:	f01e ff1c 	bl	90021220 <__assert_func>
900023e8:	90022d58 	.word	0x90022d58
900023ec:	90022d44 	.word	0x90022d44
900023f0:	90022ee4 	.word	0x90022ee4

900023f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900023f4:	b921      	cbnz	r1, 90002400 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900023f6:	6840      	ldr	r0, [r0, #4]
900023f8:	4611      	mov	r1, r2
900023fa:	6803      	ldr	r3, [r0, #0]
900023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023fe:	4718      	bx	r3
        assert(handle < no_streams);
90002400:	4b03      	ldr	r3, [pc, #12]	; (90002410 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
90002402:	f44f 71b5 	mov.w	r1, #362	; 0x16a
90002406:	4a03      	ldr	r2, [pc, #12]	; (90002414 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
90002408:	4803      	ldr	r0, [pc, #12]	; (90002418 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
9000240a:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000240c:	f01e ff08 	bl	90021220 <__assert_func>
90002410:	90022d44 	.word	0x90022d44
90002414:	90022f28 	.word	0x90022f28
90002418:	90022ee4 	.word	0x90022ee4

9000241c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
9000241c:	b909      	cbnz	r1, 90002422 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
9000241e:	68c0      	ldr	r0, [r0, #12]
90002420:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
90002422:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002424:	4a02      	ldr	r2, [pc, #8]	; (90002430 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
90002426:	2179      	movs	r1, #121	; 0x79
90002428:	4b02      	ldr	r3, [pc, #8]	; (90002434 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
9000242a:	4803      	ldr	r0, [pc, #12]	; (90002438 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
9000242c:	f01e fef8 	bl	90021220 <__assert_func>
90002430:	900230d8 	.word	0x900230d8
90002434:	90022d44 	.word	0x90022d44
90002438:	90022ee4 	.word	0x90022ee4

9000243c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
9000243c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000243e:	460c      	mov	r4, r1
90002440:	b949      	cbnz	r1, 90002456 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
90002442:	4611      	mov	r1, r2
90002444:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
90002446:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002448:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
9000244a:	681c      	ldr	r4, [r3, #0]
9000244c:	4618      	mov	r0, r3
9000244e:	68a3      	ldr	r3, [r4, #8]
    }
90002450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
90002454:	4718      	bx	r3
        assert(handle < no_streams);
90002456:	4b03      	ldr	r3, [pc, #12]	; (90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002458:	2190      	movs	r1, #144	; 0x90
9000245a:	4a03      	ldr	r2, [pc, #12]	; (90002468 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
9000245c:	4803      	ldr	r0, [pc, #12]	; (9000246c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
9000245e:	f01e fedf 	bl	90021220 <__assert_func>
90002462:	bf00      	nop
90002464:	90022d44 	.word	0x90022d44
90002468:	9002328c 	.word	0x9002328c
9000246c:	90022ee4 	.word	0x90022ee4

90002470 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002470:	b921      	cbnz	r1, 9000247c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
90002472:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
90002476:	e9c0 3206 	strd	r3, r2, [r0, #24]
9000247a:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
9000247c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000247e:	4a03      	ldr	r2, [pc, #12]	; (9000248c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002480:	2182      	movs	r1, #130	; 0x82
90002482:	4b03      	ldr	r3, [pc, #12]	; (90002490 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
90002484:	4803      	ldr	r0, [pc, #12]	; (90002494 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
90002486:	f01e fecb 	bl	90021220 <__assert_func>
9000248a:	bf00      	nop
9000248c:	90023468 	.word	0x90023468
90002490:	90022d44 	.word	0x90022d44
90002494:	90022ee4 	.word	0x90022ee4

90002498 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002498:	f00d bbe2 	b.w	9000fc60 <_ZN8touchgfx3HAL10beginFrameEv>

9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
9000249c:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
900024a0:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
900024a2:	b113      	cbz	r3, 900024aa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
900024a4:	4b1a      	ldr	r3, [pc, #104]	; (90002510 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
900024a6:	2201      	movs	r2, #1
900024a8:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
900024aa:	4c1a      	ldr	r4, [pc, #104]	; (90002514 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
900024ac:	f00d fbe4 	bl	9000fc78 <_ZN8touchgfx3HAL8endFrameEv>
900024b0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
900024b4:	b963      	cbnz	r3, 900024d0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
900024b6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
900024ba:	b94b      	cbnz	r3, 900024d0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
900024bc:	2301      	movs	r3, #1
        SEM_POST(semDecode);
900024be:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
900024c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
900024c4:	f009 fc7e 	bl	9000bdc4 <osSemaphoreRelease>
        if (uiHasMutex)
900024c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900024cc:	b9cb      	cbnz	r3, 90002502 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900024ce:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900024d0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900024d4:	69e1      	ldr	r1, [r4, #28]
900024d6:	6922      	ldr	r2, [r4, #16]
900024d8:	fb00 f303 	mul.w	r3, r0, r3
900024dc:	fb01 f202 	mul.w	r2, r1, r2
900024e0:	4293      	cmp	r3, r2
900024e2:	d3eb      	bcc.n	900024bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900024e4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900024e8:	b138      	cbz	r0, 900024fa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900024ea:	1a9b      	subs	r3, r3, r2
900024ec:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900024f0:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900024f2:	bf98      	it	ls
900024f4:	f102 32ff 	addls.w	r2, r2, #4294967295
900024f8:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900024fa:	2301      	movs	r3, #1
900024fc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
90002500:	e7dc      	b.n	900024bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
90002502:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002504:	f009 fbb8 	bl	9000bc78 <osMutexRelease>
            uiHasMutex = false;
90002508:	2300      	movs	r3, #0
9000250a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000250e:	bd10      	pop	{r4, pc}
90002510:	24007014 	.word	0x24007014
90002514:	24007064 	.word	0x24007064

90002518 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
90002518:	f00d bb6c 	b.w	9000fbf4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

9000251c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
9000251c:	f00d bcc7 	b.w	9000feae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002520:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90002524:	b903      	cbnz	r3, 90002528 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
90002526:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90002528:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
9000252a:	f04f 31ff 	mov.w	r1, #4294967295
9000252e:	4604      	mov	r4, r0
90002530:	6c40      	ldr	r0, [r0, #68]	; 0x44
90002532:	f009 fb7d 	bl	9000bc30 <osMutexAcquire>
            firstDrawThisFrame = false;
90002536:	f44f 7380 	mov.w	r3, #256	; 0x100
9000253a:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
9000253e:	bd10      	pop	{r4, pc}

90002540 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002540:	b538      	push	{r3, r4, r5, lr}
90002542:	460c      	mov	r4, r1
90002544:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
90002546:	f04f 31ff 	mov.w	r1, #4294967295
9000254a:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
9000254c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002550:	f009 fb6e 	bl	9000bc30 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
90002554:	6c68      	ldr	r0, [r5, #68]	; 0x44
90002556:	f009 fb8f 	bl	9000bc78 <osMutexRelease>
        streams[handle].isActive = false;
9000255a:	2300      	movs	r3, #0
9000255c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002560:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
90002564:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002568:	b90b      	cbnz	r3, 9000256e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
9000256a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
9000256c:	63ab      	str	r3, [r5, #56]	; 0x38
    }
9000256e:	bd38      	pop	{r3, r4, r5, pc}

90002570 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002570:	4814      	ldr	r0, [pc, #80]	; (900025c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
90002572:	6943      	ldr	r3, [r0, #20]
90002574:	03d9      	lsls	r1, r3, #15
90002576:	d523      	bpl.n	900025c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002578:	2300      	movs	r3, #0
{
9000257a:	b510      	push	{r4, lr}
9000257c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002580:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90002584:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002588:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000258c:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002590:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
90002594:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002598:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000259c:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000259e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
900025a2:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900025a4:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
900025a8:	1c5a      	adds	r2, r3, #1
900025aa:	d1f8      	bne.n	9000259e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
900025ac:	f1ac 0c20 	sub.w	ip, ip, #32
900025b0:	f11c 0f20 	cmn.w	ip, #32
900025b4:	d1f0      	bne.n	90002598 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
900025b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900025ba:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
900025be:	bd10      	pop	{r4, pc}
900025c0:	4770      	bx	lr
900025c2:	bf00      	nop
900025c4:	e000ed00 	.word	0xe000ed00

900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900025c8:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900025ca:	2900      	cmp	r1, #0
900025cc:	d133      	bne.n	90002636 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900025ce:	4604      	mov	r4, r0
        switch (cmd)
900025d0:	2a05      	cmp	r2, #5
900025d2:	d809      	bhi.n	900025e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900025d4:	e8df f002 	tbb	[pc, r2]
900025d8:	211c1809 	.word	0x211c1809
900025dc:	0329      	.short	0x0329
            stream.repeat = (param > 0);
900025de:	3b00      	subs	r3, #0
900025e0:	bf18      	it	ne
900025e2:	2301      	movne	r3, #1
900025e4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900025e8:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900025ea:	6840      	ldr	r0, [r0, #4]
900025ec:	6803      	ldr	r3, [r0, #0]
900025ee:	691b      	ldr	r3, [r3, #16]
900025f0:	4798      	blx	r3
900025f2:	2800      	cmp	r0, #0
900025f4:	d0f8      	beq.n	900025e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900025f6:	2201      	movs	r2, #1
                stream.frameCount = 0;
900025f8:	2300      	movs	r3, #0
                stream.isPlaying = true;
900025fa:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900025fe:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
90002602:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
90002606:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
90002608:	2300      	movs	r3, #0
9000260a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
9000260e:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002610:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
90002612:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
90002614:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002618:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
9000261a:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
9000261c:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
9000261e:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
90002620:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
90002624:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002628:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
9000262a:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
9000262c:	2301      	movs	r3, #1
            stream.isPlaying = false;
9000262e:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
90002632:	6203      	str	r3, [r0, #32]
    }
90002634:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002636:	4b03      	ldr	r3, [pc, #12]	; (90002644 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002638:	21a2      	movs	r1, #162	; 0xa2
9000263a:	4a03      	ldr	r2, [pc, #12]	; (90002648 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
9000263c:	4803      	ldr	r0, [pc, #12]	; (9000264c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
9000263e:	f01e fdef 	bl	90021220 <__assert_func>
90002642:	bf00      	nop
90002644:	90022d44 	.word	0x90022d44
90002648:	90023624 	.word	0x90023624
9000264c:	90022ee4 	.word	0x90022ee4

90002650 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002650:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002652:	bb39      	cbnz	r1, 900026a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
90002654:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002658:	4604      	mov	r4, r0
9000265a:	b923      	cbnz	r3, 90002666 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
9000265c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002660:	b963      	cbnz	r3, 9000267c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
90002662:	2001      	movs	r0, #1
    }
90002664:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
90002666:	4912      	ldr	r1, [pc, #72]	; (900026b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002668:	6943      	ldr	r3, [r0, #20]
9000266a:	6809      	ldr	r1, [r1, #0]
9000266c:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002670:	440b      	add	r3, r1
90002672:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
90002674:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002678:	2b00      	cmp	r3, #0
9000267a:	d0f2      	beq.n	90002662 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
9000267c:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
9000267e:	4610      	mov	r0, r2
90002680:	6813      	ldr	r3, [r2, #0]
90002682:	695b      	ldr	r3, [r3, #20]
90002684:	6311      	str	r1, [r2, #48]	; 0x30
90002686:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002688:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
9000268a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
9000268e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
90002692:	2800      	cmp	r0, #0
90002694:	d1e5      	bne.n	90002662 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
90002696:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
9000269a:	2b00      	cmp	r3, #0
9000269c:	d1e2      	bne.n	90002664 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
9000269e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
900026a2:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
900026a4:	4b03      	ldr	r3, [pc, #12]	; (900026b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
900026a6:	21d0      	movs	r1, #208	; 0xd0
900026a8:	4a03      	ldr	r2, [pc, #12]	; (900026b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
900026aa:	4804      	ldr	r0, [pc, #16]	; (900026bc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
900026ac:	f01e fdb8 	bl	90021220 <__assert_func>
900026b0:	240264e4 	.word	0x240264e4
900026b4:	90022d44 	.word	0x90022d44
900026b8:	900237f8 	.word	0x900237f8
900026bc:	90022ee4 	.word	0x90022ee4

900026c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900026c0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900026c4:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900026c6:	b9fb      	cbnz	r3, 90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
        streams[handle].isActive = true;
900026c8:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
900026cc:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
900026ce:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900026d0:	f44f 7280 	mov.w	r2, #256	; 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026d4:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
                streams[i] = Stream();
900026d8:	6103      	str	r3, [r0, #16]
900026da:	8582      	strh	r2, [r0, #44]	; 0x2c
900026dc:	6143      	str	r3, [r0, #20]
900026de:	6183      	str	r3, [r0, #24]
900026e0:	61c3      	str	r3, [r0, #28]
900026e2:	6203      	str	r3, [r0, #32]
900026e4:	6243      	str	r3, [r0, #36]	; 0x24
900026e6:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026ea:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900026ee:	4432      	add	r2, r6
900026f0:	4294      	cmp	r4, r2
900026f2:	d810      	bhi.n	90002716 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900026f4:	4a0b      	ldr	r2, [pc, #44]	; (90002724 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900026f6:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900026f8:	6384      	str	r4, [r0, #56]	; 0x38
    }
900026fa:	4618      	mov	r0, r3
        format = bufferFormat;
900026fc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
90002700:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
90002704:	630b      	str	r3, [r1, #48]	; 0x30
90002706:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
90002708:	4b07      	ldr	r3, [pc, #28]	; (90002728 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
9000270a:	f240 11c5 	movw	r1, #453	; 0x1c5
9000270e:	4a07      	ldr	r2, [pc, #28]	; (9000272c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
90002710:	4807      	ldr	r0, [pc, #28]	; (90002730 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
90002712:	f01e fd85 	bl	90021220 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
90002716:	4b07      	ldr	r3, [pc, #28]	; (90002734 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
90002718:	2152      	movs	r1, #82	; 0x52
9000271a:	4a07      	ldr	r2, [pc, #28]	; (90002738 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
9000271c:	4804      	ldr	r0, [pc, #16]	; (90002730 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
9000271e:	f01e fd7f 	bl	90021220 <__assert_func>
90002722:	bf00      	nop
90002724:	012001e0 	.word	0x012001e0
90002728:	90023998 	.word	0x90023998
9000272c:	900239c8 	.word	0x900239c8
90002730:	90022ee4 	.word	0x90022ee4
90002734:	90023b50 	.word	0x90023b50
90002738:	90023b8c 	.word	0x90023b8c

9000273c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000273c:	4b08      	ldr	r3, [pc, #32]	; (90002760 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
9000273e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000274a:	f3bf 8f6f 	isb	sy
9000274e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002756:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000275a:	f3bf 8f6f 	isb	sy
}
9000275e:	4770      	bx	lr
90002760:	e000e100 	.word	0xe000e100

90002764 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002764:	4b03      	ldr	r3, [pc, #12]	; (90002774 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
90002766:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000276a:	609a      	str	r2, [r3, #8]
9000276c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002770:	609a      	str	r2, [r3, #8]
}
90002772:	4770      	bx	lr
90002774:	e000e100 	.word	0xe000e100

90002778 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002778:	b538      	push	{r3, r4, r5, lr}
9000277a:	4604      	mov	r4, r0
    HAL::initialize();
9000277c:	f00d fa89 	bl	9000fc92 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002780:	6823      	ldr	r3, [r4, #0]
90002782:	6e5d      	ldr	r5, [r3, #100]	; 0x64
90002784:	f010 fa8a 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
90002788:	4601      	mov	r1, r0
9000278a:	4620      	mov	r0, r4
9000278c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000278e:	6823      	ldr	r3, [r4, #0]
90002790:	4a16      	ldr	r2, [pc, #88]	; (900027ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
90002792:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90002796:	4295      	cmp	r5, r2
90002798:	d11c      	bne.n	900027d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
9000279a:	4a15      	ldr	r2, [pc, #84]	; (900027f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000279c:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
9000279e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900027a2:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900027a6:	4813      	ldr	r0, [pc, #76]	; (900027f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900027a8:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
900027ac:	4a12      	ldr	r2, [pc, #72]	; (900027f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900027ae:	7005      	strb	r5, [r0, #0]
900027b0:	4293      	cmp	r3, r2
900027b2:	d116      	bne.n	900027e2 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900027b4:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
900027b6:	4a11      	ldr	r2, [pc, #68]	; (900027fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900027b8:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900027ba:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
900027bc:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
900027be:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900027c2:	4b0f      	ldr	r3, [pc, #60]	; (90002800 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900027c4:	490f      	ldr	r1, [pc, #60]	; (90002804 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900027c6:	4a10      	ldr	r2, [pc, #64]	; (90002808 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900027c8:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900027ca:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900027cc:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900027ce:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900027d2:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900027d4:	4a0d      	ldr	r2, [pc, #52]	; (9000280c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900027d6:	2300      	movs	r3, #0
900027d8:	4620      	mov	r0, r4
900027da:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900027de:	47a8      	blx	r5
900027e0:	e7ec      	b.n	900027bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900027e2:	2100      	movs	r1, #0
900027e4:	4620      	mov	r0, r4
900027e6:	4798      	blx	r3
900027e8:	e7e8      	b.n	900027bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900027ea:	bf00      	nop
900027ec:	900007f1 	.word	0x900007f1
900027f0:	d003fc00 	.word	0xd003fc00
900027f4:	240264e2 	.word	0x240264e2
900027f8:	90000675 	.word	0x90000675
900027fc:	240264e3 	.word	0x240264e3
90002800:	24007064 	.word	0x24007064
90002804:	2400701c 	.word	0x2400701c
90002808:	d00bf400 	.word	0xd00bf400
9000280c:	d007f800 	.word	0xd007f800

90002810 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
90002810:	b510      	push	{r4, lr}
        return instance;
90002812:	4c14      	ldr	r4, [pc, #80]	; (90002864 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
90002814:	6823      	ldr	r3, [r4, #0]
90002816:	b323      	cbz	r3, 90002862 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
90002818:	4b13      	ldr	r3, [pc, #76]	; (90002868 <HAL_LTDC_LineEventCallback+0x58>)
9000281a:	4a14      	ldr	r2, [pc, #80]	; (9000286c <HAL_LTDC_LineEventCallback+0x5c>)
9000281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000281e:	8811      	ldrh	r1, [r2, #0]
90002820:	428b      	cmp	r3, r1
90002822:	d00a      	beq.n	9000283a <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90002824:	f006 fec6 	bl	900095b4 <HAL_LTDC_ProgramLineEvent>
90002828:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
9000282a:	6803      	ldr	r3, [r0, #0]
9000282c:	6a1b      	ldr	r3, [r3, #32]
9000282e:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002830:	2000      	movs	r0, #0
        }
    }
90002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
90002836:	f7fd bec1 	b.w	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
9000283a:	4b0d      	ldr	r3, [pc, #52]	; (90002870 <HAL_LTDC_LineEventCallback+0x60>)
9000283c:	8819      	ldrh	r1, [r3, #0]
9000283e:	f006 feb9 	bl	900095b4 <HAL_LTDC_ProgramLineEvent>
        return instance;
90002842:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90002844:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002848:	3301      	adds	r3, #1
9000284a:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
9000284e:	f7ff f8c3 	bl	900019d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
90002852:	6820      	ldr	r0, [r4, #0]
90002854:	f00d ff70 	bl	90010738 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002858:	2000      	movs	r0, #0
    }
9000285a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
9000285e:	f7fd be79 	b.w	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
90002862:	bd10      	pop	{r4, pc}
90002864:	240264e4 	.word	0x240264e4
90002868:	50001000 	.word	0x50001000
9000286c:	24007018 	.word	0x24007018
90002870:	24007016 	.word	0x24007016

90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
90002874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002878:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90002934 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
9000287c:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
9000287e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002880:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
90002884:	4604      	mov	r4, r0
90002886:	e024      	b.n	900028d2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002888:	682b      	ldr	r3, [r5, #0]
9000288a:	4628      	mov	r0, r5
9000288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000288e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002890:	2300      	movs	r3, #0
90002892:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002894:	6829      	ldr	r1, [r5, #0]
90002896:	f44f 7390 	mov.w	r3, #288	; 0x120
9000289a:	9700      	str	r7, [sp, #0]
9000289c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
900028a0:	f8d1 9014 	ldr.w	r9, [r1, #20]
900028a4:	4628      	mov	r0, r5
900028a6:	68a1      	ldr	r1, [r4, #8]
900028a8:	47c8      	blx	r9
                    stream.frameCount++;
900028aa:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
900028ac:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
900028b0:	3301      	adds	r3, #1
900028b2:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
900028b4:	2800      	cmp	r0, #0
900028b6:	d033      	beq.n	90002920 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028b8:	682b      	ldr	r3, [r5, #0]
900028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900028bc:	4543      	cmp	r3, r8
900028be:	d131      	bne.n	90002924 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
900028c0:	6968      	ldr	r0, [r5, #20]
900028c2:	3801      	subs	r0, #1
900028c4:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
900028c6:	2300      	movs	r3, #0
900028c8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900028cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028ce:	f009 f9d3 	bl	9000bc78 <osMutexRelease>
            SEM_WAIT(semDecode);
900028d2:	f04f 31ff 	mov.w	r1, #4294967295
900028d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
900028d8:	f009 fa40 	bl	9000bd5c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900028dc:	f04f 31ff 	mov.w	r1, #4294967295
900028e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028e2:	f009 f9a5 	bl	9000bc30 <osMutexAcquire>
                if (stream.doDecode)
900028e6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900028ea:	2b00      	cmp	r3, #0
900028ec:	d0ee      	beq.n	900028cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900028ee:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900028f0:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900028f2:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900028f6:	2900      	cmp	r1, #0
900028f8:	d1c6      	bne.n	90002888 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900028fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
900028fc:	2b00      	cmp	r3, #0
900028fe:	d0c9      	beq.n	90002894 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002900:	682a      	ldr	r2, [r5, #0]
90002902:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
90002906:	4541      	cmp	r1, r8
90002908:	d10f      	bne.n	9000292a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
9000290a:	6968      	ldr	r0, [r5, #20]
9000290c:	18c1      	adds	r1, r0, r3
9000290e:	4628      	mov	r0, r5
90002910:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
90002912:	6923      	ldr	r3, [r4, #16]
90002914:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
90002916:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
90002918:	440b      	add	r3, r1
                            stream.skip_frames = 0;
9000291a:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
9000291c:	6123      	str	r3, [r4, #16]
9000291e:	e7b9      	b.n	90002894 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                        stream.frameNumber = 1;
90002920:	60e6      	str	r6, [r4, #12]
90002922:	e7d0      	b.n	900028c6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x52>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002924:	4628      	mov	r0, r5
90002926:	4798      	blx	r3
90002928:	e7cb      	b.n	900028c2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
9000292a:	4628      	mov	r0, r5
9000292c:	4788      	blx	r1
9000292e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002930:	e7ec      	b.n	9000290c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
90002932:	bf00      	nop
90002934:	90000969 	.word	0x90000969

90002938 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002938:	4801      	ldr	r0, [pc, #4]	; (90002940 <videoTaskFunc+0x8>)
{
9000293a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
9000293c:	f7ff ff9a 	bl	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002940:	24007064 	.word	0x24007064

90002944 <_GLOBAL__sub_I_mjpegdecoder1>:
}
90002944:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
90002946:	4815      	ldr	r0, [pc, #84]	; (9000299c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002948:	2500      	movs	r5, #0
9000294a:	f7fe fc1b 	bl	90001184 <_ZN20HardwareMJPEGDecoderC1Ev>
9000294e:	4c14      	ldr	r4, [pc, #80]	; (900029a0 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002950:	4914      	ldr	r1, [pc, #80]	; (900029a4 <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
90002952:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002956:	462a      	mov	r2, r5
90002958:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000295a:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
9000295c:	4629      	mov	r1, r5
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000295e:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002960:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002962:	6325      	str	r5, [r4, #48]	; 0x30
90002964:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002968:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000296c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90002970:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002974:	e9c4 5501 	strd	r5, r5, [r4, #4]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002978:	e9c4 5503 	strd	r5, r5, [r4, #12]
9000297c:	e9c4 5505 	strd	r5, r5, [r4, #20]
90002980:	e9c4 5507 	strd	r5, r5, [r4, #28]
90002984:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
90002988:	f009 f998 	bl	9000bcbc <osSemaphoreNew>
9000298c:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
9000298e:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002990:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002992:	f009 f913 	bl	9000bbbc <osMutexNew>
90002996:	6460      	str	r0, [r4, #68]	; 0x44
}
90002998:	bd38      	pop	{r3, r4, r5, pc}
9000299a:	bf00      	nop
9000299c:	2400701c 	.word	0x2400701c
900029a0:	24007064 	.word	0x24007064
900029a4:	90023d38 	.word	0x90023d38

900029a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029ac:	4c7e      	ldr	r4, [pc, #504]	; (90002ba8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
900029ae:	b08d      	sub	sp, #52	; 0x34
900029b0:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029b2:	fba4 0303 	umull	r0, r3, r4, r3
{
900029b6:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029b8:	0a19      	lsrs	r1, r3, #8
{
900029ba:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900029bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029c0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900029c4:	4293      	cmp	r3, r2
900029c6:	930b      	str	r3, [sp, #44]	; 0x2c
900029c8:	f240 80e9 	bls.w	90002b9e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029cc:	4b77      	ldr	r3, [pc, #476]	; (90002bac <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
900029ce:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002bbc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
900029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029d4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002bc0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
900029d8:	930a      	str	r3, [sp, #40]	; 0x28
900029da:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
900029dc:	f04f 0e02 	mov.w	lr, #2
900029e0:	9908      	ldr	r1, [sp, #32]
900029e2:	f502 7080 	add.w	r0, r2, #256	; 0x100
900029e6:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029e8:	3101      	adds	r1, #1
    currentMCU++;
900029ea:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ee:	980a      	ldr	r0, [sp, #40]	; 0x28
900029f0:	9108      	str	r1, [sp, #32]
900029f2:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900029f6:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900029fa:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
900029fe:	005b      	lsls	r3, r3, #1
90002a00:	eb03 2382 	add.w	r3, r3, r2, lsl #10
90002a04:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
90002a06:	e009      	b.n	90002a1c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a08:	9b01      	ldr	r3, [sp, #4]
90002a0a:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a0e:	d30f      	bcc.n	90002a30 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002a10:	f1be 0f10 	cmp.w	lr, #16
90002a14:	f000 80b6 	beq.w	90002b84 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002a18:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002a1c:	f1be 0f0a 	cmp.w	lr, #10
90002a20:	d1f2      	bne.n	90002a08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002a22:	9b06      	ldr	r3, [sp, #24]
90002a24:	3380      	adds	r3, #128	; 0x80
90002a26:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a28:	9b01      	ldr	r3, [sp, #4]
90002a2a:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a2e:	d2f3      	bcs.n	90002a18 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002a30:	9a01      	ldr	r2, [sp, #4]
90002a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002a34:	f8cd e01c 	str.w	lr, [sp, #28]
90002a38:	4413      	add	r3, r2
90002a3a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002a3e:	f103 0c10 	add.w	ip, r3, #16
90002a42:	3330      	adds	r3, #48	; 0x30
90002a44:	4696      	mov	lr, r2
90002a46:	9102      	str	r1, [sp, #8]
90002a48:	9305      	str	r3, [sp, #20]
90002a4a:	9b02      	ldr	r3, [sp, #8]
90002a4c:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002a50:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002a54:	4674      	mov	r4, lr
90002a56:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a58:	f817 1f01 	ldrb.w	r1, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002a5c:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a5e:	4b54      	ldr	r3, [pc, #336]	; (90002bb0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002a60:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a62:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002a66:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a68:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
          for(j=0; j < 8; j+=2)
90002a6c:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a6e:	4b51      	ldr	r3, [pc, #324]	; (90002bb4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002a70:	f814 ac02 	ldrb.w	sl, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a74:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a78:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a7c:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a7e:	4403      	add	r3, r0
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a80:	484d      	ldr	r0, [pc, #308]	; (90002bb8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a82:	eb09 4323 	add.w	r3, r9, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a86:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a8a:	eb01 020a 	add.w	r2, r1, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a8e:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a90:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
90002a94:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a98:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a9a:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a9e:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aa2:	ea4f 0292 	mov.w	r2, r2, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aa6:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aaa:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002aae:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
90002ab2:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002ab6:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002aba:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002abe:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ac2:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ac6:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ac8:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002acc:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ad0:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ad4:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ad8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002adc:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002ae0:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002ae4:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ae8:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002aec:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002af0:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002af4:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002af8:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002afa:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002afe:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b02:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002b06:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b0a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b0e:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002b12:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002b16:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002b1a:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002b1e:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b20:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b22:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b24:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b26:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b2a:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b2e:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002b32:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b36:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b3a:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002b3e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002b42:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002b46:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002b4a:	d185      	bne.n	90002a58 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002b4c:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b4e:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002b52:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002b56:	3304      	adds	r3, #4
90002b58:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b5a:	9b05      	ldr	r3, [sp, #20]
90002b5c:	4563      	cmp	r3, ip
90002b5e:	f47f af74 	bne.w	90002a4a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002b62:	9b04      	ldr	r3, [sp, #16]
90002b64:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002b68:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002b6a:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002b6e:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002b70:	9b03      	ldr	r3, [sp, #12]
90002b72:	f103 0310 	add.w	r3, r3, #16
90002b76:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002b78:	9b01      	ldr	r3, [sp, #4]
90002b7a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002b7e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002b80:	f47f af4a 	bne.w	90002a18 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b84:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b86:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002b8c:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002b90:	4293      	cmp	r3, r2
90002b92:	f47f af22 	bne.w	900029da <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002b96:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002b9a:	4a04      	ldr	r2, [pc, #16]	; (90002bac <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002b9c:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002b9e:	ee17 0a90 	vmov	r0, s15
90002ba2:	b00d      	add	sp, #52	; 0x34
90002ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002ba8:	aaaaaaab 	.word	0xaaaaaaab
90002bac:	24009d2c 	.word	0x24009d2c
90002bb0:	240080ac 	.word	0x240080ac
90002bb4:	24007cac 	.word	0x24007cac
90002bb8:	240088ac 	.word	0x240088ac
90002bbc:	240084ac 	.word	0x240084ac
90002bc0:	90023d70 	.word	0x90023d70

90002bc4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bc8:	0a1c      	lsrs	r4, r3, #8
{
90002bca:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002bcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bd0:	ee07 4a90 	vmov	s15, r4
{
90002bd4:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002bd6:	429a      	cmp	r2, r3
{
90002bd8:	9007      	str	r0, [sp, #28]
90002bda:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002bdc:	930b      	str	r3, [sp, #44]	; 0x2c
90002bde:	f080 814a 	bcs.w	90002e76 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002be2:	4ba7      	ldr	r3, [pc, #668]	; (90002e80 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002be4:	4da7      	ldr	r5, [pc, #668]	; (90002e84 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002be8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002e88 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002bec:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002bf0:	691b      	ldr	r3, [r3, #16]
90002bf2:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002e8c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002bf6:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002e90 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002bfa:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002e94 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bfe:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c00:	9301      	str	r3, [sp, #4]
90002c02:	e008      	b.n	90002c16 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002c04:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002c08:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002c0c:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002c0e:	9b08      	ldr	r3, [sp, #32]
90002c10:	4293      	cmp	r3, r2
90002c12:	f000 8130 	beq.w	90002e76 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c16:	9a07      	ldr	r2, [sp, #28]
90002c18:	9908      	ldr	r1, [sp, #32]
90002c1a:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002c1e:	010b      	lsls	r3, r1, #4
90002c20:	3101      	adds	r1, #1
    currentMCU++;
90002c22:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c26:	980a      	ldr	r0, [sp, #40]	; 0x28
90002c28:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c2a:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c2c:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002c30:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c34:	fb01 f202 	mul.w	r2, r1, r2
90002c38:	005b      	lsls	r3, r3, #1
90002c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002c3e:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002c40:	2308      	movs	r3, #8
90002c42:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c44:	e9dd 2300 	ldrd	r2, r3, [sp]
90002c48:	4293      	cmp	r3, r2
90002c4a:	d9db      	bls.n	90002c04 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002c4e:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002c50:	9a03      	ldr	r2, [sp, #12]
90002c52:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002c56:	9a02      	ldr	r2, [sp, #8]
90002c58:	f103 0020 	add.w	r0, r3, #32
90002c5c:	3204      	adds	r2, #4
90002c5e:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c60:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002c64:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c66:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002c6a:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c6c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002c70:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002c72:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c76:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c7a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c7c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002c80:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c84:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c86:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c88:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c8c:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c90:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c94:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c98:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c9a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c9e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002ca2:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002ca6:	08e4      	lsrs	r4, r4, #3
90002ca8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002cac:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002cb0:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002cb4:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002cb8:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cbc:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cbe:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cc0:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cc2:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cc6:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002cca:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cce:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cd0:	08c0      	lsrs	r0, r0, #3
90002cd2:	08a4      	lsrs	r4, r4, #2
90002cd4:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002cd8:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002cdc:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ce0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ce4:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ce8:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002cec:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cf0:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cf4:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cf6:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002cfa:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cfe:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d00:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d02:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d06:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d0a:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d0e:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d12:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d14:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d18:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d1c:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d20:	08e4      	lsrs	r4, r4, #3
90002d22:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d26:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d2a:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d2e:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002d32:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d36:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d38:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d3a:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d3c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d40:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d44:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d48:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d4a:	08c0      	lsrs	r0, r0, #3
90002d4c:	08a4      	lsrs	r4, r4, #2
90002d4e:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d52:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d56:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d5a:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d5e:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002d62:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d66:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d6a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d6e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d72:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d74:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d78:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d7a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d80:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d84:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d88:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d8c:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d8e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d92:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d96:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d9a:	08e4      	lsrs	r4, r4, #3
90002d9c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002da0:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002da4:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002da8:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002dac:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002db0:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002db2:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002db4:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002db6:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dba:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002dbe:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dc4:	08c0      	lsrs	r0, r0, #3
90002dc6:	08a4      	lsrs	r4, r4, #2
90002dc8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002dcc:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002dd0:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dd4:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dd8:	f892 403b 	ldrb.w	r4, [r2, #59]	; 0x3b
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ddc:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002de0:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002de4:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002de8:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dec:	4446      	add	r6, r8
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dee:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002df0:	4460      	add	r0, ip
            ycomp = (int32_t)(*(pLum +j));
90002df2:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df6:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dfa:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dfe:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e02:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e06:	4484      	add	ip, r0
90002e08:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e0c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e10:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002e14:	08e4      	lsrs	r4, r4, #3
90002e16:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e1a:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e1e:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e22:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002e26:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e2a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e2c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e2e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e30:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e34:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e38:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e3c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e3e:	08c0      	lsrs	r0, r0, #3
90002e40:	08a4      	lsrs	r4, r4, #2
90002e42:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e46:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e4a:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002e4e:	9804      	ldr	r0, [sp, #16]
90002e50:	4283      	cmp	r3, r0
90002e52:	f47f af05 	bne.w	90002c60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002e56:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e58:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002e5a:	3308      	adds	r3, #8
90002e5c:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002e5e:	9b03      	ldr	r3, [sp, #12]
90002e60:	3308      	adds	r3, #8
90002e62:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e64:	9b00      	ldr	r3, [sp, #0]
90002e66:	4413      	add	r3, r2
90002e68:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002e6a:	9b05      	ldr	r3, [sp, #20]
90002e6c:	3b01      	subs	r3, #1
90002e6e:	9305      	str	r3, [sp, #20]
90002e70:	f47f aee8 	bne.w	90002c44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002e74:	e6c6      	b.n	90002c04 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002e76:	ee17 0a90 	vmov	r0, s15
90002e7a:	b00d      	add	sp, #52	; 0x34
90002e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e80:	24009d2c 	.word	0x24009d2c
90002e84:	24007cac 	.word	0x24007cac
90002e88:	240088ac 	.word	0x240088ac
90002e8c:	240084ac 	.word	0x240084ac
90002e90:	240080ac 	.word	0x240080ac
90002e94:	90023d70 	.word	0x90023d70

90002e98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e9c:	4cb6      	ldr	r4, [pc, #728]	; (90003178 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002e9e:	b089      	sub	sp, #36	; 0x24
90002ea0:	e9cd 0204 	strd	r0, r2, [sp, #16]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002ea4:	fba4 0303 	umull	r0, r3, r4, r3
{
90002ea8:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002eaa:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002eac:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002eb0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002eb4:	429a      	cmp	r2, r3
90002eb6:	9306      	str	r3, [sp, #24]
90002eb8:	f080 8158 	bcs.w	9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ebc:	4baf      	ldr	r3, [pc, #700]	; (9000317c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ebe:	4cb0      	ldr	r4, [pc, #704]	; (90003180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ec2:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003188 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ec6:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eca:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ecc:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 9000318c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ed0:	48ac      	ldr	r0, [pc, #688]	; (90003184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002ed2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003190 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ed6:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ed8:	9300      	str	r3, [sp, #0]
90002eda:	e007      	b.n	90002eec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002edc:	9b04      	ldr	r3, [sp, #16]
90002ede:	33c0      	adds	r3, #192	; 0xc0
90002ee0:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002ee2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002ee6:	4293      	cmp	r3, r2
90002ee8:	f000 8140 	beq.w	9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002eec:	9e05      	ldr	r6, [sp, #20]
90002eee:	9f07      	ldr	r7, [sp, #28]
90002ef0:	00f5      	lsls	r5, r6, #3
90002ef2:	3601      	adds	r6, #1
90002ef4:	9904      	ldr	r1, [sp, #16]
90002ef6:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ef8:	9e03      	ldr	r6, [sp, #12]
90002efa:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002efe:	fbb5 f2f7 	udiv	r2, r5, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002f02:	fb07 5512 	mls	r5, r7, r2, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f06:	fb06 f202 	mul.w	r2, r6, r2
90002f0a:	006d      	lsls	r5, r5, #1
90002f0c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    currentMCU++;
90002f10:	2508      	movs	r5, #8
90002f12:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f14:	9d00      	ldr	r5, [sp, #0]
90002f16:	4295      	cmp	r5, r2
90002f18:	d9e0      	bls.n	90002edc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f1a:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002f1e:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f20:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002f24:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002f26:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f2a:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f2e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002f32:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f34:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f38:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f3c:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f3e:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f40:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f42:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f46:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f4a:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f4e:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f50:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f54:	08ed      	lsrs	r5, r5, #3
90002f56:	08bf      	lsrs	r7, r7, #2
90002f58:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90002f5c:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f5e:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f62:	52ae      	strh	r6, [r5, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f64:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f68:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90002f6c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f70:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f74:	4425      	add	r5, r4
90002f76:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f7a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f7e:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f82:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f84:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f86:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f88:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f8c:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f90:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f94:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f96:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f9a:	08ed      	lsrs	r5, r5, #3
90002f9c:	08bf      	lsrs	r7, r7, #2
90002f9e:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90002fa2:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fa4:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90002fa8:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90002faa:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fac:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002fb0:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002fb4:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fb6:	4427      	add	r7, r4
90002fb8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002fbc:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fbe:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fc2:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fc4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fc8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fcc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fd0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fd4:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fd6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fda:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fdc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90002fe0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90002fe4:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90002fe8:	08ff      	lsrs	r7, r7, #3
90002fea:	08b6      	lsrs	r6, r6, #2
90002fec:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90002ff0:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002ff4:	f8a5 9004 	strh.w	r9, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ff8:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ffc:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90003000:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003004:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003008:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000300c:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000300e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003012:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003016:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003018:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000301a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000301c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003020:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003024:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003028:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000302c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003030:	08ff      	lsrs	r7, r7, #3
90003032:	08b6      	lsrs	r6, r6, #2
90003034:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003038:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000303c:	f8a5 9006 	strh.w	r9, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003040:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003044:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003048:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000304c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003050:	4427      	add	r7, r4
90003052:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003056:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000305a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000305e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003060:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003062:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003064:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003068:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000306c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003070:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003074:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003078:	08ff      	lsrs	r7, r7, #3
9000307a:	08b6      	lsrs	r6, r6, #2
9000307c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003080:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003084:	f8a5 9008 	strh.w	r9, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003088:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000308c:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003090:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003094:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003096:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000309a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000309e:	44b9      	add	r9, r7
900030a0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030a4:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030a8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ac:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030b0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030b2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030b4:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030b8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900030bc:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900030c0:	08ff      	lsrs	r7, r7, #3
900030c2:	08b6      	lsrs	r6, r6, #2
900030c4:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900030c8:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030cc:	f8a5 900a 	strh.w	r9, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030d0:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030d4:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900030d8:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030dc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	4427      	add	r7, r4
900030e2:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030e6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ea:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ee:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030f0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030f2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030f4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030f8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030fc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003100:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003104:	08ff      	lsrs	r7, r7, #3
90003106:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000310a:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000310e:	08b6      	lsrs	r6, r6, #2
90003110:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003114:	f8a5 900c 	strh.w	r9, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003118:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000311c:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003120:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003124:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003128:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000312a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000312e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003132:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003136:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003138:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000313a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000313c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003140:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003144:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003148:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000314c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003150:	08ff      	lsrs	r7, r7, #3
90003152:	08b6      	lsrs	r6, r6, #2
90003154:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003158:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000315c:	f8a5 900e 	strh.w	r9, [r5, #14]
    for(i= 0; i <  8; i++)
90003160:	9d01      	ldr	r5, [sp, #4]
90003162:	3d01      	subs	r5, #1
90003164:	9501      	str	r5, [sp, #4]
90003166:	f47f aed5 	bne.w	90002f14 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000316a:	e6b7      	b.n	90002edc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9000316c:	ee17 0a90 	vmov	r0, s15
90003170:	b009      	add	sp, #36	; 0x24
90003172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003176:	bf00      	nop
90003178:	aaaaaaab 	.word	0xaaaaaaab
9000317c:	24009d2c 	.word	0x24009d2c
90003180:	90023d70 	.word	0x90023d70
90003184:	240084ac 	.word	0x240084ac
90003188:	240088ac 	.word	0x240088ac
9000318c:	24007cac 	.word	0x24007cac
90003190:	240080ac 	.word	0x240080ac

90003194 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003198:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000319c:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000319e:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
900031a0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900031a4:	f080 8088 	bcs.w	900032b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031a8:	4b45      	ldr	r3, [pc, #276]	; (900032c0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031aa:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031ae:	691e      	ldr	r6, [r3, #16]
900031b0:	e003      	b.n	900031ba <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
900031b2:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
900031b4:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900031b8:	d07e      	beq.n	900032b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031ba:	00d5      	lsls	r5, r2, #3
    currentMCU++;
900031bc:	4604      	mov	r4, r0
900031be:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031c2:	3201      	adds	r2, #1
900031c4:	fbb5 f7f9 	udiv	r7, r5, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031c8:	fb09 5317 	mls	r3, r9, r7, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031cc:	fb08 f707 	mul.w	r7, r8, r7
900031d0:	005b      	lsls	r3, r3, #1
900031d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031d6:	429e      	cmp	r6, r3
900031d8:	d9eb      	bls.n	900031b2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900031da:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900031de:	18cd      	adds	r5, r1, r3
          pLum++;
900031e0:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900031e2:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031e6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031ea:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ee:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031f2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031f6:	ea47 070c 	orr.w	r7, r7, ip
900031fa:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900031fc:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900031fe:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003202:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003206:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000320a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000320e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003212:	ea47 070c 	orr.w	r7, r7, ip
90003216:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90003218:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000321c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003220:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003224:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003228:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000322c:	ea47 070c 	orr.w	r7, r7, ip
90003230:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90003232:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003236:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000323a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000323e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003242:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003246:	ea47 070c 	orr.w	r7, r7, ip
9000324a:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9000324c:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003250:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003254:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003258:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000325c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003260:	ea47 070c 	orr.w	r7, r7, ip
90003264:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90003266:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000326a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000326e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003272:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003276:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000327a:	ea47 070c 	orr.w	r7, r7, ip
9000327e:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003280:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003284:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003288:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000328c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003290:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003294:	ea47 070c 	orr.w	r7, r7, ip
90003298:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000329a:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000329e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032a2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032a6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032aa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ae:	ea47 070c 	orr.w	r7, r7, ip
900032b2:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
900032b4:	d18f      	bne.n	900031d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
900032b6:	e77c      	b.n	900031b2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900032b8:	ee17 0a90 	vmov	r0, s15
900032bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900032c0:	24009d2c 	.word	0x24009d2c

900032c4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900032c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032c8:	0a1c      	lsrs	r4, r3, #8
{
900032ca:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900032cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032d0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900032d4:	429a      	cmp	r2, r3
900032d6:	9301      	str	r3, [sp, #4]
900032d8:	f080 8128 	bcs.w	9000352c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032dc:	4b96      	ldr	r3, [pc, #600]	; (90003538 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900032de:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9000353c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032e2:	691f      	ldr	r7, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032e4:	e9d3 a909 	ldrd	sl, r9, [r3, #36]	; 0x24
900032e8:	e006      	b.n	900032f8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x34>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900032ea:	9a00      	ldr	r2, [sp, #0]
900032ec:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900032f0:	9b01      	ldr	r3, [sp, #4]
900032f2:	429a      	cmp	r2, r3
900032f4:	f000 811a 	beq.w	9000352c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032f8:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900032fa:	f04f 0808 	mov.w	r8, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032fe:	3201      	adds	r2, #1
90003300:	fbb3 f4fa 	udiv	r4, r3, sl
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003304:	fb0a 3514 	mls	r5, sl, r4, r3
    currentMCU++;
90003308:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000330a:	fb09 f404 	mul.w	r4, r9, r4
9000330e:	006d      	lsls	r5, r5, #1
    currentMCU++;
90003310:	9200      	str	r2, [sp, #0]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003312:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003316:	42af      	cmp	r7, r5
90003318:	d9e7      	bls.n	900032ea <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
            color_k = (int32_t)(*(pChrom + 192));
9000331a:	f893 b0c0 	ldrb.w	fp, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
9000331e:	194e      	adds	r6, r1, r5
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003320:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90003324:	f1b8 0801 	subs.w	r8, r8, #1
            pChrom++;
90003328:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000332c:	fb1e fe0b 	smulbb	lr, lr, fp
90003330:	fbac 4e0e 	umull	r4, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003334:	f813 4c08 	ldrb.w	r4, [r3, #-8]
90003338:	fb14 f40b 	smulbb	r4, r4, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000333c:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003340:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003344:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003348:	ea4f 2494 	mov.w	r4, r4, lsr #10
9000334c:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003350:	f893 e078 	ldrb.w	lr, [r3, #120]	; 0x78
90003354:	fb1e fb0b 	smulbb	fp, lr, fp
90003358:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000335c:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003360:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003362:	534c      	strh	r4, [r1, r5]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003364:	444d      	add	r5, r9
            color_k = (int32_t)(*(pChrom + 192));
90003366:	f893 b0b9 	ldrb.w	fp, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000336a:	f893 e039 	ldrb.w	lr, [r3, #57]	; 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000336e:	f813 4c07 	ldrb.w	r4, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003372:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003376:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000337a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000337e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003382:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003386:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000338a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000338e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003392:	f893 e079 	ldrb.w	lr, [r3, #121]	; 0x79
90003396:	fb1e fb0b 	smulbb	fp, lr, fp
9000339a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000339e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900033a2:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900033a4:	8074      	strh	r4, [r6, #2]
            color_k = (int32_t)(*(pChrom + 192));
900033a6:	f893 b0ba 	ldrb.w	fp, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033aa:	f893 e03a 	ldrb.w	lr, [r3, #58]	; 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ae:	f813 4c06 	ldrb.w	r4, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033b2:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033b6:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033ba:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033be:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033c2:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033c6:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033ca:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ce:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033d2:	f893 e07a 	ldrb.w	lr, [r3, #122]	; 0x7a
900033d6:	fb1e fb0b 	smulbb	fp, lr, fp
900033da:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033de:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900033e2:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900033e4:	80b4      	strh	r4, [r6, #4]
            color_k = (int32_t)(*(pChrom + 192));
900033e6:	f893 b0bb 	ldrb.w	fp, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033ea:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ee:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033f2:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033f6:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033fa:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033fe:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003402:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003406:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000340a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000340e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003412:	f893 e07b 	ldrb.w	lr, [r3, #123]	; 0x7b
90003416:	fb1e fb0b 	smulbb	fp, lr, fp
9000341a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000341e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003422:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003424:	80f4      	strh	r4, [r6, #6]
            color_k = (int32_t)(*(pChrom + 192));
90003426:	f893 b0bc 	ldrb.w	fp, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000342a:	f893 e03c 	ldrb.w	lr, [r3, #60]	; 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000342e:	f813 4c04 	ldrb.w	r4, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003432:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003436:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000343a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000343e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003442:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003446:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000344a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000344e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003452:	f893 e07c 	ldrb.w	lr, [r3, #124]	; 0x7c
90003456:	fb1e fb0b 	smulbb	fp, lr, fp
9000345a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000345e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003462:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003464:	8134      	strh	r4, [r6, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003466:	f893 b0bd 	ldrb.w	fp, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000346a:	f893 e03d 	ldrb.w	lr, [r3, #61]	; 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000346e:	f813 4c03 	ldrb.w	r4, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003472:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003476:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000347a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000347e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003482:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003486:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000348a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000348e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003492:	f893 e07d 	ldrb.w	lr, [r3, #125]	; 0x7d
90003496:	fb1e fb0b 	smulbb	fp, lr, fp
9000349a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000349e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900034a2:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900034a4:	8174      	strh	r4, [r6, #10]
            color_k = (int32_t)(*(pChrom + 192));
900034a6:	f893 b0be 	ldrb.w	fp, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034aa:	f813 ec02 	ldrb.w	lr, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034ae:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034b2:	fb1e fe0b 	smulbb	lr, lr, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034b6:	fb14 f40b 	smulbb	r4, r4, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034ba:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034be:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034c2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c6:	ea4f 2454 	mov.w	r4, r4, lsr #9
900034ca:	ea4f 1444 	mov.w	r4, r4, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034ce:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034d2:	f893 e07e 	ldrb.w	lr, [r3, #126]	; 0x7e
900034d6:	fb1e fb0b 	smulbb	fp, lr, fp
900034da:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034de:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900034e2:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900034e4:	81b4      	strh	r4, [r6, #12]
            color_k = (int32_t)(*(pChrom + 192));
900034e6:	f893 b0bf 	ldrb.w	fp, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034ea:	f893 e03f 	ldrb.w	lr, [r3, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034ee:	f813 4c01 	ldrb.w	r4, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034f2:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034f6:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034fa:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034fe:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003502:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003506:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000350a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000350e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003512:	f893 e07f 	ldrb.w	lr, [r3, #127]	; 0x7f
90003516:	fb1e fb0b 	smulbb	fp, lr, fp
9000351a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000351e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003522:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003524:	81f4      	strh	r4, [r6, #14]
    for(i= 0; i <  8; i++)
90003526:	f47f aef6 	bne.w	90003316 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x52>
9000352a:	e6de      	b.n	900032ea <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
  }
  return numberMCU;
}
9000352c:	ee17 0a90 	vmov	r0, s15
90003530:	b003      	add	sp, #12
90003532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003536:	bf00      	nop
90003538:	24009d2c 	.word	0x24009d2c
9000353c:	80808081 	.word	0x80808081

90003540 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003540:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003542:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003546:	68c5      	ldr	r5, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003548:	6804      	ldr	r4, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000354a:	fb06 f005 	mul.w	r0, r6, r5
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000354e:	4b31      	ldr	r3, [pc, #196]	; (90003614 <TGFX_JPEG_GetDecodeColorConvertFunc+0xd4>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003550:	2c10      	cmp	r4, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003552:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003556:	609d      	str	r5, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003558:	601c      	str	r4, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000355a:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000355c:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000355e:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003560:	d02b      	beq.n	900035ba <TGFX_JPEG_GetDecodeColorConvertFunc+0x7a>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90003562:	b9fc      	cbnz	r4, 900035a4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x64>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90003564:	482c      	ldr	r0, [pc, #176]	; (90003618 <TGFX_JPEG_GetDecodeColorConvertFunc+0xd8>)
90003566:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003568:	f015 0007 	ands.w	r0, r5, #7
9000356c:	d121      	bne.n	900035b2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000356e:	4607      	mov	r7, r0
90003570:	6158      	str	r0, [r3, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
    }
    JPEG_ConvertorParams.H_factor = 8;
90003572:	2108      	movs	r1, #8
90003574:	460c      	mov	r4, r1
    JPEG_ConvertorParams.V_factor  = 8;
90003576:	e9c3 1107 	strd	r1, r1, [r3, #28]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000357a:	442f      	add	r7, r5
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000357c:	fbb5 f4f4 	udiv	r4, r5, r4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003580:	006d      	lsls	r5, r5, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003582:	625f      	str	r7, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003584:	629d      	str	r5, [r3, #40]	; 0x28
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90003586:	b100      	cbz	r0, 9000358a <TGFX_JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
90003588:	3401      	adds	r4, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000358a:	fbb6 f0f1 	udiv	r0, r6, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000358e:	fb01 6110 	mls	r1, r1, r0, r6
90003592:	b101      	cbz	r1, 90003596 <TGFX_JPEG_GetDecodeColorConvertFunc+0x56>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003594:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003596:	fb00 f404 	mul.w	r4, r0, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000359a:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000359c:	62dc      	str	r4, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
9000359e:	6014      	str	r4, [r2, #0]
}
900035a0:	bcf0      	pop	{r4, r5, r6, r7}
900035a2:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
900035a4:	2c30      	cmp	r4, #48	; 0x30
900035a6:	d112      	bne.n	900035ce <TGFX_JPEG_GetDecodeColorConvertFunc+0x8e>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
900035a8:	481c      	ldr	r0, [pc, #112]	; (9000361c <TGFX_JPEG_GetDecodeColorConvertFunc+0xdc>)
900035aa:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
900035ac:	f015 0007 	ands.w	r0, r5, #7
900035b0:	d0dd      	beq.n	9000356e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
900035b2:	f1c0 0708 	rsb	r7, r0, #8
900035b6:	615f      	str	r7, [r3, #20]
900035b8:	e7db      	b.n	90003572 <TGFX_JPEG_GetDecodeColorConvertFunc+0x32>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
900035ba:	2f01      	cmp	r7, #1
900035bc:	d017      	beq.n	900035ee <TGFX_JPEG_GetDecodeColorConvertFunc+0xae>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
900035be:	2f02      	cmp	r7, #2
900035c0:	d008      	beq.n	900035d4 <TGFX_JPEG_GetDecodeColorConvertFunc+0x94>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900035c2:	4817      	ldr	r0, [pc, #92]	; (90003620 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe0>)
900035c4:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035c6:	f015 0007 	ands.w	r0, r5, #7
900035ca:	d1f2      	bne.n	900035b2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
900035cc:	e7cf      	b.n	9000356e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
900035ce:	2001      	movs	r0, #1
}
900035d0:	bcf0      	pop	{r4, r5, r6, r7}
900035d2:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035d4:	4813      	ldr	r0, [pc, #76]	; (90003624 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>)
900035d6:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035d8:	f015 000f 	ands.w	r0, r5, #15
900035dc:	d116      	bne.n	9000360c <TGFX_JPEG_GetDecodeColorConvertFunc+0xcc>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035de:	4607      	mov	r7, r0
900035e0:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
900035e2:	f04f 0c10 	mov.w	ip, #16
900035e6:	2108      	movs	r1, #8
900035e8:	e9c3 c107 	strd	ip, r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
900035ec:	e7c5      	b.n	9000357a <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900035ee:	480e      	ldr	r0, [pc, #56]	; (90003628 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>)
900035f0:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035f2:	f015 000f 	ands.w	r0, r5, #15
900035f6:	d105      	bne.n	90003604 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035f8:	4607      	mov	r7, r0
900035fa:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
900035fc:	2110      	movs	r1, #16
      JPEG_ConvertorParams.V_factor  = 16;
900035fe:	e9c3 1107 	strd	r1, r1, [r3, #28]
90003602:	e7ba      	b.n	9000357a <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
90003604:	f1c0 0710 	rsb	r7, r0, #16
90003608:	615f      	str	r7, [r3, #20]
9000360a:	e7f7      	b.n	900035fc <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
9000360c:	f1c0 0710 	rsb	r7, r0, #16
90003610:	615f      	str	r7, [r3, #20]
90003612:	e7e6      	b.n	900035e2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
90003614:	24009d2c 	.word	0x24009d2c
90003618:	90003195 	.word	0x90003195
9000361c:	900032c5 	.word	0x900032c5
90003620:	90002e99 	.word	0x90002e99
90003624:	90002bc5 	.word	0x90002bc5
90003628:	900029a9 	.word	0x900029a9

9000362c <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
9000362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003630:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003760 <TGFX_JPEG_InitColorTables+0x134>
90003634:	b08b      	sub	sp, #44	; 0x2c
90003636:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003764 <TGFX_JPEG_InitColorTables+0x138>
9000363a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000363e:	f8df e128 	ldr.w	lr, [pc, #296]	; 90003768 <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003642:	2300      	movs	r3, #0
90003644:	4f3d      	ldr	r7, [pc, #244]	; (9000373c <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003646:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000364a:	4e3d      	ldr	r6, [pc, #244]	; (90003740 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000364c:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003650:	4d3c      	ldr	r5, [pc, #240]	; (90003744 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003652:	f644 498b 	movw	r9, #19595	; 0x4c8b
90003656:	4c3c      	ldr	r4, [pc, #240]	; (90003748 <TGFX_JPEG_InitColorTables+0x11c>)
90003658:	483c      	ldr	r0, [pc, #240]	; (9000374c <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000365a:	f249 6245 	movw	r2, #38469	; 0x9645
9000365e:	fb02 f203 	mul.w	r2, r2, r3
90003662:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003666:	1412      	asrs	r2, r2, #16
90003668:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000366c:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003670:	fb02 f203 	mul.w	r2, r2, r3
90003674:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003678:	1412      	asrs	r2, r2, #16
9000367a:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000367e:	4a34      	ldr	r2, [pc, #208]	; (90003750 <TGFX_JPEG_InitColorTables+0x124>)
90003680:	fb02 f203 	mul.w	r2, r2, r3
90003684:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003688:	1412      	asrs	r2, r2, #16
9000368a:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000368e:	4a31      	ldr	r2, [pc, #196]	; (90003754 <TGFX_JPEG_InitColorTables+0x128>)
90003690:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003694:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003696:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
9000369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000369e:	ea4f 4222 	mov.w	r2, r2, asr #16
900036a2:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a6:	4a2c      	ldr	r2, [pc, #176]	; (90003758 <TGFX_JPEG_InitColorTables+0x12c>)
900036a8:	fb02 b203 	mla	r2, r2, r3, fp
900036ac:	ea4f 4222 	mov.w	r2, r2, asr #16
900036b0:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036b4:	4a29      	ldr	r2, [pc, #164]	; (9000375c <TGFX_JPEG_InitColorTables+0x130>)
900036b6:	fb02 a203 	mla	r2, r2, r3, sl
900036ba:	ea4f 4222 	mov.w	r2, r2, asr #16
900036be:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c2:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900036c6:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c8:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036cc:	f343 024f 	sbfx	r2, r3, #1, #16
900036d0:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900036d4:	d1c1      	bne.n	9000365a <TGFX_JPEG_InitColorTables+0x2e>
900036d6:	f8df e094 	ldr.w	lr, [pc, #148]	; 9000376c <TGFX_JPEG_InitColorTables+0x140>
900036da:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900036dc:	f04f 0c00 	mov.w	ip, #0
900036e0:	e007      	b.n	900036f2 <TGFX_JPEG_InitColorTables+0xc6>
900036e2:	f10c 0c01 	add.w	ip, ip, #1
900036e6:	f10e 0e20 	add.w	lr, lr, #32
900036ea:	4641      	mov	r1, r8
900036ec:	f1bc 0f10 	cmp.w	ip, #16
900036f0:	d03e      	beq.n	90003770 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900036f2:	f1bc 0f07 	cmp.w	ip, #7
900036f6:	f101 0808 	add.w	r8, r1, #8
900036fa:	4672      	mov	r2, lr
900036fc:	f04f 0001 	mov.w	r0, #1
90003700:	bf94      	ite	ls
90003702:	2600      	movls	r6, #0
90003704:	2601      	movhi	r6, #1
90003706:	fa1f f388 	uxth.w	r3, r8
9000370a:	2400      	movs	r4, #0
9000370c:	2c07      	cmp	r4, #7
9000370e:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
90003712:	bf94      	ite	ls
90003714:	2700      	movls	r7, #0
90003716:	2701      	movhi	r7, #1
90003718:	2f00      	cmp	r7, #0
9000371a:	f000 8356 	beq.w	90003dca <TGFX_JPEG_InitColorTables+0x79e>
9000371e:	2e00      	cmp	r6, #0
90003720:	f000 8353 	beq.w	90003dca <TGFX_JPEG_InitColorTables+0x79e>
90003724:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
90003728:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000372a:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
9000372c:	d0d9      	beq.n	900036e2 <TGFX_JPEG_InitColorTables+0xb6>
9000372e:	3301      	adds	r3, #1
90003730:	3401      	adds	r4, #1
90003732:	3001      	adds	r0, #1
90003734:	3202      	adds	r2, #2
90003736:	b29b      	uxth	r3, r3
90003738:	3101      	adds	r1, #1
9000373a:	e7e7      	b.n	9000370c <TGFX_JPEG_InitColorTables+0xe0>
9000373c:	2400a8e8 	.word	0x2400a8e8
90003740:	24008ca8 	.word	0x24008ca8
90003744:	240070a8 	.word	0x240070a8
90003748:	240090a8 	.word	0x240090a8
9000374c:	240074a8 	.word	0x240074a8
90003750:	ffffd4d1 	.word	0xffffd4d1
90003754:	ffffab30 	.word	0xffffab30
90003758:	ffff94d1 	.word	0xffff94d1
9000375c:	ffffeb30 	.word	0xffffeb30
90003760:	240078a8 	.word	0x240078a8
90003764:	2400ace8 	.word	0x2400ace8
90003768:	240094a8 	.word	0x240094a8
9000376c:	2400a6ec 	.word	0x2400a6ec
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003770:	2300      	movs	r3, #0
90003772:	f8df b370 	ldr.w	fp, [pc, #880]	; 90003ae4 <TGFX_JPEG_InitColorTables+0x4b8>
90003776:	f8df a370 	ldr.w	sl, [pc, #880]	; 90003ae8 <TGFX_JPEG_InitColorTables+0x4bc>
  for(i = 0; i < 16; i++)
9000377a:	2680      	movs	r6, #128	; 0x80
9000377c:	f8df 836c 	ldr.w	r8, [pc, #876]	; 90003aec <TGFX_JPEG_InitColorTables+0x4c0>
90003780:	f8df e36c 	ldr.w	lr, [pc, #876]	; 90003af0 <TGFX_JPEG_InitColorTables+0x4c4>
90003784:	f8df c36c 	ldr.w	ip, [pc, #876]	; 90003af4 <TGFX_JPEG_InitColorTables+0x4c8>
90003788:	4fce      	ldr	r7, [pc, #824]	; (90003ac4 <TGFX_JPEG_InitColorTables+0x498>)
  for(i = 0; i < 16; i++)
9000378a:	9300      	str	r3, [sp, #0]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000378c:	f106 0441 	add.w	r4, r6, #65	; 0x41
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003790:	9800      	ldr	r0, [sp, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003792:	f106 0240 	add.w	r2, r6, #64	; 0x40
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003796:	1c71      	adds	r1, r6, #1
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003798:	b2a4      	uxth	r4, r4
9000379a:	f106 0542 	add.w	r5, r6, #66	; 0x42
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000379e:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
900037a0:	3001      	adds	r0, #1
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037a2:	f8ae 4004 	strh.w	r4, [lr, #4]
900037a6:	b292      	uxth	r2, r2
900037a8:	f8ae 4006 	strh.w	r4, [lr, #6]
900037ac:	f106 0443 	add.w	r4, r6, #67	; 0x43
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037b0:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900037b2:	9000      	str	r0, [sp, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037b4:	b2a4      	uxth	r4, r4
900037b6:	f8ae 2000 	strh.w	r2, [lr]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037ba:	b29b      	uxth	r3, r3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037bc:	f8ae 2002 	strh.w	r2, [lr, #2]
900037c0:	9401      	str	r4, [sp, #4]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037c2:	1d34      	adds	r4, r6, #4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c4:	f503 7080 	add.w	r0, r3, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037c8:	b289      	uxth	r1, r1
900037ca:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037cc:	f203 1201 	addw	r2, r3, #257	; 0x101
900037d0:	b280      	uxth	r0, r0
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037d2:	f8aa 1004 	strh.w	r1, [sl, #4]
900037d6:	9402      	str	r4, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037d8:	f106 0444 	add.w	r4, r6, #68	; 0x44
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037dc:	b292      	uxth	r2, r2
900037de:	f8ab 0000 	strh.w	r0, [fp]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037e2:	b2a4      	uxth	r4, r4

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037e4:	8038      	strh	r0, [r7, #0]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037e6:	f8ab 0002 	strh.w	r0, [fp, #2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900037ea:	f503 79a1 	add.w	r9, r3, #322	; 0x142
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037ee:	9403      	str	r4, [sp, #12]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037f0:	1d74      	adds	r4, r6, #5
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037f2:	8078      	strh	r0, [r7, #2]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037f4:	1cb0      	adds	r0, r6, #2
900037f6:	b2a4      	uxth	r4, r4
900037f8:	f8aa 1006 	strh.w	r1, [sl, #6]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037fc:	f503 7181 	add.w	r1, r3, #258	; 0x102
90003800:	f8ab 2004 	strh.w	r2, [fp, #4]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003804:	9404      	str	r4, [sp, #16]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003806:	f106 0445 	add.w	r4, r6, #69	; 0x45
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000380a:	b289      	uxth	r1, r1
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000380c:	80ba      	strh	r2, [r7, #4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000380e:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003810:	f8ab 2006 	strh.w	r2, [fp, #6]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003814:	80fa      	strh	r2, [r7, #6]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003816:	b2ad      	uxth	r5, r5
90003818:	9405      	str	r4, [sp, #20]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000381a:	1db4      	adds	r4, r6, #6
9000381c:	b282      	uxth	r2, r0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000381e:	f8ab 1008 	strh.w	r1, [fp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003822:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003824:	8139      	strh	r1, [r7, #8]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003826:	fa1f f989 	uxth.w	r9, r9
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000382a:	f8ab 100a 	strh.w	r1, [fp, #10]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000382e:	9406      	str	r4, [sp, #24]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003830:	f106 0446 	add.w	r4, r6, #70	; 0x46
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003834:	f8a8 9008 	strh.w	r9, [r8, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003838:	1cf0      	adds	r0, r6, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000383a:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000383c:	f8aa 6000 	strh.w	r6, [sl]
90003840:	f8aa 6002 	strh.w	r6, [sl, #2]
90003844:	b280      	uxth	r0, r0
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003846:	9407      	str	r4, [sp, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003848:	1df4      	adds	r4, r6, #7
9000384a:	f8aa 2008 	strh.w	r2, [sl, #8]
  for(i = 0; i < 16; i++)
9000384e:	f10c 0c20 	add.w	ip, ip, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003852:	b2a4      	uxth	r4, r4
90003854:	f8aa 200a 	strh.w	r2, [sl, #10]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003858:	f8ae 5008 	strh.w	r5, [lr, #8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000385c:	f203 1203 	addw	r2, r3, #259	; 0x103
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003860:	9408      	str	r4, [sp, #32]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003862:	f106 0447 	add.w	r4, r6, #71	; 0x47
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003866:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003868:	f8ae 500a 	strh.w	r5, [lr, #10]
9000386c:	b2a4      	uxth	r4, r4
9000386e:	9d05      	ldr	r5, [sp, #20]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003870:	f8ab 200c 	strh.w	r2, [fp, #12]
  for(i = 0; i < 16; i++)
90003874:	f108 0820 	add.w	r8, r8, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003878:	9409      	str	r4, [sp, #36]	; 0x24
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000387a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000387e:	81ba      	strh	r2, [r7, #12]
  for(i = 0; i < 16; i++)
90003880:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003884:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003886:	81fa      	strh	r2, [r7, #14]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003888:	f82b 2c12 	strh.w	r2, [fp, #-18]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000388c:	f203 1243 	addw	r2, r3, #323	; 0x143
90003890:	f828 4c20 	strh.w	r4, [r8, #-32]
  for(i = 0; i < 16; i++)
90003894:	3720      	adds	r7, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003896:	f828 4c1e 	strh.w	r4, [r8, #-30]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000389a:	f503 74c0 	add.w	r4, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000389e:	b292      	uxth	r2, r2
900038a0:	f828 9c16 	strh.w	r9, [r8, #-22]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038a4:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a6:	f827 1c16 	strh.w	r1, [r7, #-22]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038aa:	f8aa 000c 	strh.w	r0, [sl, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ae:	f203 1185 	addw	r1, r3, #389	; 0x185
900038b2:	f82c 4c20 	strh.w	r4, [ip, #-32]
  for(i = 0; i < 16; i++)
900038b6:	3608      	adds	r6, #8
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038b8:	f82c 4c1e 	strh.w	r4, [ip, #-30]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038bc:	f203 1441 	addw	r4, r3, #321	; 0x141
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038c0:	f8aa 000e 	strh.w	r0, [sl, #14]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038c4:	f203 1045 	addw	r0, r3, #325	; 0x145
900038c8:	b2a4      	uxth	r4, r4
  for(i = 0; i < 16; i++)
900038ca:	f10a 0a20 	add.w	sl, sl, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038ce:	b280      	uxth	r0, r0
  for(i = 0; i < 16; i++)
900038d0:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038d4:	f828 4c1c 	strh.w	r4, [r8, #-28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d8:	b289      	uxth	r1, r1
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038da:	f828 4c1a 	strh.w	r4, [r8, #-26]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038de:	f203 1481 	addw	r4, r3, #385	; 0x181
  for(i = 0; i < 16; i++)
900038e2:	b2b6      	uxth	r6, r6
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038e4:	b2a4      	uxth	r4, r4
900038e6:	f82c 4c1c 	strh.w	r4, [ip, #-28]
900038ea:	f82c 4c1a 	strh.w	r4, [ip, #-26]
900038ee:	f503 74c1 	add.w	r4, r3, #386	; 0x182
900038f2:	b2a4      	uxth	r4, r4
900038f4:	f82c 4c18 	strh.w	r4, [ip, #-24]
900038f8:	f82c 4c16 	strh.w	r4, [ip, #-22]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038fc:	9c01      	ldr	r4, [sp, #4]
900038fe:	f82e 4c14 	strh.w	r4, [lr, #-20]
90003902:	f82e 4c12 	strh.w	r4, [lr, #-18]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003906:	9c02      	ldr	r4, [sp, #8]
90003908:	f82a 4c10 	strh.w	r4, [sl, #-16]
9000390c:	f82a 4c0e 	strh.w	r4, [sl, #-14]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003910:	9c03      	ldr	r4, [sp, #12]
90003912:	f82e 4c10 	strh.w	r4, [lr, #-16]
90003916:	f82e 4c0e 	strh.w	r4, [lr, #-14]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000391a:	9c04      	ldr	r4, [sp, #16]
9000391c:	f82a 4c0c 	strh.w	r4, [sl, #-12]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003920:	f82e 5c0c 	strh.w	r5, [lr, #-12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003924:	f828 2c14 	strh.w	r2, [r8, #-20]
90003928:	f828 2c12 	strh.w	r2, [r8, #-18]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000392c:	f203 1283 	addw	r2, r3, #387	; 0x183
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003930:	f82a 4c0a 	strh.w	r4, [sl, #-10]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003934:	b292      	uxth	r2, r2
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003936:	9c06      	ldr	r4, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003938:	f828 0c0c 	strh.w	r0, [r8, #-12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000393c:	f82c 2c14 	strh.w	r2, [ip, #-20]
90003940:	f82c 2c12 	strh.w	r2, [ip, #-18]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003944:	f503 7282 	add.w	r2, r3, #260	; 0x104
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003948:	f82a 4c08 	strh.w	r4, [sl, #-8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000394c:	b292      	uxth	r2, r2
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000394e:	f82a 4c06 	strh.w	r4, [sl, #-6]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003952:	9c07      	ldr	r4, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003954:	f82b 2c10 	strh.w	r2, [fp, #-16]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003958:	f827 2c10 	strh.w	r2, [r7, #-16]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000395c:	f82b 2c0e 	strh.w	r2, [fp, #-14]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003960:	f827 2c0e 	strh.w	r2, [r7, #-14]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003964:	f503 72a2 	add.w	r2, r3, #324	; 0x144
90003968:	f828 0c0a 	strh.w	r0, [r8, #-10]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000396c:	f503 70c3 	add.w	r0, r3, #390	; 0x186
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003970:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003972:	f82e 4c08 	strh.w	r4, [lr, #-8]
90003976:	f82e 4c06 	strh.w	r4, [lr, #-6]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000397a:	b280      	uxth	r0, r0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000397c:	f828 2c10 	strh.w	r2, [r8, #-16]
90003980:	f828 2c0e 	strh.w	r2, [r8, #-14]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003984:	f503 72c2 	add.w	r2, r3, #388	; 0x184
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003988:	9c08      	ldr	r4, [sp, #32]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000398a:	b292      	uxth	r2, r2
9000398c:	f82c 1c0c 	strh.w	r1, [ip, #-12]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003990:	f82a 4c04 	strh.w	r4, [sl, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003994:	f82c 2c10 	strh.w	r2, [ip, #-16]
90003998:	f82c 2c0e 	strh.w	r2, [ip, #-14]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000399c:	f203 1205 	addw	r2, r3, #261	; 0x105
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039a0:	f82a 4c02 	strh.w	r4, [sl, #-2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039a4:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900039a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039a8:	f82c 1c0a 	strh.w	r1, [ip, #-10]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039ac:	f203 1147 	addw	r1, r3, #327	; 0x147
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b0:	f82b 2c0c 	strh.w	r2, [fp, #-12]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b4:	f827 2c0c 	strh.w	r2, [r7, #-12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039b8:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039ba:	f82b 2c0a 	strh.w	r2, [fp, #-10]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039be:	f827 2c0a 	strh.w	r2, [r7, #-10]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039c2:	f203 1207 	addw	r2, r3, #263	; 0x107
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900039c6:	f82e 5c0a 	strh.w	r5, [lr, #-10]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039ca:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900039cc:	f82e 4c04 	strh.w	r4, [lr, #-4]
900039d0:	f82e 4c02 	strh.w	r4, [lr, #-2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039d4:	f503 74a3 	add.w	r4, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039d8:	f82b 2c04 	strh.w	r2, [fp, #-4]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039dc:	f827 2c04 	strh.w	r2, [r7, #-4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039e0:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039e2:	f82b 2c02 	strh.w	r2, [fp, #-2]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039e6:	f827 2c02 	strh.w	r2, [r7, #-2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039ea:	f503 7283 	add.w	r2, r3, #262	; 0x106
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ee:	f82c 0c08 	strh.w	r0, [ip, #-8]
900039f2:	f203 1387 	addw	r3, r3, #391	; 0x187
900039f6:	f82c 0c06 	strh.w	r0, [ip, #-6]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039fa:	b292      	uxth	r2, r2
  for(i = 0; i < 16; i++)
900039fc:	9800      	ldr	r0, [sp, #0]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039fe:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a00:	f82b 2c08 	strh.w	r2, [fp, #-8]
  for(i = 0; i < 16; i++)
90003a04:	2810      	cmp	r0, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a06:	f828 4c08 	strh.w	r4, [r8, #-8]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0a:	f827 2c08 	strh.w	r2, [r7, #-8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0e:	f82b 2c06 	strh.w	r2, [fp, #-6]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a12:	f828 4c06 	strh.w	r4, [r8, #-6]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a16:	f827 2c06 	strh.w	r2, [r7, #-6]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a1a:	f828 1c04 	strh.w	r1, [r8, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a1e:	f82c 3c04 	strh.w	r3, [ip, #-4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a22:	f828 1c02 	strh.w	r1, [r8, #-2]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a26:	f82c 3c02 	strh.w	r3, [ip, #-2]
  for(i = 0; i < 16; i++)
90003a2a:	f47f aeaf 	bne.w	9000378c <TGFX_JPEG_InitColorTables+0x160>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a2e:	4826      	ldr	r0, [pc, #152]	; (90003ac8 <TGFX_JPEG_InitColorTables+0x49c>)
90003a30:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003a34:	4925      	ldr	r1, [pc, #148]	; (90003acc <TGFX_JPEG_InitColorTables+0x4a0>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a36:	6004      	str	r4, [r0, #0]
90003a38:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003a3c:	4a24      	ldr	r2, [pc, #144]	; (90003ad0 <TGFX_JPEG_InitColorTables+0x4a4>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a3e:	6044      	str	r4, [r0, #4]
90003a40:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003a44:	4b23      	ldr	r3, [pc, #140]	; (90003ad4 <TGFX_JPEG_InitColorTables+0x4a8>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a46:	6084      	str	r4, [r0, #8]
90003a48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a4c:	4f22      	ldr	r7, [pc, #136]	; (90003ad8 <TGFX_JPEG_InitColorTables+0x4ac>)
90003a4e:	60c4      	str	r4, [r0, #12]
90003a50:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a54:	4e21      	ldr	r6, [pc, #132]	; (90003adc <TGFX_JPEG_InitColorTables+0x4b0>)
90003a56:	6104      	str	r4, [r0, #16]
90003a58:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a5c:	4d20      	ldr	r5, [pc, #128]	; (90003ae0 <TGFX_JPEG_InitColorTables+0x4b4>)
90003a5e:	6144      	str	r4, [r0, #20]
90003a60:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a64:	f8df b090 	ldr.w	fp, [pc, #144]	; 90003af8 <TGFX_JPEG_InitColorTables+0x4cc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a68:	6184      	str	r4, [r0, #24]
90003a6a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a6e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 90003afc <TGFX_JPEG_InitColorTables+0x4d0>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a72:	61c4      	str	r4, [r0, #28]
90003a74:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a78:	f8df 9084 	ldr.w	r9, [pc, #132]	; 90003b00 <TGFX_JPEG_InitColorTables+0x4d4>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a7c:	6204      	str	r4, [r0, #32]
90003a7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a82:	f8df 8080 	ldr.w	r8, [pc, #128]	; 90003b04 <TGFX_JPEG_InitColorTables+0x4d8>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a86:	6244      	str	r4, [r0, #36]	; 0x24
90003a88:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a8c:	f8df e078 	ldr.w	lr, [pc, #120]	; 90003b08 <TGFX_JPEG_InitColorTables+0x4dc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a90:	6284      	str	r4, [r0, #40]	; 0x28
90003a92:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a96:	62c4      	str	r4, [r0, #44]	; 0x2c
90003a98:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a9c:	6304      	str	r4, [r0, #48]	; 0x30
90003a9e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aa2:	6344      	str	r4, [r0, #52]	; 0x34
90003aa4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aa8:	6384      	str	r4, [r0, #56]	; 0x38
90003aaa:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aae:	63c4      	str	r4, [r0, #60]	; 0x3c
90003ab0:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ab4:	6404      	str	r4, [r0, #64]	; 0x40
90003ab6:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aba:	6444      	str	r4, [r0, #68]	; 0x44
90003abc:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ac0:	e024      	b.n	90003b0c <TGFX_JPEG_InitColorTables+0x4e0>
90003ac2:	bf00      	nop
90003ac4:	2400a3ec 	.word	0x2400a3ec
90003ac8:	2400a66c 	.word	0x2400a66c
90003acc:	24009cac 	.word	0x24009cac
90003ad0:	2400a16c 	.word	0x2400a16c
90003ad4:	2400a5ec 	.word	0x2400a5ec
90003ad8:	240088a8 	.word	0x240088a8
90003adc:	24007ca8 	.word	0x24007ca8
90003ae0:	240084a8 	.word	0x240084a8
90003ae4:	240098ac 	.word	0x240098ac
90003ae8:	24009aac 	.word	0x24009aac
90003aec:	24009d6c 	.word	0x24009d6c
90003af0:	24009f6c 	.word	0x24009f6c
90003af4:	2400a1ec 	.word	0x2400a1ec
90003af8:	000166e8 	.word	0x000166e8
90003afc:	0001c5a0 	.word	0x0001c5a0
90003b00:	ffff4930 	.word	0xffff4930
90003b04:	ffffa7e8 	.word	0xffffa7e8
90003b08:	00b3f400 	.word	0x00b3f400
90003b0c:	6484      	str	r4, [r0, #72]	; 0x48
90003b0e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b12:	64c4      	str	r4, [r0, #76]	; 0x4c
90003b14:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b18:	6504      	str	r4, [r0, #80]	; 0x50
90003b1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b1e:	6544      	str	r4, [r0, #84]	; 0x54
90003b20:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b24:	6584      	str	r4, [r0, #88]	; 0x58
90003b26:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b2a:	65c4      	str	r4, [r0, #92]	; 0x5c
90003b2c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b30:	6604      	str	r4, [r0, #96]	; 0x60
90003b32:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b36:	6644      	str	r4, [r0, #100]	; 0x64
90003b38:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b3c:	6684      	str	r4, [r0, #104]	; 0x68
90003b3e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b42:	66c4      	str	r4, [r0, #108]	; 0x6c
90003b44:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b48:	6704      	str	r4, [r0, #112]	; 0x70
90003b4a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b4e:	6744      	str	r4, [r0, #116]	; 0x74
90003b50:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b54:	6784      	str	r4, [r0, #120]	; 0x78
90003b56:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b5a:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003b5c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b60:	48a1      	ldr	r0, [pc, #644]	; (90003de8 <TGFX_JPEG_InitColorTables+0x7bc>)
90003b62:	e9c1 4000 	strd	r4, r0, [r1]
90003b66:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b6a:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b6e:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003b72:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b76:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b7a:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003b7e:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b82:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b86:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003b8a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b8e:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b92:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003b96:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b9a:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b9e:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003ba2:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ba6:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003baa:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003bae:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bb2:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bb6:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003bba:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bbe:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bc2:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003bc6:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bca:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bce:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003bd2:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bd6:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bda:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003bde:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003be2:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003be6:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003bea:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bee:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bf2:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003bf6:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bfa:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bfe:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003c02:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003c06:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003c0a:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003c0e:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003c12:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003c16:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003c1a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003c1e:	4973      	ldr	r1, [pc, #460]	; (90003dec <TGFX_JPEG_InitColorTables+0x7c0>)
90003c20:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003c24:	e9c2 4100 	strd	r4, r1, [r2]
90003c28:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c2c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c30:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003c34:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c38:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c3c:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003c40:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c44:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c48:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003c4c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c50:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c54:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003c58:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c5c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c60:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003c64:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c68:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c6c:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003c70:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c74:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c78:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003c7c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c80:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c84:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003c88:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c8c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c90:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003c94:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c98:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c9c:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003ca0:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ca4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ca8:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003cac:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003cb0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003cb4:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003cb8:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003cbc:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003cc0:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003cc4:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003cc8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ccc:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003cd0:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cd4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003cd8:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cdc:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003ce0:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003ce4:	4a42      	ldr	r2, [pc, #264]	; (90003df0 <TGFX_JPEG_InitColorTables+0x7c4>)
90003ce6:	e9c3 4000 	strd	r4, r0, [r3]
90003cea:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003cee:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003cf2:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003cf6:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003cfa:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003cfe:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003d02:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003d06:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d0a:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d0e:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d12:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d16:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003d1a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003d1e:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d22:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d26:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d2a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d2e:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003d32:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003d36:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d3a:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d3e:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d42:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d46:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003d4a:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003d4e:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d52:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d56:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d5a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d5e:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003d62:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003d66:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d6a:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d6e:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d72:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d76:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003d7a:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003d7e:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d82:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d86:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d8a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d8e:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003d92:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003d96:	4c17      	ldr	r4, [pc, #92]	; (90003df4 <TGFX_JPEG_InitColorTables+0x7c8>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003d98:	4817      	ldr	r0, [pc, #92]	; (90003df8 <TGFX_JPEG_InitColorTables+0x7cc>)
90003d9a:	4918      	ldr	r1, [pc, #96]	; (90003dfc <TGFX_JPEG_InitColorTables+0x7d0>)
90003d9c:	4a18      	ldr	r2, [pc, #96]	; (90003e00 <TGFX_JPEG_InitColorTables+0x7d4>)
90003d9e:	4b19      	ldr	r3, [pc, #100]	; (90003e04 <TGFX_JPEG_InitColorTables+0x7d8>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003da0:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003da4:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003da6:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003daa:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003dac:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003db0:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003db2:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003db6:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90003dba:	4452      	add	r2, sl
90003dbc:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003dbe:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90003dc2:	d1ed      	bne.n	90003da0 <TGFX_JPEG_InitColorTables+0x774>
}
90003dc4:	b00b      	add	sp, #44	; 0x2c
90003dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90003dca:	f1bc 0f07 	cmp.w	ip, #7
90003dce:	d802      	bhi.n	90003dd6 <TGFX_JPEG_InitColorTables+0x7aa>
90003dd0:	b10f      	cbz	r7, 90003dd6 <TGFX_JPEG_InitColorTables+0x7aa>
90003dd2:	460d      	mov	r5, r1
90003dd4:	e4a8      	b.n	90003728 <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
90003dd6:	2c07      	cmp	r4, #7
90003dd8:	f63f aca6 	bhi.w	90003728 <TGFX_JPEG_InitColorTables+0xfc>
90003ddc:	2e00      	cmp	r6, #0
90003dde:	f43f aca3 	beq.w	90003728 <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003de2:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
90003de4:	e4a3      	b.n	9000372e <TGFX_JPEG_InitColorTables+0x102>
90003de6:	bf00      	nop
90003de8:	00430042 	.word	0x00430042
90003dec:	00830082 	.word	0x00830082
90003df0:	00c700c6 	.word	0x00c700c6
90003df4:	240080a8 	.word	0x240080a8
90003df8:	002c0c00 	.word	0x002c0c00
90003dfc:	005b6800 	.word	0x005b6800
90003e00:	ff1db000 	.word	0xff1db000
90003e04:	ff4d0c00 	.word	0xff4d0c00

90003e08 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90003e08:	4901      	ldr	r1, [pc, #4]	; (90003e10 <vApplicationIdleHook+0x8>)
90003e0a:	2000      	movs	r0, #0
90003e0c:	f00a b930 	b.w	9000e070 <vTaskSetApplicationTaskTag>
90003e10:	90000945 	.word	0x90000945

90003e14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90003e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
90003e16:	2064      	movs	r0, #100	; 0x64
90003e18:	f007 fec2 	bl	9000bba0 <osDelay>
  for(;;)
90003e1c:	e7fb      	b.n	90003e16 <StartDefaultTask+0x2>
90003e1e:	bf00      	nop

90003e20 <SystemClock_Config>:
{
90003e20:	b510      	push	{r4, lr}
90003e22:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90003e24:	224c      	movs	r2, #76	; 0x4c
90003e26:	2100      	movs	r1, #0
90003e28:	a80a      	add	r0, sp, #40	; 0x28
90003e2a:	f01d fa89 	bl	90021340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90003e2e:	2220      	movs	r2, #32
90003e30:	2100      	movs	r1, #0
90003e32:	a802      	add	r0, sp, #8
90003e34:	f01d fa84 	bl	90021340 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90003e38:	2002      	movs	r0, #2
90003e3a:	f005 fdfb 	bl	90009a34 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90003e3e:	4b23      	ldr	r3, [pc, #140]	; (90003ecc <SystemClock_Config+0xac>)
90003e40:	2100      	movs	r1, #0
90003e42:	4a23      	ldr	r2, [pc, #140]	; (90003ed0 <SystemClock_Config+0xb0>)
90003e44:	9101      	str	r1, [sp, #4]
90003e46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90003e48:	f021 0101 	bic.w	r1, r1, #1
90003e4c:	62d9      	str	r1, [r3, #44]	; 0x2c
90003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003e50:	f003 0301 	and.w	r3, r3, #1
90003e54:	9301      	str	r3, [sp, #4]
90003e56:	6993      	ldr	r3, [r2, #24]
90003e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90003e5c:	6193      	str	r3, [r2, #24]
90003e5e:	6993      	ldr	r3, [r2, #24]
90003e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90003e64:	9301      	str	r3, [sp, #4]
90003e66:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90003e68:	6993      	ldr	r3, [r2, #24]
90003e6a:	049b      	lsls	r3, r3, #18
90003e6c:	d5fc      	bpl.n	90003e68 <SystemClock_Config+0x48>
  RCC_OscInitStruct.PLL.PLLM = 5;
90003e6e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90003e70:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90003e72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
90003e76:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLM = 5;
90003e78:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 160;
90003e7a:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90003e7c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90003e7e:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 160;
90003e80:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
90003e82:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90003e84:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90003e86:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLQ = 4;
90003e88:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90003e8a:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = 2;
90003e8c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
90003e8e:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90003e90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90003e94:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90003e96:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90003e9a:	f005 fe87 	bl	90009bac <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90003e9e:	223f      	movs	r2, #63	; 0x3f
90003ea0:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90003ea2:	4621      	mov	r1, r4
90003ea4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90003ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
90003eaa:	2200      	movs	r2, #0
90003eac:	2308      	movs	r3, #8
90003eae:	e9cd 2304 	strd	r2, r3, [sp, #16]
90003eb2:	2240      	movs	r2, #64	; 0x40
90003eb4:	2340      	movs	r3, #64	; 0x40
90003eb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
90003eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
90003ebe:	2340      	movs	r3, #64	; 0x40
90003ec0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90003ec4:	f006 fa06 	bl	9000a2d4 <HAL_RCC_ClockConfig>
}
90003ec8:	b01e      	add	sp, #120	; 0x78
90003eca:	bd10      	pop	{r4, pc}
90003ecc:	58000400 	.word	0x58000400
90003ed0:	58024800 	.word	0x58024800
90003ed4:	00000000 	.word	0x00000000

90003ed8 <main>:
{
90003ed8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90003edc:	2400      	movs	r4, #0
{
90003ede:	b09b      	sub	sp, #108	; 0x6c
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90003ee0:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003ee2:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003ee4:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90003ee6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
90003eea:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_MPU_Disable();
90003eee:	f002 fd79 	bl	900069e4 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90003ef2:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003ef6:	f8df c398 	ldr.w	ip, [pc, #920]	; 90004290 <main+0x3b8>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003efa:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.BaseAddress = 0x24000000;
90003efc:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003efe:	4bd8      	ldr	r3, [pc, #864]	; (90004260 <main+0x388>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90003f00:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003f04:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f08:	f002 fd8a 	bl	90006a20 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90003f0c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f10:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003f12:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  MPU_InitStruct.BaseAddress = 0x90000000;
90003f16:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90003f18:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90003f1c:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003f20:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f24:	f002 fd7c 	bl	90006a20 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90003f28:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f2a:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003f2c:	f8ad 603b 	strh.w	r6, [sp, #59]	; 0x3b
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90003f30:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
90003f34:	231a      	movs	r3, #26
90003f36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90003f3a:	f240 1301 	movw	r3, #257	; 0x101
90003f3e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f42:	f002 fd6d 	bl	90006a20 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003f46:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f4a:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90003f4c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90003f50:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003f52:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
  MPU_InitStruct.BaseAddress = 0xD0000000;
90003f56:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003f5a:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  MPU_InitStruct.BaseAddress = 0xD0000000;
90003f5e:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90003f60:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f64:	f002 fd5c 	bl	90006a20 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90003f68:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f6a:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003f6c:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90003f70:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90003f74:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90003f78:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f7c:	f002 fd50 	bl	90006a20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90003f80:	4620      	mov	r0, r4
90003f82:	f002 fd3d 	bl	90006a00 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90003f86:	4ab7      	ldr	r2, [pc, #732]	; (90004264 <main+0x38c>)
90003f88:	6953      	ldr	r3, [r2, #20]
90003f8a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
90003f8e:	d111      	bne.n	90003fb4 <main+0xdc>
  __ASM volatile ("dsb 0xF":::"memory");
90003f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003f94:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90003f98:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90003f9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003fa0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90003fa4:	6953      	ldr	r3, [r2, #20]
90003fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90003faa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90003fac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003fb0:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90003fb4:	48ab      	ldr	r0, [pc, #684]	; (90004264 <main+0x38c>)
90003fb6:	6943      	ldr	r3, [r0, #20]
90003fb8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
90003fbc:	d124      	bne.n	90004008 <main+0x130>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90003fbe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90003fc2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90003fc6:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fca:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90003fce:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90003fd2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90003fd6:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fd8:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90003fdc:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fde:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90003fe2:	3b01      	subs	r3, #1
90003fe4:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fe6:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
90003fea:	d1f8      	bne.n	90003fde <main+0x106>
    } while(sets-- != 0U);
90003fec:	3c20      	subs	r4, #32
90003fee:	f114 0f20 	cmn.w	r4, #32
90003ff2:	d1f1      	bne.n	90003fd8 <main+0x100>
90003ff4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90003ff8:	6943      	ldr	r3, [r0, #20]
90003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003ffe:	6143      	str	r3, [r0, #20]
90004000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004004:	f3bf 8f6f 	isb	sy
  HAL_Init();
90004008:	f002 fc32 	bl	90006870 <HAL_Init>
  SystemClock_Config();
9000400c:	f7ff ff08 	bl	90003e20 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
90004010:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004012:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004014:	4d94      	ldr	r5, [pc, #592]	; (90004268 <main+0x390>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004016:	21c0      	movs	r1, #192	; 0xc0
90004018:	4894      	ldr	r0, [pc, #592]	; (9000426c <main+0x394>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000401a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
9000401c:	4622      	mov	r2, r4
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
9000401e:	f04f 0a00 	mov.w	sl, #0
90004022:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90004026:	f04f 0801 	mov.w	r8, #1
  hltdc.Instance = LTDC;
9000402a:	4e91      	ldr	r6, [pc, #580]	; (90004270 <main+0x398>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000402c:	f04f 0902 	mov.w	r9, #2
  hdma2d.Instance = DMA2D;
90004030:	4f90      	ldr	r7, [pc, #576]	; (90004274 <main+0x39c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004032:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
90004036:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOK_CLK_ENABLE();
9000403a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000403e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90004042:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004046:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000404e:	9302      	str	r3, [sp, #8]
90004050:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90004052:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000405a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000405e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004066:	9303      	str	r3, [sp, #12]
90004068:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
9000406a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000406e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004072:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004076:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000407e:	9304      	str	r3, [sp, #16]
90004080:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90004082:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004086:	f043 0310 	orr.w	r3, r3, #16
9000408a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000408e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004092:	f003 0310 	and.w	r3, r3, #16
90004096:	9305      	str	r3, [sp, #20]
90004098:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
9000409a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000409e:	f043 0302 	orr.w	r3, r3, #2
900040a2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040a6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040aa:	f003 0302 	and.w	r3, r3, #2
900040ae:	9306      	str	r3, [sp, #24]
900040b0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900040b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900040ba:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
900040c6:	9307      	str	r3, [sp, #28]
900040c8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900040ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040ce:	f043 0308 	orr.w	r3, r3, #8
900040d2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040da:	f003 0308 	and.w	r3, r3, #8
900040de:	9308      	str	r3, [sp, #32]
900040e0:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900040e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040e6:	f043 0320 	orr.w	r3, r3, #32
900040ea:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040f2:	f003 0320 	and.w	r3, r3, #32
900040f6:	9309      	str	r3, [sp, #36]	; 0x24
900040f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
900040fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004102:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004106:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000410e:	930a      	str	r3, [sp, #40]	; 0x28
90004110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
90004112:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004116:	f043 0301 	orr.w	r3, r3, #1
9000411a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000411e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004122:	f003 0301 	and.w	r3, r3, #1
90004126:	930b      	str	r3, [sp, #44]	; 0x2c
90004128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
9000412a:	f003 f871 	bl	90007210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
9000412e:	4622      	mov	r2, r4
90004130:	2180      	movs	r1, #128	; 0x80
90004132:	4851      	ldr	r0, [pc, #324]	; (90004278 <main+0x3a0>)
90004134:	f003 f86c 	bl	90007210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004138:	4622      	mov	r2, r4
9000413a:	2108      	movs	r1, #8
9000413c:	484f      	ldr	r0, [pc, #316]	; (9000427c <main+0x3a4>)
9000413e:	f003 f867 	bl	90007210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90004142:	2201      	movs	r2, #1
90004144:	484e      	ldr	r0, [pc, #312]	; (90004280 <main+0x3a8>)
90004146:	4611      	mov	r1, r2
90004148:	f003 f862 	bl	90007210 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
9000414c:	4622      	mov	r2, r4
9000414e:	2144      	movs	r1, #68	; 0x44
90004150:	484c      	ldr	r0, [pc, #304]	; (90004284 <main+0x3ac>)
90004152:	f003 f85d 	bl	90007210 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004156:	22c0      	movs	r2, #192	; 0xc0
90004158:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000415a:	a90c      	add	r1, sp, #48	; 0x30
9000415c:	4843      	ldr	r0, [pc, #268]	; (9000426c <main+0x394>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000415e:	ed9f 8b3e 	vldr	d8, [pc, #248]	; 90004258 <main+0x380>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004162:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
90004166:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000416a:	f002 fe49 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000416e:	2280      	movs	r2, #128	; 0x80
90004170:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004172:	a90c      	add	r1, sp, #48	; 0x30
90004174:	4840      	ldr	r0, [pc, #256]	; (90004278 <main+0x3a0>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004176:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
9000417a:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
9000417e:	f002 fe3f 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
90004182:	2208      	movs	r2, #8
90004184:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004186:	a90c      	add	r1, sp, #48	; 0x30
90004188:	483f      	ldr	r0, [pc, #252]	; (90004288 <main+0x3b0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
9000418a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_3;
9000418e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004192:	f002 fe35 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
90004196:	2208      	movs	r2, #8
90004198:	2301      	movs	r3, #1
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
9000419a:	a90c      	add	r1, sp, #48	; 0x30
9000419c:	4837      	ldr	r0, [pc, #220]	; (9000427c <main+0x3a4>)
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
9000419e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
900041a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900041a6:	f002 fe2b 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
900041aa:	2201      	movs	r2, #1
900041ac:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900041ae:	a90c      	add	r1, sp, #48	; 0x30
900041b0:	4833      	ldr	r0, [pc, #204]	; (90004280 <main+0x3a8>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
900041b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
900041b6:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900041ba:	f002 fe21 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900041be:	2204      	movs	r2, #4
900041c0:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900041c2:	a90c      	add	r1, sp, #48	; 0x30
900041c4:	482f      	ldr	r0, [pc, #188]	; (90004284 <main+0x3ac>)
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900041c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
900041ca:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900041ce:	f002 fe17 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900041d2:	2240      	movs	r2, #64	; 0x40
900041d4:	2301      	movs	r3, #1
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900041d6:	a90c      	add	r1, sp, #48	; 0x30
900041d8:	482a      	ldr	r0, [pc, #168]	; (90004284 <main+0x3ac>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900041da:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
900041de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900041e2:	f002 fe0d 	bl	90006e00 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900041e6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900041ea:	4622      	mov	r2, r4
900041ec:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900041ee:	ea43 0308 	orr.w	r3, r3, r8
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900041f2:	207a      	movs	r0, #122	; 0x7a
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900041f4:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900041f8:	f04f 0b40 	mov.w	fp, #64	; 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
900041fc:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
90004200:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Init.AccumulatedActiveH = 283;
90004204:	f240 250a 	movw	r5, #522	; 0x20a
  __HAL_RCC_MDMA_CLK_ENABLE();
90004208:	ea03 0308 	and.w	r3, r3, r8
9000420c:	9301      	str	r3, [sp, #4]
9000420e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004210:	f002 fb88 	bl	90006924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
90004214:	207a      	movs	r0, #122	; 0x7a
90004216:	f002 fbc3 	bl	900069a0 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
9000421a:	2234      	movs	r2, #52	; 0x34
9000421c:	4621      	mov	r1, r4
9000421e:	a80c      	add	r0, sp, #48	; 0x30
90004220:	f01d f88e 	bl	90021340 <memset>
  hltdc.Instance = LTDC;
90004224:	4b19      	ldr	r3, [pc, #100]	; (9000428c <main+0x3b4>)
  hltdc.Init.VerticalSync = 8;
90004226:	2127      	movs	r1, #39	; 0x27
  hltdc.Init.AccumulatedVBP = 11;
90004228:	202a      	movs	r0, #42	; 0x2a
  hltdc.Instance = LTDC;
9000422a:	6033      	str	r3, [r6, #0]
  hltdc.Init.VerticalSync = 8;
9000422c:	2308      	movs	r3, #8
  hltdc.Init.TotalHeigh = 285;
9000422e:	f44f 7c04 	mov.w	ip, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
90004232:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.Backcolor.Red = 0;
90004234:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.VerticalSync = 8;
90004238:	e9c6 1305 	strd	r1, r3, [r6, #20]
  hltdc.Init.AccumulatedVBP = 11;
9000423c:	230b      	movs	r3, #11
9000423e:	e9c6 0307 	strd	r0, r3, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 283;
90004242:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004246:	4630      	mov	r0, r6
  hltdc.Init.AccumulatedActiveH = 283;
90004248:	e9c6 5309 	strd	r5, r3, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
9000424c:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004250:	e9c6 4401 	strd	r4, r4, [r6, #4]
90004254:	e01e      	b.n	90004294 <main+0x3bc>
90004256:	bf00      	nop
	...
90004260:	01010001 	.word	0x01010001
90004264:	e000ed00 	.word	0xe000ed00
90004268:	58024400 	.word	0x58024400
9000426c:	58020400 	.word	0x58020400
90004270:	2400b1d8 	.word	0x2400b1d8
90004274:	2400b118 	.word	0x2400b118
90004278:	58020c00 	.word	0x58020c00
9000427c:	58021800 	.word	0x58021800
90004280:	58022800 	.word	0x58022800
90004284:	58020000 	.word	0x58020000
90004288:	58021000 	.word	0x58021000
9000428c:	50001000 	.word	0x50001000
90004290:	03000012 	.word	0x03000012
  hltdc.Init.TotalHeigh = 285;
90004294:	e9c6 c30b 	strd	ip, r3, [r6, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90004298:	e9c6 4403 	strd	r4, r4, [r6, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
9000429c:	f004 ffe2 	bl	90009264 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
900042a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900042a4:	4622      	mov	r2, r4
900042a6:	a90c      	add	r1, sp, #48	; 0x30
  pLayerCfg.WindowX1 = 480;
900042a8:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900042aa:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 480;
900042ac:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.WindowY1 = 272;
900042ae:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
900042b2:	940c      	str	r4, [sp, #48]	; 0x30
  pLayerCfg.WindowY1 = 272;
900042b4:	930f      	str	r3, [sp, #60]	; 0x3c
  pLayerCfg.ImageHeight = 272;
900042b6:	9317      	str	r3, [sp, #92]	; 0x5c
  pLayerCfg.Alpha = 255;
900042b8:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowY0 = 0;
900042ba:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.Alpha = 255;
900042bc:	9311      	str	r3, [sp, #68]	; 0x44
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900042be:	2305      	movs	r3, #5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900042c0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  pLayerCfg.Alpha0 = 0;
900042c4:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.FBStartAdress = 0;
900042c6:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.Backcolor.Blue = 0;
900042c8:	f8ad 4060 	strh.w	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Red = 0;
900042cc:	f88d 4062 	strb.w	r4, [sp, #98]	; 0x62
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900042d0:	e9cd a313 	strd	sl, r3, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900042d4:	f005 f89a 	bl	9000940c <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
900042d8:	4b37      	ldr	r3, [pc, #220]	; (900043b8 <main+0x4e0>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900042da:	4638      	mov	r0, r7
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
900042dc:	65fc      	str	r4, [r7, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
900042de:	603b      	str	r3, [r7, #0]
  hdma2d.Init.OutputOffset = 0;
900042e0:	60fc      	str	r4, [r7, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
900042e2:	e9c7 4911 	strd	r4, r9, [r7, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
900042e6:	e9c7 4413 	strd	r4, r4, [r7, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
900042ea:	e9c7 4415 	strd	r4, r4, [r7, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
900042ee:	e9c7 4901 	strd	r4, r9, [r7, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900042f2:	f002 fc3d 	bl	90006b70 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900042f6:	4641      	mov	r1, r8
900042f8:	4638      	mov	r0, r7
900042fa:	f002 fd11 	bl	90006d20 <HAL_DMA2D_ConfigLayer>
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900042fe:	482f      	ldr	r0, [pc, #188]	; (900043bc <main+0x4e4>)
90004300:	4b2f      	ldr	r3, [pc, #188]	; (900043c0 <main+0x4e8>)
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004302:	f44f 6200 	mov.w	r2, #2048	; 0x800
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004306:	a90c      	add	r1, sp, #48	; 0x30
  SdramTiming.RCDDelay = 2;
90004308:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000430c:	6003      	str	r3, [r0, #0]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
9000430e:	2304      	movs	r3, #4
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90004310:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004312:	60c3      	str	r3, [r0, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90004314:	2310      	movs	r3, #16
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90004316:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90004318:	6103      	str	r3, [r0, #16]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000431a:	f44f 73c0 	mov.w	r3, #384	; 0x180
9000431e:	e9c0 b305 	strd	fp, r3, [r0, #20]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90004326:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
9000432a:	2202      	movs	r2, #2
9000432c:	2307      	movs	r3, #7
9000432e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
90004332:	2204      	movs	r2, #4
90004334:	2307      	movs	r3, #7
90004336:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
9000433a:	2205      	movs	r2, #5
9000433c:	2302      	movs	r3, #2
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000433e:	e9c0 8401 	strd	r8, r4, [r0, #4]
  SdramTiming.LoadToActiveDelay = 2;
90004342:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004346:	f007 f899 	bl	9000b47c <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
9000434a:	4620      	mov	r0, r4
9000434c:	f002 f822 	bl	90006394 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90004350:	4620      	mov	r0, r4
90004352:	f002 f86b 	bl	9000642c <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
90004356:	f7fc f83d 	bl	900003d4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
9000435a:	4b1a      	ldr	r3, [pc, #104]	; (900043c4 <main+0x4ec>)
9000435c:	481a      	ldr	r0, [pc, #104]	; (900043c8 <main+0x4f0>)
9000435e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90004360:	f003 ff36 	bl	900081d0 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
90004364:	4819      	ldr	r0, [pc, #100]	; (900043cc <main+0x4f4>)
90004366:	4b1a      	ldr	r3, [pc, #104]	; (900043d0 <main+0x4f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90004368:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
9000436a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
9000436c:	f8c0 8020 	str.w	r8, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90004370:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90004374:	f002 fb86 	bl	90006a84 <HAL_CRC_Init>
  MX_TouchGFX_Init();
90004378:	f7fc f830 	bl	900003dc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
9000437c:	f7fc f82c 	bl	900003d8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
90004380:	f007 fb98 	bl	9000bab4 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004384:	4a13      	ldr	r2, [pc, #76]	; (900043d4 <main+0x4fc>)
90004386:	4621      	mov	r1, r4
90004388:	4813      	ldr	r0, [pc, #76]	; (900043d8 <main+0x500>)
9000438a:	f007 fbbf 	bl	9000bb0c <osThreadNew>
9000438e:	4b13      	ldr	r3, [pc, #76]	; (900043dc <main+0x504>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004390:	4a13      	ldr	r2, [pc, #76]	; (900043e0 <main+0x508>)
90004392:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004394:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004396:	4813      	ldr	r0, [pc, #76]	; (900043e4 <main+0x50c>)
90004398:	f007 fbb8 	bl	9000bb0c <osThreadNew>
9000439c:	4b12      	ldr	r3, [pc, #72]	; (900043e8 <main+0x510>)
9000439e:	4605      	mov	r5, r0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900043a0:	4a12      	ldr	r2, [pc, #72]	; (900043ec <main+0x514>)
900043a2:	4621      	mov	r1, r4
900043a4:	4812      	ldr	r0, [pc, #72]	; (900043f0 <main+0x518>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900043a6:	601d      	str	r5, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900043a8:	f007 fbb0 	bl	9000bb0c <osThreadNew>
900043ac:	4b11      	ldr	r3, [pc, #68]	; (900043f4 <main+0x51c>)
900043ae:	6018      	str	r0, [r3, #0]
  osKernelStart();
900043b0:	f007 fb92 	bl	9000bad8 <osKernelStart>
  while (1)
900043b4:	e7fe      	b.n	900043b4 <main+0x4dc>
900043b6:	bf00      	nop
900043b8:	52001000 	.word	0x52001000
900043bc:	2400b358 	.word	0x2400b358
900043c0:	52004140 	.word	0x52004140
900043c4:	52003000 	.word	0x52003000
900043c8:	2400b180 	.word	0x2400b180
900043cc:	2400b0f4 	.word	0x2400b0f4
900043d0:	58024c00 	.word	0x58024c00
900043d4:	900240b4 	.word	0x900240b4
900043d8:	90003e15 	.word	0x90003e15
900043dc:	2400b0f0 	.word	0x2400b0f0
900043e0:	90024090 	.word	0x90024090
900043e4:	900003ed 	.word	0x900003ed
900043e8:	2400b0ec 	.word	0x2400b0ec
900043ec:	900240d8 	.word	0x900240d8
900043f0:	90002939 	.word	0x90002939
900043f4:	2400b38c 	.word	0x2400b38c

900043f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
900043f8:	4b03      	ldr	r3, [pc, #12]	; (90004408 <HAL_TIM_PeriodElapsedCallback+0x10>)
900043fa:	6802      	ldr	r2, [r0, #0]
900043fc:	429a      	cmp	r2, r3
900043fe:	d000      	beq.n	90004402 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004400:	4770      	bx	lr
    HAL_IncTick();
90004402:	f002 ba65 	b.w	900068d0 <HAL_IncTick>
90004406:	bf00      	nop
90004408:	40001000 	.word	0x40001000

9000440c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
9000440c:	4770      	bx	lr
9000440e:	bf00      	nop

90004410 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004410:	4b0b      	ldr	r3, [pc, #44]	; (90004440 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004412:	2200      	movs	r2, #0
90004414:	210f      	movs	r1, #15
90004416:	f06f 0001 	mvn.w	r0, #1
{
9000441a:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000441c:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004420:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004422:	f044 0402 	orr.w	r4, r4, #2
90004426:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
9000442a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000442e:	f003 0302 	and.w	r3, r3, #2
90004432:	9301      	str	r3, [sp, #4]
90004434:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90004436:	b003      	add	sp, #12
90004438:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
9000443c:	f002 ba72 	b.w	90006924 <HAL_NVIC_SetPriority>
90004440:	58024400 	.word	0x58024400

90004444 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90004444:	4b0a      	ldr	r3, [pc, #40]	; (90004470 <HAL_CRC_MspInit+0x2c>)
90004446:	6802      	ldr	r2, [r0, #0]
90004448:	429a      	cmp	r2, r3
9000444a:	d000      	beq.n	9000444e <HAL_CRC_MspInit+0xa>
9000444c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
9000444e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
90004452:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90004454:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004458:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
9000445c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004468:	9301      	str	r3, [sp, #4]
9000446a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
9000446c:	b002      	add	sp, #8
9000446e:	4770      	bx	lr
90004470:	58024c00 	.word	0x58024c00

90004474 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90004474:	4b0f      	ldr	r3, [pc, #60]	; (900044b4 <HAL_DMA2D_MspInit+0x40>)
90004476:	6802      	ldr	r2, [r0, #0]
90004478:	429a      	cmp	r2, r3
9000447a:	d000      	beq.n	9000447e <HAL_DMA2D_MspInit+0xa>
9000447c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000447e:	4b0e      	ldr	r3, [pc, #56]	; (900044b8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004480:	205a      	movs	r0, #90	; 0x5a
90004482:	2200      	movs	r2, #0
90004484:	2105      	movs	r1, #5
{
90004486:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004488:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
9000448c:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000448e:	f044 0410 	orr.w	r4, r4, #16
90004492:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
90004496:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
9000449a:	f003 0310 	and.w	r3, r3, #16
9000449e:	9301      	str	r3, [sp, #4]
900044a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900044a2:	f002 fa3f 	bl	90006924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900044a6:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900044a8:	b002      	add	sp, #8
900044aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900044ae:	f002 ba77 	b.w	900069a0 <HAL_NVIC_EnableIRQ>
900044b2:	bf00      	nop
900044b4:	52001000 	.word	0x52001000
900044b8:	58024400 	.word	0x58024400

900044bc <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900044bc:	4b3f      	ldr	r3, [pc, #252]	; (900045bc <HAL_JPEG_MspInit+0x100>)
900044be:	6802      	ldr	r2, [r0, #0]
900044c0:	429a      	cmp	r2, r3
900044c2:	d000      	beq.n	900044c6 <HAL_JPEG_MspInit+0xa>
900044c4:	4770      	bx	lr
{
900044c6:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900044c8:	4b3d      	ldr	r3, [pc, #244]	; (900045c0 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900044ca:	2211      	movs	r2, #17
900044cc:	4e3d      	ldr	r6, [pc, #244]	; (900045c4 <HAL_JPEG_MspInit+0x108>)
{
900044ce:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900044d0:	4d3d      	ldr	r5, [pc, #244]	; (900045c8 <HAL_JPEG_MspInit+0x10c>)
900044d2:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900044d4:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900044d6:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
900044d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900044dc:	493b      	ldr	r1, [pc, #236]	; (900045cc <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
900044de:	f042 0220 	orr.w	r2, r2, #32
900044e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900044e6:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
900044e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900044ec:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
900044ee:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900044f2:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
900044f4:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900044f6:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
900044f8:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900044fa:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900044fc:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90004504:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004506:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90004508:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
9000450c:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004510:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
90004512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
90004516:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
9000451a:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000451e:	2313      	movs	r3, #19
90004520:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
90004522:	2302      	movs	r3, #2
90004524:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90004526:	f005 f867 	bl	900095f8 <HAL_MDMA_Init>
9000452a:	2800      	cmp	r0, #0
9000452c:	d13a      	bne.n	900045a4 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
9000452e:	2200      	movs	r2, #0
90004530:	4824      	ldr	r0, [pc, #144]	; (900045c4 <HAL_JPEG_MspInit+0x108>)
90004532:	4611      	mov	r1, r2
90004534:	f005 f8fe 	bl	90009734 <HAL_MDMA_ConfigPostRequestMask>
90004538:	2800      	cmp	r0, #0
9000453a:	d13c      	bne.n	900045b6 <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000453c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000453e:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004540:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004542:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004544:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
90004546:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004548:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000454c:	4920      	ldr	r1, [pc, #128]	; (900045d0 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000454e:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90004550:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
90004552:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004554:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004556:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
9000455a:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000455e:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004560:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004562:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004566:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004568:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000456c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004570:	4815      	ldr	r0, [pc, #84]	; (900045c8 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004572:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004574:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004576:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004578:	f005 f83e 	bl	900095f8 <HAL_MDMA_Init>
9000457c:	b9c0      	cbnz	r0, 900045b0 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
9000457e:	2200      	movs	r2, #0
90004580:	4811      	ldr	r0, [pc, #68]	; (900045c8 <HAL_JPEG_MspInit+0x10c>)
90004582:	4611      	mov	r1, r2
90004584:	f005 f8d6 	bl	90009734 <HAL_MDMA_ConfigPostRequestMask>
90004588:	b978      	cbnz	r0, 900045aa <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
9000458a:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
9000458c:	2079      	movs	r0, #121	; 0x79
9000458e:	2200      	movs	r2, #0
90004590:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004592:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004594:	f002 f9c6 	bl	90006924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004598:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
9000459a:	b002      	add	sp, #8
9000459c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900045a0:	f002 b9fe 	b.w	900069a0 <HAL_NVIC_EnableIRQ>
      Error_Handler();
900045a4:	f7ff ff32 	bl	9000440c <Error_Handler>
900045a8:	e7c1      	b.n	9000452e <HAL_JPEG_MspInit+0x72>
      Error_Handler();
900045aa:	f7ff ff2f 	bl	9000440c <Error_Handler>
900045ae:	e7ec      	b.n	9000458a <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900045b0:	f7ff ff2c 	bl	9000440c <Error_Handler>
900045b4:	e7e3      	b.n	9000457e <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900045b6:	f7ff ff29 	bl	9000440c <Error_Handler>
900045ba:	e7bf      	b.n	9000453c <HAL_JPEG_MspInit+0x80>
900045bc:	52003000 	.word	0x52003000
900045c0:	58024400 	.word	0x58024400
900045c4:	2400b280 	.word	0x2400b280
900045c8:	2400b2ec 	.word	0x2400b2ec
900045cc:	52000200 	.word	0x52000200
900045d0:	520001c0 	.word	0x520001c0

900045d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900045d4:	b5d0      	push	{r4, r6, r7, lr}
900045d6:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900045d8:	2100      	movs	r1, #0
{
900045da:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900045dc:	22c0      	movs	r2, #192	; 0xc0
900045de:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900045e0:	910a      	str	r1, [sp, #40]	; 0x28
900045e2:	e9cd 1106 	strd	r1, r1, [sp, #24]
900045e6:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900045ea:	f01c fea9 	bl	90021340 <memset>
  if(hltdc->Instance==LTDC)
900045ee:	4b4c      	ldr	r3, [pc, #304]	; (90004720 <HAL_LTDC_MspInit+0x14c>)
900045f0:	6822      	ldr	r2, [r4, #0]
900045f2:	429a      	cmp	r2, r3
900045f4:	d001      	beq.n	900045fa <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
900045f6:	b03c      	add	sp, #240	; 0xf0
900045f8:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900045fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
900045fe:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004600:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004602:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004606:	2205      	movs	r2, #5
90004608:	23a0      	movs	r3, #160	; 0xa0
9000460a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
9000460e:	2202      	movs	r2, #2
90004610:	2302      	movs	r3, #2
90004612:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90004616:	2253      	movs	r2, #83	; 0x53
90004618:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000461c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004620:	f006 f930 	bl	9000a884 <HAL_RCCEx_PeriphCLKConfig>
90004624:	2800      	cmp	r0, #0
90004626:	d178      	bne.n	9000471a <HAL_LTDC_MspInit+0x146>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004628:	4b3e      	ldr	r3, [pc, #248]	; (90004724 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
9000462a:	20fc      	movs	r0, #252	; 0xfc
9000462c:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000462e:	240e      	movs	r4, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004630:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004634:	2600      	movs	r6, #0
90004636:	2702      	movs	r7, #2
    __HAL_RCC_LTDC_CLK_ENABLE();
90004638:	f042 0208 	orr.w	r2, r2, #8
9000463c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004640:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004644:	f002 0208 	and.w	r2, r2, #8
90004648:	9201      	str	r2, [sp, #4]
9000464a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000464c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004654:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000465c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004660:	9202      	str	r2, [sp, #8]
90004662:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000466c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004674:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004678:	9203      	str	r2, [sp, #12]
9000467a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
9000467c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004684:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000468c:	f402 7200 	and.w	r2, r2, #512	; 0x200
90004690:	9204      	str	r2, [sp, #16]
90004692:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004694:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
9000469c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900046a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900046a4:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
900046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900046aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900046ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900046b0:	a906      	add	r1, sp, #24
900046b2:	481d      	ldr	r0, [pc, #116]	; (90004728 <HAL_LTDC_MspInit+0x154>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
900046b4:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900046b6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900046ba:	f002 fba1 	bl	90006e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900046be:	f24d 2203 	movw	r2, #53763	; 0xd203
900046c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900046c4:	a906      	add	r1, sp, #24
900046c6:	4819      	ldr	r0, [pc, #100]	; (9000472c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900046c8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900046ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
900046ce:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900046d2:	f002 fb95 	bl	90006e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900046d6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
900046da:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900046dc:	a906      	add	r1, sp, #24
900046de:	4814      	ldr	r0, [pc, #80]	; (90004730 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900046e0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900046e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
900046e6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900046ea:	f002 fb89 	bl	90006e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
900046ee:	2302      	movs	r3, #2
900046f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900046f4:	a906      	add	r1, sp, #24
900046f6:	480f      	ldr	r0, [pc, #60]	; (90004734 <HAL_LTDC_MspInit+0x160>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900046f8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9;
900046fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
900046fe:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004702:	f002 fb7d 	bl	90006e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004706:	2200      	movs	r2, #0
90004708:	2105      	movs	r1, #5
9000470a:	2058      	movs	r0, #88	; 0x58
9000470c:	f002 f90a 	bl	90006924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004710:	2058      	movs	r0, #88	; 0x58
90004712:	f002 f945 	bl	900069a0 <HAL_NVIC_EnableIRQ>
}
90004716:	b03c      	add	sp, #240	; 0xf0
90004718:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
9000471a:	f7ff fe77 	bl	9000440c <Error_Handler>
9000471e:	e783      	b.n	90004628 <HAL_LTDC_MspInit+0x54>
90004720:	50001000 	.word	0x50001000
90004724:	58024400 	.word	0x58024400
90004728:	58022800 	.word	0x58022800
9000472c:	58022000 	.word	0x58022000
90004730:	58022400 	.word	0x58022400
90004734:	58021c00 	.word	0x58021c00

90004738 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004738:	4836      	ldr	r0, [pc, #216]	; (90004814 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
9000473a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
9000473c:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
9000473e:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004740:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004742:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004746:	e9cd 3304 	strd	r3, r3, [sp, #16]
9000474a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
9000474c:	b109      	cbz	r1, 90004752 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
9000474e:	b038      	add	sp, #224	; 0xe0
90004750:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004752:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004754:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004756:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004758:	a80a      	add	r0, sp, #40	; 0x28
9000475a:	f01c fdf1 	bl	90021340 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
9000475e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004762:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004764:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004766:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000476a:	f006 f88b 	bl	9000a884 <HAL_RCCEx_PeriphCLKConfig>
9000476e:	2800      	cmp	r0, #0
90004770:	d14c      	bne.n	9000480c <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004772:	4b29      	ldr	r3, [pc, #164]	; (90004818 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004774:	f64f 7083 	movw	r0, #65411	; 0xff83
90004778:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000477a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
9000477c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004780:	2600      	movs	r6, #0
90004782:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004788:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
9000478c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004790:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004796:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
9000479a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000479c:	a902      	add	r1, sp, #8
9000479e:	481f      	ldr	r0, [pc, #124]	; (9000481c <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
900047a0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
900047a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900047a6:	f002 fb2b 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
900047aa:	f248 1233 	movw	r2, #33075	; 0x8133
900047ae:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900047b0:	a902      	add	r1, sp, #8
900047b2:	481b      	ldr	r0, [pc, #108]	; (90004820 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900047b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
900047b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
900047ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900047be:	f002 fb1f 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
900047c2:	f24c 7203 	movw	r2, #50947	; 0xc703
900047c6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900047c8:	a902      	add	r1, sp, #8
900047ca:	4816      	ldr	r0, [pc, #88]	; (90004824 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900047cc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
900047ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
900047d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900047d6:	f002 fb13 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
900047da:	f64f 023f 	movw	r2, #63551	; 0xf83f
900047de:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
900047e0:	a902      	add	r1, sp, #8
900047e2:	4811      	ldr	r0, [pc, #68]	; (90004828 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900047e4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
900047e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
900047ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
900047ee:	f002 fb07 	bl	90006e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
900047f2:	22e0      	movs	r2, #224	; 0xe0
900047f4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900047f6:	a902      	add	r1, sp, #8
900047f8:	480c      	ldr	r0, [pc, #48]	; (9000482c <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900047fa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
900047fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004800:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004804:	f002 fafc 	bl	90006e00 <HAL_GPIO_Init>
}
90004808:	b038      	add	sp, #224	; 0xe0
9000480a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
9000480c:	f7ff fdfe 	bl	9000440c <Error_Handler>
90004810:	e7af      	b.n	90004772 <HAL_SDRAM_MspInit+0x3a>
90004812:	bf00      	nop
90004814:	2400b394 	.word	0x2400b394
90004818:	58024400 	.word	0x58024400
9000481c:	58021000 	.word	0x58021000
90004820:	58021800 	.word	0x58021800
90004824:	58020c00 	.word	0x58020c00
90004828:	58021400 	.word	0x58021400
9000482c:	58021c00 	.word	0x58021c00

90004830 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004830:	4b13      	ldr	r3, [pc, #76]	; (90004880 <HAL_SDRAM_MspDeInit+0x50>)
90004832:	681a      	ldr	r2, [r3, #0]
90004834:	b102      	cbz	r2, 90004838 <HAL_SDRAM_MspDeInit+0x8>
90004836:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004838:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
9000483a:	4a12      	ldr	r2, [pc, #72]	; (90004884 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
9000483c:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
9000483e:	f64f 7183 	movw	r1, #65411	; 0xff83
90004842:	4811      	ldr	r0, [pc, #68]	; (90004888 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004844:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004846:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
9000484a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000484e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004852:	f002 fc0f 	bl	90007074 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004856:	f248 1133 	movw	r1, #33075	; 0x8133
9000485a:	480c      	ldr	r0, [pc, #48]	; (9000488c <HAL_SDRAM_MspDeInit+0x5c>)
9000485c:	f002 fc0a 	bl	90007074 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004860:	f24c 7103 	movw	r1, #50947	; 0xc703
90004864:	480a      	ldr	r0, [pc, #40]	; (90004890 <HAL_SDRAM_MspDeInit+0x60>)
90004866:	f002 fc05 	bl	90007074 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
9000486a:	f64f 013f 	movw	r1, #63551	; 0xf83f
9000486e:	4809      	ldr	r0, [pc, #36]	; (90004894 <HAL_SDRAM_MspDeInit+0x64>)
90004870:	f002 fc00 	bl	90007074 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004874:	21e0      	movs	r1, #224	; 0xe0
90004876:	4808      	ldr	r0, [pc, #32]	; (90004898 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
9000487c:	f002 bbfa 	b.w	90007074 <HAL_GPIO_DeInit>
90004880:	2400b390 	.word	0x2400b390
90004884:	58024400 	.word	0x58024400
90004888:	58021000 	.word	0x58021000
9000488c:	58021800 	.word	0x58021800
90004890:	58020c00 	.word	0x58020c00
90004894:	58021400 	.word	0x58021400
90004898:	58021c00 	.word	0x58021c00

9000489c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000489c:	280f      	cmp	r0, #15
9000489e:	d901      	bls.n	900048a4 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
900048a0:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
900048a2:	4770      	bx	lr
{
900048a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
900048a6:	4601      	mov	r1, r0
{
900048a8:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
900048aa:	2200      	movs	r2, #0
900048ac:	4604      	mov	r4, r0
900048ae:	2036      	movs	r0, #54	; 0x36
900048b0:	f002 f838 	bl	90006924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
900048b4:	2036      	movs	r0, #54	; 0x36
900048b6:	f002 f873 	bl	900069a0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
900048ba:	4b1a      	ldr	r3, [pc, #104]	; (90004924 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
900048bc:	4a1a      	ldr	r2, [pc, #104]	; (90004928 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
900048be:	4669      	mov	r1, sp
900048c0:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
900048c2:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
900048c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900048c8:	f042 0210 	orr.w	r2, r2, #16
900048cc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
900048d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900048d4:	f003 0310 	and.w	r3, r3, #16
900048d8:	9301      	str	r3, [sp, #4]
900048da:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
900048dc:	f005 feb2 	bl	9000a644 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
900048e0:	9b07      	ldr	r3, [sp, #28]
900048e2:	b9bb      	cbnz	r3, 90004914 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
900048e4:	f005 fe1e 	bl	9000a524 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900048e8:	4b10      	ldr	r3, [pc, #64]	; (9000492c <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
900048ea:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
900048ec:	4c10      	ldr	r4, [pc, #64]	; (90004930 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900048ee:	fba3 0300 	umull	r0, r3, r3, r0
  htim6.Instance = TIM6;
900048f2:	4910      	ldr	r1, [pc, #64]	; (90004934 <HAL_InitTick+0x98>)
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
900048f4:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
900048f6:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900048f8:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
900048fa:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
900048fc:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004900:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004902:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004906:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004908:	f006 fe2a 	bl	9000b560 <HAL_TIM_Base_Init>
9000490c:	b130      	cbz	r0, 9000491c <HAL_InitTick+0x80>
    return HAL_ERROR;
9000490e:	2001      	movs	r0, #1
}
90004910:	b00a      	add	sp, #40	; 0x28
90004912:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004914:	f005 fe06 	bl	9000a524 <HAL_RCC_GetPCLK1Freq>
90004918:	0040      	lsls	r0, r0, #1
9000491a:	e7e5      	b.n	900048e8 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
9000491c:	4620      	mov	r0, r4
9000491e:	f006 fed5 	bl	9000b6cc <HAL_TIM_Base_Start_IT>
90004922:	e7f5      	b.n	90004910 <HAL_InitTick+0x74>
90004924:	58024400 	.word	0x58024400
90004928:	24000060 	.word	0x24000060
9000492c:	431bde83 	.word	0x431bde83
90004930:	2400b398 	.word	0x2400b398
90004934:	40001000 	.word	0x40001000

90004938 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004938:	4770      	bx	lr
9000493a:	bf00      	nop

9000493c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
9000493c:	e7fe      	b.n	9000493c <HardFault_Handler>
9000493e:	bf00      	nop

90004940 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004940:	e7fe      	b.n	90004940 <MemManage_Handler>
90004942:	bf00      	nop

90004944 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004944:	e7fe      	b.n	90004944 <BusFault_Handler>
90004946:	bf00      	nop

90004948 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004948:	e7fe      	b.n	90004948 <UsageFault_Handler>
9000494a:	bf00      	nop

9000494c <DebugMon_Handler>:
9000494c:	4770      	bx	lr
9000494e:	bf00      	nop

90004950 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004950:	4801      	ldr	r0, [pc, #4]	; (90004958 <TIM6_DAC_IRQHandler+0x8>)
90004952:	f006 bf1f 	b.w	9000b794 <HAL_TIM_IRQHandler>
90004956:	bf00      	nop
90004958:	2400b398 	.word	0x2400b398

9000495c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
9000495c:	4801      	ldr	r0, [pc, #4]	; (90004964 <LTDC_IRQHandler+0x8>)
9000495e:	f004 bcf3 	b.w	90009348 <HAL_LTDC_IRQHandler>
90004962:	bf00      	nop
90004964:	2400b1d8 	.word	0x2400b1d8

90004968 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004968:	4801      	ldr	r0, [pc, #4]	; (90004970 <DMA2D_IRQHandler+0x8>)
9000496a:	f002 b945 	b.w	90006bf8 <HAL_DMA2D_IRQHandler>
9000496e:	bf00      	nop
90004970:	2400b118 	.word	0x2400b118

90004974 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004974:	4801      	ldr	r0, [pc, #4]	; (9000497c <JPEG_IRQHandler+0x8>)
90004976:	f004 bbd3 	b.w	90009120 <HAL_JPEG_IRQHandler>
9000497a:	bf00      	nop
9000497c:	2400b180 	.word	0x2400b180

90004980 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004980:	4804      	ldr	r0, [pc, #16]	; (90004994 <MDMA_IRQHandler+0x14>)
{
90004982:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004984:	f004 ff98 	bl	900098b8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004988:	4803      	ldr	r0, [pc, #12]	; (90004998 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
9000498a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
9000498e:	f004 bf93 	b.w	900098b8 <HAL_MDMA_IRQHandler>
90004992:	bf00      	nop
90004994:	2400b2ec 	.word	0x2400b2ec
90004998:	2400b280 	.word	0x2400b280

9000499c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
9000499c:	2001      	movs	r0, #1
9000499e:	4770      	bx	lr

900049a0 <_kill>:

int _kill(int pid, int sig)
{
900049a0:	b508      	push	{r3, lr}
	errno = EINVAL;
900049a2:	f01c fc6f 	bl	90021284 <__errno>
900049a6:	2216      	movs	r2, #22
900049a8:	4603      	mov	r3, r0
	return -1;
}
900049aa:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
900049ae:	601a      	str	r2, [r3, #0]
}
900049b0:	bd08      	pop	{r3, pc}
900049b2:	bf00      	nop

900049b4 <_exit>:

void _exit (int status)
{
900049b4:	b508      	push	{r3, lr}
	errno = EINVAL;
900049b6:	f01c fc65 	bl	90021284 <__errno>
900049ba:	2316      	movs	r3, #22
900049bc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
900049be:	e7fe      	b.n	900049be <_exit+0xa>

900049c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900049c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900049c2:	1e16      	subs	r6, r2, #0
900049c4:	dd07      	ble.n	900049d6 <_read+0x16>
900049c6:	460c      	mov	r4, r1
900049c8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
900049ca:	f3af 8000 	nop.w
900049ce:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
900049d2:	42a5      	cmp	r5, r4
900049d4:	d1f9      	bne.n	900049ca <_read+0xa>
	}

return len;
}
900049d6:	4630      	mov	r0, r6
900049d8:	bd70      	pop	{r4, r5, r6, pc}
900049da:	bf00      	nop

900049dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
900049dc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900049de:	1e16      	subs	r6, r2, #0
900049e0:	dd07      	ble.n	900049f2 <_write+0x16>
900049e2:	460c      	mov	r4, r1
900049e4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
900049e6:	f814 0b01 	ldrb.w	r0, [r4], #1
900049ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
900049ee:	42ac      	cmp	r4, r5
900049f0:	d1f9      	bne.n	900049e6 <_write+0xa>
	}
	return len;
}
900049f2:	4630      	mov	r0, r6
900049f4:	bd70      	pop	{r4, r5, r6, pc}
900049f6:	bf00      	nop

900049f8 <_close>:

int _close(int file)
{
	return -1;
}
900049f8:	f04f 30ff 	mov.w	r0, #4294967295
900049fc:	4770      	bx	lr
900049fe:	bf00      	nop

90004a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004a04:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004a06:	604b      	str	r3, [r1, #4]
}
90004a08:	4770      	bx	lr
90004a0a:	bf00      	nop

90004a0c <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004a0c:	2001      	movs	r0, #1
90004a0e:	4770      	bx	lr

90004a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004a10:	2000      	movs	r0, #0
90004a12:	4770      	bx	lr

90004a14 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004a14:	490d      	ldr	r1, [pc, #52]	; (90004a4c <_sbrk+0x38>)
90004a16:	680a      	ldr	r2, [r1, #0]
{
90004a18:	b508      	push	{r3, lr}
90004a1a:	4603      	mov	r3, r0
	if (heap_end == 0)
90004a1c:	b132      	cbz	r2, 90004a2c <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004a1e:	4413      	add	r3, r2
90004a20:	4668      	mov	r0, sp
90004a22:	4283      	cmp	r3, r0
90004a24:	d809      	bhi.n	90004a3a <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
90004a26:	4610      	mov	r0, r2
	heap_end += incr;
90004a28:	600b      	str	r3, [r1, #0]
}
90004a2a:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004a2c:	4808      	ldr	r0, [pc, #32]	; (90004a50 <_sbrk+0x3c>)
90004a2e:	4602      	mov	r2, r0
90004a30:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
90004a32:	4668      	mov	r0, sp
90004a34:	4413      	add	r3, r2
90004a36:	4283      	cmp	r3, r0
90004a38:	d9f5      	bls.n	90004a26 <_sbrk+0x12>
		errno = ENOMEM;
90004a3a:	f01c fc23 	bl	90021284 <__errno>
90004a3e:	230c      	movs	r3, #12
		return (caddr_t) -1;
90004a40:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
90004a44:	6003      	str	r3, [r0, #0]
}
90004a46:	4610      	mov	r0, r2
90004a48:	bd08      	pop	{r3, pc}
90004a4a:	bf00      	nop
90004a4c:	2400b3e4 	.word	0x2400b3e4
90004a50:	24026788 	.word	0x24026788

90004a54 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004a54:	4770      	bx	lr
90004a56:	bf00      	nop

90004a58 <_ZN23ApplicationFontProviderD0Ev>:
90004a58:	b510      	push	{r4, lr}
90004a5a:	4604      	mov	r4, r0
90004a5c:	2104      	movs	r1, #4
90004a5e:	f01c fbb0 	bl	900211c2 <_ZdlPvj>
90004a62:	4620      	mov	r0, r4
90004a64:	bd10      	pop	{r4, pc}
90004a66:	bf00      	nop

90004a68 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004a68:	2901      	cmp	r1, #1
{
90004a6a:	b508      	push	{r3, lr}
    switch (typography)
90004a6c:	d004      	beq.n	90004a78 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004a6e:	2902      	cmp	r1, #2
90004a70:	d00a      	beq.n	90004a88 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004a72:	b129      	cbz	r1, 90004a80 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004a74:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004a76:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004a78:	f000 fd02 	bl	90005480 <_ZN17TypedTextDatabase8getFontsEv>
90004a7c:	6840      	ldr	r0, [r0, #4]
}
90004a7e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004a80:	f000 fcfe 	bl	90005480 <_ZN17TypedTextDatabase8getFontsEv>
90004a84:	6800      	ldr	r0, [r0, #0]
}
90004a86:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004a88:	f000 fcfa 	bl	90005480 <_ZN17TypedTextDatabase8getFontsEv>
90004a8c:	6880      	ldr	r0, [r0, #8]
}
90004a8e:	bd08      	pop	{r3, pc}

90004a90 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004a90:	4800      	ldr	r0, [pc, #0]	; (90004a94 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004a92:	4770      	bx	lr
90004a94:	90024110 	.word	0x90024110

90004a98 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004a98:	2007      	movs	r0, #7
90004a9a:	4770      	bx	lr

90004a9c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004a9c:	b169      	cbz	r1, 90004aba <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004a9e:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004aa0:	b530      	push	{r4, r5, lr}
90004aa2:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004aa4:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004aa6:	6895      	ldr	r5, [r2, #8]
90004aa8:	f10d 0303 	add.w	r3, sp, #3
90004aac:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004aae:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004ab0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004ab4:	47a8      	blx	r5
        return glyph;
    }
90004ab6:	b003      	add	sp, #12
90004ab8:	bd30      	pop	{r4, r5, pc}
            return 0;
90004aba:	4608      	mov	r0, r1
    }
90004abc:	4770      	bx	lr
90004abe:	bf00      	nop

90004ac0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004ac0:	89c0      	ldrh	r0, [r0, #14]
90004ac2:	4770      	bx	lr

90004ac4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004ac4:	8a00      	ldrh	r0, [r0, #16]
90004ac6:	4770      	bx	lr

90004ac8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004ac8:	88c0      	ldrh	r0, [r0, #6]
90004aca:	4770      	bx	lr

90004acc <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004acc:	8880      	ldrh	r0, [r0, #4]
90004ace:	4770      	bx	lr

90004ad0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004ad0:	7a80      	ldrb	r0, [r0, #10]
    }
90004ad2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004ad6:	4770      	bx	lr

90004ad8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004ad8:	7a80      	ldrb	r0, [r0, #10]
    }
90004ada:	09c0      	lsrs	r0, r0, #7
90004adc:	4770      	bx	lr
90004ade:	bf00      	nop

90004ae0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004ae0:	4770      	bx	lr
90004ae2:	bf00      	nop

90004ae4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004ae4:	b510      	push	{r4, lr}
90004ae6:	4604      	mov	r4, r0
    }
90004ae8:	2108      	movs	r1, #8
90004aea:	f01c fb6a 	bl	900211c2 <_ZdlPvj>
90004aee:	4620      	mov	r0, r4
90004af0:	bd10      	pop	{r4, pc}
90004af2:	bf00      	nop

90004af4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004af4:	4770      	bx	lr
90004af6:	bf00      	nop

90004af8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004af8:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004afc:	6808      	ldr	r0, [r1, #0]
90004afe:	6849      	ldr	r1, [r1, #4]
90004b00:	c303      	stmia	r3!, {r0, r1}
    }
90004b02:	4770      	bx	lr

90004b04 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004b04:	4770      	bx	lr
90004b06:	bf00      	nop

90004b08 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004b08:	4770      	bx	lr
90004b0a:	bf00      	nop

90004b0c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004b0c:	6041      	str	r1, [r0, #4]
    }
90004b0e:	4770      	bx	lr

90004b10 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004b10:	4770      	bx	lr
90004b12:	bf00      	nop

90004b14 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004b14:	4905      	ldr	r1, [pc, #20]	; (90004b2c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004b16:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004b18:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004b1c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004b20:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004b24:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004b28:	4770      	bx	lr
90004b2a:	bf00      	nop
90004b2c:	90004bb9 	.word	0x90004bb9

90004b30 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004b30:	2301      	movs	r3, #1
90004b32:	7203      	strb	r3, [r0, #8]
    }
90004b34:	4770      	bx	lr
90004b36:	bf00      	nop

90004b38 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004b38:	4770      	bx	lr
90004b3a:	bf00      	nop

90004b3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004b3c:	4770      	bx	lr
90004b3e:	bf00      	nop

90004b40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004b40:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004b42:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004b44:	6841      	ldr	r1, [r0, #4]
90004b46:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004b4a:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004b4e:	07d2      	lsls	r2, r2, #31
90004b50:	d401      	bmi.n	90004b56 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004b52:	689b      	ldr	r3, [r3, #8]
90004b54:	4718      	bx	r3
90004b56:	f851 200c 	ldr.w	r2, [r1, ip]
90004b5a:	689b      	ldr	r3, [r3, #8]
90004b5c:	58d3      	ldr	r3, [r2, r3]
90004b5e:	4718      	bx	r3

90004b60 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004b60:	6843      	ldr	r3, [r0, #4]
90004b62:	b13b      	cbz	r3, 90004b74 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004b64:	6883      	ldr	r3, [r0, #8]
90004b66:	b10b      	cbz	r3, 90004b6c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004b68:	2001      	movs	r0, #1
    }
90004b6a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004b6c:	68c0      	ldr	r0, [r0, #12]
90004b6e:	f000 0001 	and.w	r0, r0, #1
90004b72:	4770      	bx	lr
90004b74:	4618      	mov	r0, r3
90004b76:	4770      	bx	lr

90004b78 <_ZN8touchgfx12NoTransitionD0Ev>:
90004b78:	b510      	push	{r4, lr}
90004b7a:	4604      	mov	r4, r0
90004b7c:	210c      	movs	r1, #12
90004b7e:	f01c fb20 	bl	900211c2 <_ZdlPvj>
90004b82:	4620      	mov	r0, r4
90004b84:	bd10      	pop	{r4, pc}
90004b86:	bf00      	nop

90004b88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004b88:	b510      	push	{r4, lr}
90004b8a:	4604      	mov	r4, r0
90004b8c:	2110      	movs	r1, #16
90004b8e:	f01c fb18 	bl	900211c2 <_ZdlPvj>
90004b92:	4620      	mov	r0, r4
90004b94:	bd10      	pop	{r4, pc}
90004b96:	bf00      	nop

90004b98 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004b98:	b510      	push	{r4, lr}
90004b9a:	4604      	mov	r4, r0
90004b9c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004ba0:	f01c fb0f 	bl	900211c2 <_ZdlPvj>
90004ba4:	4620      	mov	r0, r4
90004ba6:	bd10      	pop	{r4, pc}

90004ba8 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004ba8:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004baa:	f00e f877 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
    }
90004bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004bb2:	f00e bcbd 	b.w	90013530 <_ZN8touchgfx11Application10invalidateEv>
90004bb6:	bf00      	nop

90004bb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004bbc:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90004bc0:	4607      	mov	r7, r0
90004bc2:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004bc4:	68a0      	ldr	r0, [r4, #8]
90004bc6:	6803      	ldr	r3, [r0, #0]
90004bc8:	6a1b      	ldr	r3, [r3, #32]
90004bca:	4798      	blx	r3
90004bcc:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
90004bd0:	f0c0 809c 	bcc.w	90004d0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x154>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004bd4:	6860      	ldr	r0, [r4, #4]
90004bd6:	6803      	ldr	r3, [r0, #0]
90004bd8:	6a1b      	ldr	r3, [r3, #32]
90004bda:	4798      	blx	r3
90004bdc:	280f      	cmp	r0, #15
90004bde:	f240 80a1 	bls.w	90004d24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004be2:	68e0      	ldr	r0, [r4, #12]
90004be4:	6803      	ldr	r3, [r0, #0]
90004be6:	6a1b      	ldr	r3, [r3, #32]
90004be8:	4798      	blx	r3
90004bea:	280b      	cmp	r0, #11
90004bec:	f240 8094 	bls.w	90004d18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x160>
    if (*currentTrans)
90004bf0:	f8df 915c 	ldr.w	r9, [pc, #348]	; 90004d50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
90004bf4:	f00e f852 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004bf8:	3004      	adds	r0, #4
90004bfa:	f00e f874 	bl	90012ce6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004bfe:	f8d9 0000 	ldr.w	r0, [r9]
90004c02:	b140      	cbz	r0, 90004c16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->tearDown();
90004c04:	6803      	ldr	r3, [r0, #0]
90004c06:	68db      	ldr	r3, [r3, #12]
90004c08:	4798      	blx	r3
    if (*currentTrans)
90004c0a:	f8d9 0000 	ldr.w	r0, [r9]
90004c0e:	b110      	cbz	r0, 90004c16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->~Transition();
90004c10:	6803      	ldr	r3, [r0, #0]
90004c12:	681b      	ldr	r3, [r3, #0]
90004c14:	4798      	blx	r3
    if (*currentScreen)
90004c16:	f8df 813c 	ldr.w	r8, [pc, #316]	; 90004d54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>
90004c1a:	f8d8 0000 	ldr.w	r0, [r8]
90004c1e:	2800      	cmp	r0, #0
90004c20:	d061      	beq.n	90004ce6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
        (*currentScreen)->tearDownScreen();
90004c22:	6803      	ldr	r3, [r0, #0]
90004c24:	695b      	ldr	r3, [r3, #20]
90004c26:	4798      	blx	r3
    if (*currentPresenter)
90004c28:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004c2c:	2800      	cmp	r0, #0
90004c2e:	d055      	beq.n	90004cdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x124>
        (*currentPresenter)->deactivate();
90004c30:	6803      	ldr	r3, [r0, #0]
90004c32:	685b      	ldr	r3, [r3, #4]
90004c34:	4798      	blx	r3
    if (*currentScreen)
90004c36:	f8d8 0000 	ldr.w	r0, [r8]
90004c3a:	b110      	cbz	r0, 90004c42 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentScreen)->~Screen();
90004c3c:	6803      	ldr	r3, [r0, #0]
90004c3e:	681b      	ldr	r3, [r3, #0]
90004c40:	4798      	blx	r3
    if (*currentPresenter)
90004c42:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004c46:	b110      	cbz	r0, 90004c4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentPresenter)->~Presenter();
90004c48:	6803      	ldr	r3, [r0, #0]
90004c4a:	689b      	ldr	r3, [r3, #8]
90004c4c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004c4e:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004c50:	2100      	movs	r1, #0
90004c52:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90004c54:	468b      	mov	fp, r1
90004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004c58:	4798      	blx	r3
90004c5a:	4b35      	ldr	r3, [pc, #212]	; (90004d30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>)
90004c5c:	4605      	mov	r5, r0
90004c5e:	f8c0 b004 	str.w	fp, [r0, #4]
90004c62:	f880 b008 	strb.w	fp, [r0, #8]
90004c66:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90004c68:	68a0      	ldr	r0, [r4, #8]
90004c6a:	602b      	str	r3, [r5, #0]
90004c6c:	6803      	ldr	r3, [r0, #0]
90004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004c70:	4798      	blx	r3
90004c72:	4606      	mov	r6, r0
90004c74:	f000 fca4 	bl	900055c0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90004c78:	6860      	ldr	r0, [r4, #4]
90004c7a:	4659      	mov	r1, fp
90004c7c:	6803      	ldr	r3, [r0, #0]
90004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004c80:	4798      	blx	r3
90004c82:	4604      	mov	r4, r0
90004c84:	4631      	mov	r1, r6
90004c86:	f000 fc6f 	bl	90005568 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004c8a:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004c8e:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004c92:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90004c96:	b35c      	cbz	r4, 90004cf0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>
90004c98:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004c9a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004c9e:	4630      	mov	r0, r6
90004ca0:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90004ca2:	f8c4 a008 	str.w	sl, [r4, #8]
90004ca6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004ca8:	63f4      	str	r4, [r6, #60]	; 0x3c
90004caa:	4798      	blx	r3
    newPresenter->activate();
90004cac:	6823      	ldr	r3, [r4, #0]
90004cae:	4620      	mov	r0, r4
90004cb0:	681b      	ldr	r3, [r3, #0]
90004cb2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90004cb4:	4629      	mov	r1, r5
90004cb6:	4630      	mov	r0, r6
90004cb8:	f00f fc8a 	bl	900145d0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004cbc:	682b      	ldr	r3, [r5, #0]
90004cbe:	491d      	ldr	r1, [pc, #116]	; (90004d34 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17c>)
90004cc0:	691a      	ldr	r2, [r3, #16]
90004cc2:	428a      	cmp	r2, r1
90004cc4:	d116      	bne.n	90004cf4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>
    newTransition->invalidate();
90004cc6:	695b      	ldr	r3, [r3, #20]
90004cc8:	4a1b      	ldr	r2, [pc, #108]	; (90004d38 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
90004cca:	4293      	cmp	r3, r2
90004ccc:	d119      	bne.n	90004d02 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14a>
        Application::getInstance()->invalidate();
90004cce:	f00d ffe5 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
}
90004cd2:	b001      	add	sp, #4
90004cd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004cd8:	f00e bc2a 	b.w	90013530 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90004cdc:	f8d8 0000 	ldr.w	r0, [r8]
90004ce0:	2800      	cmp	r0, #0
90004ce2:	d1ab      	bne.n	90004c3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
90004ce4:	e7b3      	b.n	90004c4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    if (*currentPresenter)
90004ce6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004cea:	2800      	cmp	r0, #0
90004cec:	d1a0      	bne.n	90004c30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x78>
90004cee:	e7ae      	b.n	90004c4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    model->bind(newPresenter);
90004cf0:	4623      	mov	r3, r4
90004cf2:	e7d2      	b.n	90004c9a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xe2>
    newTransition->init();
90004cf4:	4628      	mov	r0, r5
90004cf6:	4790      	blx	r2
    newTransition->invalidate();
90004cf8:	682b      	ldr	r3, [r5, #0]
90004cfa:	4a0f      	ldr	r2, [pc, #60]	; (90004d38 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
90004cfc:	695b      	ldr	r3, [r3, #20]
90004cfe:	4293      	cmp	r3, r2
90004d00:	d0e5      	beq.n	90004cce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x116>
90004d02:	4628      	mov	r0, r5
90004d04:	b001      	add	sp, #4
90004d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004d0a:	4718      	bx	r3
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004d0c:	4b0b      	ldr	r3, [pc, #44]	; (90004d3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90004d0e:	21a3      	movs	r1, #163	; 0xa3
90004d10:	4a0b      	ldr	r2, [pc, #44]	; (90004d40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004d12:	480c      	ldr	r0, [pc, #48]	; (90004d44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004d14:	f01c fa84 	bl	90021220 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004d18:	4b0b      	ldr	r3, [pc, #44]	; (90004d48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004d1a:	21a5      	movs	r1, #165	; 0xa5
90004d1c:	4a08      	ldr	r2, [pc, #32]	; (90004d40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004d1e:	4809      	ldr	r0, [pc, #36]	; (90004d44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004d20:	f01c fa7e 	bl	90021220 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004d24:	4b09      	ldr	r3, [pc, #36]	; (90004d4c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90004d26:	21a4      	movs	r1, #164	; 0xa4
90004d28:	4a05      	ldr	r2, [pc, #20]	; (90004d40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004d2a:	4806      	ldr	r0, [pc, #24]	; (90004d44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004d2c:	f01c fa78 	bl	90021220 <__assert_func>
90004d30:	9002453c 	.word	0x9002453c
90004d34:	90004b09 	.word	0x90004b09
90004d38:	90004ba9 	.word	0x90004ba9
90004d3c:	900241ac 	.word	0x900241ac
90004d40:	9002423c 	.word	0x9002423c
90004d44:	90024340 	.word	0x90024340
90004d48:	9002442c 	.word	0x9002442c
90004d4c:	90024388 	.word	0x90024388
90004d50:	24026524 	.word	0x24026524
90004d54:	24026520 	.word	0x24026520

90004d58 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004d58:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90004d5c:	b1d3      	cbz	r3, 90004d94 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
90004d5e:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90004d60:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004d62:	68d1      	ldr	r1, [r2, #12]
90004d64:	4604      	mov	r4, r0
90004d66:	4818      	ldr	r0, [pc, #96]	; (90004dc8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90004d68:	4281      	cmp	r1, r0
90004d6a:	d118      	bne.n	90004d9e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90004d6c:	6858      	ldr	r0, [r3, #4]
90004d6e:	b180      	cbz	r0, 90004d92 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90004d70:	6899      	ldr	r1, [r3, #8]
90004d72:	b1e1      	cbz	r1, 90004dae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90004d74:	6892      	ldr	r2, [r2, #8]
90004d76:	4915      	ldr	r1, [pc, #84]	; (90004dcc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90004d78:	428a      	cmp	r2, r1
90004d7a:	d122      	bne.n	90004dc2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90004d7c:	68da      	ldr	r2, [r3, #12]
90004d7e:	6858      	ldr	r0, [r3, #4]
90004d80:	eb00 0062 	add.w	r0, r0, r2, asr #1
90004d84:	07d2      	lsls	r2, r2, #31
90004d86:	d406      	bmi.n	90004d96 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90004d88:	689b      	ldr	r3, [r3, #8]
90004d8a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90004d8c:	2300      	movs	r3, #0
90004d8e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
90004d92:	bd70      	pop	{r4, r5, r6, pc}
90004d94:	4770      	bx	lr
90004d96:	6899      	ldr	r1, [r3, #8]
90004d98:	6803      	ldr	r3, [r0, #0]
90004d9a:	585b      	ldr	r3, [r3, r1]
90004d9c:	e7f5      	b.n	90004d8a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004d9e:	4618      	mov	r0, r3
90004da0:	4788      	blx	r1
90004da2:	2800      	cmp	r0, #0
90004da4:	d0f5      	beq.n	90004d92 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
90004da6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
90004daa:	681a      	ldr	r2, [r3, #0]
90004dac:	e7e2      	b.n	90004d74 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
90004dae:	68dd      	ldr	r5, [r3, #12]
90004db0:	07ee      	lsls	r6, r5, #31
90004db2:	d5ee      	bpl.n	90004d92 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90004db4:	6892      	ldr	r2, [r2, #8]
90004db6:	4e05      	ldr	r6, [pc, #20]	; (90004dcc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90004db8:	42b2      	cmp	r2, r6
90004dba:	d102      	bne.n	90004dc2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90004dbc:	eb00 0065 	add.w	r0, r0, r5, asr #1
90004dc0:	e7ea      	b.n	90004d98 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
90004dc2:	4618      	mov	r0, r3
90004dc4:	4790      	blx	r2
90004dc6:	e7e1      	b.n	90004d8c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
90004dc8:	90004b61 	.word	0x90004b61
90004dcc:	90004b41 	.word	0x90004b41

90004dd0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
90004dd0:	b570      	push	{r4, r5, r6, lr}
90004dd2:	4604      	mov	r4, r0
90004dd4:	4616      	mov	r6, r2
90004dd6:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
90004dd8:	f00e f826 	bl	90012e28 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90004ddc:	4a18      	ldr	r2, [pc, #96]	; (90004e40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
          pendingScreenTransitionCallback(0)
90004dde:	2300      	movs	r3, #0
      model(m)
90004de0:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        return instance;
90004de4:	4e17      	ldr	r6, [pc, #92]	; (90004e44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
        instance = this;
90004de6:	6014      	str	r4, [r2, #0]
90004de8:	6830      	ldr	r0, [r6, #0]
90004dea:	4a17      	ldr	r2, [pc, #92]	; (90004e48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
        : pobject(0), pmemfun(0)
90004dec:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90004df0:	6022      	str	r2, [r4, #0]
90004df2:	4a16      	ldr	r2, [pc, #88]	; (90004e4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
90004df4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
90004df8:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
          pendingScreenTransitionCallback(0)
90004dfc:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
90004e00:	6803      	ldr	r3, [r0, #0]
90004e02:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
90004e06:	689b      	ldr	r3, [r3, #8]
90004e08:	4a11      	ldr	r2, [pc, #68]	; (90004e50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
90004e0a:	4293      	cmp	r3, r2
90004e0c:	d115      	bne.n	90004e3a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
90004e0e:	f240 1301 	movw	r3, #257	; 0x101
90004e12:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
90004e16:	2000      	movs	r0, #0
90004e18:	f000 fae4 	bl	900053e4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90004e1c:	6833      	ldr	r3, [r6, #0]
90004e1e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90004e22:	b12a      	cbz	r2, 90004e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90004e24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90004e26:	b118      	cbz	r0, 90004e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90004e28:	f015 fac7 	bl	9001a3ba <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90004e2c:	4620      	mov	r0, r4
90004e2e:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90004e30:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90004e32:	f015 fac2 	bl	9001a3ba <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90004e36:	4620      	mov	r0, r4
90004e38:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
90004e3a:	2101      	movs	r1, #1
90004e3c:	4798      	blx	r3
90004e3e:	e7ea      	b.n	90004e16 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90004e40:	24026530 	.word	0x24026530
90004e44:	240264e4 	.word	0x240264e4
90004e48:	900244f0 	.word	0x900244f0
90004e4c:	900244d8 	.word	0x900244d8
90004e50:	90000665 	.word	0x90000665

90004e54 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004e54:	4905      	ldr	r1, [pc, #20]	; (90004e6c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90004e56:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90004e58:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004e5c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004e60:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004e64:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90004e68:	4770      	bx	lr
90004e6a:	bf00      	nop
90004e6c:	90004bb9 	.word	0x90004bb9

90004e70 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90004e70:	6a40      	ldr	r0, [r0, #36]	; 0x24
90004e72:	4770      	bx	lr

90004e74 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90004e74:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004e76:	4770      	bx	lr

90004e78 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90004e78:	4770      	bx	lr
90004e7a:	bf00      	nop

90004e7c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90004e7c:	888b      	ldrh	r3, [r1, #4]
90004e7e:	69c0      	ldr	r0, [r0, #28]
90004e80:	0adb      	lsrs	r3, r3, #11
90004e82:	680a      	ldr	r2, [r1, #0]
90004e84:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90004e88:	4410      	add	r0, r2
90004e8a:	4770      	bx	lr

90004e8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
90004e8c:	b1da      	cbz	r2, 90004ec6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
90004e8e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90004e90:	7b14      	ldrb	r4, [r2, #12]
90004e92:	b1b4      	cbz	r4, 90004ec2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90004e94:	f892 c00d 	ldrb.w	ip, [r2, #13]
90004e98:	f892 e00b 	ldrb.w	lr, [r2, #11]
90004e9c:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90004ea0:	6a03      	ldr	r3, [r0, #32]
90004ea2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90004ea6:	ea4e 0202 	orr.w	r2, lr, r2
90004eaa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90004eae:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
90004eb2:	881a      	ldrh	r2, [r3, #0]
90004eb4:	428a      	cmp	r2, r1
90004eb6:	d008      	beq.n	90004eca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90004eb8:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90004ebc:	d801      	bhi.n	90004ec2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90004ebe:	4283      	cmp	r3, r0
90004ec0:	d1f7      	bne.n	90004eb2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
90004ec2:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
90004ec4:	bd10      	pop	{r4, pc}
        return 0;
90004ec6:	4610      	mov	r0, r2
}
90004ec8:	4770      	bx	lr
            return kerndata->distance;
90004eca:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
90004ece:	bd10      	pop	{r4, pc}

90004ed0 <_ZN8touchgfx13GeneratedFontD0Ev>:
90004ed0:	b510      	push	{r4, lr}
90004ed2:	4604      	mov	r4, r0
90004ed4:	212c      	movs	r1, #44	; 0x2c
90004ed6:	f01c f974 	bl	900211c2 <_ZdlPvj>
90004eda:	4620      	mov	r0, r4
90004edc:	bd10      	pop	{r4, pc}
90004ede:	bf00      	nop

90004ee0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004ee0:	b530      	push	{r4, r5, lr}
90004ee2:	b08b      	sub	sp, #44	; 0x2c
90004ee4:	4604      	mov	r4, r0
90004ee6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
90004eea:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004eec:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
90004ef0:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004ef2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
90004ef6:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004ef8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90004efc:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004efe:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
90004f02:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004f04:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90004f08:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004f0a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90004f0e:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004f10:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90004f14:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90004f16:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90004f1a:	9508      	str	r5, [sp, #32]
90004f1c:	f00e ffb0 	bl	90013e80 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
90004f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90004f22:	4620      	mov	r0, r4
      arabicTable(formsTable)
90004f24:	61e3      	str	r3, [r4, #28]
90004f26:	9b16      	ldr	r3, [sp, #88]	; 0x58
90004f28:	6223      	str	r3, [r4, #32]
90004f2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
90004f2c:	6263      	str	r3, [r4, #36]	; 0x24
90004f2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90004f30:	62a3      	str	r3, [r4, #40]	; 0x28
90004f32:	4b02      	ldr	r3, [pc, #8]	; (90004f3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90004f34:	6023      	str	r3, [r4, #0]
}
90004f36:	b00b      	add	sp, #44	; 0x2c
90004f38:	bd30      	pop	{r4, r5, pc}
90004f3a:	bf00      	nop
90004f3c:	90024560 	.word	0x90024560

90004f40 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90004f40:	4770      	bx	lr
90004f42:	bf00      	nop

90004f44 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90004f44:	4770      	bx	lr
90004f46:	bf00      	nop

90004f48 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90004f48:	4770      	bx	lr
90004f4a:	bf00      	nop

90004f4c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90004f4c:	4770      	bx	lr
90004f4e:	bf00      	nop

90004f50 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90004f50:	4770      	bx	lr
90004f52:	bf00      	nop

90004f54 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90004f54:	4770      	bx	lr
90004f56:	bf00      	nop

90004f58 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90004f58:	b510      	push	{r4, lr}
90004f5a:	4604      	mov	r4, r0
}
90004f5c:	f44f 719c 	mov.w	r1, #312	; 0x138
90004f60:	f01c f92f 	bl	900211c2 <_ZdlPvj>
90004f64:	4620      	mov	r0, r4
90004f66:	bd10      	pop	{r4, pc}

90004f68 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
90004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004f6c:	b087      	sub	sp, #28
90004f6e:	4604      	mov	r4, r0
        : presenter(0)
90004f70:	f00f f982 	bl	90014278 <_ZN8touchgfx6ScreenC1Ev>
90004f74:	4b6d      	ldr	r3, [pc, #436]	; (9000512c <_ZN15Screen1ViewBaseC1Ev+0x1c4>)
90004f76:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90004f78:	f64f 76ff 	movw	r6, #65535	; 0xffff
90004f7c:	6023      	str	r3, [r4, #0]
          visible(true)
90004f7e:	f44f 7780 	mov.w	r7, #256	; 0x100
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90004f82:	4b6b      	ldr	r3, [pc, #428]	; (90005130 <_ZN15Screen1ViewBaseC1Ev+0x1c8>)
90004f84:	f04f 08ff 	mov.w	r8, #255	; 0xff
90004f88:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
90004f8c:	a904      	add	r1, sp, #16
90004f8e:	6423      	str	r3, [r4, #64]	; 0x40
90004f90:	f104 0a98 	add.w	sl, r4, #152	; 0x98
        : Widget(), bitmap(bmp), alpha(255)
90004f94:	4b67      	ldr	r3, [pc, #412]	; (90005134 <_ZN15Screen1ViewBaseC1Ev+0x1cc>)
        Image::setBitmap(bmp);
90004f96:	4658      	mov	r0, fp
90004f98:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
90004f9c:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
90004fa0:	f884 8066 	strb.w	r8, [r4, #102]	; 0x66
90004fa4:	f8a4 7090 	strh.w	r7, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
90004fa8:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
90004fac:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
90004fb0:	66e3      	str	r3, [r4, #108]	; 0x6c
90004fb2:	63e5      	str	r5, [r4, #60]	; 0x3c
90004fb4:	6465      	str	r5, [r4, #68]	; 0x44
90004fb6:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
90004fb8:	66a5      	str	r5, [r4, #104]	; 0x68
90004fba:	f8ad 6010 	strh.w	r6, [sp, #16]
        : x(0), y(0), width(0), height(0)
90004fbe:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90004fc2:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
90004fc6:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
90004fca:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
90004fce:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
90004fd2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
90004fd6:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
90004fda:	f00c f932 	bl	90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : Widget(), bitmap(bmp), alpha(255)
90004fde:	4b55      	ldr	r3, [pc, #340]	; (90005134 <_ZN15Screen1ViewBaseC1Ev+0x1cc>)
        Image::setBitmap(bmp);
90004fe0:	a904      	add	r1, sp, #16
90004fe2:	4650      	mov	r0, sl
90004fe4:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
        : Widget(), bitmap(bmp), alpha(255)
90004fe8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
90004fec:	f8a4 60be 	strh.w	r6, [r4, #190]	; 0xbe
90004ff0:	f884 80c0 	strb.w	r8, [r4, #192]	; 0xc0
90004ff4:	f8ad 6010 	strh.w	r6, [sp, #16]
90004ff8:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
90004ffc:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
90005000:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
90005004:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
        Image::setBitmap(bmp);
90005008:	f00c f91b 	bl	90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : Widget(), bitmap(bmp), alpha(255)
9000500c:	4b49      	ldr	r3, [pc, #292]	; (90005134 <_ZN15Screen1ViewBaseC1Ev+0x1cc>)
        Image::setBitmap(bmp);
9000500e:	a904      	add	r1, sp, #16
90005010:	4648      	mov	r0, r9
90005012:	f8a4 70e8 	strh.w	r7, [r4, #232]	; 0xe8
        : Widget(), bitmap(bmp), alpha(255)
90005016:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
9000501a:	f884 80ec 	strb.w	r8, [r4, #236]	; 0xec
9000501e:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
90005022:	f8ad 6010 	strh.w	r6, [sp, #16]
90005026:	e9c4 3531 	strd	r3, r5, [r4, #196]	; 0xc4
9000502a:	e9c4 5533 	strd	r5, r5, [r4, #204]	; 0xcc
9000502e:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
90005032:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
        Image::setBitmap(bmp);
90005036:	f00c f904 	bl	90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
9000503a:	4a3f      	ldr	r2, [pc, #252]	; (90005138 <_ZN15Screen1ViewBaseC1Ev+0x1d0>)
        : typedTextId(id)
9000503c:	4b3f      	ldr	r3, [pc, #252]	; (9000513c <_ZN15Screen1ViewBaseC1Ev+0x1d4>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
9000503e:	f104 0140 	add.w	r1, r4, #64	; 0x40
90005042:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005046:	f04f 32ff 	mov.w	r2, #4294967295
9000504a:	f8a4 611c 	strh.w	r6, [r4, #284]	; 0x11c
9000504e:	1d26      	adds	r6, r4, #4
90005050:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        rect.width = width;
90005054:	4a3a      	ldr	r2, [pc, #232]	; (90005140 <_ZN15Screen1ViewBaseC1Ev+0x1d8>)
90005056:	4630      	mov	r0, r6
90005058:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
9000505c:	64a2      	str	r2, [r4, #72]	; 0x48
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
9000505e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
          visible(true)
90005062:	f8a4 7114 	strh.w	r7, [r4, #276]	; 0x114
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
        boundingArea = calculateBoundingArea();
90005066:	466f      	mov	r7, sp
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005068:	f8c4 8126 	str.w	r8, [r4, #294]	; 0x126
9000506c:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
90005070:	66a2      	str	r2, [r4, #104]	; 0x68
        : color(col)
90005072:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
90005076:	f8a4 5124 	strh.w	r5, [r4, #292]	; 0x124
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000507a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
9000507e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
        rect.x = x;
90005082:	6465      	str	r5, [r4, #68]	; 0x44
        : x(0), y(0), width(0), height(0)
90005084:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
90005088:	e9c4 553f 	strd	r5, r5, [r4, #252]	; 0xfc
          visible(true)
9000508c:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
90005090:	e9c4 5543 	strd	r5, r5, [r4, #268]	; 0x10c
90005094:	f00a fb13 	bl	9000f6be <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005098:	2204      	movs	r2, #4
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
9000509a:	a904      	add	r1, sp, #16
9000509c:	4658      	mov	r0, fp
        rect.x = x;
9000509e:	6725      	str	r5, [r4, #112]	; 0x70
900050a0:	f8ad 2010 	strh.w	r2, [sp, #16]
900050a4:	f00c f8cd 	bl	90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900050a8:	4659      	mov	r1, fp
900050aa:	4630      	mov	r0, r6
900050ac:	f00a fb07 	bl	9000f6be <_ZN8touchgfx9Container3addERNS_8DrawableE>
900050b0:	4a24      	ldr	r2, [pc, #144]	; (90005144 <_ZN15Screen1ViewBaseC1Ev+0x1dc>)
    img_tirette_ok.setBitmap(touchgfx::Bitmap(BITMAP_TICK_48_ID));
900050b2:	a904      	add	r1, sp, #16
900050b4:	4650      	mov	r0, sl
900050b6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
900050ba:	2206      	movs	r2, #6
900050bc:	f8ad 2010 	strh.w	r2, [sp, #16]
900050c0:	f00c f8bf 	bl	90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900050c4:	4651      	mov	r1, sl
900050c6:	4630      	mov	r0, r6
900050c8:	f00a faf9 	bl	9000f6be <_ZN8touchgfx9Container3addERNS_8DrawableE>
900050cc:	4a1e      	ldr	r2, [pc, #120]	; (90005148 <_ZN15Screen1ViewBaseC1Ev+0x1e0>)
    img_tirette_nok.setBitmap(touchgfx::Bitmap(BITMAP_CROSS_48_ID));
900050ce:	a904      	add	r1, sp, #16
900050d0:	4648      	mov	r0, r9
900050d2:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
900050d6:	2205      	movs	r2, #5
900050d8:	f8ad 2010 	strh.w	r2, [sp, #16]
900050dc:	f00c f8b1 	bl	90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900050e0:	4649      	mov	r1, r9
900050e2:	4630      	mov	r0, r6
900050e4:	f00a faeb 	bl	9000f6be <_ZN8touchgfx9Container3addERNS_8DrawableE>
900050e8:	4a18      	ldr	r2, [pc, #96]	; (9000514c <_ZN15Screen1ViewBaseC1Ev+0x1e4>)
        boundingArea = calculateBoundingArea();
900050ea:	4641      	mov	r1, r8
900050ec:	4638      	mov	r0, r7
900050ee:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
        color = newColor;
900050f2:	4a17      	ldr	r2, [pc, #92]	; (90005150 <_ZN15Screen1ViewBaseC1Ev+0x1e8>)
        linespace = space;
900050f4:	f8a4 5124 	strh.w	r5, [r4, #292]	; 0x124
        color = newColor;
900050f8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
        boundingArea = calculateBoundingArea();
900050fc:	f00b fdac 	bl	90010c58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90005100:	4b0e      	ldr	r3, [pc, #56]	; (9000513c <_ZN15Screen1ViewBaseC1Ev+0x1d4>)
90005102:	f8ad 5014 	strh.w	r5, [sp, #20]
90005106:	9304      	str	r3, [sp, #16]
90005108:	f504 7396 	add.w	r3, r4, #300	; 0x12c
9000510c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
90005110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TFOT));
90005114:	a904      	add	r1, sp, #16
90005116:	4640      	mov	r0, r8
90005118:	f00c f838 	bl	9001118c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
9000511c:	4630      	mov	r0, r6
9000511e:	4641      	mov	r1, r8
90005120:	f00a facd 	bl	9000f6be <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
90005124:	4620      	mov	r0, r4
90005126:	b007      	add	sp, #28
90005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000512c:	900245c0 	.word	0x900245c0
90005130:	90024f90 	.word	0x90024f90
90005134:	90024ff8 	.word	0x90024ff8
90005138:	90024f00 	.word	0x90024f00
9000513c:	900241a4 	.word	0x900241a4
90005140:	01e00110 	.word	0x01e00110
90005144:	0010000f 	.word	0x0010000f
90005148:	00140013 	.word	0x00140013
9000514c:	00100053 	.word	0x00100053
90005150:	fff0c992 	.word	0xfff0c992

90005154 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005154:	4770      	bx	lr
90005156:	bf00      	nop

90005158 <_Z23getFont_verdana_10_4bppv>:
{
90005158:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000515a:	4d18      	ldr	r5, [pc, #96]	; (900051bc <_Z23getFont_verdana_10_4bppv+0x64>)
{
9000515c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000515e:	782b      	ldrb	r3, [r5, #0]
90005160:	f3bf 8f5b 	dmb	ish
90005164:	f013 0401 	ands.w	r4, r3, #1
90005168:	d002      	beq.n	90005170 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
9000516a:	4815      	ldr	r0, [pc, #84]	; (900051c0 <_Z23getFont_verdana_10_4bppv+0x68>)
9000516c:	b00f      	add	sp, #60	; 0x3c
9000516e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005170:	4628      	mov	r0, r5
90005172:	f01c f828 	bl	900211c6 <__cxa_guard_acquire>
90005176:	2800      	cmp	r0, #0
90005178:	d0f7      	beq.n	9000516a <_Z23getFont_verdana_10_4bppv+0x12>
9000517a:	213f      	movs	r1, #63	; 0x3f
9000517c:	2201      	movs	r2, #1
9000517e:	230a      	movs	r3, #10
90005180:	2004      	movs	r0, #4
90005182:	9204      	str	r2, [sp, #16]
90005184:	9300      	str	r3, [sp, #0]
90005186:	9003      	str	r0, [sp, #12]
90005188:	480d      	ldr	r0, [pc, #52]	; (900051c0 <_Z23getFont_verdana_10_4bppv+0x68>)
9000518a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000518e:	490d      	ldr	r1, [pc, #52]	; (900051c4 <_Z23getFont_verdana_10_4bppv+0x6c>)
90005190:	9108      	str	r1, [sp, #32]
90005192:	490d      	ldr	r1, [pc, #52]	; (900051c8 <_Z23getFont_verdana_10_4bppv+0x70>)
90005194:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005198:	9107      	str	r1, [sp, #28]
9000519a:	490c      	ldr	r1, [pc, #48]	; (900051cc <_Z23getFont_verdana_10_4bppv+0x74>)
9000519c:	e9cd 4405 	strd	r4, r4, [sp, #20]
900051a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
900051a4:	f7ff fe9c 	bl	90004ee0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900051a8:	4809      	ldr	r0, [pc, #36]	; (900051d0 <_Z23getFont_verdana_10_4bppv+0x78>)
900051aa:	f01c f857 	bl	9002125c <atexit>
900051ae:	4628      	mov	r0, r5
900051b0:	f01c f815 	bl	900211de <__cxa_guard_release>
}
900051b4:	4802      	ldr	r0, [pc, #8]	; (900051c0 <_Z23getFont_verdana_10_4bppv+0x68>)
900051b6:	b00f      	add	sp, #60	; 0x3c
900051b8:	bd30      	pop	{r4, r5, pc}
900051ba:	bf00      	nop
900051bc:	2400b3e8 	.word	0x2400b3e8
900051c0:	2400b3ec 	.word	0x2400b3ec
900051c4:	900254d8 	.word	0x900254d8
900051c8:	900254f4 	.word	0x900254f4
900051cc:	902005cc 	.word	0x902005cc
900051d0:	90005155 	.word	0x90005155

900051d4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900051d4:	4770      	bx	lr
900051d6:	bf00      	nop

900051d8 <_Z23getFont_verdana_20_4bppv>:
{
900051d8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900051da:	4d18      	ldr	r5, [pc, #96]	; (9000523c <_Z23getFont_verdana_20_4bppv+0x64>)
{
900051dc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900051de:	782b      	ldrb	r3, [r5, #0]
900051e0:	f3bf 8f5b 	dmb	ish
900051e4:	f013 0401 	ands.w	r4, r3, #1
900051e8:	d002      	beq.n	900051f0 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
900051ea:	4815      	ldr	r0, [pc, #84]	; (90005240 <_Z23getFont_verdana_20_4bppv+0x68>)
900051ec:	b00f      	add	sp, #60	; 0x3c
900051ee:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900051f0:	4628      	mov	r0, r5
900051f2:	f01b ffe8 	bl	900211c6 <__cxa_guard_acquire>
900051f6:	2800      	cmp	r0, #0
900051f8:	d0f7      	beq.n	900051ea <_Z23getFont_verdana_20_4bppv+0x12>
900051fa:	213f      	movs	r1, #63	; 0x3f
900051fc:	2201      	movs	r2, #1
900051fe:	2314      	movs	r3, #20
90005200:	2004      	movs	r0, #4
90005202:	9204      	str	r2, [sp, #16]
90005204:	9300      	str	r3, [sp, #0]
90005206:	9003      	str	r0, [sp, #12]
90005208:	480d      	ldr	r0, [pc, #52]	; (90005240 <_Z23getFont_verdana_20_4bppv+0x68>)
9000520a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000520e:	490d      	ldr	r1, [pc, #52]	; (90005244 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005210:	9108      	str	r1, [sp, #32]
90005212:	490d      	ldr	r1, [pc, #52]	; (90005248 <_Z23getFont_verdana_20_4bppv+0x70>)
90005214:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005218:	9107      	str	r1, [sp, #28]
9000521a:	490c      	ldr	r1, [pc, #48]	; (9000524c <_Z23getFont_verdana_20_4bppv+0x74>)
9000521c:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005220:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005224:	f7ff fe5c 	bl	90004ee0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005228:	4809      	ldr	r0, [pc, #36]	; (90005250 <_Z23getFont_verdana_20_4bppv+0x78>)
9000522a:	f01c f817 	bl	9002125c <atexit>
9000522e:	4628      	mov	r0, r5
90005230:	f01b ffd5 	bl	900211de <__cxa_guard_release>
}
90005234:	4802      	ldr	r0, [pc, #8]	; (90005240 <_Z23getFont_verdana_20_4bppv+0x68>)
90005236:	b00f      	add	sp, #60	; 0x3c
90005238:	bd30      	pop	{r4, r5, pc}
9000523a:	bf00      	nop
9000523c:	2400b418 	.word	0x2400b418
90005240:	2400b41c 	.word	0x2400b41c
90005244:	900254dc 	.word	0x900254dc
90005248:	900254f8 	.word	0x900254f8
9000524c:	902005dc 	.word	0x902005dc
90005250:	900051d5 	.word	0x900051d5

90005254 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005254:	4770      	bx	lr
90005256:	bf00      	nop

90005258 <_Z23getFont_verdana_40_4bppv>:
{
90005258:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000525a:	4d19      	ldr	r5, [pc, #100]	; (900052c0 <_Z23getFont_verdana_40_4bppv+0x68>)
{
9000525c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000525e:	782b      	ldrb	r3, [r5, #0]
90005260:	f3bf 8f5b 	dmb	ish
90005264:	f013 0401 	ands.w	r4, r3, #1
90005268:	d002      	beq.n	90005270 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
9000526a:	4816      	ldr	r0, [pc, #88]	; (900052c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
9000526c:	b00f      	add	sp, #60	; 0x3c
9000526e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005270:	4628      	mov	r0, r5
90005272:	f01b ffa8 	bl	900211c6 <__cxa_guard_acquire>
90005276:	2800      	cmp	r0, #0
90005278:	d0f7      	beq.n	9000526a <_Z23getFont_verdana_40_4bppv+0x12>
9000527a:	213f      	movs	r1, #63	; 0x3f
9000527c:	4a12      	ldr	r2, [pc, #72]	; (900052c8 <_Z23getFont_verdana_40_4bppv+0x70>)
9000527e:	2301      	movs	r3, #1
90005280:	2028      	movs	r0, #40	; 0x28
90005282:	9208      	str	r2, [sp, #32]
90005284:	2204      	movs	r2, #4
90005286:	9304      	str	r3, [sp, #16]
90005288:	9000      	str	r0, [sp, #0]
9000528a:	9401      	str	r4, [sp, #4]
9000528c:	480d      	ldr	r0, [pc, #52]	; (900052c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
9000528e:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90005292:	490e      	ldr	r1, [pc, #56]	; (900052cc <_Z23getFont_verdana_40_4bppv+0x74>)
90005294:	e9cd 4305 	strd	r4, r3, [sp, #20]
90005298:	9107      	str	r1, [sp, #28]
9000529a:	2329      	movs	r3, #41	; 0x29
9000529c:	490c      	ldr	r1, [pc, #48]	; (900052d0 <_Z23getFont_verdana_40_4bppv+0x78>)
9000529e:	e9cd 4202 	strd	r4, r2, [sp, #8]
900052a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900052a6:	2206      	movs	r2, #6
900052a8:	f7ff fe1a 	bl	90004ee0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900052ac:	4809      	ldr	r0, [pc, #36]	; (900052d4 <_Z23getFont_verdana_40_4bppv+0x7c>)
900052ae:	f01b ffd5 	bl	9002125c <atexit>
900052b2:	4628      	mov	r0, r5
900052b4:	f01b ff93 	bl	900211de <__cxa_guard_release>
}
900052b8:	4802      	ldr	r0, [pc, #8]	; (900052c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
900052ba:	b00f      	add	sp, #60	; 0x3c
900052bc:	bd30      	pop	{r4, r5, pc}
900052be:	bf00      	nop
900052c0:	2400b448 	.word	0x2400b448
900052c4:	2400b44c 	.word	0x2400b44c
900052c8:	900254e0 	.word	0x900254e0
900052cc:	900254fc 	.word	0x900254fc
900052d0:	902005ec 	.word	0x902005ec
900052d4:	90005255 	.word	0x90005255

900052d8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
900052d8:	2000      	movs	r0, #0
900052da:	4770      	bx	lr

900052dc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
900052dc:	2000      	movs	r0, #0
900052de:	4770      	bx	lr

900052e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900052e0:	b40e      	push	{r1, r2, r3}
900052e2:	b500      	push	{lr}
900052e4:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900052e6:	2100      	movs	r1, #0
{
900052e8:	ab03      	add	r3, sp, #12
900052ea:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
900052ee:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900052f0:	f00e fbee 	bl	90013ad0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900052f4:	b002      	add	sp, #8
900052f6:	f85d eb04 	ldr.w	lr, [sp], #4
900052fa:	b003      	add	sp, #12
900052fc:	4770      	bx	lr
900052fe:	bf00      	nop

90005300 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005300:	b40c      	push	{r2, r3}
90005302:	b500      	push	{lr}
90005304:	b083      	sub	sp, #12
90005306:	ab04      	add	r3, sp, #16
90005308:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
9000530c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
9000530e:	f00e fbdf 	bl	90013ad0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005312:	b003      	add	sp, #12
90005314:	f85d eb04 	ldr.w	lr, [sp], #4
90005318:	b002      	add	sp, #8
9000531a:	4770      	bx	lr

9000531c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
9000531c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
9000531e:	b510      	push	{r4, lr}
90005320:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90005322:	b133      	cbz	r3, 90005332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90005324:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90005326:	b39b      	cbz	r3, 90005390 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90005328:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9000532a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9000532e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90005330:	b923      	cbnz	r3, 9000533c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90005332:	4620      	mov	r0, r4
}
90005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90005338:	f00f bd7c 	b.w	90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
9000533c:	f00f fe78 	bl	90015030 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90005340:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90005342:	2b01      	cmp	r3, #1
90005344:	d92a      	bls.n	9000539c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90005346:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90005348:	1c53      	adds	r3, r2, #1
9000534a:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
9000534c:	2b09      	cmp	r3, #9
9000534e:	d812      	bhi.n	90005376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90005350:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90005354:	f640 103f 	movw	r0, #2367	; 0x93f
90005358:	8c49      	ldrh	r1, [r1, #34]	; 0x22
9000535a:	4281      	cmp	r1, r0
9000535c:	d1e9      	bne.n	90005332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
9000535e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005362:	0052      	lsls	r2, r2, #1
90005364:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90005366:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
9000536a:	4422      	add	r2, r4
9000536c:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90005370:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90005372:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90005374:	e7dd      	b.n	90005332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90005376:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9000537a:	f640 113f 	movw	r1, #2367	; 0x93f
9000537e:	89db      	ldrh	r3, [r3, #14]
90005380:	428b      	cmp	r3, r1
90005382:	d1d6      	bne.n	90005332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005384:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005388:	2300      	movs	r3, #0
9000538a:	0052      	lsls	r2, r2, #1
9000538c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
9000538e:	e7ea      	b.n	90005366 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90005390:	4b05      	ldr	r3, [pc, #20]	; (900053a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90005392:	21c5      	movs	r1, #197	; 0xc5
90005394:	4a05      	ldr	r2, [pc, #20]	; (900053ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90005396:	4806      	ldr	r0, [pc, #24]	; (900053b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005398:	f01b ff42 	bl	90021220 <__assert_func>
            assert(offset < used);
9000539c:	4b05      	ldr	r3, [pc, #20]	; (900053b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
9000539e:	21cb      	movs	r1, #203	; 0xcb
900053a0:	4a05      	ldr	r2, [pc, #20]	; (900053b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
900053a2:	4803      	ldr	r0, [pc, #12]	; (900053b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
900053a4:	f01b ff3c 	bl	90021220 <__assert_func>
900053a8:	900245ec 	.word	0x900245ec
900053ac:	900245f8 	.word	0x900245f8
900053b0:	900246a4 	.word	0x900246a4
900053b4:	900246f0 	.word	0x900246f0
900053b8:	90024700 	.word	0x90024700

900053bc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
900053bc:	f00f bd03 	b.w	90014dc6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

900053c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
900053c0:	b510      	push	{r4, lr}
900053c2:	b086      	sub	sp, #24
900053c4:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
900053c8:	ac0a      	add	r4, sp, #40	; 0x28
{
900053ca:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900053ce:	461a      	mov	r2, r3
900053d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900053d2:	4661      	mov	r1, ip
900053d4:	9401      	str	r4, [sp, #4]
900053d6:	9300      	str	r3, [sp, #0]
900053d8:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
900053da:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900053dc:	f00d f81a 	bl	90012414 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
900053e0:	b006      	add	sp, #24
900053e2:	bd10      	pop	{r4, pc}

900053e4 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
900053e4:	b9e0      	cbnz	r0, 90005420 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
900053e6:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
900053e8:	4b13      	ldr	r3, [pc, #76]	; (90005438 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
900053ea:	681b      	ldr	r3, [r3, #0]
900053ec:	b1cb      	cbz	r3, 90005422 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900053ee:	4c13      	ldr	r4, [pc, #76]	; (9000543c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900053f0:	4813      	ldr	r0, [pc, #76]	; (90005440 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900053f2:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900053f6:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900053f8:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900053fa:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900053fc:	689c      	ldr	r4, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900053fe:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005400:	441c      	add	r4, r3
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90005402:	4b10      	ldr	r3, [pc, #64]	; (90005444 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90005404:	2200      	movs	r2, #0
90005406:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90005408:	f000 f83a 	bl	90005480 <_ZN17TypedTextDatabase8getFontsEv>
9000540c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
9000540e:	f000 f835 	bl	9000547c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90005412:	4b0d      	ldr	r3, [pc, #52]	; (90005448 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90005414:	4a0d      	ldr	r2, [pc, #52]	; (9000544c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90005416:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90005418:	4b0d      	ldr	r3, [pc, #52]	; (90005450 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
9000541a:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
9000541c:	8018      	strh	r0, [r3, #0]
    }
}
9000541e:	bd38      	pop	{r3, r4, r5, pc}
90005420:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005422:	4c0c      	ldr	r4, [pc, #48]	; (90005454 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90005424:	4905      	ldr	r1, [pc, #20]	; (9000543c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005426:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90005428:	480b      	ldr	r0, [pc, #44]	; (90005458 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
9000542a:	4b05      	ldr	r3, [pc, #20]	; (90005440 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
9000542c:	4a0b      	ldr	r2, [pc, #44]	; (9000545c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
9000542e:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90005430:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90005432:	2c00      	cmp	r4, #0
90005434:	d1e5      	bne.n	90005402 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90005436:	bd38      	pop	{r3, r4, r5, pc}
90005438:	2400b478 	.word	0x2400b478
9000543c:	2400b47c 	.word	0x2400b47c
90005440:	2400b480 	.word	0x2400b480
90005444:	2400b484 	.word	0x2400b484
90005448:	24026534 	.word	0x24026534
9000544c:	2402653c 	.word	0x2402653c
90005450:	24026538 	.word	0x24026538
90005454:	90200658 	.word	0x90200658
90005458:	90200644 	.word	0x90200644
9000545c:	90200640 	.word	0x90200640

90005460 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90005460:	4a04      	ldr	r2, [pc, #16]	; (90005474 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90005462:	4b05      	ldr	r3, [pc, #20]	; (90005478 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90005464:	6812      	ldr	r2, [r2, #0]
90005466:	681b      	ldr	r3, [r3, #0]
90005468:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
9000546c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90005470:	4770      	bx	lr
90005472:	bf00      	nop
90005474:	2400b480 	.word	0x2400b480
90005478:	2400b47c 	.word	0x2400b47c

9000547c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
9000547c:	2001      	movs	r0, #1
9000547e:	4770      	bx	lr

90005480 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90005480:	4800      	ldr	r0, [pc, #0]	; (90005484 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90005482:	4770      	bx	lr
90005484:	2400b488 	.word	0x2400b488

90005488 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90005488:	b510      	push	{r4, lr}
};
9000548a:	4c05      	ldr	r4, [pc, #20]	; (900054a0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
9000548c:	f7ff fea4 	bl	900051d8 <_Z23getFont_verdana_20_4bppv>
};
90005490:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90005492:	f7ff fee1 	bl	90005258 <_Z23getFont_verdana_40_4bppv>
};
90005496:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90005498:	f7ff fe5e 	bl	90005158 <_Z23getFont_verdana_10_4bppv>
};
9000549c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
9000549e:	bd10      	pop	{r4, pc}
900054a0:	2400b488 	.word	0x2400b488

900054a4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
900054a4:	4770      	bx	lr
900054a6:	bf00      	nop

900054a8 <_ZN19FrontendApplicationD0Ev>:
900054a8:	b510      	push	{r4, lr}
900054aa:	4604      	mov	r4, r0
900054ac:	f44f 71ae 	mov.w	r1, #348	; 0x15c
900054b0:	f01b fe87 	bl	900211c2 <_ZdlPvj>
900054b4:	4620      	mov	r0, r4
900054b6:	bd10      	pop	{r4, pc}

900054b8 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
900054b8:	b510      	push	{r4, lr}
900054ba:	4604      	mov	r4, r0
    {
        model.tick();
900054bc:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
900054c0:	f000 f816 	bl	900054f0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
900054c4:	4620      	mov	r0, r4
#ifdef SIMULATOR
        this->sampleKeys();
#endif
    }
900054c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
900054ca:	f00d bc69 	b.w	90012da0 <_ZN8touchgfx11Application15handleTickEventEv>
900054ce:	bf00      	nop

900054d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
900054d0:	b510      	push	{r4, lr}
900054d2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
900054d4:	f7ff fc7c 	bl	90004dd0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
900054d8:	4b01      	ldr	r3, [pc, #4]	; (900054e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
900054da:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
900054dc:	6023      	str	r3, [r4, #0]
}
900054de:	bd10      	pop	{r4, pc}
900054e0:	900247dc 	.word	0x900247dc

900054e4 <_ZN13ModelListener14handle_tiretteEb>:
    }

    virtual void handle_tirette(bool state) {};
900054e4:	4770      	bx	lr
900054e6:	bf00      	nop

900054e8 <_ZN5ModelC1Ev>:

#ifndef SIMULATOR
#include <stm32h7xx_hal.h>
#endif

Model::Model() : modelListener(0)
900054e8:	2200      	movs	r2, #0
900054ea:	6002      	str	r2, [r0, #0]
{

}
900054ec:	4770      	bx	lr
900054ee:	bf00      	nop

900054f0 <_ZN5Model4tickEv>:

void Model::tick()
{
900054f0:	b570      	push	{r4, r5, r6, lr}
900054f2:	4604      	mov	r4, r0
#ifndef SIMULATOR
	tirette = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
900054f4:	2108      	movs	r1, #8
900054f6:	4809      	ldr	r0, [pc, #36]	; (9000551c <_ZN5Model4tickEv+0x2c>)
900054f8:	f001 fe84 	bl	90007204 <HAL_GPIO_ReadPin>
#endif
	modelListener->handle_tirette(tirette);
900054fc:	6822      	ldr	r2, [r4, #0]
	tirette = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
900054fe:	1e01      	subs	r1, r0, #0
90005500:	4d07      	ldr	r5, [pc, #28]	; (90005520 <_ZN5Model4tickEv+0x30>)
	modelListener->handle_tirette(tirette);
90005502:	6813      	ldr	r3, [r2, #0]
	tirette = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
90005504:	bf18      	it	ne
90005506:	2101      	movne	r1, #1
	modelListener->handle_tirette(tirette);
90005508:	689b      	ldr	r3, [r3, #8]
	tirette = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
9000550a:	7121      	strb	r1, [r4, #4]
	modelListener->handle_tirette(tirette);
9000550c:	42ab      	cmp	r3, r5
9000550e:	d100      	bne.n	90005512 <_ZN5Model4tickEv+0x22>
}
90005510:	bd70      	pop	{r4, r5, r6, pc}
	modelListener->handle_tirette(tirette);
90005512:	4610      	mov	r0, r2
}
90005514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	modelListener->handle_tirette(tirette);
90005518:	4718      	bx	r3
9000551a:	bf00      	nop
9000551c:	58021000 	.word	0x58021000
90005520:	900054e5 	.word	0x900054e5

90005524 <_ZN16Screen1PresenterD1Ev>:
     */
    virtual void deactivate();

    virtual void handle_tirette(bool state) override;

    virtual ~Screen1Presenter() {};
90005524:	4770      	bx	lr
90005526:	bf00      	nop

90005528 <_ZThn4_N16Screen1PresenterD1Ev>:
90005528:	3804      	subs	r0, #4
9000552a:	4770      	bx	lr

9000552c <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
9000552c:	4770      	bx	lr
9000552e:	bf00      	nop

90005530 <_ZN16Screen1PresenterD0Ev>:
90005530:	b510      	push	{r4, lr}
90005532:	4604      	mov	r4, r0
90005534:	2110      	movs	r1, #16
90005536:	f01b fe44 	bl	900211c2 <_ZdlPvj>
9000553a:	4620      	mov	r0, r4
9000553c:	bd10      	pop	{r4, pc}
9000553e:	bf00      	nop

90005540 <_ZThn4_N16Screen1PresenterD0Ev>:
90005540:	b500      	push	{lr}
90005542:	3804      	subs	r0, #4
90005544:	b083      	sub	sp, #12
90005546:	2110      	movs	r1, #16
90005548:	9001      	str	r0, [sp, #4]
9000554a:	f01b fe3a 	bl	900211c2 <_ZdlPvj>
9000554e:	9801      	ldr	r0, [sp, #4]
90005550:	b003      	add	sp, #12
90005552:	f85d fb04 	ldr.w	pc, [sp], #4
90005556:	bf00      	nop

90005558 <_ZN16Screen1Presenter14handle_tiretteEb>:

}


void Screen1Presenter::handle_tirette(bool state) {
	view.updateTirette(state);
90005558:	68c0      	ldr	r0, [r0, #12]
9000555a:	f000 b83d 	b.w	900055d8 <_ZN11Screen1View13updateTiretteEb>
9000555e:	bf00      	nop

90005560 <_ZThn4_N16Screen1Presenter14handle_tiretteEb>:
90005560:	6880      	ldr	r0, [r0, #8]
90005562:	f000 b839 	b.w	900055d8 <_ZN11Screen1View13updateTiretteEb>
90005566:	bf00      	nop

90005568 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90005568:	4a06      	ldr	r2, [pc, #24]	; (90005584 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
9000556a:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
9000556c:	b410      	push	{r4}
    ModelListener() : model(0) {}
9000556e:	2400      	movs	r4, #0
90005570:	6084      	str	r4, [r0, #8]
    : view(v)
90005572:	f102 0408 	add.w	r4, r2, #8
90005576:	3224      	adds	r2, #36	; 0x24
90005578:	e9c0 4200 	strd	r4, r2, [r0]
}
9000557c:	f85d 4b04 	ldr.w	r4, [sp], #4
90005580:	4770      	bx	lr
90005582:	bf00      	nop
90005584:	90024820 	.word	0x90024820

90005588 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90005588:	4770      	bx	lr
9000558a:	bf00      	nop

9000558c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
9000558c:	4b03      	ldr	r3, [pc, #12]	; (9000559c <_ZN11Screen1ViewD1Ev+0x10>)
9000558e:	b510      	push	{r4, lr}
90005590:	4604      	mov	r4, r0
90005592:	6003      	str	r3, [r0, #0]
90005594:	f7ff fcdc 	bl	90004f50 <_ZN15Screen1ViewBaseD1Ev>
90005598:	4620      	mov	r0, r4
9000559a:	bd10      	pop	{r4, pc}
9000559c:	90024858 	.word	0x90024858

900055a0 <_ZN11Screen1ViewD0Ev>:
900055a0:	4b06      	ldr	r3, [pc, #24]	; (900055bc <_ZN11Screen1ViewD0Ev+0x1c>)
900055a2:	b510      	push	{r4, lr}
900055a4:	4604      	mov	r4, r0
900055a6:	6003      	str	r3, [r0, #0]
900055a8:	f7ff fcd2 	bl	90004f50 <_ZN15Screen1ViewBaseD1Ev>
900055ac:	f44f 719c 	mov.w	r1, #312	; 0x138
900055b0:	4620      	mov	r0, r4
900055b2:	f01b fe06 	bl	900211c2 <_ZdlPvj>
900055b6:	4620      	mov	r0, r4
900055b8:	bd10      	pop	{r4, pc}
900055ba:	bf00      	nop
900055bc:	90024858 	.word	0x90024858

900055c0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
900055c0:	b510      	push	{r4, lr}
900055c2:	4604      	mov	r4, r0
900055c4:	f7ff fcd0 	bl	90004f68 <_ZN15Screen1ViewBaseC1Ev>
900055c8:	4b01      	ldr	r3, [pc, #4]	; (900055d0 <_ZN11Screen1ViewC1Ev+0x10>)
}
900055ca:	4620      	mov	r0, r4
Screen1View::Screen1View()
900055cc:	6023      	str	r3, [r4, #0]
}
900055ce:	bd10      	pop	{r4, pc}
900055d0:	90024858 	.word	0x90024858

900055d4 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
900055d4:	f7ff bcbe 	b.w	90004f54 <_ZN15Screen1ViewBase11setupScreenEv>

900055d8 <_ZN11Screen1View13updateTiretteEb>:

void Screen1View::updateTirette(bool state) {
900055d8:	b500      	push	{lr}
900055da:	4603      	mov	r3, r0
900055dc:	b083      	sub	sp, #12
900055de:	460a      	mov	r2, r1
	img_tirette_ok.setVisible(state);
	img_tirette_nok.setVisible(!state);
	auto rect = img_tirette_nok.getRect();
900055e0:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
900055e4:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
900055e8:	46ec      	mov	ip, sp
	img_tirette_nok.setVisible(!state);
900055ea:	f082 0e01 	eor.w	lr, r2, #1
        visible = vis;
900055ee:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	auto rect = img_tirette_nok.getRect();
900055f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
     * @note    The invalidatedArea position is relative to the root container, which is usually the
     *          same as the Screen coordinates.
     */
    void invalidateRect(Rect& invalidatedArea) const
    {
        container.invalidateRect(invalidatedArea);
900055f6:	1d18      	adds	r0, r3, #4
900055f8:	4669      	mov	r1, sp
900055fa:	f883 e0e9 	strb.w	lr, [r3, #233]	; 0xe9
900055fe:	f00e fbe3 	bl	90013dc8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
	invalidateRect(rect);
}
90005602:	b003      	add	sp, #12
90005604:	f85d fb04 	ldr.w	pc, [sp], #4

90005608 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005608:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
9000560c:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
9000560e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005612:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005616:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005618:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
9000561a:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
9000561e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005622:	4770      	bx	lr

90005624 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005624:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90005628:	2b01      	cmp	r3, #1
9000562a:	d102      	bne.n	90005632 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
9000562c:	2300      	movs	r3, #0
9000562e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90005632:	2000      	movs	r0, #0
90005634:	4770      	bx	lr
90005636:	bf00      	nop

90005638 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005638:	2000      	movs	r0, #0
9000563a:	4770      	bx	lr

9000563c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000563c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000563e:	6904      	ldr	r4, [r0, #16]
90005640:	8900      	ldrh	r0, [r0, #8]
90005642:	46a4      	mov	ip, r4
}
90005644:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005648:	4760      	bx	ip
9000564a:	bf00      	nop

9000564c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000564c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
9000564e:	68c4      	ldr	r4, [r0, #12]
90005650:	8900      	ldrh	r0, [r0, #8]
90005652:	46a4      	mov	ip, r4
}
90005654:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005658:	4760      	bx	ip
9000565a:	bf00      	nop

9000565c <FT5336_GestureConfig>:
{
9000565c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005660:	f100 0718 	add.w	r7, r0, #24
{
90005664:	4688      	mov	r8, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005666:	7809      	ldrb	r1, [r1, #0]
90005668:	4638      	mov	r0, r7
9000566a:	f000 f975 	bl	90005958 <ft5336_radian_value>
9000566e:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005670:	f898 1004 	ldrb.w	r1, [r8, #4]
90005674:	4638      	mov	r0, r7
90005676:	f000 f97d 	bl	90005974 <ft5336_offset_left_right>
9000567a:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
9000567c:	f898 1008 	ldrb.w	r1, [r8, #8]
90005680:	4638      	mov	r0, r7
90005682:	f000 f985 	bl	90005990 <ft5336_offset_up_down>
90005686:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005688:	f898 100c 	ldrb.w	r1, [r8, #12]
9000568c:	4638      	mov	r0, r7
9000568e:	f000 f98d 	bl	900059ac <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005692:	f898 1010 	ldrb.w	r1, [r8, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005696:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005698:	4638      	mov	r0, r7
9000569a:	f000 f995 	bl	900059c8 <ft5336_distance_up_down>
9000569e:	4604      	mov	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
900056a0:	f898 1014 	ldrb.w	r1, [r8, #20]
900056a4:	4638      	mov	r0, r7
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900056a6:	442c      	add	r4, r5
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
900056a8:	f000 f99c 	bl	900059e4 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
900056ac:	42c4      	cmn	r4, r0
}
900056ae:	bf14      	ite	ne
900056b0:	f04f 30ff 	movne.w	r0, #4294967295
900056b4:	2000      	moveq	r0, #0
900056b6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
900056ba:	bf00      	nop

900056bc <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900056bc:	3018      	adds	r0, #24
900056be:	f000 b9ad 	b.w	90005a1c <ft5336_chip_id>
900056c2:	bf00      	nop

900056c4 <FT5336_GetState>:
{
900056c4:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900056c6:	f100 0518 	add.w	r5, r0, #24
{
900056ca:	b083      	sub	sp, #12
900056cc:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900056ce:	4628      	mov	r0, r5
900056d0:	a901      	add	r1, sp, #4
900056d2:	f000 f933 	bl	9000593c <ft5336_td_status>
900056d6:	bb10      	cbnz	r0, 9000571e <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900056d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900056dc:	2b05      	cmp	r3, #5
900056de:	bf94      	ite	ls
900056e0:	4619      	movls	r1, r3
900056e2:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900056e4:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900056e6:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900056e8:	4628      	mov	r0, r5
900056ea:	2103      	movs	r1, #3
900056ec:	eb0d 0203 	add.w	r2, sp, r3
900056f0:	f000 f912 	bl	90005918 <ft5336_read_reg>
900056f4:	b9b0      	cbnz	r0, 90005724 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900056f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900056fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900056fe:	0212      	lsls	r2, r2, #8
90005700:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005704:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005706:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
9000570a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000570e:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005710:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005714:	430b      	orrs	r3, r1
90005716:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
9000571a:	b003      	add	sp, #12
9000571c:	bd30      	pop	{r4, r5, pc}
9000571e:	f04f 31ff 	mov.w	r1, #4294967295
90005722:	e7df      	b.n	900056e4 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005724:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005728:	e7f7      	b.n	9000571a <FT5336_GetState+0x56>
9000572a:	bf00      	nop

9000572c <FT5336_GetMultiTouchState>:
{
9000572c:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000572e:	f100 0518 	add.w	r5, r0, #24
{
90005732:	b088      	sub	sp, #32
90005734:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005736:	4628      	mov	r0, r5
90005738:	4669      	mov	r1, sp
9000573a:	f000 f8ff 	bl	9000593c <ft5336_td_status>
9000573e:	2800      	cmp	r0, #0
90005740:	f040 809a 	bne.w	90005878 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005744:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005748:	2b05      	cmp	r3, #5
9000574a:	bf94      	ite	ls
9000574c:	4619      	movls	r1, r3
9000574e:	2100      	movhi	r1, #0
90005750:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005752:	231e      	movs	r3, #30
90005754:	466a      	mov	r2, sp
90005756:	4628      	mov	r0, r5
90005758:	2103      	movs	r1, #3
9000575a:	f000 f8dd 	bl	90005918 <ft5336_read_reg>
9000575e:	2800      	cmp	r0, #0
90005760:	f040 808d 	bne.w	9000587e <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005764:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005768:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000576c:	020a      	lsls	r2, r1, #8
9000576e:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005772:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005774:	f89d c007 	ldrb.w	ip, [sp, #7]
90005778:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000577c:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000577e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005782:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005786:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005788:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000578c:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000578e:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005790:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005792:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005794:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005798:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000579a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000579e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900057a2:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900057a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900057a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057aa:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900057ac:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900057ae:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900057b4:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900057b6:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057b8:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900057bc:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900057c0:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057c2:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900057c4:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057c6:	ea45 050c 	orr.w	r5, r5, ip
900057ca:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057ce:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900057d2:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057d4:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057d6:	0212      	lsls	r2, r2, #8
900057d8:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900057dc:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057de:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900057e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057e6:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900057e8:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
900057ee:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057f0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057f4:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057f6:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900057fc:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900057fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
90005802:	4313      	orrs	r3, r2
90005804:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005806:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005808:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000580c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005810:	020a      	lsls	r2, r1, #8
90005812:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005816:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005818:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000581c:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000581e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005822:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005824:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005828:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000582a:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000582c:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005830:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005832:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005834:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005836:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000583a:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000583c:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005840:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005842:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005846:	f89d 301d 	ldrb.w	r3, [sp, #29]
9000584a:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000584c:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000584e:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005850:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005854:	6625      	str	r5, [r4, #96]	; 0x60
90005856:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005858:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000585c:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000585e:	021b      	lsls	r3, r3, #8
90005860:	f89d 101b 	ldrb.w	r1, [sp, #27]
90005864:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90005868:	430b      	orrs	r3, r1
9000586a:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000586c:	f89d 3019 	ldrb.w	r3, [sp, #25]
90005870:	4313      	orrs	r3, r2
90005872:	6163      	str	r3, [r4, #20]
}
90005874:	b008      	add	sp, #32
90005876:	bd70      	pop	{r4, r5, r6, pc}
90005878:	f04f 31ff 	mov.w	r1, #4294967295
9000587c:	e768      	b.n	90005750 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
9000587e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005882:	e7f7      	b.n	90005874 <FT5336_GetMultiTouchState+0x148>

90005884 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90005884:	3018      	adds	r0, #24
90005886:	f000 b84f 	b.w	90005928 <ft5336_gest_id>
9000588a:	bf00      	nop

9000588c <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
9000588c:	2101      	movs	r1, #1
9000588e:	3018      	adds	r0, #24
90005890:	f000 b8b6 	b.w	90005a00 <ft5336_g_mode>

90005894 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005894:	2100      	movs	r1, #0
90005896:	3018      	adds	r0, #24
90005898:	f000 b8b2 	b.w	90005a00 <ft5336_g_mode>

9000589c <FT5336_Init>:
{
9000589c:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
9000589e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
900058a2:	b98d      	cbnz	r5, 900058c8 <FT5336_Init+0x2c>
    pObj->IO.Init();
900058a4:	4606      	mov	r6, r0
900058a6:	4604      	mov	r4, r0
900058a8:	f856 3b18 	ldr.w	r3, [r6], #24
900058ac:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
900058ae:	4629      	mov	r1, r5
900058b0:	4630      	mov	r0, r6
900058b2:	f000 f8a5 	bl	90005a00 <ft5336_g_mode>
  if(ret != FT5336_OK)
900058b6:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
900058b8:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
900058bc:	bf18      	it	ne
900058be:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
900058c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
900058c4:	4240      	negs	r0, r0
}
900058c6:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
900058c8:	2000      	movs	r0, #0
}
900058ca:	bd70      	pop	{r4, r5, r6, pc}

900058cc <FT5336_ClearIT>:
900058cc:	2000      	movs	r0, #0
900058ce:	4770      	bx	lr

900058d0 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
900058d0:	b1d0      	cbz	r0, 90005908 <FT5336_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
900058d2:	890a      	ldrh	r2, [r1, #8]
{
900058d4:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
900058d6:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
900058da:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
900058dc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
900058e0:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
900058e4:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
900058e6:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
900058e8:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = WriteRegWrap;
900058ea:	4a09      	ldr	r2, [pc, #36]	; (90005910 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = ReadRegWrap;
900058ec:	4909      	ldr	r1, [pc, #36]	; (90005914 <FT5336_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
900058ee:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
900058f0:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
900058f2:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if(pObj->IO.Init != NULL)
900058f6:	b113      	cbz	r3, 900058fe <FT5336_RegisterBusIO+0x2e>
}
900058f8:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
900058fc:	4718      	bx	r3
}
900058fe:	f04f 30ff 	mov.w	r0, #4294967295
90005902:	f85d 4b04 	ldr.w	r4, [sp], #4
90005906:	4770      	bx	lr
90005908:	f04f 30ff 	mov.w	r0, #4294967295
9000590c:	4770      	bx	lr
9000590e:	bf00      	nop
90005910:	9000564d 	.word	0x9000564d
90005914:	9000563d 	.word	0x9000563d

90005918 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90005918:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000591a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
9000591e:	46a4      	mov	ip, r4
}
90005920:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005924:	4760      	bx	ip
90005926:	bf00      	nop

90005928 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005928:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000592a:	2301      	movs	r3, #1
{
9000592c:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000592e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005932:	4619      	mov	r1, r3
90005934:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90005936:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000593a:	4760      	bx	ip

9000593c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
9000593c:	b538      	push	{r3, r4, r5, lr}
9000593e:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005940:	2301      	movs	r3, #1
90005942:	2102      	movs	r1, #2
90005944:	4622      	mov	r2, r4
90005946:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
9000594a:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
9000594c:	b918      	cbnz	r0, 90005956 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
9000594e:	7823      	ldrb	r3, [r4, #0]
90005950:	f003 030f 	and.w	r3, r3, #15
90005954:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90005956:	bd38      	pop	{r3, r4, r5, pc}

90005958 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90005958:	b510      	push	{r4, lr}
9000595a:	460c      	mov	r4, r1
9000595c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000595e:	2301      	movs	r3, #1
90005960:	2191      	movs	r1, #145	; 0x91
{
90005962:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005966:	f10d 0207 	add.w	r2, sp, #7
9000596a:	6804      	ldr	r4, [r0, #0]
9000596c:	6880      	ldr	r0, [r0, #8]
9000596e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90005970:	b002      	add	sp, #8
90005972:	bd10      	pop	{r4, pc}

90005974 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005974:	b510      	push	{r4, lr}
90005976:	460c      	mov	r4, r1
90005978:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000597a:	2301      	movs	r3, #1
9000597c:	2192      	movs	r1, #146	; 0x92
{
9000597e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005982:	f10d 0207 	add.w	r2, sp, #7
90005986:	6804      	ldr	r4, [r0, #0]
90005988:	6880      	ldr	r0, [r0, #8]
9000598a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
9000598c:	b002      	add	sp, #8
9000598e:	bd10      	pop	{r4, pc}

90005990 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005990:	b510      	push	{r4, lr}
90005992:	460c      	mov	r4, r1
90005994:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005996:	2301      	movs	r3, #1
90005998:	2193      	movs	r1, #147	; 0x93
{
9000599a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000599e:	f10d 0207 	add.w	r2, sp, #7
900059a2:	6804      	ldr	r4, [r0, #0]
900059a4:	6880      	ldr	r0, [r0, #8]
900059a6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
900059a8:	b002      	add	sp, #8
900059aa:	bd10      	pop	{r4, pc}

900059ac <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900059ac:	b510      	push	{r4, lr}
900059ae:	460c      	mov	r4, r1
900059b0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900059b2:	2301      	movs	r3, #1
900059b4:	2194      	movs	r1, #148	; 0x94
{
900059b6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900059ba:	f10d 0207 	add.w	r2, sp, #7
900059be:	6804      	ldr	r4, [r0, #0]
900059c0:	6880      	ldr	r0, [r0, #8]
900059c2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
900059c4:	b002      	add	sp, #8
900059c6:	bd10      	pop	{r4, pc}

900059c8 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900059c8:	b510      	push	{r4, lr}
900059ca:	460c      	mov	r4, r1
900059cc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900059ce:	2301      	movs	r3, #1
900059d0:	2195      	movs	r1, #149	; 0x95
{
900059d2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900059d6:	f10d 0207 	add.w	r2, sp, #7
900059da:	6804      	ldr	r4, [r0, #0]
900059dc:	6880      	ldr	r0, [r0, #8]
900059de:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
900059e0:	b002      	add	sp, #8
900059e2:	bd10      	pop	{r4, pc}

900059e4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
900059e4:	b510      	push	{r4, lr}
900059e6:	460c      	mov	r4, r1
900059e8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900059ea:	2301      	movs	r3, #1
900059ec:	2196      	movs	r1, #150	; 0x96
{
900059ee:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900059f2:	f10d 0207 	add.w	r2, sp, #7
900059f6:	6804      	ldr	r4, [r0, #0]
900059f8:	6880      	ldr	r0, [r0, #8]
900059fa:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
900059fc:	b002      	add	sp, #8
900059fe:	bd10      	pop	{r4, pc}

90005a00 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90005a00:	b510      	push	{r4, lr}
90005a02:	460c      	mov	r4, r1
90005a04:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005a06:	2301      	movs	r3, #1
90005a08:	21a4      	movs	r1, #164	; 0xa4
{
90005a0a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005a0e:	f10d 0207 	add.w	r2, sp, #7
90005a12:	6804      	ldr	r4, [r0, #0]
90005a14:	6880      	ldr	r0, [r0, #8]
90005a16:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90005a18:	b002      	add	sp, #8
90005a1a:	bd10      	pop	{r4, pc}

90005a1c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005a1c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005a1e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90005a22:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005a24:	2301      	movs	r3, #1
90005a26:	46a4      	mov	ip, r4
90005a28:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90005a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005a2e:	4760      	bx	ip

90005a30 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005a32:	680b      	ldr	r3, [r1, #0]
{
90005a34:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005a36:	4c2b      	ldr	r4, [pc, #172]	; (90005ae4 <MT48LC4M32B2_Init+0xb4>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90005a3c:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90005a3e:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90005a40:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a42:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90005a44:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005a46:	2301      	movs	r3, #1
90005a48:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90005a4a:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a4c:	f005 fd4e 	bl	9000b4ec <HAL_SDRAM_SendCommand>
90005a50:	2800      	cmp	r0, #0
90005a52:	d143      	bne.n	90005adc <MT48LC4M32B2_Init+0xac>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90005a54:	f000 ff48 	bl	900068e8 <HAL_GetTick>
90005a58:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90005a5a:	f000 ff45 	bl	900068e8 <HAL_GetTick>
90005a5e:	4286      	cmp	r6, r0
90005a60:	d0fb      	beq.n	90005a5a <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005a62:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005a64:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90005a66:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a68:	491e      	ldr	r1, [pc, #120]	; (90005ae4 <MT48LC4M32B2_Init+0xb4>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005a6a:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90005a6c:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90005a6e:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a70:	4638      	mov	r0, r7
90005a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90005a76:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90005a78:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a7a:	f005 fd37 	bl	9000b4ec <HAL_SDRAM_SendCommand>
90005a7e:	bb68      	cbnz	r0, 90005adc <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a80:	4918      	ldr	r1, [pc, #96]	; (90005ae4 <MT48LC4M32B2_Init+0xb4>)
90005a82:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90005a84:	e9d5 2300 	ldrd	r2, r3, [r5]
90005a88:	e9c4 3200 	strd	r3, r2, [r4]
  Command.AutoRefreshNumber      = 8;
90005a8c:	2208      	movs	r2, #8
90005a8e:	2300      	movs	r3, #0
90005a90:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
90005a98:	f005 fd28 	bl	9000b4ec <HAL_SDRAM_SendCommand>
90005a9c:	b9f0      	cbnz	r0, 90005adc <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005a9e:	4911      	ldr	r1, [pc, #68]	; (90005ae4 <MT48LC4M32B2_Init+0xb4>)
90005aa0:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005aa2:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90005aa6:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90005aa8:	696a      	ldr	r2, [r5, #20]
90005aaa:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90005aac:	69aa      	ldr	r2, [r5, #24]
90005aae:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005ab0:	69ea      	ldr	r2, [r5, #28]
90005ab2:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90005ab4:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90005ab6:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005ab8:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90005aba:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005ac2:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ac4:	f005 fd12 	bl	9000b4ec <HAL_SDRAM_SendCommand>
90005ac8:	b940      	cbnz	r0, 90005adc <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90005aca:	68a9      	ldr	r1, [r5, #8]
90005acc:	4638      	mov	r0, r7
90005ace:	f005 fd2d 	bl	9000b52c <HAL_SDRAM_ProgramRefreshRate>
90005ad2:	3800      	subs	r0, #0
90005ad4:	bf18      	it	ne
90005ad6:	2001      	movne	r0, #1
90005ad8:	4240      	negs	r0, r0
}
90005ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90005adc:	f04f 30ff 	mov.w	r0, #4294967295
}
90005ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90005ae2:	bf00      	nop
90005ae4:	2400b498 	.word	0x2400b498

90005ae8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90005ae8:	4a10      	ldr	r2, [pc, #64]	; (90005b2c <BSP_I2C4_DeInit+0x44>)
{
90005aea:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90005aec:	6813      	ldr	r3, [r2, #0]
90005aee:	3b01      	subs	r3, #1
90005af0:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90005af2:	b10b      	cbz	r3, 90005af8 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90005af4:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90005af6:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90005af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90005afc:	480c      	ldr	r0, [pc, #48]	; (90005b30 <BSP_I2C4_DeInit+0x48>)
90005afe:	f001 fab9 	bl	90007074 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90005b02:	480b      	ldr	r0, [pc, #44]	; (90005b30 <BSP_I2C4_DeInit+0x48>)
90005b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90005b08:	f001 fab4 	bl	90007074 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90005b0c:	4a09      	ldr	r2, [pc, #36]	; (90005b34 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005b0e:	480a      	ldr	r0, [pc, #40]	; (90005b38 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90005b10:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90005b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005b18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005b1c:	f001 fd4a 	bl	900075b4 <HAL_I2C_DeInit>
90005b20:	2800      	cmp	r0, #0
90005b22:	d0e7      	beq.n	90005af4 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90005b24:	f06f 0007 	mvn.w	r0, #7
}
90005b28:	bd08      	pop	{r3, pc}
90005b2a:	bf00      	nop
90005b2c:	2400b4a8 	.word	0x2400b4a8
90005b30:	58020c00 	.word	0x58020c00
90005b34:	58024400 	.word	0x58024400
90005b38:	2400beb0 	.word	0x2400beb0

90005b3c <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90005b3c:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90005b3e:	2201      	movs	r2, #1
{
90005b40:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90005b42:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90005b46:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90005b4a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90005b4e:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90005b52:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90005b54:	f001 fcd6 	bl	90007504 <HAL_I2C_Init>
90005b58:	b108      	cbz	r0, 90005b5e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90005b5a:	2001      	movs	r0, #1
}
90005b5c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90005b5e:	4601      	mov	r1, r0
90005b60:	4620      	mov	r0, r4
90005b62:	f001 ffe1 	bl	90007b28 <HAL_I2CEx_ConfigAnalogFilter>
90005b66:	2800      	cmp	r0, #0
90005b68:	d1f7      	bne.n	90005b5a <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90005b6a:	4601      	mov	r1, r0
90005b6c:	4620      	mov	r0, r4
90005b6e:	f002 f805 	bl	90007b7c <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90005b72:	3800      	subs	r0, #0
90005b74:	bf18      	it	ne
90005b76:	2001      	movne	r0, #1
}
90005b78:	bd10      	pop	{r4, pc}
90005b7a:	bf00      	nop

90005b7c <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90005b7c:	4b99      	ldr	r3, [pc, #612]	; (90005de4 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90005b7e:	489a      	ldr	r0, [pc, #616]	; (90005de8 <BSP_I2C4_Init+0x26c>)
90005b80:	4a9a      	ldr	r2, [pc, #616]	; (90005dec <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90005b82:	6819      	ldr	r1, [r3, #0]
{
90005b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005b88:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90005b8a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90005b8c:	9103      	str	r1, [sp, #12]
90005b8e:	b119      	cbz	r1, 90005b98 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90005b90:	2000      	movs	r0, #0
}
90005b92:	b01f      	add	sp, #124	; 0x7c
90005b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90005b98:	2201      	movs	r2, #1
90005b9a:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90005b9c:	f001 ffbe 	bl	90007b1c <HAL_I2C_GetState>
90005ba0:	2800      	cmp	r0, #0
90005ba2:	d1f5      	bne.n	90005b90 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005ba4:	4c92      	ldr	r4, [pc, #584]	; (90005df0 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005ba6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90005baa:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90005bac:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005bae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005bb2:	2600      	movs	r6, #0
90005bb4:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005bb6:	f043 0308 	orr.w	r3, r3, #8
90005bba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90005bbe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90005bc2:	f003 0308 	and.w	r3, r3, #8
90005bc6:	9315      	str	r3, [sp, #84]	; 0x54
90005bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005bca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90005bce:	f043 0308 	orr.w	r3, r3, #8
90005bd2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90005bd6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90005bda:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005bdc:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005be0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005be4:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90005be6:	a918      	add	r1, sp, #96	; 0x60
90005be8:	4882      	ldr	r0, [pc, #520]	; (90005df4 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005bea:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005bec:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90005bf0:	f001 f906 	bl	90006e00 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90005bf4:	2312      	movs	r3, #18
90005bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90005bfa:	a918      	add	r1, sp, #96	; 0x60
90005bfc:	487d      	ldr	r0, [pc, #500]	; (90005df4 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90005bfe:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90005c00:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90005c04:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90005c08:	f001 f8fa 	bl	90006e00 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90005c0c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90005c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005c14:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90005c18:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005c20:	9317      	str	r3, [sp, #92]	; 0x5c
90005c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90005c24:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005c2c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90005c30:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90005c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005c38:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90005c3c:	f004 fcba 	bl	9000a5b4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90005c40:	2800      	cmp	r0, #0
90005c42:	f000 81ed 	beq.w	90006020 <BSP_I2C4_Init+0x4a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005c46:	4b6c      	ldr	r3, [pc, #432]	; (90005df8 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
90005c48:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005c4c:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005c4e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005c52:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90005e00 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005c56:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005c58:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90005c5c:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005c5e:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005c60:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005c64:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005c68:	0079      	lsls	r1, r7, #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90005c6a:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
  if (tsdadel_min <= 0)
90005c6e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
90005c72:	4b62      	ldr	r3, [pc, #392]	; (90005dfc <BSP_I2C4_Init+0x280>)
90005c74:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005c78:	9113      	str	r1, [sp, #76]	; 0x4c
90005c7a:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005c7c:	4699      	mov	r9, r3
90005c7e:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005c80:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90005c84:	46b8      	mov	r8, r7
90005c86:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90005c8a:	bf94      	ite	ls
90005c8c:	2101      	movls	r1, #1
90005c8e:	2100      	movhi	r1, #0
90005c90:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90005c94:	f001 0101 	and.w	r1, r1, #1
90005c98:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90005c9c:	bf38      	it	cc
90005c9e:	2100      	movcc	r1, #0
90005ca0:	429c      	cmp	r4, r3
90005ca2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90005ca6:	9105      	str	r1, [sp, #20]
90005ca8:	bf8c      	ite	hi
90005caa:	2100      	movhi	r1, #0
90005cac:	2101      	movls	r1, #1
90005cae:	459c      	cmp	ip, r3
90005cb0:	bf38      	it	cc
90005cb2:	2100      	movcc	r1, #0
90005cb4:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90005cb8:	9106      	str	r1, [sp, #24]
90005cba:	eb07 0142 	add.w	r1, r7, r2, lsl #1
90005cbe:	9104      	str	r1, [sp, #16]
90005cc0:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90005cc4:	9111      	str	r1, [sp, #68]	; 0x44
90005cc6:	bf94      	ite	ls
90005cc8:	2101      	movls	r1, #1
90005cca:	2100      	movhi	r1, #0
90005ccc:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90005cd0:	f001 0e01 	and.w	lr, r1, #1
90005cd4:	bf38      	it	cc
90005cd6:	f04f 0e00 	movcc.w	lr, #0
90005cda:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90005cdc:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005ce0:	f8cd e01c 	str.w	lr, [sp, #28]
90005ce4:	bf8c      	ite	hi
90005ce6:	f04f 0e00 	movhi.w	lr, #0
90005cea:	f04f 0e01 	movls.w	lr, #1
90005cee:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90005cf0:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005cf2:	bf38      	it	cc
90005cf4:	f04f 0e00 	movcc.w	lr, #0
90005cf8:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
90005cfc:	bf98      	it	ls
90005cfe:	2101      	movls	r1, #1
90005d00:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90005d04:	f8cd e020 	str.w	lr, [sp, #32]
90005d08:	f001 0101 	and.w	r1, r1, #1
90005d0c:	bf38      	it	cc
90005d0e:	2100      	movcc	r1, #0
90005d10:	4284      	cmp	r4, r0
90005d12:	9109      	str	r1, [sp, #36]	; 0x24
90005d14:	4601      	mov	r1, r0
90005d16:	bf8c      	ite	hi
90005d18:	2000      	movhi	r0, #0
90005d1a:	2001      	movls	r0, #1
90005d1c:	458c      	cmp	ip, r1
90005d1e:	bf38      	it	cc
90005d20:	2000      	movcc	r0, #0
90005d22:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90005d26:	900b      	str	r0, [sp, #44]	; 0x2c
90005d28:	bf94      	ite	ls
90005d2a:	2001      	movls	r0, #1
90005d2c:	2000      	movhi	r0, #0
90005d2e:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90005d32:	f000 0001 	and.w	r0, r0, #1
90005d36:	bf38      	it	cc
90005d38:	2000      	movcc	r0, #0
90005d3a:	900c      	str	r0, [sp, #48]	; 0x30
90005d3c:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
90005d40:	4284      	cmp	r4, r0
90005d42:	bf8c      	ite	hi
90005d44:	f04f 0e00 	movhi.w	lr, #0
90005d48:	f04f 0e01 	movls.w	lr, #1
90005d4c:	4584      	cmp	ip, r0
90005d4e:	bf38      	it	cc
90005d50:	f04f 0e00 	movcc.w	lr, #0
90005d54:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90005d58:	4670      	mov	r0, lr
90005d5a:	bf94      	ite	ls
90005d5c:	2001      	movls	r0, #1
90005d5e:	2000      	movhi	r0, #0
90005d60:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90005d64:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90005d68:	f04f 0e00 	mov.w	lr, #0
90005d6c:	f000 0001 	and.w	r0, r0, #1
90005d70:	bf38      	it	cc
90005d72:	2000      	movcc	r0, #0
90005d74:	900e      	str	r0, [sp, #56]	; 0x38
90005d76:	9804      	ldr	r0, [sp, #16]
90005d78:	4284      	cmp	r4, r0
90005d7a:	4602      	mov	r2, r0
90005d7c:	bf8c      	ite	hi
90005d7e:	2200      	movhi	r2, #0
90005d80:	2201      	movls	r2, #1
90005d82:	4584      	cmp	ip, r0
90005d84:	bf38      	it	cc
90005d86:	2200      	movcc	r2, #0
90005d88:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90005d8c:	920f      	str	r2, [sp, #60]	; 0x3c
90005d8e:	bf94      	ite	ls
90005d90:	2201      	movls	r2, #1
90005d92:	2200      	movhi	r2, #0
90005d94:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90005d98:	f002 0201 	and.w	r2, r2, #1
90005d9c:	bf38      	it	cc
90005d9e:	2200      	movcc	r2, #0
90005da0:	9210      	str	r2, [sp, #64]	; 0x40
90005da2:	9a11      	ldr	r2, [sp, #68]	; 0x44
90005da4:	4294      	cmp	r4, r2
90005da6:	4613      	mov	r3, r2
90005da8:	bf8c      	ite	hi
90005daa:	2300      	movhi	r3, #0
90005dac:	2301      	movls	r3, #1
90005dae:	4594      	cmp	ip, r2
90005db0:	bf38      	it	cc
90005db2:	2300      	movcc	r3, #0
90005db4:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90005db8:	9311      	str	r3, [sp, #68]	; 0x44
90005dba:	bf94      	ite	ls
90005dbc:	2301      	movls	r3, #1
90005dbe:	2300      	movhi	r3, #0
90005dc0:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90005dc4:	f003 0301 	and.w	r3, r3, #1
90005dc8:	bf38      	it	cc
90005dca:	2300      	movcc	r3, #0
90005dcc:	9312      	str	r3, [sp, #72]	; 0x48
90005dce:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90005dd2:	429c      	cmp	r4, r3
90005dd4:	bf8c      	ite	hi
90005dd6:	2200      	movhi	r2, #0
90005dd8:	2201      	movls	r2, #1
90005dda:	459c      	cmp	ip, r3
90005ddc:	bf38      	it	cc
90005dde:	2200      	movcc	r2, #0
90005de0:	9204      	str	r2, [sp, #16]
90005de2:	e014      	b.n	90005e0e <BSP_I2C4_Init+0x292>
90005de4:	2400b4a8 	.word	0x2400b4a8
90005de8:	2400beb0 	.word	0x2400beb0
90005dec:	58001c00 	.word	0x58001c00
90005df0:	58024400 	.word	0x58024400
90005df4:	58020c00 	.word	0x58020c00
90005df8:	3b9aca00 	.word	0x3b9aca00
90005dfc:	2400beac 	.word	0x2400beac
90005e00:	2400b4ac 	.word	0x2400b4ac
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90005e04:	f1be 0f10 	cmp.w	lr, #16
90005e08:	44b8      	add	r8, r7
90005e0a:	f000 826b 	beq.w	900062e4 <BSP_I2C4_Init+0x768>
      if (tscldel >= (uint32_t)tscldel_min)
90005e0e:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90005e12:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90005e14:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90005e18:	d3f4      	bcc.n	90005e04 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90005e1a:	ebbb 0105 	subs.w	r1, fp, r5
90005e1e:	bf18      	it	ne
90005e20:	2101      	movne	r1, #1
90005e22:	2c00      	cmp	r4, #0
90005e24:	bf18      	it	ne
90005e26:	2100      	movne	r1, #0
90005e28:	2900      	cmp	r1, #0
90005e2a:	f040 8249 	bne.w	900062c0 <BSP_I2C4_Init+0x744>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005e2e:	42bc      	cmp	r4, r7
90005e30:	bf8c      	ite	hi
90005e32:	2100      	movhi	r1, #0
90005e34:	2101      	movls	r1, #1
90005e36:	45bc      	cmp	ip, r7
90005e38:	bf38      	it	cc
90005e3a:	2100      	movcc	r1, #0
            if(presc != prev_presc)
90005e3c:	45ab      	cmp	fp, r5
90005e3e:	bf0c      	ite	eq
90005e40:	2100      	moveq	r1, #0
90005e42:	f001 0101 	andne.w	r1, r1, #1
90005e46:	2900      	cmp	r1, #0
90005e48:	f000 821e 	beq.w	90006288 <BSP_I2C4_Init+0x70c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e4c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005e50:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005e54:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e56:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005e5a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e5e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005e62:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005e64:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e66:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005e68:	f200 8116 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90005e6c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005e6e:	9e06      	ldr	r6, [sp, #24]
90005e70:	45ab      	cmp	fp, r5
90005e72:	bf0c      	ite	eq
90005e74:	2600      	moveq	r6, #0
90005e76:	f006 0601 	andne.w	r6, r6, #1
90005e7a:	2e00      	cmp	r6, #0
90005e7c:	f000 81cc 	beq.w	90006218 <BSP_I2C4_Init+0x69c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e80:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005e84:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005e88:	2103      	movs	r1, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e8a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005e8e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e92:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005e96:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005e98:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005e9a:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005e9c:	f200 80fc 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90005ea0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005ea2:	9808      	ldr	r0, [sp, #32]
90005ea4:	455d      	cmp	r5, fp
90005ea6:	bf0c      	ite	eq
90005ea8:	2000      	moveq	r0, #0
90005eaa:	f000 0001 	andne.w	r0, r0, #1
90005eae:	2800      	cmp	r0, #0
90005eb0:	f000 81e8 	beq.w	90006284 <BSP_I2C4_Init+0x708>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005eb4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005eb8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005ebc:	2105      	movs	r1, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ebe:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005ec2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ec6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005eca:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005ecc:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ece:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005ed0:	f200 80e2 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90005ed4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
90005ed8:	455d      	cmp	r5, fp
90005eda:	bf0c      	ite	eq
90005edc:	2100      	moveq	r1, #0
90005ede:	f001 0101 	andne.w	r1, r1, #1
90005ee2:	2900      	cmp	r1, #0
90005ee4:	f000 817c 	beq.w	900061e0 <BSP_I2C4_Init+0x664>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ee8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005eec:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005ef0:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005ef2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005ef6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005efa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005efe:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f00:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f02:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f04:	f200 80c8 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90005f08:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005f0a:	980d      	ldr	r0, [sp, #52]	; 0x34
90005f0c:	455d      	cmp	r5, fp
90005f0e:	bf0c      	ite	eq
90005f10:	2000      	moveq	r0, #0
90005f12:	f000 0001 	andne.w	r0, r0, #1
90005f16:	2800      	cmp	r0, #0
90005f18:	f000 8144 	beq.w	900061a4 <BSP_I2C4_Init+0x628>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f1c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005f20:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f24:	2109      	movs	r1, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f26:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f2a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f2e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005f32:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f34:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f36:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f38:	f200 80ae 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90005f3c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005f3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
90005f40:	455d      	cmp	r5, fp
90005f42:	bf0c      	ite	eq
90005f44:	2100      	moveq	r1, #0
90005f46:	f001 0101 	andne.w	r1, r1, #1
90005f4a:	2900      	cmp	r1, #0
90005f4c:	d072      	beq.n	90006034 <BSP_I2C4_Init+0x4b8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f4e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005f52:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f56:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f58:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f5c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f60:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005f64:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f66:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f68:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f6a:	f200 8095 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90005f6e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005f70:	9811      	ldr	r0, [sp, #68]	; 0x44
90005f72:	455d      	cmp	r5, fp
90005f74:	bf0c      	ite	eq
90005f76:	2000      	moveq	r0, #0
90005f78:	f000 0001 	andne.w	r0, r0, #1
90005f7c:	2800      	cmp	r0, #0
90005f7e:	d073      	beq.n	90006068 <BSP_I2C4_Init+0x4ec>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f80:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005f84:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f88:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f8a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f8e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f92:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005f96:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005f98:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f9a:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005f9c:	d87c      	bhi.n	90006098 <BSP_I2C4_Init+0x51c>
90005f9e:	4601      	mov	r1, r0
90005fa0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90005fa2:	9e04      	ldr	r6, [sp, #16]
90005fa4:	455d      	cmp	r5, fp
90005fa6:	bf0c      	ite	eq
90005fa8:	2600      	moveq	r6, #0
90005faa:	f006 0601 	andne.w	r6, r6, #1
90005fae:	2e00      	cmp	r6, #0
90005fb0:	f000 80f6 	beq.w	900061a0 <BSP_I2C4_Init+0x624>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005fb4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90005fb8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005fbc:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90005fc0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005fc4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90005fc8:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90005fca:	f04f 030f 	mov.w	r3, #15
90005fce:	6093      	str	r3, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005fd0:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90005fd2:	d861      	bhi.n	90006098 <BSP_I2C4_Init+0x51c>
90005fd4:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90005fd6:	e715      	b.n	90005e04 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90005fd8:	9a07      	ldr	r2, [sp, #28]
90005fda:	9b08      	ldr	r3, [sp, #32]
90005fdc:	3214      	adds	r2, #20
90005fde:	3301      	adds	r3, #1
90005fe0:	9207      	str	r2, [sp, #28]
90005fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90005fe4:	9308      	str	r3, [sp, #32]
90005fe6:	4293      	cmp	r3, r2
90005fe8:	d178      	bne.n	900060dc <BSP_I2C4_Init+0x560>
        if (idx < I2C_VALID_TIMING_NBR)
90005fea:	297f      	cmp	r1, #127	; 0x7f
90005fec:	d818      	bhi.n	90006020 <BSP_I2C4_Init+0x4a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90005fee:	eb01 0381 	add.w	r3, r1, r1, lsl #2
90005ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
90005ff4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
90005ff8:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90005ffc:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90005ffe:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006000:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006002:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006006:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000600a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000600e:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90006010:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006012:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90006014:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006018:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000601a:	430b      	orrs	r3, r1
9000601c:	4313      	orrs	r3, r2
9000601e:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90006020:	9903      	ldr	r1, [sp, #12]
90006022:	48ba      	ldr	r0, [pc, #744]	; (9000630c <BSP_I2C4_Init+0x790>)
90006024:	f7ff fd8a 	bl	90005b3c <MX_I2C4_Init>
90006028:	2800      	cmp	r0, #0
9000602a:	f43f adb1 	beq.w	90005b90 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
9000602e:	f06f 0007 	mvn.w	r0, #7
  return ret;
90006032:	e5ae      	b.n	90005b92 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
90006034:	4606      	mov	r6, r0
90006036:	9910      	ldr	r1, [sp, #64]	; 0x40
90006038:	455d      	cmp	r5, fp
9000603a:	bf0c      	ite	eq
9000603c:	2100      	moveq	r1, #0
9000603e:	f001 0101 	andne.w	r1, r1, #1
90006042:	2900      	cmp	r1, #0
90006044:	f000 80ca 	beq.w	900061dc <BSP_I2C4_Init+0x660>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006048:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000604c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006050:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006052:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006056:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000605a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000605e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006060:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006062:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006064:	d818      	bhi.n	90006098 <BSP_I2C4_Init+0x51c>
90006066:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006068:	9e12      	ldr	r6, [sp, #72]	; 0x48
9000606a:	455d      	cmp	r5, fp
9000606c:	bf0c      	ite	eq
9000606e:	2600      	moveq	r6, #0
90006070:	f006 0601 	andne.w	r6, r6, #1
90006074:	2e00      	cmp	r6, #0
90006076:	d094      	beq.n	90005fa2 <BSP_I2C4_Init+0x426>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006078:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000607c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006080:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90006084:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006088:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000608c:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000608e:	f04f 030e 	mov.w	r3, #14
90006092:	6093      	str	r3, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006094:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006096:	d99d      	bls.n	90005fd4 <BSP_I2C4_Init+0x458>
90006098:	4b9d      	ldr	r3, [pc, #628]	; (90006310 <BSP_I2C4_Init+0x794>)
9000609a:	920b      	str	r2, [sp, #44]	; 0x2c
9000609c:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
900060a0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
900060a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900060a6:	f240 4201 	movw	r2, #1025	; 0x401
900060aa:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900060ae:	f640 1ac4 	movw	sl, #2500	; 0x9c4
900060b2:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900060b4:	f240 4b12 	movw	fp, #1042	; 0x412
900060b8:	920d      	str	r2, [sp, #52]	; 0x34
900060ba:	9a02      	ldr	r2, [sp, #8]
900060bc:	4296      	cmp	r6, r2
900060be:	bf38      	it	cc
900060c0:	4616      	movcc	r6, r2
900060c2:	4a94      	ldr	r2, [pc, #592]	; (90006314 <BSP_I2C4_Init+0x798>)
900060c4:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900060c6:	2200      	movs	r2, #0
900060c8:	9208      	str	r2, [sp, #32]
900060ca:	f04f 32ff 	mov.w	r2, #4294967295
900060ce:	4611      	mov	r1, r2
900060d0:	f103 0232 	add.w	r2, r3, #50	; 0x32
900060d4:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
900060d8:	920c      	str	r2, [sp, #48]	; 0x30
900060da:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900060dc:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900060de:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900060e2:	6818      	ldr	r0, [r3, #0]
900060e4:	9b02      	ldr	r3, [sp, #8]
900060e6:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900060ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900060ec:	1a1b      	subs	r3, r3, r0
900060ee:	ea4f 0943 	mov.w	r9, r3, lsl #1
900060f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900060f4:	eb03 0e00 	add.w	lr, r3, r0
900060f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900060fa:	4403      	add	r3, r0
900060fc:	9309      	str	r3, [sp, #36]	; 0x24
900060fe:	e006      	b.n	9000610e <BSP_I2C4_Init+0x592>
90006100:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
90006104:	4486      	add	lr, r0
90006106:	eba9 0900 	sub.w	r9, r9, r0
9000610a:	f43f af65 	beq.w	90005fd8 <BSP_I2C4_Init+0x45c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
9000610e:	f240 5214 	movw	r2, #1300	; 0x514
90006112:	f8cd 8004 	str.w	r8, [sp, #4]
90006116:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
9000611a:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
9000611e:	4596      	cmp	lr, r2
90006120:	d9ee      	bls.n	90006100 <BSP_I2C4_Init+0x584>
90006122:	9a02      	ldr	r2, [sp, #8]
90006124:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
90006128:	d2ea      	bcs.n	90006100 <BSP_I2C4_Init+0x584>
9000612a:	f640 0c34 	movw	ip, #2100	; 0x834
9000612e:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006130:	f8cd 8010 	str.w	r8, [sp, #16]
90006134:	2200      	movs	r2, #0
90006136:	ebac 0c03 	sub.w	ip, ip, r3
9000613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000613c:	f8cd e014 	str.w	lr, [sp, #20]
90006140:	4473      	add	r3, lr
90006142:	f8cd 9018 	str.w	r9, [sp, #24]
90006146:	f8dd 801c 	ldr.w	r8, [sp, #28]
9000614a:	468e      	mov	lr, r1
9000614c:	f8dd 9020 	ldr.w	r9, [sp, #32]
90006150:	e005      	b.n	9000615e <BSP_I2C4_Init+0x5e2>
90006152:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90006156:	eba4 0400 	sub.w	r4, r4, r0
9000615a:	4403      	add	r3, r0
9000615c:	d01a      	beq.n	90006194 <BSP_I2C4_Init+0x618>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000615e:	eb0c 0103 	add.w	r1, ip, r3
90006162:	4617      	mov	r7, r2
90006164:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90006168:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000616a:	42b1      	cmp	r1, r6
9000616c:	d9f1      	bls.n	90006152 <BSP_I2C4_Init+0x5d6>
9000616e:	455d      	cmp	r5, fp
90006170:	d8ef      	bhi.n	90006152 <BSP_I2C4_Init+0x5d6>
            if (error < 0)
90006172:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90006176:	bf28      	it	cs
90006178:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
9000617a:	458a      	cmp	sl, r1
9000617c:	d9e9      	bls.n	90006152 <BSP_I2C4_Init+0x5d6>
              I2c_valid_timing[count].sclh = sclh;
9000617e:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006180:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
90006184:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
90006186:	46ce      	mov	lr, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006188:	eba4 0400 	sub.w	r4, r4, r0
9000618c:	4403      	add	r3, r0
              I2c_valid_timing[count].sclh = sclh;
9000618e:	e9c8 7103 	strd	r7, r1, [r8, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006192:	d1e4      	bne.n	9000615e <BSP_I2C4_Init+0x5e2>
90006194:	4671      	mov	r1, lr
90006196:	f8dd 8010 	ldr.w	r8, [sp, #16]
9000619a:	e9dd e905 	ldrd	lr, r9, [sp, #20]
9000619e:	e7af      	b.n	90006100 <BSP_I2C4_Init+0x584>
900061a0:	460e      	mov	r6, r1
900061a2:	e62f      	b.n	90005e04 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
900061a4:	4608      	mov	r0, r1
900061a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900061a8:	455d      	cmp	r5, fp
900061aa:	bf0c      	ite	eq
900061ac:	2600      	moveq	r6, #0
900061ae:	f006 0601 	andne.w	r6, r6, #1
900061b2:	2e00      	cmp	r6, #0
900061b4:	f43f aec3 	beq.w	90005f3e <BSP_I2C4_Init+0x3c2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061b8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900061bc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061c0:	210a      	movs	r1, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061c2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900061c6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061ca:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900061ce:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061d0:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061d2:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900061d4:	f63f af60 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
900061d8:	46ab      	mov	fp, r5
900061da:	e72c      	b.n	90006036 <BSP_I2C4_Init+0x4ba>
            if(presc != prev_presc)
900061dc:	4631      	mov	r1, r6
900061de:	e6c7      	b.n	90005f70 <BSP_I2C4_Init+0x3f4>
900061e0:	4601      	mov	r1, r0
900061e2:	980c      	ldr	r0, [sp, #48]	; 0x30
900061e4:	455d      	cmp	r5, fp
900061e6:	bf0c      	ite	eq
900061e8:	2000      	moveq	r0, #0
900061ea:	f000 0001 	andne.w	r0, r0, #1
900061ee:	2800      	cmp	r0, #0
900061f0:	f43f ae8b 	beq.w	90005f0a <BSP_I2C4_Init+0x38e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061f4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900061f8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061fc:	2108      	movs	r1, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061fe:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006202:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006206:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000620a:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000620c:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000620e:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006210:	f63f af42 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90006214:	46ab      	mov	fp, r5
90006216:	e7c6      	b.n	900061a6 <BSP_I2C4_Init+0x62a>
            if(presc != prev_presc)
90006218:	460e      	mov	r6, r1
9000621a:	9807      	ldr	r0, [sp, #28]
9000621c:	455d      	cmp	r5, fp
9000621e:	bf0c      	ite	eq
90006220:	2000      	moveq	r0, #0
90006222:	f000 0001 	andne.w	r0, r0, #1
90006226:	2800      	cmp	r0, #0
90006228:	f43f ae3b 	beq.w	90005ea2 <BSP_I2C4_Init+0x326>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000622c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006230:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006234:	2104      	movs	r1, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006236:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000623a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000623e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006242:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006244:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006246:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006248:	f63f af26 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
9000624c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000624e:	9909      	ldr	r1, [sp, #36]	; 0x24
90006250:	455d      	cmp	r5, fp
90006252:	bf0c      	ite	eq
90006254:	2100      	moveq	r1, #0
90006256:	f001 0101 	andne.w	r1, r1, #1
9000625a:	2900      	cmp	r1, #0
9000625c:	f43f ae3b 	beq.w	90005ed6 <BSP_I2C4_Init+0x35a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006260:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006264:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006268:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000626a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000626e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006272:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006276:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006278:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000627a:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000627c:	f63f af0c 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
90006280:	46ab      	mov	fp, r5
90006282:	e7ae      	b.n	900061e2 <BSP_I2C4_Init+0x666>
            if(presc != prev_presc)
90006284:	4630      	mov	r0, r6
90006286:	e7e2      	b.n	9000624e <BSP_I2C4_Init+0x6d2>
90006288:	4631      	mov	r1, r6
9000628a:	9e05      	ldr	r6, [sp, #20]
9000628c:	45ab      	cmp	fp, r5
9000628e:	bf0c      	ite	eq
90006290:	2600      	moveq	r6, #0
90006292:	f006 0601 	andne.w	r6, r6, #1
90006296:	2e00      	cmp	r6, #0
90006298:	f43f ade9 	beq.w	90005e6e <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000629c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062a0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062a4:	2102      	movs	r1, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062a6:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062aa:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062ae:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900062b2:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062b4:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062b6:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062b8:	f63f aeee 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
900062bc:	46ab      	mov	fp, r5
900062be:	e7ac      	b.n	9000621a <BSP_I2C4_Init+0x69e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062c0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062c4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062c8:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062ca:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062ce:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062d2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900062d6:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062d8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062da:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062dc:	f63f aedc 	bhi.w	90006098 <BSP_I2C4_Init+0x51c>
900062e0:	46ab      	mov	fp, r5
900062e2:	e7d2      	b.n	9000628a <BSP_I2C4_Init+0x70e>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
900062e4:	3501      	adds	r5, #1
900062e6:	9b02      	ldr	r3, [sp, #8]
900062e8:	2d10      	cmp	r5, #16
900062ea:	441f      	add	r7, r3
900062ec:	f47f acc8 	bne.w	90005c80 <BSP_I2C4_Init+0x104>
900062f0:	b126      	cbz	r6, 900062fc <BSP_I2C4_Init+0x780>
900062f2:	4b07      	ldr	r3, [pc, #28]	; (90006310 <BSP_I2C4_Init+0x794>)
900062f4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
900062f8:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900062fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900062fe:	2b00      	cmp	r3, #0
90006300:	f43f ae8e 	beq.w	90006020 <BSP_I2C4_Init+0x4a4>
90006304:	4b03      	ldr	r3, [pc, #12]	; (90006314 <BSP_I2C4_Init+0x798>)
90006306:	930b      	str	r3, [sp, #44]	; 0x2c
90006308:	e6cc      	b.n	900060a4 <BSP_I2C4_Init+0x528>
9000630a:	bf00      	nop
9000630c:	2400beb0 	.word	0x2400beb0
90006310:	2400beac 	.word	0x2400beac
90006314:	2400b4ac 	.word	0x2400b4ac

90006318 <BSP_I2C4_WriteReg>:
{
90006318:	b530      	push	{r4, r5, lr}
9000631a:	4614      	mov	r4, r2
9000631c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
9000631e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90006322:	460a      	mov	r2, r1
90006324:	9301      	str	r3, [sp, #4]
90006326:	4601      	mov	r1, r0
90006328:	2301      	movs	r3, #1
9000632a:	4809      	ldr	r0, [pc, #36]	; (90006350 <BSP_I2C4_WriteReg+0x38>)
9000632c:	9502      	str	r5, [sp, #8]
9000632e:	9400      	str	r4, [sp, #0]
90006330:	f001 f95a 	bl	900075e8 <HAL_I2C_Mem_Write>
90006334:	b908      	cbnz	r0, 9000633a <BSP_I2C4_WriteReg+0x22>
}
90006336:	b005      	add	sp, #20
90006338:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000633a:	4805      	ldr	r0, [pc, #20]	; (90006350 <BSP_I2C4_WriteReg+0x38>)
9000633c:	f001 fbf2 	bl	90007b24 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90006340:	2804      	cmp	r0, #4
90006342:	bf0c      	ite	eq
90006344:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006348:	f06f 0003 	mvnne.w	r0, #3
9000634c:	e7f3      	b.n	90006336 <BSP_I2C4_WriteReg+0x1e>
9000634e:	bf00      	nop
90006350:	2400beb0 	.word	0x2400beb0

90006354 <BSP_I2C4_ReadReg>:
{
90006354:	b530      	push	{r4, r5, lr}
90006356:	4614      	mov	r4, r2
90006358:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
9000635a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
9000635e:	460a      	mov	r2, r1
90006360:	9301      	str	r3, [sp, #4]
90006362:	4601      	mov	r1, r0
90006364:	2301      	movs	r3, #1
90006366:	4809      	ldr	r0, [pc, #36]	; (9000638c <BSP_I2C4_ReadReg+0x38>)
90006368:	9502      	str	r5, [sp, #8]
9000636a:	9400      	str	r4, [sp, #0]
9000636c:	f001 fa70 	bl	90007850 <HAL_I2C_Mem_Read>
90006370:	b908      	cbnz	r0, 90006376 <BSP_I2C4_ReadReg+0x22>
}
90006372:	b005      	add	sp, #20
90006374:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006376:	4805      	ldr	r0, [pc, #20]	; (9000638c <BSP_I2C4_ReadReg+0x38>)
90006378:	f001 fbd4 	bl	90007b24 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000637c:	2804      	cmp	r0, #4
9000637e:	bf0c      	ite	eq
90006380:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006384:	f06f 0003 	mvnne.w	r0, #3
90006388:	e7f3      	b.n	90006372 <BSP_I2C4_ReadReg+0x1e>
9000638a:	bf00      	nop
9000638c:	2400beb0 	.word	0x2400beb0

90006390 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90006390:	f000 baaa 	b.w	900068e8 <HAL_GetTick>

90006394 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90006394:	b970      	cbnz	r0, 900063b4 <BSP_SDRAM_DeInit+0x20>
{
90006396:	b510      	push	{r4, lr}
90006398:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
9000639a:	4808      	ldr	r0, [pc, #32]	; (900063bc <BSP_SDRAM_DeInit+0x28>)
9000639c:	f005 f898 	bl	9000b4d0 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
900063a0:	207a      	movs	r0, #122	; 0x7a
900063a2:	f000 fb0b 	bl	900069bc <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900063a6:	4b06      	ldr	r3, [pc, #24]	; (900063c0 <BSP_SDRAM_DeInit+0x2c>)
900063a8:	4806      	ldr	r0, [pc, #24]	; (900063c4 <BSP_SDRAM_DeInit+0x30>)
900063aa:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
900063ac:	f003 f99e 	bl	900096ec <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
900063b0:	4620      	mov	r0, r4
}
900063b2:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
900063b4:	f06f 0001 	mvn.w	r0, #1
}
900063b8:	4770      	bx	lr
900063ba:	bf00      	nop
900063bc:	2400bf04 	.word	0x2400bf04
900063c0:	52000040 	.word	0x52000040
900063c4:	2400bf38 	.word	0x2400bf38

900063c8 <MX_SDRAM_BANK2_Init>:
{
900063c8:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
900063ca:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900063cc:	2200      	movs	r2, #0
  hsdram->Instance = FMC_SDRAM_DEVICE;
900063ce:	4c15      	ldr	r4, [pc, #84]	; (90006424 <MX_SDRAM_BANK2_Init+0x5c>)
{
900063d0:	b089      	sub	sp, #36	; 0x24
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900063d2:	60c1      	str	r1, [r0, #12]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900063d4:	2140      	movs	r1, #64	; 0x40
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900063d6:	6082      	str	r2, [r0, #8]
  sdram_timing.LoadToActiveDelay    = 2;
900063d8:	2307      	movs	r3, #7
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900063da:	61c2      	str	r2, [r0, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900063dc:	f44f 75c0 	mov.w	r5, #384	; 0x180
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900063e0:	6282      	str	r2, [r0, #40]	; 0x28
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
900063e2:	2201      	movs	r2, #1
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900063e4:	6185      	str	r5, [r0, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
900063e6:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900063e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900063ec:	6161      	str	r1, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900063ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
900063f2:	e9c0 1208 	strd	r1, r2, [r0, #32]
  sdram_timing.LoadToActiveDelay    = 2;
900063f6:	2202      	movs	r2, #2
  sdram_timing.RCDDelay             = 2;
900063f8:	2102      	movs	r1, #2
  sdram_timing.LoadToActiveDelay    = 2;
900063fa:	e9cd 2300 	strd	r2, r3, [sp]
900063fe:	2204      	movs	r2, #4
90006400:	2307      	movs	r3, #7
  sdram_timing.RCDDelay             = 2;
90006402:	9106      	str	r1, [sp, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006404:	4669      	mov	r1, sp
  sdram_timing.LoadToActiveDelay    = 2;
90006406:	e9cd 2302 	strd	r2, r3, [sp, #8]
9000640a:	2202      	movs	r2, #2
9000640c:	2302      	movs	r3, #2
9000640e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90006412:	4b05      	ldr	r3, [pc, #20]	; (90006428 <MX_SDRAM_BANK2_Init+0x60>)
90006414:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006416:	f005 f831 	bl	9000b47c <HAL_SDRAM_Init>
}
9000641a:	3800      	subs	r0, #0
9000641c:	bf18      	it	ne
9000641e:	2001      	movne	r0, #1
90006420:	b009      	add	sp, #36	; 0x24
90006422:	bd30      	pop	{r4, r5, pc}
90006424:	2400bf04 	.word	0x2400bf04
90006428:	52004140 	.word	0x52004140

9000642c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
9000642c:	2800      	cmp	r0, #0
9000642e:	f040 80d2 	bne.w	900065d6 <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90006432:	4b6c      	ldr	r3, [pc, #432]	; (900065e4 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006434:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90006436:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000643a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
9000643e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90006440:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90006444:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90006446:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000644a:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000644c:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006450:	4c65      	ldr	r4, [pc, #404]	; (900065e8 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006452:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006456:	4e65      	ldr	r6, [pc, #404]	; (900065ec <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006458:	9201      	str	r2, [sp, #4]
9000645a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
9000645c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006460:	f042 0201 	orr.w	r2, r2, #1
90006464:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90006468:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000646c:	f002 0201 	and.w	r2, r2, #1
90006470:	9202      	str	r2, [sp, #8]
90006472:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90006474:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006478:	f042 0208 	orr.w	r2, r2, #8
9000647c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006480:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006484:	f002 0208 	and.w	r2, r2, #8
90006488:	9203      	str	r2, [sp, #12]
9000648a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000648c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006490:	f042 0210 	orr.w	r2, r2, #16
90006494:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006498:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000649c:	f002 0210 	and.w	r2, r2, #16
900064a0:	9204      	str	r2, [sp, #16]
900064a2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900064a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900064a8:	f042 0220 	orr.w	r2, r2, #32
900064ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900064b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900064b4:	f002 0220 	and.w	r2, r2, #32
900064b8:	9205      	str	r2, [sp, #20]
900064ba:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900064bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900064c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900064c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900064c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900064cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
900064d0:	9206      	str	r2, [sp, #24]
900064d2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900064d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900064d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900064dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900064e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900064e4:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900064e6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
900064e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900064ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
900064f0:	2001      	movs	r0, #1
900064f2:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
900064f4:	9307      	str	r3, [sp, #28]
900064f6:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900064f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900064fc:	a908      	add	r1, sp, #32
900064fe:	483c      	ldr	r0, [pc, #240]	; (900065f0 <BSP_SDRAM_Init+0x1c4>)
90006500:	f000 fc7e 	bl	90006e00 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006504:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006508:	a908      	add	r1, sp, #32
9000650a:	483a      	ldr	r0, [pc, #232]	; (900065f4 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000650c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000650e:	f000 fc77 	bl	90006e00 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006512:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006516:	a908      	add	r1, sp, #32
90006518:	4837      	ldr	r0, [pc, #220]	; (900065f8 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000651a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000651c:	f000 fc70 	bl	90006e00 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006520:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006524:	a908      	add	r1, sp, #32
90006526:	4835      	ldr	r0, [pc, #212]	; (900065fc <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006528:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000652a:	f000 fc69 	bl	90006e00 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000652e:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006530:	a908      	add	r1, sp, #32
90006532:	4833      	ldr	r0, [pc, #204]	; (90006600 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006534:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006536:	f000 fc63 	bl	90006e00 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000653a:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000653c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006540:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90006544:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90006546:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
90006548:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000654a:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
9000654c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006550:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90006552:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006554:	4a2b      	ldr	r2, [pc, #172]	; (90006604 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006556:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006558:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000655a:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000655c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90006560:	f640 0308 	movw	r3, #2056	; 0x808
90006564:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90006566:	2320      	movs	r3, #32
90006568:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000656a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
9000656e:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006572:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90006574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90006578:	f003 f8b8 	bl	900096ec <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
9000657c:	4620      	mov	r0, r4
9000657e:	f003 f83b 	bl	900095f8 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90006582:	462a      	mov	r2, r5
90006584:	210f      	movs	r1, #15
90006586:	207a      	movs	r0, #122	; 0x7a
90006588:	f000 f9cc 	bl	90006924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
9000658c:	207a      	movs	r0, #122	; 0x7a
9000658e:	f000 fa07 	bl	900069a0 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90006592:	2210      	movs	r2, #16
90006594:	2104      	movs	r1, #4
90006596:	4630      	mov	r0, r6
90006598:	f7ff ff16 	bl	900063c8 <MX_SDRAM_BANK2_Init>
9000659c:	b9f0      	cbnz	r0, 900065dc <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
9000659e:	491a      	ldr	r1, [pc, #104]	; (90006608 <BSP_SDRAM_Init+0x1dc>)
900065a0:	2208      	movs	r2, #8
900065a2:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900065a4:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900065a6:	e9c1 2300 	strd	r2, r3, [r1]
900065aa:	f240 6203 	movw	r2, #1539	; 0x603
900065ae:	2300      	movs	r3, #0
900065b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
900065b4:	2200      	movs	r2, #0
900065b6:	2330      	movs	r3, #48	; 0x30
900065b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
900065bc:	2200      	movs	r2, #0
900065be:	f44f 7300 	mov.w	r3, #512	; 0x200
900065c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900065c6:	f7ff fa33 	bl	90005a30 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
900065ca:	2800      	cmp	r0, #0
900065cc:	bf18      	it	ne
900065ce:	f06f 0004 	mvnne.w	r0, #4
}
900065d2:	b00e      	add	sp, #56	; 0x38
900065d4:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
900065d6:	f06f 0001 	mvn.w	r0, #1
}
900065da:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
900065dc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
900065e0:	e7f7      	b.n	900065d2 <BSP_SDRAM_Init+0x1a6>
900065e2:	bf00      	nop
900065e4:	58024400 	.word	0x58024400
900065e8:	2400bfa4 	.word	0x2400bfa4
900065ec:	2400bf04 	.word	0x2400bf04
900065f0:	58020c00 	.word	0x58020c00
900065f4:	58021000 	.word	0x58021000
900065f8:	58021400 	.word	0x58021400
900065fc:	58021800 	.word	0x58021800
90006600:	58021c00 	.word	0x58021c00
90006604:	52000040 	.word	0x52000040
90006608:	2400c010 	.word	0x2400c010

9000660c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
9000660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006610:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006612:	2800      	cmp	r0, #0
90006614:	d16b      	bne.n	900066ee <BSP_TS_Init+0xe2>
90006616:	680b      	ldr	r3, [r1, #0]
90006618:	460c      	mov	r4, r1
9000661a:	1e5a      	subs	r2, r3, #1
9000661c:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90006620:	d265      	bcs.n	900066ee <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006622:	684a      	ldr	r2, [r1, #4]
90006624:	1e51      	subs	r1, r2, #1
90006626:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
9000662a:	d260      	bcs.n	900066ee <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
9000662c:	4293      	cmp	r3, r2
9000662e:	bf28      	it	cs
90006630:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006632:	68e2      	ldr	r2, [r4, #12]
90006634:	429a      	cmp	r2, r3
90006636:	d85a      	bhi.n	900066ee <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006638:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
9000663a:	4b31      	ldr	r3, [pc, #196]	; (90006700 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000663c:	4d31      	ldr	r5, [pc, #196]	; (90006704 <BSP_TS_Init+0xf8>)
9000663e:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006640:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006644:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006646:	4a30      	ldr	r2, [pc, #192]	; (90006708 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006648:	4b30      	ldr	r3, [pc, #192]	; (9000670c <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000664a:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
9000664c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
9000664e:	4a30      	ldr	r2, [pc, #192]	; (90006710 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006650:	4b30      	ldr	r3, [pc, #192]	; (90006714 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006652:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006654:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006656:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006658:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000665a:	f7ff f939 	bl	900058d0 <FT5336_RegisterBusIO>
9000665e:	2800      	cmp	r0, #0
90006660:	d14b      	bne.n	900066fa <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006662:	a901      	add	r1, sp, #4
90006664:	4628      	mov	r0, r5
90006666:	f7ff f829 	bl	900056bc <FT5336_ReadID>
9000666a:	2800      	cmp	r0, #0
9000666c:	d145      	bne.n	900066fa <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
9000666e:	9b01      	ldr	r3, [sp, #4]
90006670:	2b51      	cmp	r3, #81	; 0x51
90006672:	d142      	bne.n	900066fa <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006674:	4b28      	ldr	r3, [pc, #160]	; (90006718 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006676:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90006678:	4f28      	ldr	r7, [pc, #160]	; (9000671c <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
9000667a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90006724 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
9000667e:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006680:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006684:	681b      	ldr	r3, [r3, #0]
90006686:	4798      	blx	r3
90006688:	4606      	mov	r6, r0
9000668a:	2800      	cmp	r0, #0
9000668c:	d135      	bne.n	900066fa <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
9000668e:	4d24      	ldr	r5, [pc, #144]	; (90006720 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006690:	a902      	add	r1, sp, #8
90006692:	6838      	ldr	r0, [r7, #0]
90006694:	f8d8 3000 	ldr.w	r3, [r8]
90006698:	e9d4 7200 	ldrd	r7, r2, [r4]
9000669c:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
9000669e:	e9c5 7200 	strd	r7, r2, [r5]
900066a2:	68a2      	ldr	r2, [r4, #8]
900066a4:	60aa      	str	r2, [r5, #8]
900066a6:	68e2      	ldr	r2, [r4, #12]
900066a8:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900066aa:	4798      	blx	r3
900066ac:	2800      	cmp	r0, #0
900066ae:	db18      	blt.n	900066e2 <BSP_TS_Init+0xd6>
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900066b0:	68e3      	ldr	r3, [r4, #12]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
900066b2:	9803      	ldr	r0, [sp, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900066b4:	e9d4 2100 	ldrd	r2, r1, [r4]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
900066b8:	6128      	str	r0, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900066ba:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900066bc:	440b      	add	r3, r1
900066be:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900066c0:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900066c2:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
900066c6:	636b      	str	r3, [r5, #52]	; 0x34
900066c8:	63ab      	str	r3, [r5, #56]	; 0x38
900066ca:	63eb      	str	r3, [r5, #60]	; 0x3c
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
900066cc:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900066ce:	622a      	str	r2, [r5, #32]
900066d0:	626a      	str	r2, [r5, #36]	; 0x24
900066d2:	62aa      	str	r2, [r5, #40]	; 0x28
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
900066d4:	616b      	str	r3, [r5, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900066d6:	e9c5 2206 	strd	r2, r2, [r5, #24]
}
900066da:	4630      	mov	r0, r6
900066dc:	b008      	add	sp, #32
900066de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
900066e2:	f06f 0604 	mvn.w	r6, #4
}
900066e6:	4630      	mov	r0, r6
900066e8:	b008      	add	sp, #32
900066ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
900066ee:	f06f 0601 	mvn.w	r6, #1
}
900066f2:	4630      	mov	r0, r6
900066f4:	b008      	add	sp, #32
900066f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
900066fa:	f04f 36ff 	mov.w	r6, #4294967295
900066fe:	e7ec      	b.n	900066da <BSP_TS_Init+0xce>
90006700:	90005b7d 	.word	0x90005b7d
90006704:	2400c030 	.word	0x2400c030
90006708:	90005ae9 	.word	0x90005ae9
9000670c:	90006355 	.word	0x90006355
90006710:	90006319 	.word	0x90006319
90006714:	90006391 	.word	0x90006391
90006718:	24000024 	.word	0x24000024
9000671c:	2400c058 	.word	0x2400c058
90006720:	2400c05c 	.word	0x2400c05c
90006724:	2400c09c 	.word	0x2400c09c

90006728 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006728:	2800      	cmp	r0, #0
9000672a:	d156      	bne.n	900067da <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
9000672c:	4b2c      	ldr	r3, [pc, #176]	; (900067e0 <BSP_TS_GetState+0xb8>)
9000672e:	4a2d      	ldr	r2, [pc, #180]	; (900067e4 <BSP_TS_GetState+0xbc>)
90006730:	681b      	ldr	r3, [r3, #0]
90006732:	6810      	ldr	r0, [r2, #0]
90006734:	691b      	ldr	r3, [r3, #16]
{
90006736:	b5f0      	push	{r4, r5, r6, r7, lr}
90006738:	b085      	sub	sp, #20
9000673a:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
9000673c:	a901      	add	r1, sp, #4
9000673e:	4798      	blx	r3
90006740:	2800      	cmp	r0, #0
90006742:	db40      	blt.n	900067c6 <BSP_TS_GetState+0x9e>
    else if(state.TouchDetected != 0U)
90006744:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006746:	4b28      	ldr	r3, [pc, #160]	; (900067e8 <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
90006748:	b93d      	cbnz	r5, 9000675a <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
9000674a:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
9000674c:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
9000674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006750:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006752:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006756:	b005      	add	sp, #20
90006758:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000675a:	6899      	ldr	r1, [r3, #8]
9000675c:	0708      	lsls	r0, r1, #28
      y_oriented = state.TouchY;
9000675e:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006762:	d434      	bmi.n	900067ce <BSP_TS_GetState+0xa6>
      y_oriented = state.TouchY;
90006764:	4610      	mov	r0, r2
      x_oriented = state.TouchX;
90006766:	46b4      	mov	ip, r6
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006768:	691f      	ldr	r7, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
9000676a:	f011 0f02 	tst.w	r1, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
9000676e:	bf1c      	itt	ne
90006770:	f107 3cff 	addne.w	ip, r7, #4294967295
90006774:	ebac 0c06 	subne.w	ip, ip, r6
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006778:	695e      	ldr	r6, [r3, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
9000677a:	0749      	lsls	r1, r1, #29
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000677c:	6859      	ldr	r1, [r3, #4]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
9000677e:	bf48      	it	mi
90006780:	1ab0      	submi	r0, r6, r2
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006782:	681a      	ldr	r2, [r3, #0]
      TS_State->TouchDetected = state.TouchDetected;
90006784:	6025      	str	r5, [r4, #0]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006786:	fb02 f20c 	mul.w	r2, r2, ip
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
9000678a:	6add      	ldr	r5, [r3, #44]	; 0x2c
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000678c:	fb00 f101 	mul.w	r1, r0, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006790:	fbb2 f2f7 	udiv	r2, r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006794:	fbb1 f1f6 	udiv	r1, r1, r6
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006798:	699e      	ldr	r6, [r3, #24]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000679a:	6062      	str	r2, [r4, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
9000679c:	42b2      	cmp	r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000679e:	60a1      	str	r1, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
900067a0:	bf8c      	ite	hi
900067a2:	1b90      	subhi	r0, r2, r6
900067a4:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
900067a6:	42a9      	cmp	r1, r5
900067a8:	bf8c      	ite	hi
900067aa:	1b4f      	subhi	r7, r1, r5
900067ac:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
900067ae:	42b8      	cmp	r0, r7
900067b0:	bf38      	it	cc
900067b2:	4638      	movcc	r0, r7
900067b4:	68df      	ldr	r7, [r3, #12]
900067b6:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
900067b8:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
900067bc:	d20a      	bcs.n	900067d4 <BSP_TS_GetState+0xac>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
900067be:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
900067c0:	62d9      	str	r1, [r3, #44]	; 0x2c
}
900067c2:	b005      	add	sp, #20
900067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
900067c6:	f06f 0004 	mvn.w	r0, #4
}
900067ca:	b005      	add	sp, #20
900067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
900067ce:	4630      	mov	r0, r6
        x_oriented = state.TouchY;
900067d0:	4694      	mov	ip, r2
900067d2:	e7c9      	b.n	90006768 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900067d4:	e9c4 6501 	strd	r6, r5, [r4, #4]
900067d8:	e7bd      	b.n	90006756 <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
900067da:	f06f 0001 	mvn.w	r0, #1
}
900067de:	4770      	bx	lr
900067e0:	2400c09c 	.word	0x2400c09c
900067e4:	2400c058 	.word	0x2400c058
900067e8:	2400c05c 	.word	0x2400c05c

900067ec <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
900067ec:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900067ee:	4c19      	ldr	r4, [pc, #100]	; (90006854 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900067f0:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
900067f2:	4b19      	ldr	r3, [pc, #100]	; (90006858 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900067f4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900067f8:	4818      	ldr	r0, [pc, #96]	; (9000685c <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900067fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
900067fe:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90006802:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006804:	4c16      	ldr	r4, [pc, #88]	; (90006860 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90006806:	f041 0101 	orr.w	r1, r1, #1
9000680a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
9000680c:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
9000680e:	6819      	ldr	r1, [r3, #0]
90006810:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006812:	4914      	ldr	r1, [pc, #80]	; (90006864 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90006814:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90006816:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90006818:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
9000681a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
9000681c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
9000681e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90006820:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
90006822:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90006824:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90006826:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90006828:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
9000682a:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
9000682c:	6818      	ldr	r0, [r3, #0]
9000682e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90006832:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90006834:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006836:	6823      	ldr	r3, [r4, #0]
90006838:	4019      	ands	r1, r3
9000683a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000683e:	d203      	bcs.n	90006848 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90006840:	4b09      	ldr	r3, [pc, #36]	; (90006868 <SystemInit+0x7c>)
90006842:	2201      	movs	r2, #1
90006844:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006848:	4a08      	ldr	r2, [pc, #32]	; (9000686c <SystemInit+0x80>)
9000684a:	4b02      	ldr	r3, [pc, #8]	; (90006854 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
9000684c:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006850:	609a      	str	r2, [r3, #8]
}
90006852:	4770      	bx	lr
90006854:	e000ed00 	.word	0xe000ed00
90006858:	58024400 	.word	0x58024400
9000685c:	eaf6ed7f 	.word	0xeaf6ed7f
90006860:	5c001000 	.word	0x5c001000
90006864:	ffff0000 	.word	0xffff0000
90006868:	51008000 	.word	0x51008000
9000686c:	90000000 	.word	0x90000000

90006870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90006870:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006872:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006874:	4c12      	ldr	r4, [pc, #72]	; (900068c0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006876:	f000 f843 	bl	90006900 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000687a:	f003 fc8b 	bl	9000a194 <HAL_RCC_GetSysClockFreq>
9000687e:	4b11      	ldr	r3, [pc, #68]	; (900068c4 <HAL_Init+0x54>)
90006880:	4911      	ldr	r1, [pc, #68]	; (900068c8 <HAL_Init+0x58>)
90006882:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006884:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006886:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000688a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000688e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006890:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006892:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90006896:	490d      	ldr	r1, [pc, #52]	; (900068cc <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006898:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000689c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000689e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
900068a2:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900068a4:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900068a6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900068a8:	f7fd fff8 	bl	9000489c <HAL_InitTick>
900068ac:	b110      	cbz	r0, 900068b4 <HAL_Init+0x44>
  {
    return HAL_ERROR;
900068ae:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
900068b0:	4620      	mov	r0, r4
900068b2:	bd10      	pop	{r4, pc}
900068b4:	4604      	mov	r4, r0
  HAL_MspInit();
900068b6:	f7fd fdab 	bl	90004410 <HAL_MspInit>
}
900068ba:	4620      	mov	r0, r4
900068bc:	bd10      	pop	{r4, pc}
900068be:	bf00      	nop
900068c0:	24000058 	.word	0x24000058
900068c4:	58024400 	.word	0x58024400
900068c8:	90024884 	.word	0x90024884
900068cc:	24000054 	.word	0x24000054

900068d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
900068d0:	4a03      	ldr	r2, [pc, #12]	; (900068e0 <HAL_IncTick+0x10>)
900068d2:	4b04      	ldr	r3, [pc, #16]	; (900068e4 <HAL_IncTick+0x14>)
900068d4:	6811      	ldr	r1, [r2, #0]
900068d6:	781b      	ldrb	r3, [r3, #0]
900068d8:	440b      	add	r3, r1
900068da:	6013      	str	r3, [r2, #0]
}
900068dc:	4770      	bx	lr
900068de:	bf00      	nop
900068e0:	2400c0a0 	.word	0x2400c0a0
900068e4:	2400005c 	.word	0x2400005c

900068e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900068e8:	4b01      	ldr	r3, [pc, #4]	; (900068f0 <HAL_GetTick+0x8>)
900068ea:	6818      	ldr	r0, [r3, #0]
}
900068ec:	4770      	bx	lr
900068ee:	bf00      	nop
900068f0:	2400c0a0 	.word	0x2400c0a0

900068f4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
900068f4:	4b01      	ldr	r3, [pc, #4]	; (900068fc <HAL_GetREVID+0x8>)
900068f6:	6818      	ldr	r0, [r3, #0]
}
900068f8:	0c00      	lsrs	r0, r0, #16
900068fa:	4770      	bx	lr
900068fc:	5c001000 	.word	0x5c001000

90006900 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90006900:	4906      	ldr	r1, [pc, #24]	; (9000691c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90006902:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90006906:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90006908:	4b05      	ldr	r3, [pc, #20]	; (90006920 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000690a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000690c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90006910:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90006914:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90006916:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90006918:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
9000691a:	4770      	bx	lr
9000691c:	e000ed00 	.word	0xe000ed00
90006920:	05fa0000 	.word	0x05fa0000

90006924 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90006924:	4b1b      	ldr	r3, [pc, #108]	; (90006994 <HAL_NVIC_SetPriority+0x70>)
90006926:	68db      	ldr	r3, [r3, #12]
90006928:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000692c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000692e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006932:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90006936:	f1be 0f04 	cmp.w	lr, #4
9000693a:	bf28      	it	cs
9000693c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90006940:	f1bc 0f06 	cmp.w	ip, #6
90006944:	d91a      	bls.n	9000697c <HAL_NVIC_SetPriority+0x58>
90006946:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90006948:	f04f 3cff 	mov.w	ip, #4294967295
9000694c:	fa0c fc03 	lsl.w	ip, ip, r3
90006950:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90006954:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90006958:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000695a:	fa0c fc0e 	lsl.w	ip, ip, lr
9000695e:	ea21 010c 	bic.w	r1, r1, ip
90006962:	fa01 f103 	lsl.w	r1, r1, r3
90006966:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
9000696a:	db0a      	blt.n	90006982 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000696c:	0109      	lsls	r1, r1, #4
9000696e:	4b0a      	ldr	r3, [pc, #40]	; (90006998 <HAL_NVIC_SetPriority+0x74>)
90006970:	b2c9      	uxtb	r1, r1
90006972:	4403      	add	r3, r0
90006974:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90006978:	f85d fb04 	ldr.w	pc, [sp], #4
9000697c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000697e:	4613      	mov	r3, r2
90006980:	e7e8      	b.n	90006954 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90006982:	f000 000f 	and.w	r0, r0, #15
90006986:	0109      	lsls	r1, r1, #4
90006988:	4b04      	ldr	r3, [pc, #16]	; (9000699c <HAL_NVIC_SetPriority+0x78>)
9000698a:	b2c9      	uxtb	r1, r1
9000698c:	4403      	add	r3, r0
9000698e:	7619      	strb	r1, [r3, #24]
90006990:	f85d fb04 	ldr.w	pc, [sp], #4
90006994:	e000ed00 	.word	0xe000ed00
90006998:	e000e100 	.word	0xe000e100
9000699c:	e000ecfc 	.word	0xe000ecfc

900069a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
900069a0:	2800      	cmp	r0, #0
900069a2:	db07      	blt.n	900069b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900069a4:	2301      	movs	r3, #1
900069a6:	f000 011f 	and.w	r1, r0, #31
900069aa:	4a03      	ldr	r2, [pc, #12]	; (900069b8 <HAL_NVIC_EnableIRQ+0x18>)
900069ac:	0940      	lsrs	r0, r0, #5
900069ae:	408b      	lsls	r3, r1
900069b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
900069b4:	4770      	bx	lr
900069b6:	bf00      	nop
900069b8:	e000e100 	.word	0xe000e100

900069bc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
900069bc:	2800      	cmp	r0, #0
900069be:	db0d      	blt.n	900069dc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900069c0:	0943      	lsrs	r3, r0, #5
900069c2:	2201      	movs	r2, #1
900069c4:	f000 001f 	and.w	r0, r0, #31
900069c8:	4905      	ldr	r1, [pc, #20]	; (900069e0 <HAL_NVIC_DisableIRQ+0x24>)
900069ca:	3320      	adds	r3, #32
900069cc:	fa02 f000 	lsl.w	r0, r2, r0
900069d0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
900069d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900069d8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
900069dc:	4770      	bx	lr
900069de:	bf00      	nop
900069e0:	e000e100 	.word	0xe000e100

900069e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900069e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900069e8:	4b04      	ldr	r3, [pc, #16]	; (900069fc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900069ea:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900069ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900069ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
900069f2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
900069f4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
900069f8:	4770      	bx	lr
900069fa:	bf00      	nop
900069fc:	e000ed00 	.word	0xe000ed00

90006a00 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90006a00:	4b06      	ldr	r3, [pc, #24]	; (90006a1c <HAL_MPU_Enable+0x1c>)
90006a02:	f040 0001 	orr.w	r0, r0, #1
90006a06:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90006a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90006a0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90006a10:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90006a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90006a16:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90006a1a:	4770      	bx	lr
90006a1c:	e000ed00 	.word	0xe000ed00

90006a20 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90006a20:	4a17      	ldr	r2, [pc, #92]	; (90006a80 <HAL_MPU_ConfigRegion+0x60>)
90006a22:	7843      	ldrb	r3, [r0, #1]
90006a24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90006a28:	7801      	ldrb	r1, [r0, #0]
90006a2a:	b321      	cbz	r1, 90006a76 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90006a2c:	6843      	ldr	r3, [r0, #4]
{
90006a2e:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90006a30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90006a34:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006a36:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90006a3a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90006a3c:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006a40:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90006a44:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006a48:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90006a4a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006a4c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90006a50:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006a54:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90006a58:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90006a5c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90006a60:	7a01      	ldrb	r1, [r0, #8]
90006a62:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90006a66:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90006a6a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90006a6e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90006a72:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90006a76:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90006a7a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90006a7e:	4770      	bx	lr
90006a80:	e000ed00 	.word	0xe000ed00

90006a84 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90006a84:	2800      	cmp	r0, #0
90006a86:	d036      	beq.n	90006af6 <HAL_CRC_Init+0x72>
{
90006a88:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90006a8a:	7f43      	ldrb	r3, [r0, #29]
90006a8c:	4604      	mov	r4, r0
90006a8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90006a92:	b363      	cbz	r3, 90006aee <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90006a94:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90006a96:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90006a98:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90006a9a:	b9f3      	cbnz	r3, 90006ada <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90006a9c:	6823      	ldr	r3, [r4, #0]
90006a9e:	4a17      	ldr	r2, [pc, #92]	; (90006afc <HAL_CRC_Init+0x78>)
90006aa0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90006aa2:	689a      	ldr	r2, [r3, #8]
90006aa4:	f022 0218 	bic.w	r2, r2, #24
90006aa8:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90006aaa:	7962      	ldrb	r2, [r4, #5]
90006aac:	b18a      	cbz	r2, 90006ad2 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90006aae:	6922      	ldr	r2, [r4, #16]
90006ab0:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90006ab2:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90006ab4:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90006ab8:	f021 0160 	bic.w	r1, r1, #96	; 0x60
90006abc:	4311      	orrs	r1, r2
90006abe:	6099      	str	r1, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
90006ac0:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90006ac2:	689a      	ldr	r2, [r3, #8]
90006ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90006ac8:	4302      	orrs	r2, r0

  /* Return function status */
  return HAL_OK;
90006aca:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90006acc:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90006ace:	7761      	strb	r1, [r4, #29]
}
90006ad0:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90006ad2:	f04f 32ff 	mov.w	r2, #4294967295
90006ad6:	611a      	str	r2, [r3, #16]
90006ad8:	e7eb      	b.n	90006ab2 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90006ada:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90006ade:	4620      	mov	r0, r4
90006ae0:	f000 f80e 	bl	90006b00 <HAL_CRCEx_Polynomial_Set>
90006ae4:	b908      	cbnz	r0, 90006aea <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90006ae6:	6823      	ldr	r3, [r4, #0]
90006ae8:	e7df      	b.n	90006aaa <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90006aea:	2001      	movs	r0, #1
}
90006aec:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90006aee:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90006af0:	f7fd fca8 	bl	90004444 <HAL_CRC_MspInit>
90006af4:	e7ce      	b.n	90006a94 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90006af6:	2001      	movs	r0, #1
}
90006af8:	4770      	bx	lr
90006afa:	bf00      	nop
90006afc:	04c11db7 	.word	0x04c11db7

90006b00 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90006b00:	07cb      	lsls	r3, r1, #31
90006b02:	d51a      	bpl.n	90006b3a <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90006b04:	231e      	movs	r3, #30
{
90006b06:	b410      	push	{r4}
90006b08:	e001      	b.n	90006b0e <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90006b0a:	3b01      	subs	r3, #1
90006b0c:	d317      	bcc.n	90006b3e <HAL_CRCEx_Polynomial_Set+0x3e>
90006b0e:	fa21 fc03 	lsr.w	ip, r1, r3
90006b12:	f01c 0f01 	tst.w	ip, #1
90006b16:	d0f8      	beq.n	90006b0a <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90006b18:	2a18      	cmp	r2, #24
90006b1a:	d811      	bhi.n	90006b40 <HAL_CRCEx_Polynomial_Set+0x40>
90006b1c:	e8df f002 	tbb	[pc, r2]
90006b20:	10101016 	.word	0x10101016
90006b24:	10101010 	.word	0x10101010
90006b28:	10101024 	.word	0x10101024
90006b2c:	10101010 	.word	0x10101010
90006b30:	10101021 	.word	0x10101021
90006b34:	10101010 	.word	0x10101010
90006b38:	14          	.byte	0x14
90006b39:	00          	.byte	0x00
    status =  HAL_ERROR;
90006b3a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90006b3c:	4770      	bx	lr
    switch (PolyLength)
90006b3e:	b12a      	cbz	r2, 90006b4c <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90006b40:	2001      	movs	r0, #1
}
90006b42:	f85d 4b04 	ldr.w	r4, [sp], #4
90006b46:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90006b48:	2b06      	cmp	r3, #6
90006b4a:	d8f9      	bhi.n	90006b40 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90006b4c:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90006b4e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90006b50:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90006b52:	68a3      	ldr	r3, [r4, #8]
90006b54:	f023 0318 	bic.w	r3, r3, #24
90006b58:	431a      	orrs	r2, r3
90006b5a:	60a2      	str	r2, [r4, #8]
}
90006b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
90006b60:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90006b62:	2b07      	cmp	r3, #7
90006b64:	d9f2      	bls.n	90006b4c <HAL_CRCEx_Polynomial_Set+0x4c>
90006b66:	e7eb      	b.n	90006b40 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90006b68:	2b0f      	cmp	r3, #15
90006b6a:	d9ef      	bls.n	90006b4c <HAL_CRCEx_Polynomial_Set+0x4c>
90006b6c:	e7e8      	b.n	90006b40 <HAL_CRCEx_Polynomial_Set+0x40>
90006b6e:	bf00      	nop

90006b70 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90006b70:	2800      	cmp	r0, #0
90006b72:	d035      	beq.n	90006be0 <HAL_DMA2D_Init+0x70>
{
90006b74:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90006b76:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90006b7a:	4604      	mov	r4, r0
90006b7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90006b80:	b34b      	cbz	r3, 90006bd6 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006b82:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006b84:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006b86:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006b88:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006b8c:	69e1      	ldr	r1, [r4, #28]
90006b8e:	681d      	ldr	r5, [r3, #0]
90006b90:	4814      	ldr	r0, [pc, #80]	; (90006be4 <HAL_DMA2D_Init+0x74>)
90006b92:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006b94:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006b96:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006b98:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006b9a:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006b9c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90006b9e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006ba0:	4302      	orrs	r2, r0
90006ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
90006ba4:	4810      	ldr	r0, [pc, #64]	; (90006be8 <HAL_DMA2D_Init+0x78>)
90006ba6:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006ba8:	4910      	ldr	r1, [pc, #64]	; (90006bec <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90006baa:	4302      	orrs	r2, r0
90006bac:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90006bb0:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90006bb2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006bb6:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90006bb8:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90006bba:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90006bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
90006bbe:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90006bc2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90006bc4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90006bc8:	430a      	orrs	r2, r1
90006bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90006bcc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90006bce:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90006bd0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90006bd4:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90006bd6:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90006bda:	f7fd fc4b 	bl	90004474 <HAL_DMA2D_MspInit>
90006bde:	e7d0      	b.n	90006b82 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90006be0:	2001      	movs	r0, #1
}
90006be2:	4770      	bx	lr
90006be4:	fff8ffbf 	.word	0xfff8ffbf
90006be8:	fffffef8 	.word	0xfffffef8
90006bec:	ffff0000 	.word	0xffff0000

90006bf0 <HAL_DMA2D_LineEventCallback>:
90006bf0:	4770      	bx	lr
90006bf2:	bf00      	nop

90006bf4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
90006bf4:	4770      	bx	lr
90006bf6:	bf00      	nop

90006bf8 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90006bf8:	6803      	ldr	r3, [r0, #0]
{
90006bfa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90006bfc:	685d      	ldr	r5, [r3, #4]
{
90006bfe:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90006c00:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90006c02:	07ea      	lsls	r2, r5, #31
90006c04:	d501      	bpl.n	90006c0a <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90006c06:	05f1      	lsls	r1, r6, #23
90006c08:	d456      	bmi.n	90006cb8 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90006c0a:	06aa      	lsls	r2, r5, #26
90006c0c:	d501      	bpl.n	90006c12 <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90006c0e:	04b3      	lsls	r3, r6, #18
90006c10:	d43b      	bmi.n	90006c8a <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90006c12:	0728      	lsls	r0, r5, #28
90006c14:	d501      	bpl.n	90006c1a <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90006c16:	0531      	lsls	r1, r6, #20
90006c18:	d421      	bmi.n	90006c5e <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90006c1a:	076a      	lsls	r2, r5, #29
90006c1c:	d501      	bpl.n	90006c22 <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90006c1e:	0573      	lsls	r3, r6, #21
90006c20:	d472      	bmi.n	90006d08 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90006c22:	07a8      	lsls	r0, r5, #30
90006c24:	d501      	bpl.n	90006c2a <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90006c26:	05b1      	lsls	r1, r6, #22
90006c28:	d404      	bmi.n	90006c34 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90006c2a:	06ea      	lsls	r2, r5, #27
90006c2c:	d501      	bpl.n	90006c32 <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90006c2e:	04f3      	lsls	r3, r6, #19
90006c30:	d457      	bmi.n	90006ce2 <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90006c32:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90006c34:	6823      	ldr	r3, [r4, #0]
90006c36:	681a      	ldr	r2, [r3, #0]
90006c38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90006c3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90006c3e:	2202      	movs	r2, #2
90006c40:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
90006c42:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90006c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
90006c46:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90006c48:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90006c4a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90006c4e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
90006c52:	6a23      	ldr	r3, [r4, #32]
90006c54:	2b00      	cmp	r3, #0
90006c56:	d0e8      	beq.n	90006c2a <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90006c58:	4620      	mov	r0, r4
90006c5a:	4798      	blx	r3
90006c5c:	e7e5      	b.n	90006c2a <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90006c5e:	6823      	ldr	r3, [r4, #0]
90006c60:	681a      	ldr	r2, [r3, #0]
90006c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90006c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90006c68:	2208      	movs	r2, #8
90006c6a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006c6c:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90006c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90006c70:	4313      	orrs	r3, r2
90006c72:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006c74:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90006c78:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90006c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90006c7c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90006c80:	2b00      	cmp	r3, #0
90006c82:	d0ca      	beq.n	90006c1a <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90006c84:	4620      	mov	r0, r4
90006c86:	4798      	blx	r3
90006c88:	e7c7      	b.n	90006c1a <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90006c8a:	6823      	ldr	r3, [r4, #0]
90006c8c:	681a      	ldr	r2, [r3, #0]
90006c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90006c92:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90006c94:	2220      	movs	r2, #32
90006c96:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006c98:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90006c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
90006c9c:	f043 0302 	orr.w	r3, r3, #2
90006ca0:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006ca2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90006ca6:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90006ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90006caa:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90006cae:	2b00      	cmp	r3, #0
90006cb0:	d0af      	beq.n	90006c12 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90006cb2:	4620      	mov	r0, r4
90006cb4:	4798      	blx	r3
90006cb6:	e7ac      	b.n	90006c12 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90006cb8:	681a      	ldr	r2, [r3, #0]
90006cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90006cbe:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90006cc0:	6e42      	ldr	r2, [r0, #100]	; 0x64
90006cc2:	f042 0201 	orr.w	r2, r2, #1
90006cc6:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90006cc8:	2201      	movs	r2, #1
90006cca:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90006ccc:	2304      	movs	r3, #4
90006cce:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90006cd2:	2300      	movs	r3, #0
90006cd4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90006cd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
90006cda:	2b00      	cmp	r3, #0
90006cdc:	d095      	beq.n	90006c0a <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90006cde:	4798      	blx	r3
90006ce0:	e793      	b.n	90006c0a <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90006ce2:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90006ce4:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90006ce6:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90006ce8:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90006cea:	681a      	ldr	r2, [r3, #0]
90006cec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90006cf0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90006cf2:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90006cf4:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90006cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90006cf8:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90006cfc:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90006cfe:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90006d02:	f7ff ff77 	bl	90006bf4 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90006d06:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90006d08:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90006d0a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90006d0c:	681a      	ldr	r2, [r3, #0]
90006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90006d12:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90006d14:	2204      	movs	r2, #4
90006d16:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90006d18:	f7ff ff6a 	bl	90006bf0 <HAL_DMA2D_LineEventCallback>
90006d1c:	e781      	b.n	90006c22 <HAL_DMA2D_IRQHandler+0x2a>
90006d1e:	bf00      	nop

90006d20 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90006d20:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90006d24:	2a01      	cmp	r2, #1
90006d26:	d065      	beq.n	90006df4 <HAL_DMA2D_ConfigLayer+0xd4>
90006d28:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006d2a:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006d2e:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006d30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90006d34:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90006d36:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90006d38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90006d3c:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90006d40:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006d42:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90006d44:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90006d46:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006d48:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006d4c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90006d50:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006d52:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90006d56:	ea42 0204 	orr.w	r2, r2, r4
90006d5a:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006d5e:	d922      	bls.n	90006da6 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90006d60:	6b45      	ldr	r5, [r0, #52]	; 0x34
90006d62:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90006d66:	b981      	cbnz	r1, 90006d8a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006d68:	6818      	ldr	r0, [r3, #0]
90006d6a:	4923      	ldr	r1, [pc, #140]	; (90006df8 <HAL_DMA2D_ConfigLayer+0xd8>)
90006d6c:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006d6e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006d70:	4029      	ands	r1, r5
90006d72:	430a      	orrs	r2, r1
90006d74:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006d76:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90006d78:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90006d7a:	2101      	movs	r1, #1

  return HAL_OK;
90006d7c:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90006d7e:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90006d82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90006d86:	bc70      	pop	{r4, r5, r6}
90006d88:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90006d8a:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006d8c:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90006d8e:	d129      	bne.n	90006de4 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006d90:	69e5      	ldr	r5, [r4, #28]
90006d92:	491a      	ldr	r1, [pc, #104]	; (90006dfc <HAL_DMA2D_ConfigLayer+0xdc>)
90006d94:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90006d96:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006d98:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006d9a:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90006d9e:	430a      	orrs	r2, r1
90006da0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006da2:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006da4:	e7e8      	b.n	90006d78 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90006da6:	6b44      	ldr	r4, [r0, #52]	; 0x34
90006da8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90006dac:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90006dae:	b961      	cbnz	r1, 90006dca <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006db0:	6818      	ldr	r0, [r3, #0]
90006db2:	4911      	ldr	r1, [pc, #68]	; (90006df8 <HAL_DMA2D_ConfigLayer+0xd8>)
90006db4:	6a46      	ldr	r6, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90006db6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006db8:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006dba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90006dbc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90006dc0:	430a      	orrs	r2, r1
90006dc2:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90006dc4:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90006dc6:	6284      	str	r4, [r0, #40]	; 0x28
90006dc8:	e7d6      	b.n	90006d78 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006dca:	681c      	ldr	r4, [r3, #0]
90006dcc:	490a      	ldr	r1, [pc, #40]	; (90006df8 <HAL_DMA2D_ConfigLayer+0xd8>)
90006dce:	69e5      	ldr	r5, [r4, #28]
90006dd0:	4029      	ands	r1, r5
90006dd2:	430a      	orrs	r2, r1
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90006dd4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006dd6:	6a80      	ldr	r0, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90006dd8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006ddc:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006dde:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90006de0:	6221      	str	r1, [r4, #32]
90006de2:	e7c9      	b.n	90006d78 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006de4:	69e5      	ldr	r5, [r4, #28]
90006de6:	4904      	ldr	r1, [pc, #16]	; (90006df8 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006de8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90006dea:	4029      	ands	r1, r5
90006dec:	430a      	orrs	r2, r1
90006dee:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90006df0:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90006df2:	e7c1      	b.n	90006d78 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90006df4:	2002      	movs	r0, #2
}
90006df6:	4770      	bx	lr
90006df8:	00ccfff0 	.word	0x00ccfff0
90006dfc:	00c0fff0 	.word	0x00c0fff0

90006e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006e04:	680c      	ldr	r4, [r1, #0]
{
90006e06:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006e08:	2c00      	cmp	r4, #0
90006e0a:	f000 80a6 	beq.w	90006f5a <HAL_GPIO_Init+0x15a>
90006e0e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006e12:	4f8e      	ldr	r7, [pc, #568]	; (9000704c <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
90006e14:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90006e16:	2201      	movs	r2, #1
90006e18:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90006e1a:	ea12 0e04 	ands.w	lr, r2, r4
90006e1e:	f000 8095 	beq.w	90006f4c <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90006e22:	684d      	ldr	r5, [r1, #4]
90006e24:	f005 0903 	and.w	r9, r5, #3
90006e28:	f109 36ff 	add.w	r6, r9, #4294967295
90006e2c:	2e01      	cmp	r6, #1
90006e2e:	f240 8097 	bls.w	90006f60 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90006e32:	f1b9 0f03 	cmp.w	r9, #3
90006e36:	f040 80d1 	bne.w	90006fdc <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006e3a:	fa09 f20c 	lsl.w	r2, r9, ip
90006e3e:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90006e42:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90006e44:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90006e48:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90006e4c:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
90006e50:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90006e52:	d07b      	beq.n	90006f4c <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006e54:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90006e58:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006e5c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006e60:	f042 0202 	orr.w	r2, r2, #2
90006e64:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006e68:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006e6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90006e70:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90006e74:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90006e78:	f002 0202 	and.w	r2, r2, #2
90006e7c:	9201      	str	r2, [sp, #4]
90006e7e:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006e80:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
90006e82:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006e86:	fa02 f209 	lsl.w	r2, r2, r9
90006e8a:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90006e8e:	4e70      	ldr	r6, [pc, #448]	; (90007050 <HAL_GPIO_Init+0x250>)
90006e90:	42b0      	cmp	r0, r6
90006e92:	d029      	beq.n	90006ee8 <HAL_GPIO_Init+0xe8>
90006e94:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90006e98:	42b0      	cmp	r0, r6
90006e9a:	f000 80ac 	beq.w	90006ff6 <HAL_GPIO_Init+0x1f6>
90006e9e:	4e6d      	ldr	r6, [pc, #436]	; (90007054 <HAL_GPIO_Init+0x254>)
90006ea0:	42b0      	cmp	r0, r6
90006ea2:	f000 80ae 	beq.w	90007002 <HAL_GPIO_Init+0x202>
90006ea6:	4e6c      	ldr	r6, [pc, #432]	; (90007058 <HAL_GPIO_Init+0x258>)
90006ea8:	42b0      	cmp	r0, r6
90006eaa:	f000 809e 	beq.w	90006fea <HAL_GPIO_Init+0x1ea>
90006eae:	4e6b      	ldr	r6, [pc, #428]	; (9000705c <HAL_GPIO_Init+0x25c>)
90006eb0:	42b0      	cmp	r0, r6
90006eb2:	f000 80b2 	beq.w	9000701a <HAL_GPIO_Init+0x21a>
90006eb6:	4e6a      	ldr	r6, [pc, #424]	; (90007060 <HAL_GPIO_Init+0x260>)
90006eb8:	42b0      	cmp	r0, r6
90006eba:	f000 80b4 	beq.w	90007026 <HAL_GPIO_Init+0x226>
90006ebe:	4e69      	ldr	r6, [pc, #420]	; (90007064 <HAL_GPIO_Init+0x264>)
90006ec0:	42b0      	cmp	r0, r6
90006ec2:	f000 80a4 	beq.w	9000700e <HAL_GPIO_Init+0x20e>
90006ec6:	4e68      	ldr	r6, [pc, #416]	; (90007068 <HAL_GPIO_Init+0x268>)
90006ec8:	42b0      	cmp	r0, r6
90006eca:	f000 80b2 	beq.w	90007032 <HAL_GPIO_Init+0x232>
90006ece:	4e67      	ldr	r6, [pc, #412]	; (9000706c <HAL_GPIO_Init+0x26c>)
90006ed0:	42b0      	cmp	r0, r6
90006ed2:	f000 80b4 	beq.w	9000703e <HAL_GPIO_Init+0x23e>
90006ed6:	4e66      	ldr	r6, [pc, #408]	; (90007070 <HAL_GPIO_Init+0x270>)
90006ed8:	42b0      	cmp	r0, r6
90006eda:	bf0c      	ite	eq
90006edc:	2609      	moveq	r6, #9
90006ede:	260a      	movne	r6, #10
90006ee0:	fa06 f909 	lsl.w	r9, r6, r9
90006ee4:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
90006ee8:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90006eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90006ef0:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
90006ef2:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
90006ef6:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90006ef8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90006efc:	bf54      	ite	pl
90006efe:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
90006f02:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
90006f06:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90006f08:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
90006f0a:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
90006f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90006f10:	bf54      	ite	pl
90006f12:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
90006f16:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
90006f1a:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90006f1c:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90006f20:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
90006f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90006f26:	bf54      	ite	pl
90006f28:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
90006f2c:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90006f30:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90006f32:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
90006f36:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
90006f3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
90006f3e:	bf54      	ite	pl
90006f40:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
90006f44:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90006f48:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
90006f4c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006f4e:	f10c 0c02 	add.w	ip, ip, #2
90006f52:	fa34 f203 	lsrs.w	r2, r4, r3
90006f56:	f47f af5e 	bne.w	90006e16 <HAL_GPIO_Init+0x16>
  }
}
90006f5a:	b003      	add	sp, #12
90006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006f60:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90006f64:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006f66:	fa08 f80c 	lsl.w	r8, r8, ip
90006f6a:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90006f6e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006f70:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90006f74:	fa06 f60c 	lsl.w	r6, r6, ip
90006f78:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
90006f7c:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006f7e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90006f82:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006f86:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90006f88:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006f8c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90006f8e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90006f90:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90006f92:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90006f96:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90006f98:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90006f9c:	fa06 f60c 	lsl.w	r6, r6, ip
90006fa0:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90006fa4:	fa09 f20c 	lsl.w	r2, r9, ip
90006fa8:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90006faa:	f47f af4a 	bne.w	90006e42 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90006fae:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
90006fb2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90006fb6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
90006fba:	260f      	movs	r6, #15
90006fbc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
90006fc0:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
90006fc4:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90006fc8:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90006fcc:	690e      	ldr	r6, [r1, #16]
90006fce:	fa06 f60b 	lsl.w	r6, r6, fp
90006fd2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90006fd6:	f8c9 6020 	str.w	r6, [r9, #32]
90006fda:	e732      	b.n	90006e42 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006fdc:	f04f 0803 	mov.w	r8, #3
90006fe0:	fa08 f80c 	lsl.w	r8, r8, ip
90006fe4:	ea6f 0808 	mvn.w	r8, r8
90006fe8:	e7d2      	b.n	90006f90 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90006fea:	2603      	movs	r6, #3
90006fec:	fa06 f909 	lsl.w	r9, r6, r9
90006ff0:	ea42 0209 	orr.w	r2, r2, r9
90006ff4:	e778      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
90006ff6:	2601      	movs	r6, #1
90006ff8:	fa06 f909 	lsl.w	r9, r6, r9
90006ffc:	ea42 0209 	orr.w	r2, r2, r9
90007000:	e772      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
90007002:	2602      	movs	r6, #2
90007004:	fa06 f909 	lsl.w	r9, r6, r9
90007008:	ea42 0209 	orr.w	r2, r2, r9
9000700c:	e76c      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
9000700e:	2606      	movs	r6, #6
90007010:	fa06 f909 	lsl.w	r9, r6, r9
90007014:	ea42 0209 	orr.w	r2, r2, r9
90007018:	e766      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
9000701a:	2604      	movs	r6, #4
9000701c:	fa06 f909 	lsl.w	r9, r6, r9
90007020:	ea42 0209 	orr.w	r2, r2, r9
90007024:	e760      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
90007026:	2605      	movs	r6, #5
90007028:	fa06 f909 	lsl.w	r9, r6, r9
9000702c:	ea42 0209 	orr.w	r2, r2, r9
90007030:	e75a      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
90007032:	2607      	movs	r6, #7
90007034:	fa06 f909 	lsl.w	r9, r6, r9
90007038:	ea42 0209 	orr.w	r2, r2, r9
9000703c:	e754      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
9000703e:	2608      	movs	r6, #8
90007040:	fa06 f909 	lsl.w	r9, r6, r9
90007044:	ea42 0209 	orr.w	r2, r2, r9
90007048:	e74e      	b.n	90006ee8 <HAL_GPIO_Init+0xe8>
9000704a:	bf00      	nop
9000704c:	58024400 	.word	0x58024400
90007050:	58020000 	.word	0x58020000
90007054:	58020800 	.word	0x58020800
90007058:	58020c00 	.word	0x58020c00
9000705c:	58021000 	.word	0x58021000
90007060:	58021400 	.word	0x58021400
90007064:	58021800 	.word	0x58021800
90007068:	58021c00 	.word	0x58021c00
9000706c:	58022000 	.word	0x58022000
90007070:	58022400 	.word	0x58022400

90007074 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90007074:	2900      	cmp	r1, #0
90007076:	f000 80a8 	beq.w	900071ca <HAL_GPIO_DeInit+0x156>
  uint32_t position = 0x00U;
9000707a:	2300      	movs	r3, #0
{
9000707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007080:	f8df 9168 	ldr.w	r9, [pc, #360]	; 900071ec <HAL_GPIO_DeInit+0x178>
90007084:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007086:	f8df 8168 	ldr.w	r8, [pc, #360]	; 900071f0 <HAL_GPIO_DeInit+0x17c>
9000708a:	f8df a168 	ldr.w	sl, [pc, #360]	; 900071f4 <HAL_GPIO_DeInit+0x180>
9000708e:	f8df b168 	ldr.w	fp, [pc, #360]	; 900071f8 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
90007092:	f04f 0e01 	mov.w	lr, #1
90007096:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
9000709a:	ea12 0c01 	ands.w	ip, r2, r1
9000709e:	d06f      	beq.n	90007180 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
900070a0:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
900070a4:	f003 0403 	and.w	r4, r3, #3
900070a8:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900070aa:	4540      	cmp	r0, r8
900070ac:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
900070ae:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
900070b2:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
900070b4:	fa06 f604 	lsl.w	r6, r6, r4
900070b8:	ea07 0706 	and.w	r7, r7, r6
900070bc:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900070be:	d021      	beq.n	90007104 <HAL_GPIO_DeInit+0x90>
900070c0:	4550      	cmp	r0, sl
900070c2:	d066      	beq.n	90007192 <HAL_GPIO_DeInit+0x11e>
900070c4:	4558      	cmp	r0, fp
900070c6:	d067      	beq.n	90007198 <HAL_GPIO_DeInit+0x124>
900070c8:	4f43      	ldr	r7, [pc, #268]	; (900071d8 <HAL_GPIO_DeInit+0x164>)
900070ca:	42b8      	cmp	r0, r7
900070cc:	d06e      	beq.n	900071ac <HAL_GPIO_DeInit+0x138>
900070ce:	4f43      	ldr	r7, [pc, #268]	; (900071dc <HAL_GPIO_DeInit+0x168>)
900070d0:	42b8      	cmp	r0, r7
900070d2:	d070      	beq.n	900071b6 <HAL_GPIO_DeInit+0x142>
900070d4:	4f42      	ldr	r7, [pc, #264]	; (900071e0 <HAL_GPIO_DeInit+0x16c>)
900070d6:	42b8      	cmp	r0, r7
900070d8:	d063      	beq.n	900071a2 <HAL_GPIO_DeInit+0x12e>
900070da:	4f42      	ldr	r7, [pc, #264]	; (900071e4 <HAL_GPIO_DeInit+0x170>)
900070dc:	42b8      	cmp	r0, r7
900070de:	d056      	beq.n	9000718e <HAL_GPIO_DeInit+0x11a>
900070e0:	4f41      	ldr	r7, [pc, #260]	; (900071e8 <HAL_GPIO_DeInit+0x174>)
900070e2:	42b8      	cmp	r0, r7
900070e4:	d072      	beq.n	900071cc <HAL_GPIO_DeInit+0x158>
900070e6:	f8df e114 	ldr.w	lr, [pc, #276]	; 900071fc <HAL_GPIO_DeInit+0x188>
900070ea:	4570      	cmp	r0, lr
900070ec:	d068      	beq.n	900071c0 <HAL_GPIO_DeInit+0x14c>
900070ee:	f8df e110 	ldr.w	lr, [pc, #272]	; 90007200 <HAL_GPIO_DeInit+0x18c>
900070f2:	4570      	cmp	r0, lr
900070f4:	bf14      	ite	ne
900070f6:	f04f 0e0a 	movne.w	lr, #10
900070fa:	f04f 0e09 	moveq.w	lr, #9
900070fe:	fa0e f404 	lsl.w	r4, lr, r4
90007102:	e000      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
90007104:	2400      	movs	r4, #0
90007106:	9f01      	ldr	r7, [sp, #4]
90007108:	42a7      	cmp	r7, r4
9000710a:	d119      	bne.n	90007140 <HAL_GPIO_DeInit+0xcc>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
9000710c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
90007110:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
90007114:	ea27 070c 	bic.w	r7, r7, ip
90007118:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
9000711c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
90007120:	ea27 070c 	bic.w	r7, r7, ip
90007124:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90007128:	6867      	ldr	r7, [r4, #4]
9000712a:	ea27 070c 	bic.w	r7, r7, ip
9000712e:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90007130:	6827      	ldr	r7, [r4, #0]
90007132:	ea27 070c 	bic.w	r7, r7, ip
90007136:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90007138:	68ac      	ldr	r4, [r5, #8]
9000713a:	ea24 0606 	bic.w	r6, r4, r6
9000713e:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90007140:	2503      	movs	r5, #3
90007142:	005c      	lsls	r4, r3, #1

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90007144:	f003 0707 	and.w	r7, r3, #7
90007148:	260f      	movs	r6, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000714a:	fa05 f404 	lsl.w	r4, r5, r4
9000714e:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90007150:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90007152:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90007154:	fa06 f707 	lsl.w	r7, r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90007158:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000715a:	08dd      	lsrs	r5, r3, #3
9000715c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90007160:	6a2e      	ldr	r6, [r5, #32]
90007162:	ea26 0607 	bic.w	r6, r6, r7
90007166:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90007168:	68c5      	ldr	r5, [r0, #12]
9000716a:	ea25 0504 	bic.w	r5, r5, r4
9000716e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90007170:	6845      	ldr	r5, [r0, #4]
90007172:	ea25 0202 	bic.w	r2, r5, r2
90007176:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007178:	6882      	ldr	r2, [r0, #8]
9000717a:	ea22 0404 	bic.w	r4, r2, r4
9000717e:	6084      	str	r4, [r0, #8]
    }

    position++;
90007180:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
90007182:	fa31 f203 	lsrs.w	r2, r1, r3
90007186:	d184      	bne.n	90007092 <HAL_GPIO_DeInit+0x1e>
  }
}
90007188:	b003      	add	sp, #12
9000718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000718e:	f04f 0e06 	mov.w	lr, #6
90007192:	fa0e f404 	lsl.w	r4, lr, r4
90007196:	e7b6      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
90007198:	f04f 0e02 	mov.w	lr, #2
9000719c:	fa0e f404 	lsl.w	r4, lr, r4
900071a0:	e7b1      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
900071a2:	f04f 0e05 	mov.w	lr, #5
900071a6:	fa0e f404 	lsl.w	r4, lr, r4
900071aa:	e7ac      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
900071ac:	f04f 0e03 	mov.w	lr, #3
900071b0:	fa0e f404 	lsl.w	r4, lr, r4
900071b4:	e7a7      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
900071b6:	f04f 0e04 	mov.w	lr, #4
900071ba:	fa0e f404 	lsl.w	r4, lr, r4
900071be:	e7a2      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
900071c0:	f04f 0e08 	mov.w	lr, #8
900071c4:	fa0e f404 	lsl.w	r4, lr, r4
900071c8:	e79d      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
900071ca:	4770      	bx	lr
900071cc:	f04f 0e07 	mov.w	lr, #7
900071d0:	fa0e f404 	lsl.w	r4, lr, r4
900071d4:	e797      	b.n	90007106 <HAL_GPIO_DeInit+0x92>
900071d6:	bf00      	nop
900071d8:	58020c00 	.word	0x58020c00
900071dc:	58021000 	.word	0x58021000
900071e0:	58021400 	.word	0x58021400
900071e4:	58021800 	.word	0x58021800
900071e8:	58021c00 	.word	0x58021c00
900071ec:	58000400 	.word	0x58000400
900071f0:	58020000 	.word	0x58020000
900071f4:	58020400 	.word	0x58020400
900071f8:	58020800 	.word	0x58020800
900071fc:	58022000 	.word	0x58022000
90007200:	58022400 	.word	0x58022400

90007204 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90007204:	6903      	ldr	r3, [r0, #16]
90007206:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90007208:	bf14      	ite	ne
9000720a:	2001      	movne	r0, #1
9000720c:	2000      	moveq	r0, #0
9000720e:	4770      	bx	lr

90007210 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90007210:	b902      	cbnz	r2, 90007214 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90007212:	0409      	lsls	r1, r1, #16
90007214:	6181      	str	r1, [r0, #24]
  }
}
90007216:	4770      	bx	lr

90007218 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90007218:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
9000721a:	ea01 0203 	and.w	r2, r1, r3
9000721e:	ea21 0103 	bic.w	r1, r1, r3
90007222:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90007226:	6181      	str	r1, [r0, #24]
}
90007228:	4770      	bx	lr
9000722a:	bf00      	nop

9000722c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007230:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007232:	f04f 0820 	mov.w	r8, #32
{
90007236:	4605      	mov	r5, r0
90007238:	460e      	mov	r6, r1
9000723a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000723c:	6998      	ldr	r0, [r3, #24]
9000723e:	f010 0902 	ands.w	r9, r0, #2
90007242:	f040 809e 	bne.w	90007382 <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
90007246:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90007248:	f014 0410 	ands.w	r4, r4, #16
9000724c:	d068      	beq.n	90007320 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000724e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
90007250:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
90007252:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007254:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007256:	1c71      	adds	r1, r6, #1
90007258:	699a      	ldr	r2, [r3, #24]
9000725a:	d163      	bne.n	90007324 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
9000725c:	0690      	lsls	r0, r2, #26
9000725e:	f100 8093 	bmi.w	90007388 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90007262:	f1ba 0f00 	cmp.w	sl, #0
90007266:	d104      	bne.n	90007272 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90007268:	699c      	ldr	r4, [r3, #24]
9000726a:	06a1      	lsls	r1, r4, #26
9000726c:	d5fc      	bpl.n	90007268 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000726e:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90007272:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
90007276:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90007278:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000727a:	05d0      	lsls	r0, r2, #23
9000727c:	d530      	bpl.n	900072e0 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000727e:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007282:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007284:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007288:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000728a:	d504      	bpl.n	90007296 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000728c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007290:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007294:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007296:	0591      	lsls	r1, r2, #22
90007298:	d504      	bpl.n	900072a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000729a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000729e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900072a2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900072a4:	699a      	ldr	r2, [r3, #24]
900072a6:	0790      	lsls	r0, r2, #30
900072a8:	d501      	bpl.n	900072ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
900072aa:	2200      	movs	r2, #0
900072ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900072ae:	699a      	ldr	r2, [r3, #24]
900072b0:	07d1      	lsls	r1, r2, #31
900072b2:	d403      	bmi.n	900072bc <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900072b4:	699a      	ldr	r2, [r3, #24]
900072b6:	f042 0201 	orr.w	r2, r2, #1
900072ba:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900072bc:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
900072be:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
900072c0:	4834      	ldr	r0, [pc, #208]	; (90007394 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
900072c2:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
900072c4:	4002      	ands	r2, r0
      return HAL_ERROR;
900072c6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
900072c8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
900072ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900072cc:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
900072d0:	431c      	orrs	r4, r3
900072d2:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900072d4:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900072d8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
900072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900072e0:	0550      	lsls	r0, r2, #21
900072e2:	d4d3      	bmi.n	9000728c <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900072e4:	0592      	lsls	r2, r2, #22
900072e6:	d4d8      	bmi.n	9000729a <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
900072e8:	2900      	cmp	r1, #0
900072ea:	d1db      	bne.n	900072a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
900072ec:	1c72      	adds	r2, r6, #1
900072ee:	d0a5      	beq.n	9000723c <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900072f0:	f7ff fafa 	bl	900068e8 <HAL_GetTick>
900072f4:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900072f6:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900072f8:	42b0      	cmp	r0, r6
900072fa:	d801      	bhi.n	90007300 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
900072fc:	2e00      	cmp	r6, #0
900072fe:	d19d      	bne.n	9000723c <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90007300:	699a      	ldr	r2, [r3, #24]
90007302:	f012 0202 	ands.w	r2, r2, #2
90007306:	d199      	bne.n	9000723c <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007308:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000730a:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000730c:	2001      	movs	r0, #1
9000730e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007312:	430b      	orrs	r3, r1
90007314:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007316:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000731a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
9000731e:	e7dd      	b.n	900072dc <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90007320:	4621      	mov	r1, r4
90007322:	e7a9      	b.n	90007278 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007324:	0692      	lsls	r2, r2, #26
90007326:	d42f      	bmi.n	90007388 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90007328:	f1ba 0f00 	cmp.w	sl, #0
9000732c:	d1a1      	bne.n	90007272 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000732e:	f7ff fadb 	bl	900068e8 <HAL_GetTick>
90007332:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007334:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007336:	4286      	cmp	r6, r0
90007338:	d301      	bcc.n	9000733e <I2C_WaitOnTXISFlagUntilTimeout+0x112>
9000733a:	2e00      	cmp	r6, #0
9000733c:	d18b      	bne.n	90007256 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000733e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007340:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007344:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007346:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007348:	0409      	lsls	r1, r1, #16
9000734a:	d50b      	bpl.n	90007364 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
9000734c:	0441      	lsls	r1, r0, #17
9000734e:	d409      	bmi.n	90007364 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
90007350:	2a20      	cmp	r2, #32
90007352:	d007      	beq.n	90007364 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007354:	685a      	ldr	r2, [r3, #4]
90007356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000735a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000735c:	f7ff fac4 	bl	900068e8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007360:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90007362:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007364:	699a      	ldr	r2, [r3, #24]
90007366:	0690      	lsls	r0, r2, #26
90007368:	f53f af75 	bmi.w	90007256 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000736c:	f7ff fabc 	bl	900068e8 <HAL_GetTick>
90007370:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007372:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007374:	2819      	cmp	r0, #25
90007376:	d9f5      	bls.n	90007364 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007378:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
9000737c:	f04f 0a01 	mov.w	sl, #1
90007380:	e769      	b.n	90007256 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
90007382:	2000      	movs	r0, #0
}
90007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
90007388:	f1ba 0f00 	cmp.w	sl, #0
9000738c:	f43f af6f 	beq.w	9000726e <I2C_WaitOnTXISFlagUntilTimeout+0x42>
90007390:	e76f      	b.n	90007272 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90007392:	bf00      	nop
90007394:	fe00e800 	.word	0xfe00e800

90007398 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007398:	6803      	ldr	r3, [r0, #0]
{
9000739a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000739e:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900073a0:	699a      	ldr	r2, [r3, #24]
900073a2:	0694      	lsls	r4, r2, #26
900073a4:	d465      	bmi.n	90007472 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
900073a6:	4606      	mov	r6, r0
900073a8:	460f      	mov	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900073aa:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
900073ae:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900073b0:	f014 0410 	ands.w	r4, r4, #16
900073b4:	d060      	beq.n	90007478 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
  uint32_t error_code = 0;
900073b6:	2500      	movs	r5, #0
  uint32_t tickstart = Tickstart;
900073b8:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900073ba:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
900073be:	46aa      	mov	sl, r5
900073c0:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900073c2:	699a      	ldr	r2, [r3, #24]
900073c4:	d15a      	bne.n	9000747c <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
900073c6:	0690      	lsls	r0, r2, #26
900073c8:	d47d      	bmi.n	900074c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
900073ca:	f1ba 0f00 	cmp.w	sl, #0
900073ce:	d104      	bne.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
900073d0:	699c      	ldr	r4, [r3, #24]
900073d2:	06a1      	lsls	r1, r4, #26
900073d4:	d5fc      	bpl.n	900073d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900073d6:	2220      	movs	r2, #32
900073d8:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
900073da:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
900073de:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
900073e0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900073e2:	05d0      	lsls	r0, r2, #23
900073e4:	d530      	bpl.n	90007448 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900073e6:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900073ea:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
900073ec:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900073f0:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900073f2:	d504      	bpl.n	900073fe <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900073f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
900073f8:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900073fc:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900073fe:	0597      	lsls	r7, r2, #22
90007400:	d504      	bpl.n	9000740c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007402:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007406:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000740a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000740c:	699a      	ldr	r2, [r3, #24]
9000740e:	0790      	lsls	r0, r2, #30
90007410:	d501      	bpl.n	90007416 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
90007412:	2200      	movs	r2, #0
90007414:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007416:	699a      	ldr	r2, [r3, #24]
90007418:	07d1      	lsls	r1, r2, #31
9000741a:	d403      	bmi.n	90007424 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000741c:	699a      	ldr	r2, [r3, #24]
9000741e:	f042 0201 	orr.w	r2, r2, #1
90007422:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
90007424:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007426:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90007428:	4834      	ldr	r0, [pc, #208]	; (900074fc <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->State = HAL_I2C_STATE_READY;
9000742a:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
9000742c:	4002      	ands	r2, r0
      return HAL_ERROR;
9000742e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90007430:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007432:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
90007434:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90007438:	431c      	orrs	r4, r3
9000743a:	6474      	str	r4, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000743c:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007440:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007448:	0550      	lsls	r0, r2, #21
9000744a:	d4d3      	bmi.n	900073f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000744c:	0595      	lsls	r5, r2, #22
9000744e:	d4d8      	bmi.n	90007402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
90007450:	2900      	cmp	r1, #0
90007452:	d1db      	bne.n	9000740c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007454:	f7ff fa48 	bl	900068e8 <HAL_GetTick>
90007458:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000745c:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000745e:	42b8      	cmp	r0, r7
90007460:	d800      	bhi.n	90007464 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
90007462:	b91f      	cbnz	r7, 9000746c <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90007464:	699a      	ldr	r2, [r3, #24]
90007466:	f012 0220 	ands.w	r2, r2, #32
9000746a:	d030      	beq.n	900074ce <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000746c:	699a      	ldr	r2, [r3, #24]
9000746e:	0692      	lsls	r2, r2, #26
90007470:	d59d      	bpl.n	900073ae <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
90007472:	2000      	movs	r0, #0
}
90007474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90007478:	4621      	mov	r1, r4
9000747a:	e7b1      	b.n	900073e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000747c:	0692      	lsls	r2, r2, #26
9000747e:	d422      	bmi.n	900074c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
90007480:	f1ba 0f00 	cmp.w	sl, #0
90007484:	d1a9      	bne.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007486:	f7ff fa2f 	bl	900068e8 <HAL_GetTick>
9000748a:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000748c:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000748e:	4287      	cmp	r7, r0
90007490:	d301      	bcc.n	90007496 <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
90007492:	2f00      	cmp	r7, #0
90007494:	d194      	bne.n	900073c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007496:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007498:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000749c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000749e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900074a0:	0409      	lsls	r1, r1, #16
900074a2:	d503      	bpl.n	900074ac <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              (tmp1 != I2C_CR2_STOP) && \
900074a4:	0441      	lsls	r1, r0, #17
900074a6:	d401      	bmi.n	900074ac <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
900074a8:	2a20      	cmp	r2, #32
900074aa:	d11d      	bne.n	900074e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900074ac:	699a      	ldr	r2, [r3, #24]
900074ae:	0690      	lsls	r0, r2, #26
900074b0:	d486      	bmi.n	900073c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900074b2:	f7ff fa19 	bl	900068e8 <HAL_GetTick>
900074b6:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900074b8:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900074ba:	2819      	cmp	r0, #25
900074bc:	d9f6      	bls.n	900074ac <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900074be:	2520      	movs	r5, #32
              status = HAL_ERROR;
900074c0:	f04f 0a01 	mov.w	sl, #1
900074c4:	e77c      	b.n	900073c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (status == HAL_OK)
900074c6:	f1ba 0f00 	cmp.w	sl, #0
900074ca:	d084      	beq.n	900073d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
900074cc:	e785      	b.n	900073da <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900074ce:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900074d0:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
900074d2:	2001      	movs	r0, #1
900074d4:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900074d8:	430b      	orrs	r3, r1
900074da:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900074dc:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900074e0:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
900074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900074e8:	685a      	ldr	r2, [r3, #4]
900074ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900074ee:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
900074f0:	f7ff f9fa 	bl	900068e8 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900074f4:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
900074f6:	4604      	mov	r4, r0
900074f8:	e7d8      	b.n	900074ac <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
900074fa:	bf00      	nop
900074fc:	fe00e800 	.word	0xfe00e800

90007500 <HAL_I2C_MspInit>:
}
90007500:	4770      	bx	lr
90007502:	bf00      	nop

90007504 <HAL_I2C_Init>:
  if (hi2c == NULL)
90007504:	2800      	cmp	r0, #0
90007506:	d04e      	beq.n	900075a6 <HAL_I2C_Init+0xa2>
{
90007508:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000750a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000750e:	4604      	mov	r4, r0
90007510:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007514:	2b00      	cmp	r3, #0
90007516:	d041      	beq.n	9000759c <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90007518:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000751a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000751c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000751e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90007522:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007528:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000752a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000752e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
90007530:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007532:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90007534:	689a      	ldr	r2, [r3, #8]
90007536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000753a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000753c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000753e:	d029      	beq.n	90007594 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007540:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007544:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007546:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007548:	d102      	bne.n	90007550 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000754a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000754e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007550:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
90007552:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007556:	4915      	ldr	r1, [pc, #84]	; (900075ac <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007558:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000755a:	4301      	orrs	r1, r0
9000755c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000755e:	68d9      	ldr	r1, [r3, #12]
90007560:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
90007564:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
90007566:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000756a:	4302      	orrs	r2, r0
9000756c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007570:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007574:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007576:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007578:	4301      	orrs	r1, r0
  return HAL_OK;
9000757a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000757c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000757e:	6819      	ldr	r1, [r3, #0]
90007580:	f041 0101 	orr.w	r1, r1, #1
90007584:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007586:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90007588:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000758c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000758e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007592:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90007598:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000759a:	e7d9      	b.n	90007550 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000759c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
900075a0:	f7ff ffae 	bl	90007500 <HAL_I2C_MspInit>
900075a4:	e7b8      	b.n	90007518 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
900075a6:	2001      	movs	r0, #1
}
900075a8:	4770      	bx	lr
900075aa:	bf00      	nop
900075ac:	02008000 	.word	0x02008000

900075b0 <HAL_I2C_MspDeInit>:
900075b0:	4770      	bx	lr
900075b2:	bf00      	nop

900075b4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
900075b4:	b1b0      	cbz	r0, 900075e4 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
900075b6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
900075b8:	2324      	movs	r3, #36	; 0x24
{
900075ba:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
900075bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
900075c0:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
900075c2:	6813      	ldr	r3, [r2, #0]
900075c4:	f023 0301 	bic.w	r3, r3, #1
900075c8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
900075ca:	f7ff fff1 	bl	900075b0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900075ce:	2300      	movs	r3, #0
900075d0:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
900075d2:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
900075d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
900075d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
900075dc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900075de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
900075e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
900075e4:	2001      	movs	r0, #1
}
900075e6:	4770      	bx	lr

900075e8 <HAL_I2C_Mem_Write>:
{
900075e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900075ec:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
900075ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
900075f2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
900075f6:	2b20      	cmp	r3, #32
{
900075f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
900075fa:	d132      	bne.n	90007662 <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
900075fc:	9b08      	ldr	r3, [sp, #32]
900075fe:	4604      	mov	r4, r0
90007600:	b34b      	cbz	r3, 90007656 <HAL_I2C_Mem_Write+0x6e>
90007602:	f1ba 0f00 	cmp.w	sl, #0
90007606:	d026      	beq.n	90007656 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
90007608:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000760c:	2b01      	cmp	r3, #1
9000760e:	d028      	beq.n	90007662 <HAL_I2C_Mem_Write+0x7a>
90007610:	2301      	movs	r3, #1
90007612:	460e      	mov	r6, r1
90007614:	4691      	mov	r9, r2
90007616:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000761a:	f7ff f965 	bl	900068e8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000761e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007620:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007622:	699a      	ldr	r2, [r3, #24]
90007624:	0411      	lsls	r1, r2, #16
90007626:	d51f      	bpl.n	90007668 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007628:	f7ff f95e 	bl	900068e8 <HAL_GetTick>
9000762c:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000762e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007630:	2819      	cmp	r0, #25
90007632:	d9f6      	bls.n	90007622 <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007634:	699a      	ldr	r2, [r3, #24]
90007636:	0412      	lsls	r2, r2, #16
90007638:	d5f3      	bpl.n	90007622 <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000763a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000763c:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000763e:	2200      	movs	r2, #0
      return HAL_ERROR;
90007640:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007642:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007644:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007648:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000764a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000764e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007656:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000765a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000765c:	6463      	str	r3, [r4, #68]	; 0x44
}
9000765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
90007662:	2002      	movs	r0, #2
}
90007664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90007668:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000766a:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000766c:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007670:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007672:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007676:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90007678:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000767a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000767c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
90007680:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007682:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90007684:	496d      	ldr	r1, [pc, #436]	; (9000783c <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
90007686:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000768a:	685a      	ldr	r2, [r3, #4]
9000768c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000768e:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90007692:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007696:	496a      	ldr	r1, [pc, #424]	; (90007840 <HAL_I2C_Mem_Write+0x258>)
90007698:	4332      	orrs	r2, r6
9000769a:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000769c:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000769e:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900076a0:	4639      	mov	r1, r7
900076a2:	f7ff fdc3 	bl	9000722c <I2C_WaitOnTXISFlagUntilTimeout>
900076a6:	2800      	cmp	r0, #0
900076a8:	d175      	bne.n	90007796 <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
900076aa:	f1b8 0f01 	cmp.w	r8, #1
900076ae:	d00a      	beq.n	900076c6 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900076b0:	ea4f 2219 	mov.w	r2, r9, lsr #8
900076b4:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900076b6:	4639      	mov	r1, r7
900076b8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900076ba:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900076bc:	462a      	mov	r2, r5
900076be:	f7ff fdb5 	bl	9000722c <I2C_WaitOnTXISFlagUntilTimeout>
900076c2:	2800      	cmp	r0, #0
900076c4:	d167      	bne.n	90007796 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900076c6:	fa5f f389 	uxtb.w	r3, r9
900076ca:	6822      	ldr	r2, [r4, #0]
900076cc:	6293      	str	r3, [r2, #40]	; 0x28
900076ce:	1c78      	adds	r0, r7, #1
900076d0:	d14a      	bne.n	90007768 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900076d2:	6993      	ldr	r3, [r2, #24]
900076d4:	0619      	lsls	r1, r3, #24
900076d6:	d5fc      	bpl.n	900076d2 <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900076d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900076da:	b29b      	uxth	r3, r3
900076dc:	2bff      	cmp	r3, #255	; 0xff
900076de:	f240 808a 	bls.w	900077f6 <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
900076e2:	6853      	ldr	r3, [r2, #4]
900076e4:	4957      	ldr	r1, [pc, #348]	; (90007844 <HAL_I2C_Mem_Write+0x25c>)
900076e6:	400b      	ands	r3, r1
900076e8:	4957      	ldr	r1, [pc, #348]	; (90007848 <HAL_I2C_Mem_Write+0x260>)
900076ea:	4333      	orrs	r3, r6
900076ec:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
900076ee:	23ff      	movs	r3, #255	; 0xff
900076f0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900076f2:	6051      	str	r1, [r2, #4]
900076f4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 90007844 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900076f8:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
900076fc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 90007848 <HAL_I2C_Mem_Write+0x260>
90007700:	e004      	b.n	9000770c <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
90007702:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007704:	b29b      	uxth	r3, r3
90007706:	2b00      	cmp	r3, #0
90007708:	f000 8083 	beq.w	90007812 <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000770c:	462a      	mov	r2, r5
9000770e:	4639      	mov	r1, r7
90007710:	4620      	mov	r0, r4
90007712:	f7ff fd8b 	bl	9000722c <I2C_WaitOnTXISFlagUntilTimeout>
90007716:	2800      	cmp	r0, #0
90007718:	d16b      	bne.n	900077f2 <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000771a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000771c:	6821      	ldr	r1, [r4, #0]
9000771e:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
90007722:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007724:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
90007726:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
90007728:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000772a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000772c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
9000772e:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90007730:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
90007732:	b292      	uxth	r2, r2
90007734:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007736:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
90007738:	b292      	uxth	r2, r2
9000773a:	2a00      	cmp	r2, #0
9000773c:	d0e1      	beq.n	90007702 <HAL_I2C_Mem_Write+0x11a>
9000773e:	2b00      	cmp	r3, #0
90007740:	d1df      	bne.n	90007702 <HAL_I2C_Mem_Write+0x11a>
90007742:	1c78      	adds	r0, r7, #1
90007744:	d12c      	bne.n	900077a0 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007746:	698b      	ldr	r3, [r1, #24]
90007748:	061a      	lsls	r2, r3, #24
9000774a:	d5fc      	bpl.n	90007746 <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000774c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000774e:	b29b      	uxth	r3, r3
90007750:	2bff      	cmp	r3, #255	; 0xff
90007752:	d940      	bls.n	900077d6 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
90007754:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007756:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000775a:	ea03 0308 	and.w	r3, r3, r8
9000775e:	4333      	orrs	r3, r6
90007760:	ea43 0309 	orr.w	r3, r3, r9
90007764:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90007766:	e7cc      	b.n	90007702 <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007768:	6993      	ldr	r3, [r2, #24]
9000776a:	061b      	lsls	r3, r3, #24
9000776c:	d4b4      	bmi.n	900076d8 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000776e:	f7ff f8bb 	bl	900068e8 <HAL_GetTick>
90007772:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007774:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007776:	4287      	cmp	r7, r0
90007778:	d301      	bcc.n	9000777e <HAL_I2C_Mem_Write+0x196>
9000777a:	2f00      	cmp	r7, #0
9000777c:	d1a7      	bne.n	900076ce <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000777e:	6993      	ldr	r3, [r2, #24]
90007780:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007784:	d1a3      	bne.n	900076ce <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007786:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007788:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000778a:	430a      	orrs	r2, r1
9000778c:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000778e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90007796:	2300      	movs	r3, #0
      return HAL_ERROR;
90007798:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000779a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000779e:	e75e      	b.n	9000765e <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900077a0:	698b      	ldr	r3, [r1, #24]
900077a2:	061b      	lsls	r3, r3, #24
900077a4:	d4d2      	bmi.n	9000774c <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900077a6:	f7ff f89f 	bl	900068e8 <HAL_GetTick>
900077aa:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900077ac:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900077ae:	4287      	cmp	r7, r0
900077b0:	d301      	bcc.n	900077b6 <HAL_I2C_Mem_Write+0x1ce>
900077b2:	2f00      	cmp	r7, #0
900077b4:	d1c5      	bne.n	90007742 <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900077b6:	698b      	ldr	r3, [r1, #24]
900077b8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
900077bc:	d1c1      	bne.n	90007742 <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900077be:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900077c0:	2120      	movs	r1, #32
          return HAL_ERROR;
900077c2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
900077c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900077c8:	430a      	orrs	r2, r1
900077ca:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900077cc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900077d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
900077d4:	e743      	b.n	9000765e <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
900077d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900077d8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900077da:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
900077dc:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900077de:	684b      	ldr	r3, [r1, #4]
900077e0:	ea03 0308 	and.w	r3, r3, r8
900077e4:	4333      	orrs	r3, r6
900077e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900077ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
900077ee:	604b      	str	r3, [r1, #4]
}
900077f0:	e787      	b.n	90007702 <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
900077f2:	2001      	movs	r0, #1
900077f4:	e733      	b.n	9000765e <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
900077f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
900077f8:	4812      	ldr	r0, [pc, #72]	; (90007844 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
900077fa:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900077fc:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
900077fe:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007800:	6853      	ldr	r3, [r2, #4]
90007802:	4003      	ands	r3, r0
90007804:	4333      	orrs	r3, r6
90007806:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000780a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000780e:	6053      	str	r3, [r2, #4]
}
90007810:	e770      	b.n	900076f4 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007812:	462a      	mov	r2, r5
90007814:	4639      	mov	r1, r7
90007816:	4620      	mov	r0, r4
90007818:	f7ff fdbe 	bl	90007398 <I2C_WaitOnSTOPFlagUntilTimeout>
9000781c:	2800      	cmp	r0, #0
9000781e:	d1e8      	bne.n	900077f2 <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007820:	6823      	ldr	r3, [r4, #0]
90007822:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007824:	4d09      	ldr	r5, [pc, #36]	; (9000784c <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007826:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007828:	685a      	ldr	r2, [r3, #4]
9000782a:	402a      	ands	r2, r5
9000782c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000782e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007832:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007836:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000783a:	e710      	b.n	9000765e <HAL_I2C_Mem_Write+0x76>
9000783c:	fc009800 	.word	0xfc009800
90007840:	01002000 	.word	0x01002000
90007844:	fc009c00 	.word	0xfc009c00
90007848:	01ff0000 	.word	0x01ff0000
9000784c:	fe00e800 	.word	0xfe00e800

90007850 <HAL_I2C_Mem_Read>:
{
90007850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007854:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007856:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000785a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000785e:	2b20      	cmp	r3, #32
{
90007860:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90007862:	d137      	bne.n	900078d4 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
90007864:	9b08      	ldr	r3, [sp, #32]
90007866:	4682      	mov	sl, r0
90007868:	b36b      	cbz	r3, 900078c6 <HAL_I2C_Mem_Read+0x76>
9000786a:	f1b9 0f00 	cmp.w	r9, #0
9000786e:	d02a      	beq.n	900078c6 <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
90007870:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007874:	2b01      	cmp	r3, #1
90007876:	d02d      	beq.n	900078d4 <HAL_I2C_Mem_Read+0x84>
90007878:	2301      	movs	r3, #1
9000787a:	460e      	mov	r6, r1
9000787c:	4690      	mov	r8, r2
9000787e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007882:	f7ff f831 	bl	900068e8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007886:	f8da 3000 	ldr.w	r3, [sl]
    tickstart = HAL_GetTick();
9000788a:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000788c:	699a      	ldr	r2, [r3, #24]
9000788e:	0412      	lsls	r2, r2, #16
90007890:	d523      	bpl.n	900078da <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007892:	f7ff f829 	bl	900068e8 <HAL_GetTick>
90007896:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007898:	f8da 3000 	ldr.w	r3, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000789c:	2819      	cmp	r0, #25
9000789e:	d9f5      	bls.n	9000788c <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900078a0:	699a      	ldr	r2, [r3, #24]
900078a2:	0410      	lsls	r0, r2, #16
900078a4:	d5f2      	bpl.n	9000788c <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900078a6:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900078aa:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
900078ac:	2200      	movs	r2, #0
      return HAL_ERROR;
900078ae:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900078b0:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
900078b2:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900078b6:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900078ba:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900078be:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
900078c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900078c6:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
900078ca:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900078cc:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
900078d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
900078d4:	2002      	movs	r0, #2
}
900078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
900078da:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
900078dc:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900078de:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900078e2:	4650      	mov	r0, sl
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
900078e4:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900078e8:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
900078ea:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900078ee:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900078f0:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
    hi2c->XferISR   = NULL;
900078f4:	f8ca 2034 	str.w	r2, [sl, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900078f8:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
900078fc:	4981      	ldr	r1, [pc, #516]	; (90007b04 <HAL_I2C_Mem_Read+0x2b4>)
    hi2c->XferCount = Size;
900078fe:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007902:	685a      	ldr	r2, [r3, #4]
90007904:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007906:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
90007908:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000790c:	4621      	mov	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
9000790e:	4332      	orrs	r2, r6
90007910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90007914:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007916:	462a      	mov	r2, r5
90007918:	f7ff fc88 	bl	9000722c <I2C_WaitOnTXISFlagUntilTimeout>
9000791c:	2800      	cmp	r0, #0
9000791e:	f040 8090 	bne.w	90007a42 <HAL_I2C_Mem_Read+0x1f2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007922:	2f01      	cmp	r7, #1
90007924:	d00c      	beq.n	90007940 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007926:	ea4f 2218 	mov.w	r2, r8, lsr #8
9000792a:	f8da 3000 	ldr.w	r3, [sl]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000792e:	4621      	mov	r1, r4
90007930:	4650      	mov	r0, sl
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007932:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007934:	462a      	mov	r2, r5
90007936:	f7ff fc79 	bl	9000722c <I2C_WaitOnTXISFlagUntilTimeout>
9000793a:	2800      	cmp	r0, #0
9000793c:	f040 8081 	bne.w	90007a42 <HAL_I2C_Mem_Read+0x1f2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007940:	fa5f f388 	uxtb.w	r3, r8
90007944:	f8da 2000 	ldr.w	r2, [sl]
90007948:	6293      	str	r3, [r2, #40]	; 0x28
9000794a:	1c61      	adds	r1, r4, #1
9000794c:	d15f      	bne.n	90007a0e <HAL_I2C_Mem_Read+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000794e:	6993      	ldr	r3, [r2, #24]
90007950:	065b      	lsls	r3, r3, #25
90007952:	d5fc      	bpl.n	9000794e <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007954:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
90007958:	b29b      	uxth	r3, r3
9000795a:	2bff      	cmp	r3, #255	; 0xff
9000795c:	f240 80ab 	bls.w	90007ab6 <HAL_I2C_Mem_Read+0x266>
  MODIFY_REG(hi2c->Instance->CR2, \
90007960:	6853      	ldr	r3, [r2, #4]
90007962:	4968      	ldr	r1, [pc, #416]	; (90007b04 <HAL_I2C_Mem_Read+0x2b4>)
90007964:	400b      	ands	r3, r1
90007966:	4968      	ldr	r1, [pc, #416]	; (90007b08 <HAL_I2C_Mem_Read+0x2b8>)
90007968:	4333      	orrs	r3, r6
9000796a:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000796c:	23ff      	movs	r3, #255	; 0xff
9000796e:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007972:	6051      	str	r1, [r2, #4]
90007974:	4f65      	ldr	r7, [pc, #404]	; (90007b0c <HAL_I2C_Mem_Read+0x2bc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007976:	f04f 09ff 	mov.w	r9, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000797a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 90007b18 <HAL_I2C_Mem_Read+0x2c8>
9000797e:	1c60      	adds	r0, r4, #1
90007980:	d127      	bne.n	900079d2 <HAL_I2C_Mem_Read+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007982:	6993      	ldr	r3, [r2, #24]
90007984:	0759      	lsls	r1, r3, #29
90007986:	d5fc      	bpl.n	90007982 <HAL_I2C_Mem_Read+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90007988:	6a52      	ldr	r2, [r2, #36]	; 0x24
9000798a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
9000798e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
90007990:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->pBuffPtr++;
90007994:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      hi2c->XferCount--;
90007998:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000799a:	3301      	adds	r3, #1
      hi2c->XferCount--;
9000799c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000799e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      hi2c->XferSize--;
900079a2:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
      hi2c->XferCount--;
900079a6:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
900079aa:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900079ac:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
900079b0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900079b2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
900079b4:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900079b8:	b10a      	cbz	r2, 900079be <HAL_I2C_Mem_Read+0x16e>
900079ba:	2b00      	cmp	r3, #0
900079bc:	d046      	beq.n	90007a4c <HAL_I2C_Mem_Read+0x1fc>
    } while (hi2c->XferCount > 0U);
900079be:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
900079c2:	b29b      	uxth	r3, r3
900079c4:	2b00      	cmp	r3, #0
900079c6:	f000 8086 	beq.w	90007ad6 <HAL_I2C_Mem_Read+0x286>
900079ca:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900079cc:	f8da 2000 	ldr.w	r2, [sl]
900079d0:	d0d7      	beq.n	90007982 <HAL_I2C_Mem_Read+0x132>
900079d2:	6993      	ldr	r3, [r2, #24]
900079d4:	075b      	lsls	r3, r3, #29
900079d6:	d4d7      	bmi.n	90007988 <HAL_I2C_Mem_Read+0x138>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900079d8:	f7fe ff86 	bl	900068e8 <HAL_GetTick>
900079dc:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900079de:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900079e2:	4284      	cmp	r4, r0
900079e4:	d301      	bcc.n	900079ea <HAL_I2C_Mem_Read+0x19a>
900079e6:	2c00      	cmp	r4, #0
900079e8:	d1c9      	bne.n	9000797e <HAL_I2C_Mem_Read+0x12e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900079ea:	6993      	ldr	r3, [r2, #24]
900079ec:	f013 0304 	ands.w	r3, r3, #4
900079f0:	d1c5      	bne.n	9000797e <HAL_I2C_Mem_Read+0x12e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900079f2:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900079f6:	2120      	movs	r1, #32
          return HAL_ERROR;
900079f8:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
900079fa:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900079fe:	430a      	orrs	r2, r1
90007a00:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007a04:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007a08:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
          return HAL_ERROR;
90007a0c:	e760      	b.n	900078d0 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007a0e:	6993      	ldr	r3, [r2, #24]
90007a10:	065f      	lsls	r7, r3, #25
90007a12:	d49f      	bmi.n	90007954 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007a14:	f7fe ff68 	bl	900068e8 <HAL_GetTick>
90007a18:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007a1a:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007a1e:	4284      	cmp	r4, r0
90007a20:	d301      	bcc.n	90007a26 <HAL_I2C_Mem_Read+0x1d6>
90007a22:	2c00      	cmp	r4, #0
90007a24:	d191      	bne.n	9000794a <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007a26:	6993      	ldr	r3, [r2, #24]
90007a28:	f013 0340 	ands.w	r3, r3, #64	; 0x40
90007a2c:	d18d      	bne.n	9000794a <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007a2e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007a32:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007a34:	430a      	orrs	r2, r1
90007a36:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007a3a:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007a3e:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90007a42:	2300      	movs	r3, #0
      return HAL_ERROR;
90007a44:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90007a46:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
      return HAL_ERROR;
90007a4a:	e741      	b.n	900078d0 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007a4c:	f8da 2000 	ldr.w	r2, [sl]
90007a50:	1c60      	adds	r0, r4, #1
90007a52:	d110      	bne.n	90007a76 <HAL_I2C_Mem_Read+0x226>
90007a54:	6993      	ldr	r3, [r2, #24]
90007a56:	0619      	lsls	r1, r3, #24
90007a58:	d5fc      	bpl.n	90007a54 <HAL_I2C_Mem_Read+0x204>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007a5a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
90007a5e:	b29b      	uxth	r3, r3
90007a60:	2bff      	cmp	r3, #255	; 0xff
90007a62:	d919      	bls.n	90007a98 <HAL_I2C_Mem_Read+0x248>
  MODIFY_REG(hi2c->Instance->CR2, \
90007a64:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007a66:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007a6a:	403b      	ands	r3, r7
90007a6c:	4333      	orrs	r3, r6
90007a6e:	ea43 0308 	orr.w	r3, r3, r8
90007a72:	6053      	str	r3, [r2, #4]
}
90007a74:	e7a3      	b.n	900079be <HAL_I2C_Mem_Read+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007a76:	6993      	ldr	r3, [r2, #24]
90007a78:	061b      	lsls	r3, r3, #24
90007a7a:	d4ee      	bmi.n	90007a5a <HAL_I2C_Mem_Read+0x20a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007a7c:	f7fe ff34 	bl	900068e8 <HAL_GetTick>
90007a80:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007a82:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007a86:	4284      	cmp	r4, r0
90007a88:	d301      	bcc.n	90007a8e <HAL_I2C_Mem_Read+0x23e>
90007a8a:	2c00      	cmp	r4, #0
90007a8c:	d1e0      	bne.n	90007a50 <HAL_I2C_Mem_Read+0x200>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007a8e:	6993      	ldr	r3, [r2, #24]
90007a90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90007a94:	d1dc      	bne.n	90007a50 <HAL_I2C_Mem_Read+0x200>
90007a96:	e7ac      	b.n	900079f2 <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = hi2c->XferCount;
90007a98:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
90007a9c:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007a9e:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
90007aa0:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007aa4:	6853      	ldr	r3, [r2, #4]
90007aa6:	403b      	ands	r3, r7
90007aa8:	4333      	orrs	r3, r6
90007aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90007aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90007ab2:	6053      	str	r3, [r2, #4]
}
90007ab4:	e783      	b.n	900079be <HAL_I2C_Mem_Read+0x16e>
      hi2c->XferSize = hi2c->XferCount;
90007ab6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007aba:	4812      	ldr	r0, [pc, #72]	; (90007b04 <HAL_I2C_Mem_Read+0x2b4>)
      hi2c->XferSize = hi2c->XferCount;
90007abc:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007abe:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90007ac0:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007ac4:	6853      	ldr	r3, [r2, #4]
90007ac6:	4003      	ands	r3, r0
90007ac8:	4333      	orrs	r3, r6
90007aca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90007ace:	4910      	ldr	r1, [pc, #64]	; (90007b10 <HAL_I2C_Mem_Read+0x2c0>)
90007ad0:	4319      	orrs	r1, r3
90007ad2:	6051      	str	r1, [r2, #4]
}
90007ad4:	e74e      	b.n	90007974 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007ad6:	462a      	mov	r2, r5
90007ad8:	4621      	mov	r1, r4
90007ada:	4650      	mov	r0, sl
90007adc:	f7ff fc5c 	bl	90007398 <I2C_WaitOnSTOPFlagUntilTimeout>
90007ae0:	b970      	cbnz	r0, 90007b00 <HAL_I2C_Mem_Read+0x2b0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007ae2:	f8da 3000 	ldr.w	r3, [sl]
90007ae6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90007ae8:	4c0a      	ldr	r4, [pc, #40]	; (90007b14 <HAL_I2C_Mem_Read+0x2c4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007aea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90007aec:	685a      	ldr	r2, [r3, #4]
90007aee:	4022      	ands	r2, r4
90007af0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90007af2:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007af6:	f88a 0040 	strb.w	r0, [sl, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007afa:	f88a 0042 	strb.w	r0, [sl, #66]	; 0x42
    return HAL_OK;
90007afe:	e6e7      	b.n	900078d0 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
90007b00:	2001      	movs	r0, #1
90007b02:	e6e5      	b.n	900078d0 <HAL_I2C_Mem_Read+0x80>
90007b04:	fc009800 	.word	0xfc009800
90007b08:	01ff2400 	.word	0x01ff2400
90007b0c:	fc009c00 	.word	0xfc009c00
90007b10:	02002400 	.word	0x02002400
90007b14:	fe00e800 	.word	0xfe00e800
90007b18:	01ff0000 	.word	0x01ff0000

90007b1c <HAL_I2C_GetState>:
  return hi2c->State;
90007b1c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90007b20:	4770      	bx	lr
90007b22:	bf00      	nop

90007b24 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90007b24:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
90007b26:	4770      	bx	lr

90007b28 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007b28:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90007b2c:	2a20      	cmp	r2, #32
90007b2e:	d123      	bne.n	90007b78 <HAL_I2CEx_ConfigAnalogFilter+0x50>
90007b30:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007b34:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90007b38:	4603      	mov	r3, r0
90007b3a:	2a01      	cmp	r2, #1
90007b3c:	d01c      	beq.n	90007b78 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90007b3e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90007b40:	2024      	movs	r0, #36	; 0x24
{
90007b42:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90007b44:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007b48:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
90007b4c:	6810      	ldr	r0, [r2, #0]
90007b4e:	f020 0001 	bic.w	r0, r0, #1
90007b52:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90007b54:	6810      	ldr	r0, [r2, #0]
90007b56:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
90007b5a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
90007b5c:	6810      	ldr	r0, [r2, #0]
90007b5e:	4301      	orrs	r1, r0

    return HAL_OK;
90007b60:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90007b62:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90007b64:	6811      	ldr	r1, [r2, #0]
90007b66:	f041 0101 	orr.w	r1, r1, #1
90007b6a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90007b6c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007b70:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90007b74:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90007b78:	2002      	movs	r0, #2
}
90007b7a:	4770      	bx	lr

90007b7c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007b7c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90007b80:	2a20      	cmp	r2, #32
90007b82:	d122      	bne.n	90007bca <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90007b84:	4603      	mov	r3, r0
{
90007b86:	b500      	push	{lr}
90007b88:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007b8c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90007b90:	2a01      	cmp	r2, #1
90007b92:	d01c      	beq.n	90007bce <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90007b94:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90007b96:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007b98:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
90007b9c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90007ba0:	6810      	ldr	r0, [r2, #0]
90007ba2:	f020 0001 	bic.w	r0, r0, #1
90007ba6:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
90007ba8:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
90007baa:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
90007bae:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90007bb2:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90007bb4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90007bb6:	6811      	ldr	r1, [r2, #0]
90007bb8:	f041 0101 	orr.w	r1, r1, #1
90007bbc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90007bbe:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90007bc2:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90007bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90007bca:	2002      	movs	r0, #2
}
90007bcc:	4770      	bx	lr
    return HAL_BUSY;
90007bce:	2002      	movs	r0, #2
}
90007bd0:	f85d fb04 	ldr.w	pc, [sp], #4

90007bd4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90007bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007bd8:	460d      	mov	r5, r1
90007bda:	4614      	mov	r4, r2
90007bdc:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
90007bde:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
90007be0:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
90007be2:	2701      	movs	r7, #1
  p = 0;
90007be4:	f04f 0800 	mov.w	r8, #0
90007be8:	e006      	b.n	90007bf8 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
90007bea:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
90007bee:	eb06 0308 	add.w	r3, r6, r8
90007bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007bf6:	d837      	bhi.n	90007c68 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90007bf8:	eb05 0008 	add.w	r0, r5, r8
90007bfc:	4632      	mov	r2, r6
90007bfe:	4639      	mov	r1, r7
    while (i != 0UL)
90007c00:	b116      	cbz	r6, 90007c08 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
90007c02:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
90007c04:	f019 fb9c 	bl	90021340 <memset>
  for (l = 0; l < 16UL; l++)
90007c08:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
90007c0a:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
90007c0e:	d1ec      	bne.n	90007bea <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
90007c10:	2300      	movs	r3, #0
90007c12:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
90007c16:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
90007c1a:	7828      	ldrb	r0, [r5, #0]
90007c1c:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
90007c1e:	b300      	cbz	r0, 90007c62 <JPEG_Bits_To_SizeCodes+0x8e>
90007c20:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90007c24:	2701      	movs	r7, #1
  p = 0;
90007c26:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
90007c28:	4288      	cmp	r0, r1
90007c2a:	d10f      	bne.n	90007c4c <JPEG_Bits_To_SizeCodes+0x78>
90007c2c:	eb02 0008 	add.w	r0, r2, r8
90007c30:	1c56      	adds	r6, r2, #1
90007c32:	eb05 0c02 	add.w	ip, r5, r2
90007c36:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90007c3a:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
90007c3c:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
90007c40:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90007c42:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
90007c46:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
90007c48:	458e      	cmp	lr, r1
90007c4a:	d0f7      	beq.n	90007c3c <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
90007c4c:	291f      	cmp	r1, #31
90007c4e:	d80b      	bhi.n	90007c68 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90007c50:	fa07 f001 	lsl.w	r0, r7, r1
90007c54:	4298      	cmp	r0, r3
90007c56:	d907      	bls.n	90007c68 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
90007c58:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
90007c5a:	005b      	lsls	r3, r3, #1
    si++;
90007c5c:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
90007c5e:	2800      	cmp	r0, #0
90007c60:	d1e2      	bne.n	90007c28 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
90007c62:	2000      	movs	r0, #0
}
90007c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
90007c68:	2001      	movs	r0, #1
}
90007c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90007c6e:	bf00      	nop

90007c70 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
90007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
90007c72:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
90007c76:	460d      	mov	r5, r1
90007c78:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90007c7a:	ab01      	add	r3, sp, #4
90007c7c:	aa43      	add	r2, sp, #268	; 0x10c
90007c7e:	a902      	add	r1, sp, #8
90007c80:	f7ff ffa8 	bl	90007bd4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90007c84:	b9d0      	cbnz	r0, 90007cbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
90007c86:	9f01      	ldr	r7, [sp, #4]
90007c88:	b1c7      	cbz	r7, 90007cbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
90007c8a:	370f      	adds	r7, #15
90007c8c:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
90007c90:	a902      	add	r1, sp, #8
90007c92:	f104 0c0f 	add.w	ip, r4, #15
90007c96:	4427      	add	r7, r4
90007c98:	e009      	b.n	90007cae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90007c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
90007c9e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90007ca0:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90007ca4:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90007ca8:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90007caa:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
90007cac:	d006      	beq.n	90007cbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
90007cae:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90007cb2:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90007cb4:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90007cb8:	d9ef      	bls.n	90007c9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
90007cba:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90007cbc:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90007cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
90007cc2:	bf00      	nop

90007cc4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90007cc4:	b510      	push	{r4, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90007cc6:	6804      	ldr	r4, [r0, #0]
{
90007cc8:	4608      	mov	r0, r1
90007cca:	b090      	sub	sp, #64	; 0x40
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90007ccc:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
90007cd0:	428a      	cmp	r2, r1
90007cd2:	f000 808c 	beq.w	90007dee <JPEG_Set_HuffDC_Mem+0x12a>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
90007cd6:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
90007cda:	428a      	cmp	r2, r1
90007cdc:	d002      	beq.n	90007ce4 <JPEG_Set_HuffDC_Mem+0x20>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90007cde:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90007ce0:	b010      	add	sp, #64	; 0x40
90007ce2:	bd10      	pop	{r4, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90007ce4:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
90007ce8:	a901      	add	r1, sp, #4
90007cea:	f7ff ffc1 	bl	90007c70 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90007cee:	2800      	cmp	r0, #0
90007cf0:	d1f6      	bne.n	90007ce0 <JPEG_Set_HuffDC_Mem+0x1c>
    *addressDef = 0x0FFF0FFF;
90007cf2:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
90007cf6:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
90007cf8:	6063      	str	r3, [r4, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007cfa:	f89d 200f 	ldrb.w	r2, [sp, #15]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007cfe:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d02:	0212      	lsls	r2, r2, #8
90007d04:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d08:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d0a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d0e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d12:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d14:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
90007d18:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90007d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007d1e:	f844 3c04 	str.w	r3, [r4, #-4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d22:	f89d 200d 	ldrb.w	r2, [sp, #13]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d26:	f89d 300c 	ldrb.w	r3, [sp, #12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d2a:	0212      	lsls	r2, r2, #8
90007d2c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d30:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d32:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d3a:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d3c:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
90007d40:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90007d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007d46:	f844 3c08 	str.w	r3, [r4, #-8]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d4e:	f89d 300a 	ldrb.w	r3, [sp, #10]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d52:	0212      	lsls	r2, r2, #8
90007d54:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d58:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d5a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d62:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d64:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
90007d68:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90007d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007d6e:	f844 3c0c 	str.w	r3, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d72:	f89d 2009 	ldrb.w	r2, [sp, #9]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d76:	f89d 3008 	ldrb.w	r3, [sp, #8]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d7a:	0212      	lsls	r2, r2, #8
90007d7c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d80:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d82:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d86:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d8a:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d8c:	f89d 1020 	ldrb.w	r1, [sp, #32]
90007d90:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90007d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007d96:	f844 3c10 	str.w	r3, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007d9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007da2:	0212      	lsls	r2, r2, #8
90007da4:	f89d 101c 	ldrb.w	r1, [sp, #28]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007da8:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007daa:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007db2:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007db4:	f89d 1018 	ldrb.w	r1, [sp, #24]
90007db8:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90007dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007dbe:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dca:	0212      	lsls	r2, r2, #8
90007dcc:	f89d 1014 	ldrb.w	r1, [sp, #20]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dd0:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dd2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007dda:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90007ddc:	f89d 1010 	ldrb.w	r1, [sp, #16]
90007de0:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90007de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007de6:	f844 3c18 	str.w	r3, [r4, #-24]
}
90007dea:	b010      	add	sp, #64	; 0x40
90007dec:	bd10      	pop	{r4, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90007dee:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
90007df2:	e779      	b.n	90007ce8 <JPEG_Set_HuffDC_Mem+0x24>

90007df4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
90007df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90007df8:	6804      	ldr	r4, [r0, #0]
{
90007dfa:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
90007dfe:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90007e00:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90007e04:	429a      	cmp	r2, r3
90007e06:	d041      	beq.n	90007e8c <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
90007e08:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
90007e0c:	429a      	cmp	r2, r3
90007e0e:	d004      	beq.n	90007e1a <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
90007e10:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90007e12:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90007e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90007e1a:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90007e1e:	4628      	mov	r0, r5
90007e20:	466b      	mov	r3, sp
90007e22:	f20d 4234 	addw	r2, sp, #1076	; 0x434
90007e26:	a901      	add	r1, sp, #4
90007e28:	f7ff fed4 	bl	90007bd4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90007e2c:	2800      	cmp	r0, #0
90007e2e:	d1f0      	bne.n	90007e12 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
90007e30:	9b00      	ldr	r3, [sp, #0]
90007e32:	b373      	cbz	r3, 90007e92 <JPEG_Set_HuffAC_Mem+0x9e>
90007e34:	330f      	adds	r3, #15
90007e36:	f20d 4734 	addw	r7, sp, #1076	; 0x434
90007e3a:	f10d 0c04 	add.w	ip, sp, #4
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90007e3e:	ae42      	add	r6, sp, #264	; 0x108
90007e40:	eb05 0e03 	add.w	lr, r5, r3
90007e44:	350f      	adds	r5, #15
90007e46:	e011      	b.n	90007e6c <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
90007e48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
90007e4c:	2ba1      	cmp	r3, #161	; 0xa1
90007e4e:	d8df      	bhi.n	90007e10 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90007e50:	f81c 2b01 	ldrb.w	r2, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90007e54:	eb06 0883 	add.w	r8, r6, r3, lsl #2
90007e58:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
90007e5c:	45ae      	cmp	lr, r5
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90007e5e:	f102 32ff 	add.w	r2, r2, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90007e62:	4631      	mov	r1, r6
90007e64:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90007e68:	54f2      	strb	r2, [r6, r3]
  while (k < lastK)
90007e6a:	d013      	beq.n	90007e94 <JPEG_Set_HuffAC_Mem+0xa0>
    l = AC_BitsValsTable->HuffVal[k];
90007e6c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
      l = 160; /*l = 0x00 EOB code*/
90007e70:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
90007e72:	2900      	cmp	r1, #0
90007e74:	d0ec      	beq.n	90007e50 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
90007e76:	090b      	lsrs	r3, r1, #4
      lsb = (l & 0x0FUL);
90007e78:	f001 020f 	and.w	r2, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90007e7c:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
90007e7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90007e82:	f102 32ff 	add.w	r2, r2, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90007e86:	d1df      	bne.n	90007e48 <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
90007e88:	23a1      	movs	r3, #161	; 0xa1
90007e8a:	e7e1      	b.n	90007e50 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90007e8c:	f204 6444 	addw	r4, r4, #1604	; 0x644
90007e90:	e7c5      	b.n	90007e1e <JPEG_Set_HuffAC_Mem+0x2a>
90007e92:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
90007e94:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
90007e98:	4a19      	ldr	r2, [pc, #100]	; (90007f00 <JPEG_Set_HuffAC_Mem+0x10c>)
90007e9a:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
90007e9e:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
90007ea2:	6023      	str	r3, [r4, #0]
90007ea4:	6063      	str	r3, [r4, #4]
90007ea6:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
90007eaa:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
90007eac:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
90007eb0:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
90007eb2:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
90007eb6:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
90007eba:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
90007ebc:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90007ec0:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
90007ec2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90007ec6:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007ec8:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007ecc:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007ed0:	0212      	lsls	r2, r2, #8
90007ed2:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007ed6:	021b      	lsls	r3, r3, #8
90007ed8:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007edc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
90007ee0:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007ee2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007ee6:	433a      	orrs	r2, r7
    while (i > 1UL)
90007ee8:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90007eea:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
90007eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90007ef2:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
90007ef6:	d1e7      	bne.n	90007ec8 <JPEG_Set_HuffAC_Mem+0xd4>
}
90007ef8:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90007efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90007f00:	0fd10fd0 	.word	0x0fd10fd0

90007f04 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
90007f04:	6d43      	ldr	r3, [r0, #84]	; 0x54
90007f06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
90007f0a:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90007f0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
90007f0e:	f003 0303 	and.w	r3, r3, #3
90007f12:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
90007f14:	6803      	ldr	r3, [r0, #0]
90007f16:	685a      	ldr	r2, [r3, #4]
90007f18:	bf0c      	ite	eq
90007f1a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
90007f1e:	f022 0208 	bicne.w	r2, r2, #8
90007f22:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90007f24:	681a      	ldr	r2, [r3, #0]
90007f26:	f022 0201 	bic.w	r2, r2, #1
90007f2a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90007f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90007f2e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90007f32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90007f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90007f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90007f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90007f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90007f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007f42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90007f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90007f46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90007f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
90007f4c:	681a      	ldr	r2, [r3, #0]
90007f4e:	f042 0201 	orr.w	r2, r2, #1
90007f52:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90007f54:	6d42      	ldr	r2, [r0, #84]	; 0x54
90007f56:	f002 020c 	and.w	r2, r2, #12
90007f5a:	2a08      	cmp	r2, #8
90007f5c:	d00a      	beq.n	90007f74 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90007f5e:	6d42      	ldr	r2, [r0, #84]	; 0x54
90007f60:	f002 020c 	and.w	r2, r2, #12
90007f64:	2a0c      	cmp	r2, #12
90007f66:	d000      	beq.n	90007f6a <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
90007f68:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90007f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90007f6c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90007f70:	631a      	str	r2, [r3, #48]	; 0x30
}
90007f72:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
90007f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90007f76:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
90007f7a:	631a      	str	r2, [r3, #48]	; 0x30
90007f7c:	4770      	bx	lr
90007f7e:	bf00      	nop

90007f80 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90007f80:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90007f82:	6a82      	ldr	r2, [r0, #40]	; 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90007f84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90007f86:	429a      	cmp	r2, r3
90007f88:	d332      	bcc.n	90007ff0 <JPEG_DMA_StartProcess+0x70>
{
90007f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
90007f8c:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90007f8e:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
90007f90:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90007f92:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90007f94:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90007f96:	42b5      	cmp	r5, r6
90007f98:	d327      	bcc.n	90007fea <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90007f9a:	4f1c      	ldr	r7, [pc, #112]	; (9000800c <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90007f9c:	f8df c078 	ldr.w	ip, [pc, #120]	; 90008018 <JPEG_DMA_StartProcess+0x98>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90007fa0:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90007fa2:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90007fa6:	491a      	ldr	r1, [pc, #104]	; (90008010 <JPEG_DMA_StartProcess+0x90>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90007fa8:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90007faa:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
90007fac:	4919      	ldr	r1, [pc, #100]	; (90008014 <JPEG_DMA_StartProcess+0x94>)
90007fae:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
90007fb0:	b1a3      	cbz	r3, 90007fdc <JPEG_DMA_StartProcess+0x5c>
90007fb2:	b19e      	cbz	r6, 90007fdc <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90007fb4:	fbb2 f1f3 	udiv	r1, r2, r3
90007fb8:	fb03 2311 	mls	r3, r3, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90007fbc:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90007fbe:	1ad2      	subs	r2, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90007fc0:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90007fc2:	fbb5 f3f6 	udiv	r3, r5, r6
90007fc6:	fb06 5313 	mls	r3, r6, r3, r5
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90007fca:	62a2      	str	r2, [r4, #40]	; 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90007fcc:	1aeb      	subs	r3, r5, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90007fce:	2501      	movs	r5, #1
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90007fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90007fd2:	9500      	str	r5, [sp, #0]
90007fd4:	69e2      	ldr	r2, [r4, #28]
90007fd6:	f001 fbdd 	bl	90009794 <HAL_MDMA_Start_IT>
90007fda:	b158      	cbz	r0, 90007ff4 <JPEG_DMA_StartProcess+0x74>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90007fdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
90007fde:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90007fe0:	f043 0304 	orr.w	r3, r3, #4
90007fe4:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
90007fe6:	b003      	add	sp, #12
90007fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
90007fea:	2001      	movs	r0, #1
}
90007fec:	b003      	add	sp, #12
90007fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
90007ff0:	2001      	movs	r0, #1
}
90007ff2:	4770      	bx	lr
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90007ff4:	6822      	ldr	r2, [r4, #0]
90007ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90007ff8:	69a1      	ldr	r1, [r4, #24]
90007ffa:	3240      	adds	r2, #64	; 0x40
90007ffc:	9500      	str	r5, [sp, #0]
90007ffe:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008000:	f001 fbc8 	bl	90009794 <HAL_MDMA_Start_IT>
90008004:	2800      	cmp	r0, #0
90008006:	d0f1      	beq.n	90007fec <JPEG_DMA_StartProcess+0x6c>
90008008:	e7e8      	b.n	90007fdc <JPEG_DMA_StartProcess+0x5c>
9000800a:	bf00      	nop
9000800c:	90008545 	.word	0x90008545
90008010:	900087c1 	.word	0x900087c1
90008014:	90008845 	.word	0x90008845
90008018:	90008571 	.word	0x90008571

9000801c <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000801c:	6803      	ldr	r3, [r0, #0]
9000801e:	685a      	ldr	r2, [r3, #4]
90008020:	f002 0203 	and.w	r2, r2, #3
90008024:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
90008026:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000802a:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000802c:	f000 809d 	beq.w	9000816a <HAL_JPEG_GetInfo.part.0+0x14e>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
90008030:	685a      	ldr	r2, [r3, #4]
90008032:	f012 0203 	ands.w	r2, r2, #3
90008036:	d174      	bne.n	90008122 <HAL_JPEG_GetInfo.part.0+0x106>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008038:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
9000803a:	600a      	str	r2, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000803c:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000803e:	0c24      	lsrs	r4, r4, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008040:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008042:	608c      	str	r4, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008044:	60ca      	str	r2, [r1, #12]
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
90008046:	2200      	movs	r2, #0
90008048:	f8c9 2004 	str.w	r2, [r9, #4]
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000804c:	4a5f      	ldr	r2, [pc, #380]	; (900081cc <HAL_JPEG_GetInfo.part.0+0x1b0>)
9000804e:	f103 0c50 	add.w	ip, r3, #80	; 0x50
  uint32_t quality = 0;
90008052:	2600      	movs	r6, #0
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008054:	f04f 0e64 	mov.w	lr, #100	; 0x64
90008058:	f102 0540 	add.w	r5, r2, #64	; 0x40
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000805c:	f241 3488 	movw	r4, #5000	; 0x1388
90008060:	e033      	b.n	900080ca <HAL_JPEG_GetInfo.part.0+0xae>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008062:	f892 8001 	ldrb.w	r8, [r2, #1]
90008066:	fb0e f707 	mul.w	r7, lr, r7
9000806a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000806c:	f811 8008 	ldrb.w	r8, [r1, r8]
90008070:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90008074:	2f64      	cmp	r7, #100	; 0x64
90008076:	d969      	bls.n	9000814c <HAL_JPEG_GetInfo.part.0+0x130>
          quality += 5000UL / scale;
90008078:	fbb4 f7f7 	udiv	r7, r4, r7
9000807c:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000807e:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
90008082:	2f01      	cmp	r7, #1
90008084:	d03d      	beq.n	90008102 <HAL_JPEG_GetInfo.part.0+0xe6>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008086:	f892 8002 	ldrb.w	r8, [r2, #2]
9000808a:	fb0e f707 	mul.w	r7, lr, r7
9000808e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008090:	f811 8008 	ldrb.w	r8, [r1, r8]
90008094:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90008098:	2f64      	cmp	r7, #100	; 0x64
9000809a:	d952      	bls.n	90008142 <HAL_JPEG_GetInfo.part.0+0x126>
          quality += 5000UL / scale;
9000809c:	fbb4 f7f7 	udiv	r7, r4, r7
900080a0:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900080a2:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
900080a4:	2b01      	cmp	r3, #1
900080a6:	d030      	beq.n	9000810a <HAL_JPEG_GetInfo.part.0+0xee>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900080a8:	78d7      	ldrb	r7, [r2, #3]
900080aa:	fb0e f303 	mul.w	r3, lr, r3
900080ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900080b0:	5dcf      	ldrb	r7, [r1, r7]
900080b2:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
900080b6:	2b64      	cmp	r3, #100	; 0x64
900080b8:	d952      	bls.n	90008160 <HAL_JPEG_GetInfo.part.0+0x144>
          quality += 5000UL / scale;
900080ba:	fbb4 f3f3 	udiv	r3, r4, r3
900080be:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900080c0:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
900080c2:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900080c6:	4295      	cmp	r5, r2
900080c8:	d025      	beq.n	90008116 <HAL_JPEG_GetInfo.part.0+0xfa>
    quantRow = *tableAddress;
900080ca:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900080ce:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
900080d0:	2f01      	cmp	r7, #1
900080d2:	d034      	beq.n	9000813e <HAL_JPEG_GetInfo.part.0+0x122>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900080d4:	f892 8000 	ldrb.w	r8, [r2]
900080d8:	fb0e f707 	mul.w	r7, lr, r7
900080dc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900080de:	f811 8008 	ldrb.w	r8, [r1, r8]
900080e2:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900080e6:	2f64      	cmp	r7, #100	; 0x64
900080e8:	d935      	bls.n	90008156 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += 5000UL / scale;
900080ea:	fbb4 f7f7 	udiv	r7, r4, r7
900080ee:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900080f0:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
900080f4:	2f01      	cmp	r7, #1
900080f6:	d1b4      	bne.n	90008062 <HAL_JPEG_GetInfo.part.0+0x46>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900080f8:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
900080fc:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900080fe:	2f01      	cmp	r7, #1
90008100:	d1c1      	bne.n	90008086 <HAL_JPEG_GetInfo.part.0+0x6a>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008102:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
90008104:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
90008106:	2b01      	cmp	r3, #1
90008108:	d1ce      	bne.n	900080a8 <HAL_JPEG_GetInfo.part.0+0x8c>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000810a:	3204      	adds	r2, #4
        quality += 100UL;
9000810c:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
9000810e:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008112:	4295      	cmp	r5, r2
90008114:	d1d9      	bne.n	900080ca <HAL_JPEG_GetInfo.part.0+0xae>
  }

  return (quality / 64UL);
90008116:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
90008118:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000811a:	f8c9 6010 	str.w	r6, [r9, #16]
}
9000811e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
90008122:	685a      	ldr	r2, [r3, #4]
90008124:	f002 0203 	and.w	r2, r2, #3
90008128:	2a03      	cmp	r2, #3
9000812a:	d14b      	bne.n	900081c4 <HAL_JPEG_GetInfo.part.0+0x1a8>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000812c:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
9000812e:	2530      	movs	r5, #48	; 0x30
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008130:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008132:	0c24      	lsrs	r4, r4, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
90008134:	600d      	str	r5, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008136:	0c12      	lsrs	r2, r2, #16
90008138:	e9c1 4202 	strd	r4, r2, [r1, #8]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000813c:	e01d      	b.n	9000817a <HAL_JPEG_GetInfo.part.0+0x15e>
        quality += 100UL;
9000813e:	3664      	adds	r6, #100	; 0x64
90008140:	e7d6      	b.n	900080f0 <HAL_JPEG_GetInfo.part.0+0xd4>
          quality += (200UL - scale) / 2UL;
90008142:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008146:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000814a:	e7aa      	b.n	900080a2 <HAL_JPEG_GetInfo.part.0+0x86>
9000814c:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008150:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90008154:	e793      	b.n	9000807e <HAL_JPEG_GetInfo.part.0+0x62>
90008156:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000815a:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000815e:	e7c7      	b.n	900080f0 <HAL_JPEG_GetInfo.part.0+0xd4>
90008160:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
90008164:	eb06 0653 	add.w	r6, r6, r3, lsr #1
90008168:	e7aa      	b.n	900080c0 <HAL_JPEG_GetInfo.part.0+0xa4>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000816a:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000816c:	2510      	movs	r5, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000816e:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008170:	40ec      	lsrs	r4, r5
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90008172:	600d      	str	r5, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008174:	40ea      	lsrs	r2, r5
90008176:	e9c1 4202 	strd	r4, r2, [r1, #8]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000817a:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000817c:	695d      	ldr	r5, [r3, #20]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000817e:	699c      	ldr	r4, [r3, #24]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90008180:	0916      	lsrs	r6, r2, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008182:	f015 0ff0 	tst.w	r5, #240	; 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90008186:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000818a:	ea4f 1414 	mov.w	r4, r4, lsr #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000818e:	ea4f 1715 	mov.w	r7, r5, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008192:	d108      	bne.n	900081a6 <HAL_JPEG_GetInfo.part.0+0x18a>
90008194:	2a01      	cmp	r2, #1
90008196:	d106      	bne.n	900081a6 <HAL_JPEG_GetInfo.part.0+0x18a>
90008198:	0726      	lsls	r6, r4, #28
9000819a:	f47f af54 	bne.w	90008046 <HAL_JPEG_GetInfo.part.0+0x2a>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
9000819e:	2202      	movs	r2, #2
900081a0:	f8c9 2004 	str.w	r2, [r9, #4]
900081a4:	e752      	b.n	9000804c <HAL_JPEG_GetInfo.part.0+0x30>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900081a6:	433e      	orrs	r6, r7
900081a8:	0735      	lsls	r5, r6, #28
900081aa:	f43f af4c 	beq.w	90008046 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900081ae:	433c      	orrs	r4, r7
900081b0:	0721      	lsls	r1, r4, #28
900081b2:	f47f af48 	bne.w	90008046 <HAL_JPEG_GetInfo.part.0+0x2a>
900081b6:	2a03      	cmp	r2, #3
900081b8:	f47f af45 	bne.w	90008046 <HAL_JPEG_GetInfo.part.0+0x2a>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
900081bc:	2201      	movs	r2, #1
900081be:	f8c9 2004 	str.w	r2, [r9, #4]
900081c2:	e743      	b.n	9000804c <HAL_JPEG_GetInfo.part.0+0x30>
    return HAL_ERROR;
900081c4:	2001      	movs	r0, #1
}
900081c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900081ca:	bf00      	nop
900081cc:	90024ab4 	.word	0x90024ab4

900081d0 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
900081d0:	2800      	cmp	r0, #0
900081d2:	f000 810b 	beq.w	900083ec <HAL_JPEG_Init+0x21c>
{
900081d6:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
900081d8:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
900081dc:	4604      	mov	r4, r0
900081de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900081e2:	2b00      	cmp	r3, #0
900081e4:	f000 80fd 	beq.w	900083e2 <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
900081e8:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
900081ea:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
900081ec:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
900081ee:	4880      	ldr	r0, [pc, #512]	; (900083f0 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
900081f0:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
900081f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
900081f6:	f041 0101 	orr.w	r1, r1, #1
900081fa:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900081fc:	6811      	ldr	r1, [r2, #0]
900081fe:	f021 0101 	bic.w	r1, r1, #1
90008202:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008204:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008206:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000820a:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000820c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000820e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
90008212:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008214:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008216:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000821a:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000821c:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000821e:	f041 0160 	orr.w	r1, r1, #96	; 0x60
90008222:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008224:	4973      	ldr	r1, [pc, #460]	; (900083f4 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008226:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008228:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000822a:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000822c:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008230:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
90008234:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
90008238:	4b6f      	ldr	r3, [pc, #444]	; (900083f8 <HAL_JPEG_Init+0x228>)
9000823a:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000823e:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008242:	486e      	ldr	r0, [pc, #440]	; (900083fc <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008244:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008248:	4b6d      	ldr	r3, [pc, #436]	; (90008400 <HAL_JPEG_Init+0x230>)
9000824a:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000824e:	496d      	ldr	r1, [pc, #436]	; (90008404 <HAL_JPEG_Init+0x234>)
90008250:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008254:	4b6c      	ldr	r3, [pc, #432]	; (90008408 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008256:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000825a:	486c      	ldr	r0, [pc, #432]	; (9000840c <HAL_JPEG_Init+0x23c>)
9000825c:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
90008260:	496b      	ldr	r1, [pc, #428]	; (90008410 <HAL_JPEG_Init+0x240>)
90008262:	4b6c      	ldr	r3, [pc, #432]	; (90008414 <HAL_JPEG_Init+0x244>)
90008264:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
90008268:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000826c:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008270:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
90008274:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
90008278:	4967      	ldr	r1, [pc, #412]	; (90008418 <HAL_JPEG_Init+0x248>)
9000827a:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000827c:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008280:	430b      	orrs	r3, r1
  *address = value;
90008282:	4966      	ldr	r1, [pc, #408]	; (9000841c <HAL_JPEG_Init+0x24c>)
90008284:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
90008288:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000828c:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
90008290:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008292:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90008296:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
90008298:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000829c:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
900082a0:	428e      	cmp	r6, r1
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900082a2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
900082a6:	ea43 030c 	orr.w	r3, r3, ip
900082aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900082ae:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
900082b2:	d1eb      	bne.n	9000828c <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
900082b4:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900082b8:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
900082bc:	4856      	ldr	r0, [pc, #344]	; (90008418 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900082be:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
900082c0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
900082c2:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
900082c6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
900082ca:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
900082ce:	4003      	ands	r3, r0
  *address = value;
900082d0:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900082d4:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
900082d8:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
900082dc:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
900082e0:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
900082e4:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
900082e8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
900082ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
900082ee:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
900082f2:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
900082f6:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
900082f8:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900082fa:	4b49      	ldr	r3, [pc, #292]	; (90008420 <HAL_JPEG_Init+0x250>)
  *address = value;
900082fc:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008300:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008304:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
90008308:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
9000830c:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
90008310:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
90008314:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
90008316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000831a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000831e:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
90008322:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008324:	483f      	ldr	r0, [pc, #252]	; (90008424 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008326:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008328:	4b3f      	ldr	r3, [pc, #252]	; (90008428 <HAL_JPEG_Init+0x258>)
  *address = value;
9000832a:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000832e:	493f      	ldr	r1, [pc, #252]	; (9000842c <HAL_JPEG_Init+0x25c>)
90008330:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
90008334:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008338:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000833c:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
90008340:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90008344:	493a      	ldr	r1, [pc, #232]	; (90008430 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
90008346:	b29b      	uxth	r3, r3
90008348:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000834c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90008350:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90008354:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
90008358:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000835a:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000835e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
90008360:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90008364:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
90008368:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000836a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000836e:	ea43 030e 	orr.w	r3, r3, lr
90008372:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008376:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000837a:	d1eb      	bne.n	90008354 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000837c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90008380:	4926      	ldr	r1, [pc, #152]	; (9000841c <HAL_JPEG_Init+0x24c>)
90008382:	4620      	mov	r0, r4
90008384:	f7ff fd36 	bl	90007df4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008388:	b118      	cbz	r0, 90008392 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000838a:	2301      	movs	r3, #1
    return HAL_ERROR;
9000838c:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000838e:	6523      	str	r3, [r4, #80]	; 0x50
}
90008390:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
90008392:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
90008394:	4620      	mov	r0, r4
90008396:	4926      	ldr	r1, [pc, #152]	; (90008430 <HAL_JPEG_Init+0x260>)
90008398:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000839c:	f7ff fd2a 	bl	90007df4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
900083a0:	2800      	cmp	r0, #0
900083a2:	d1f2      	bne.n	9000838a <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
900083a4:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
900083a6:	4620      	mov	r0, r4
900083a8:	4922      	ldr	r1, [pc, #136]	; (90008434 <HAL_JPEG_Init+0x264>)
900083aa:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
900083ae:	f7ff fc89 	bl	90007cc4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
900083b2:	2800      	cmp	r0, #0
900083b4:	d1e9      	bne.n	9000838a <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
900083b6:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
900083b8:	4620      	mov	r0, r4
900083ba:	491f      	ldr	r1, [pc, #124]	; (90008438 <HAL_JPEG_Init+0x268>)
900083bc:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
900083c0:	f7ff fc80 	bl	90007cc4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
900083c4:	2800      	cmp	r0, #0
900083c6:	d1e0      	bne.n	9000838a <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
900083c8:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
900083ca:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
900083cc:	6853      	ldr	r3, [r2, #4]
900083ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900083d2:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
900083d4:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
900083d6:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
900083d8:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
900083dc:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
900083de:	6560      	str	r0, [r4, #84]	; 0x54
}
900083e0:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
900083e2:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
900083e6:	f7fc f869 	bl	900044bc <HAL_JPEG_MspInit>
900083ea:	e6fd      	b.n	900081e8 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
900083ec:	2001      	movs	r0, #1
}
900083ee:	4770      	bx	lr
900083f0:	90024a74 	.word	0x90024a74
900083f4:	900249fc 	.word	0x900249fc
900083f8:	01050100 	.word	0x01050100
900083fc:	0b0a0908 	.word	0x0b0a0908
90008400:	07060504 	.word	0x07060504
90008404:	03020100 	.word	0x03020100
90008408:	7d010000 	.word	0x7d010000
9000840c:	04040505 	.word	0x04040505
90008410:	03040203 	.word	0x03040203
90008414:	03010200 	.word	0x03010200
90008418:	ffff0000 	.word	0xffff0000
9000841c:	90024948 	.word	0x90024948
90008420:	09080706 	.word	0x09080706
90008424:	01000404 	.word	0x01000404
90008428:	04040201 	.word	0x04040201
9000842c:	05070403 	.word	0x05070403
90008430:	90024894 	.word	0x90024894
90008434:	90024a58 	.word	0x90024a58
90008438:	90024a3c 	.word	0x90024a3c

9000843c <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000843c:	2b00      	cmp	r3, #0
9000843e:	bf18      	it	ne
90008440:	2900      	cmpne	r1, #0
90008442:	d03b      	beq.n	900084bc <HAL_JPEG_Decode_DMA+0x80>
{
90008444:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008446:	fab0 f580 	clz	r5, r0
9000844a:	4604      	mov	r4, r0
9000844c:	096d      	lsrs	r5, r5, #5
9000844e:	b330      	cbz	r0, 9000849e <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
90008450:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
90008454:	f1bc 0f01 	cmp.w	ip, #1
90008458:	d02e      	beq.n	900084b8 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000845a:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000845e:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90008462:	45f4      	cmp	ip, lr
90008464:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
90008468:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000846c:	d119      	bne.n	900084a2 <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000846e:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
90008470:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
90008474:	9b04      	ldr	r3, [sp, #16]
90008476:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
90008478:	2304      	movs	r3, #4
9000847a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000847e:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008480:	f023 030f 	bic.w	r3, r3, #15
90008484:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
90008486:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008488:	f043 030e 	orr.w	r3, r3, #14
9000848c:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000848e:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
90008490:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
90008492:	f7ff fd37 	bl	90007f04 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
90008496:	f7ff fd73 	bl	90007f80 <JPEG_DMA_StartProcess>
9000849a:	b930      	cbnz	r0, 900084aa <HAL_JPEG_Decode_DMA+0x6e>
}
9000849c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000849e:	2001      	movs	r0, #1
}
900084a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
900084a2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
900084a4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
900084a8:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
900084aa:	2306      	movs	r3, #6
      return HAL_ERROR;
900084ac:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
900084ae:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
900084b2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
900084b6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
900084b8:	2002      	movs	r0, #2
}
900084ba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
900084bc:	2001      	movs	r0, #1
}
900084be:	4770      	bx	lr

900084c0 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900084c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900084c2:	f003 030c 	and.w	r3, r3, #12
900084c6:	2b0c      	cmp	r3, #12
900084c8:	d01a      	beq.n	90008500 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900084ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
900084cc:	f003 030c 	and.w	r3, r3, #12
900084d0:	2b08      	cmp	r3, #8
900084d2:	d001      	beq.n	900084d8 <HAL_JPEG_Pause+0x18>
}
900084d4:	2000      	movs	r0, #0
900084d6:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900084d8:	07ca      	lsls	r2, r1, #31
900084da:	d41f      	bmi.n	9000851c <HAL_JPEG_Pause+0x5c>
900084dc:	f06f 0228 	mvn.w	r2, #40	; 0x28
900084e0:	f04f 3cff 	mov.w	ip, #4294967295
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900084e4:	078b      	lsls	r3, r1, #30
900084e6:	d504      	bpl.n	900084f2 <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
900084e8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900084ea:	4694      	mov	ip, r2
900084ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900084f0:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900084f2:	6802      	ldr	r2, [r0, #0]
}
900084f4:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900084f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
900084f8:	ea03 030c 	and.w	r3, r3, ip
900084fc:	6313      	str	r3, [r2, #48]	; 0x30
}
900084fe:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008500:	07cb      	lsls	r3, r1, #31
90008502:	d503      	bpl.n	9000850c <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008504:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000850a:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000850c:	0789      	lsls	r1, r1, #30
9000850e:	d5e1      	bpl.n	900084d4 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90008510:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90008516:	6543      	str	r3, [r0, #84]	; 0x54
}
90008518:	2000      	movs	r0, #0
9000851a:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000851c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000851e:	f06f 022e 	mvn.w	r2, #46	; 0x2e
90008522:	f06f 0c06 	mvn.w	ip, #6
90008526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000852a:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000852c:	e7da      	b.n	900084e4 <HAL_JPEG_Pause+0x24>
9000852e:	bf00      	nop

90008530 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
90008530:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
90008532:	6282      	str	r2, [r0, #40]	; 0x28
}
90008534:	4770      	bx	lr
90008536:	bf00      	nop

90008538 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
90008538:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000853a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
9000853c:	4770      	bx	lr
9000853e:	bf00      	nop

90008540 <HAL_JPEG_EncodeCpltCallback>:
90008540:	4770      	bx	lr
90008542:	bf00      	nop

90008544 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008544:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
90008546:	2101      	movs	r1, #1
{
90008548:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000854a:	6803      	ldr	r3, [r0, #0]
9000854c:	681a      	ldr	r2, [r3, #0]
9000854e:	f022 0201 	bic.w	r2, r2, #1
90008552:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008556:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000855a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
9000855c:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008560:	6d03      	ldr	r3, [r0, #80]	; 0x50
90008562:	f043 0304 	orr.w	r3, r3, #4
90008566:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
90008568:	f7f9 f974 	bl	90001854 <HAL_JPEG_ErrorCallback>
}
9000856c:	bd08      	pop	{r3, pc}
9000856e:	bf00      	nop

90008570 <JPEG_MDMAInCpltCallback>:
{
90008570:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008572:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008574:	f248 0c0c 	movw	ip, #32780	; 0x800c
{
90008578:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000857a:	6821      	ldr	r1, [r4, #0]
9000857c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
9000857e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008582:	630a      	str	r2, [r1, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008584:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008586:	ea03 030c 	and.w	r3, r3, ip
9000858a:	2b0c      	cmp	r3, #12
9000858c:	d001      	beq.n	90008592 <JPEG_MDMAInCpltCallback+0x22>
}
9000858e:	b003      	add	sp, #12
90008590:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008592:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008594:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008596:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008598:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000859a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000859c:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
900085a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900085a2:	1a9b      	subs	r3, r3, r2
900085a4:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900085a6:	6a21      	ldr	r1, [r4, #32]
900085a8:	f7f9 f8ec 	bl	90001784 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
900085ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900085ae:	42ab      	cmp	r3, r5
900085b0:	d311      	bcc.n	900085d6 <JPEG_MDMAInCpltCallback+0x66>
      if (inXfrSize == 0UL)
900085b2:	b305      	cbz	r5, 900085f6 <JPEG_MDMAInCpltCallback+0x86>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900085b4:	fbb3 f2f5 	udiv	r2, r3, r5
900085b8:	fb05 3512 	mls	r5, r5, r2, r3
900085bc:	1b5b      	subs	r3, r3, r5
900085be:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900085c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
900085c2:	04d1      	lsls	r1, r2, #19
900085c4:	d400      	bmi.n	900085c8 <JPEG_MDMAInCpltCallback+0x58>
900085c6:	b963      	cbnz	r3, 900085e2 <JPEG_MDMAInCpltCallback+0x72>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900085c8:	6822      	ldr	r2, [r4, #0]
900085ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
900085cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
900085d0:	6313      	str	r3, [r2, #48]	; 0x30
}
900085d2:	b003      	add	sp, #12
900085d4:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
900085d6:	b1cb      	cbz	r3, 9000860c <JPEG_MDMAInCpltCallback+0x9c>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
900085d8:	0798      	lsls	r0, r3, #30
900085da:	d119      	bne.n	90008610 <JPEG_MDMAInCpltCallback+0xa0>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900085dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
900085de:	04d2      	lsls	r2, r2, #19
900085e0:	d4f2      	bmi.n	900085c8 <JPEG_MDMAInCpltCallback+0x58>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900085e2:	6822      	ldr	r2, [r4, #0]
900085e4:	2501      	movs	r5, #1
900085e6:	69a1      	ldr	r1, [r4, #24]
900085e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
900085ea:	3240      	adds	r2, #64	; 0x40
900085ec:	9500      	str	r5, [sp, #0]
900085ee:	f001 f8d1 	bl	90009794 <HAL_MDMA_Start_IT>
900085f2:	2800      	cmp	r0, #0
900085f4:	d0e8      	beq.n	900085c8 <JPEG_MDMAInCpltCallback+0x58>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900085f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
900085f8:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
900085fa:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900085fc:	f043 0304 	orr.w	r3, r3, #4
90008600:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008602:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
90008606:	f7f9 f925 	bl	90001854 <HAL_JPEG_ErrorCallback>
        return;
9000860a:	e7c0      	b.n	9000858e <JPEG_MDMAInCpltCallback+0x1e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000860c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000860e:	e7db      	b.n	900085c8 <JPEG_MDMAInCpltCallback+0x58>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90008610:	f023 0303 	bic.w	r3, r3, #3
90008614:	3304      	adds	r3, #4
90008616:	62a3      	str	r3, [r4, #40]	; 0x28
90008618:	e7d2      	b.n	900085c0 <JPEG_MDMAInCpltCallback+0x50>
9000861a:	bf00      	nop

9000861c <JPEG_DMA_PollResidualData>:
{
9000861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000861e:	6802      	ldr	r2, [r0, #0]
90008620:	2610      	movs	r6, #16
{
90008622:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008624:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008626:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000862a:	d11d      	bne.n	90008668 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000862c:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000862e:	06df      	lsls	r7, r3, #27
90008630:	d51a      	bpl.n	90008668 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
90008632:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008634:	69e7      	ldr	r7, [r4, #28]
90008636:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008638:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000863a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000863c:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000863e:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008640:	6a67      	ldr	r7, [r4, #36]	; 0x24
90008642:	69e2      	ldr	r2, [r4, #28]
90008644:	443a      	add	r2, r7
90008646:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008648:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000864a:	69e2      	ldr	r2, [r4, #28]
9000864c:	4402      	add	r2, r0
9000864e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008650:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008652:	69e2      	ldr	r2, [r4, #28]
90008654:	440a      	add	r2, r1
90008656:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
90008658:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000865a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000865c:	3304      	adds	r3, #4
9000865e:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008660:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008662:	4293      	cmp	r3, r2
90008664:	d021      	beq.n	900086aa <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008666:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90008668:	3e01      	subs	r6, #1
9000866a:	d1db      	bne.n	90008624 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000866c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000866e:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008670:	06d8      	lsls	r0, r3, #27
90008672:	d501      	bpl.n	90008678 <JPEG_DMA_PollResidualData+0x5c>
90008674:	048b      	lsls	r3, r1, #18
90008676:	d417      	bmi.n	900086a8 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008678:	6813      	ldr	r3, [r2, #0]
9000867a:	f023 0301 	bic.w	r3, r3, #1
9000867e:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90008680:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008682:	b9eb      	cbnz	r3, 900086c0 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90008684:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008686:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008688:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000868a:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000868c:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008690:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008694:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008698:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000869a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000869c:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000869e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900086a2:	d00a      	beq.n	900086ba <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
900086a4:	f7ff ff4c 	bl	90008540 <HAL_JPEG_EncodeCpltCallback>
}
900086a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900086aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
900086ac:	4620      	mov	r0, r4
900086ae:	69e1      	ldr	r1, [r4, #28]
900086b0:	f7f9 f888 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
900086b4:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
900086b6:	6265      	str	r5, [r4, #36]	; 0x24
900086b8:	e7d6      	b.n	90008668 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900086ba:	f7f9 f8cd 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
}
900086be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900086c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900086c2:	4620      	mov	r0, r4
900086c4:	69e1      	ldr	r1, [r4, #28]
900086c6:	f7f9 f87d 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900086ca:	2300      	movs	r3, #0
900086cc:	6263      	str	r3, [r4, #36]	; 0x24
900086ce:	e7d9      	b.n	90008684 <JPEG_DMA_PollResidualData+0x68>

900086d0 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
900086d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900086d2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
900086d6:	d028      	beq.n	9000872a <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900086d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900086da:	f003 030c 	and.w	r3, r3, #12
900086de:	2b0c      	cmp	r3, #12
{
900086e0:	b570      	push	{r4, r5, r6, lr}
900086e2:	4604      	mov	r4, r0
900086e4:	b082      	sub	sp, #8
900086e6:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900086e8:	d007      	beq.n	900086fa <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900086ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
900086ec:	f003 030c 	and.w	r3, r3, #12
900086f0:	2b08      	cmp	r3, #8
900086f2:	d037      	beq.n	90008764 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
900086f4:	2000      	movs	r0, #0
}
900086f6:	b002      	add	sp, #8
900086f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900086fa:	07c8      	lsls	r0, r1, #31
900086fc:	d417      	bmi.n	9000872e <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900086fe:	07a9      	lsls	r1, r5, #30
90008700:	d5f8      	bpl.n	900086f4 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008702:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008708:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000870a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000870c:	041a      	lsls	r2, r3, #16
9000870e:	d453      	bmi.n	900087b8 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008710:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008712:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
90008714:	2a00      	cmp	r2, #0
90008716:	d13e      	bne.n	90008796 <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008718:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000871a:	2206      	movs	r2, #6
          return HAL_ERROR;
9000871c:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000871e:	f043 0304 	orr.w	r3, r3, #4
90008722:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008724:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
90008728:	e7e5      	b.n	900086f6 <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000872a:	2001      	movs	r0, #1
}
9000872c:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000872e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008730:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008736:	6a81      	ldr	r1, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008738:	6562      	str	r2, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000873a:	2900      	cmp	r1, #0
9000873c:	d0ec      	beq.n	90008718 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000873e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008740:	fbb3 f2f1 	udiv	r2, r3, r1
90008744:	fb01 3112 	mls	r1, r1, r2, r3
90008748:	1a5b      	subs	r3, r3, r1
9000874a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000874c:	2b00      	cmp	r3, #0
9000874e:	d0d6      	beq.n	900086fe <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008750:	6822      	ldr	r2, [r4, #0]
90008752:	2601      	movs	r6, #1
90008754:	3240      	adds	r2, #64	; 0x40
90008756:	9600      	str	r6, [sp, #0]
90008758:	69a1      	ldr	r1, [r4, #24]
9000875a:	f001 f81b 	bl	90009794 <HAL_MDMA_Start_IT>
9000875e:	2800      	cmp	r0, #0
90008760:	d0cd      	beq.n	900086fe <HAL_JPEG_Resume+0x2e>
90008762:	e7d9      	b.n	90008718 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008764:	f011 0101 	ands.w	r1, r1, #1
90008768:	d013      	beq.n	90008792 <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000876a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000876c:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000876e:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90008774:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008776:	07ab      	lsls	r3, r5, #30
90008778:	d504      	bpl.n	90008784 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000877a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000877c:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000877e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008782:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008784:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90008786:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90008788:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000878a:	430b      	orrs	r3, r1
9000878c:	6313      	str	r3, [r2, #48]	; 0x30
}
9000878e:	b002      	add	sp, #8
90008790:	bd70      	pop	{r4, r5, r6, pc}
90008792:	2228      	movs	r2, #40	; 0x28
90008794:	e7ef      	b.n	90008776 <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90008796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008798:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000879a:	fbb3 f1f2 	udiv	r1, r3, r2
9000879e:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900087a2:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
900087a4:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900087a6:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
900087a8:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900087aa:	9500      	str	r5, [sp, #0]
900087ac:	69e2      	ldr	r2, [r4, #28]
900087ae:	f000 fff1 	bl	90009794 <HAL_MDMA_Start_IT>
900087b2:	2800      	cmp	r0, #0
900087b4:	d09e      	beq.n	900086f4 <HAL_JPEG_Resume+0x24>
900087b6:	e7af      	b.n	90008718 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
900087b8:	4620      	mov	r0, r4
900087ba:	f7ff ff2f 	bl	9000861c <JPEG_DMA_PollResidualData>
900087be:	e799      	b.n	900086f4 <HAL_JPEG_Resume+0x24>

900087c0 <JPEG_MDMAOutCpltCallback>:
{
900087c0:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900087c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
900087c4:	f248 0c0c 	movw	ip, #32780	; 0x800c
{
900087c8:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900087ca:	6823      	ldr	r3, [r4, #0]
900087cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
900087ce:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
900087d2:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
900087d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
900087d6:	ea02 020c 	and.w	r2, r2, ip
900087da:	2a0c      	cmp	r2, #12
900087dc:	d001      	beq.n	900087e2 <JPEG_MDMAOutCpltCallback+0x22>
}
900087de:	b003      	add	sp, #12
900087e0:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
900087e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900087e4:	0692      	lsls	r2, r2, #26
900087e6:	d505      	bpl.n	900087f4 <JPEG_MDMAOutCpltCallback+0x34>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900087e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900087ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900087ee:	631a      	str	r2, [r3, #48]	; 0x30
}
900087f0:	b003      	add	sp, #12
900087f2:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900087f4:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900087f6:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900087f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900087fa:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900087fc:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900087fe:	f3c2 0210 	ubfx	r2, r2, #0, #17
90008802:	1a9b      	subs	r3, r3, r2
90008804:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008806:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008808:	f7f8 ffdc 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000880c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000880e:	049b      	lsls	r3, r3, #18
90008810:	d501      	bpl.n	90008816 <JPEG_MDMAOutCpltCallback+0x56>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008812:	6823      	ldr	r3, [r4, #0]
90008814:	e7e8      	b.n	900087e8 <JPEG_MDMAOutCpltCallback+0x28>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008816:	6821      	ldr	r1, [r4, #0]
90008818:	2501      	movs	r5, #1
9000881a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000881c:	69e2      	ldr	r2, [r4, #28]
9000881e:	3144      	adds	r1, #68	; 0x44
90008820:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008822:	9500      	str	r5, [sp, #0]
90008824:	f000 ffb6 	bl	90009794 <HAL_MDMA_Start_IT>
90008828:	2800      	cmp	r0, #0
9000882a:	d0f2      	beq.n	90008812 <JPEG_MDMAOutCpltCallback+0x52>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000882c:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000882e:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
90008830:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008832:	f043 0304 	orr.w	r3, r3, #4
90008836:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008838:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000883c:	f7f9 f80a 	bl	90001854 <HAL_JPEG_ErrorCallback>
          return;
90008840:	e7cd      	b.n	900087de <JPEG_MDMAOutCpltCallback+0x1e>
90008842:	bf00      	nop

90008844 <JPEG_MDMAOutAbortCallback>:
{
90008844:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008846:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008848:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000884a:	041a      	lsls	r2, r3, #16
9000884c:	d400      	bmi.n	90008850 <JPEG_MDMAOutAbortCallback+0xc>
}
9000884e:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008850:	6b63      	ldr	r3, [r4, #52]	; 0x34
90008852:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90008854:	681b      	ldr	r3, [r3, #0]
90008856:	695b      	ldr	r3, [r3, #20]
90008858:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000885c:	1ad3      	subs	r3, r2, r3
9000885e:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008860:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008862:	429a      	cmp	r2, r3
90008864:	d025      	beq.n	900088b2 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90008866:	6822      	ldr	r2, [r4, #0]
90008868:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000886a:	f015 0510 	ands.w	r5, r5, #16
9000886e:	d118      	bne.n	900088a2 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90008870:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008872:	bb4b      	cbnz	r3, 900088c8 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008874:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90008876:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90008878:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000887a:	f023 0301 	bic.w	r3, r3, #1
9000887e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90008880:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008882:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008884:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008888:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000888c:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008890:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008892:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008894:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008896:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000889a:	d012      	beq.n	900088c2 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000889c:	f7ff fe50 	bl	90008540 <HAL_JPEG_EncodeCpltCallback>
}
900088a0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900088a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
900088a4:	049b      	lsls	r3, r3, #18
900088a6:	d4d2      	bmi.n	9000884e <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
900088a8:	4620      	mov	r0, r4
}
900088aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
900088ae:	f7ff beb5 	b.w	9000861c <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900088b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
900088b4:	4620      	mov	r0, r4
900088b6:	69e1      	ldr	r1, [r4, #28]
900088b8:	f7f8 ff84 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
900088bc:	2300      	movs	r3, #0
900088be:	6263      	str	r3, [r4, #36]	; 0x24
900088c0:	e7d1      	b.n	90008866 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900088c2:	f7f8 ffc9 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
}
900088c6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900088c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900088ca:	4620      	mov	r0, r4
900088cc:	69e1      	ldr	r1, [r4, #28]
900088ce:	f7f8 ff79 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900088d2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
900088d4:	6265      	str	r5, [r4, #36]	; 0x24
900088d6:	e7cd      	b.n	90008874 <JPEG_MDMAOutAbortCallback+0x30>

900088d8 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900088d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900088da:	f003 0303 	and.w	r3, r3, #3
900088de:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
900088e0:	6803      	ldr	r3, [r0, #0]
{
900088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900088e6:	4604      	mov	r4, r0
900088e8:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900088ea:	d01f      	beq.n	9000892c <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
900088ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
900088ee:	04d7      	lsls	r7, r2, #19
900088f0:	d407      	bmi.n	90008902 <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
900088f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900088f4:	0796      	lsls	r6, r2, #30
900088f6:	f100 811d 	bmi.w	90008b34 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
900088fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900088fc:	0750      	lsls	r0, r2, #29
900088fe:	f100 81b1 	bmi.w	90008c64 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008902:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008904:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90008908:	d107      	bne.n	9000891a <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
9000890a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000890c:	f016 0608 	ands.w	r6, r6, #8
90008910:	d14c      	bne.n	900089ac <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90008914:	06d2      	lsls	r2, r2, #27
90008916:	f100 81e3 	bmi.w	90008ce0 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000891a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000891c:	f002 0238 	and.w	r2, r2, #56	; 0x38
90008920:	2a20      	cmp	r2, #32
90008922:	d01a      	beq.n	9000895a <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
90008924:	2000      	movs	r0, #0
}
90008926:	b002      	add	sp, #8
90008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000892c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000892e:	0652      	lsls	r2, r2, #25
90008930:	d5dc      	bpl.n	900088ec <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90008932:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90008934:	9101      	str	r1, [sp, #4]
90008936:	f7ff fb71 	bl	9000801c <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000893a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000893c:	9901      	ldr	r1, [sp, #4]
9000893e:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90008940:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90008942:	f7f8 fecd 	bl	900016e0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90008946:	6823      	ldr	r3, [r4, #0]
90008948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000894a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000894e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90008950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90008956:	639a      	str	r2, [r3, #56]	; 0x38
90008958:	e7c8      	b.n	900088ec <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000895a:	681a      	ldr	r2, [r3, #0]
9000895c:	f022 0201 	bic.w	r2, r2, #1
90008960:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008962:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008964:	f002 020c 	and.w	r2, r2, #12
90008968:	2a08      	cmp	r2, #8
9000896a:	f000 81e6 	beq.w	90008d3a <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000896e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008970:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008974:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
90008976:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008978:	2b00      	cmp	r3, #0
9000897a:	f040 81e3 	bne.w	90008d44 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
9000897e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008980:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008982:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008984:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008986:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000898a:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000898c:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
90008990:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008994:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008996:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008998:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000899c:	f000 81c9 	beq.w	90008d32 <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
900089a0:	f7ff fdce 	bl	90008540 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
900089a4:	4628      	mov	r0, r5
}
900089a6:	b002      	add	sp, #8
900089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
900089ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
900089ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900089b0:	3220      	adds	r2, #32
900089b2:	4296      	cmp	r6, r2
900089b4:	f0c0 81e4 	bcc.w	90008d80 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
900089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900089ba:	69e1      	ldr	r1, [r4, #28]
900089bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
900089be:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900089c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
900089c2:	69e2      	ldr	r2, [r4, #28]
900089c4:	440a      	add	r2, r1
900089c6:	0a19      	lsrs	r1, r3, #8
900089c8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900089ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
900089cc:	69e2      	ldr	r2, [r4, #28]
900089ce:	440a      	add	r2, r1
900089d0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900089d2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900089d4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900089d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
900089d8:	69e2      	ldr	r2, [r4, #28]
900089da:	440a      	add	r2, r1
900089dc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900089de:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900089e0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900089e2:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900089e4:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
900089e6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900089e8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900089ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
900089ec:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900089ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
900089f0:	69e2      	ldr	r2, [r4, #28]
900089f2:	440a      	add	r2, r1
900089f4:	0a19      	lsrs	r1, r3, #8
900089f6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900089f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
900089fa:	69e2      	ldr	r2, [r4, #28]
900089fc:	440a      	add	r2, r1
900089fe:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a00:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a02:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a04:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a06:	69e2      	ldr	r2, [r4, #28]
90008a08:	440a      	add	r2, r1
90008a0a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a0e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008a10:	3304      	adds	r3, #4
90008a12:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a14:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008a18:	69e1      	ldr	r1, [r4, #28]
90008a1a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008a1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a1e:	69e2      	ldr	r2, [r4, #28]
90008a20:	440a      	add	r2, r1
90008a22:	0a19      	lsrs	r1, r3, #8
90008a24:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a26:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a28:	69e2      	ldr	r2, [r4, #28]
90008a2a:	440a      	add	r2, r1
90008a2c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a2e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a30:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a32:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a34:	69e2      	ldr	r2, [r4, #28]
90008a36:	440a      	add	r2, r1
90008a38:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a3c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008a3e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008a40:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008a42:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a44:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008a48:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008a4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a4c:	69e2      	ldr	r2, [r4, #28]
90008a4e:	440a      	add	r2, r1
90008a50:	0a19      	lsrs	r1, r3, #8
90008a52:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a56:	69e2      	ldr	r2, [r4, #28]
90008a58:	440a      	add	r2, r1
90008a5a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a5c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a5e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a60:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a62:	69e2      	ldr	r2, [r4, #28]
90008a64:	440a      	add	r2, r1
90008a66:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a6a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008a6c:	3304      	adds	r3, #4
90008a6e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a70:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008a72:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008a74:	69e1      	ldr	r1, [r4, #28]
90008a76:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008a78:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a7a:	69e2      	ldr	r2, [r4, #28]
90008a7c:	440a      	add	r2, r1
90008a7e:	0a19      	lsrs	r1, r3, #8
90008a80:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a82:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a84:	69e2      	ldr	r2, [r4, #28]
90008a86:	440a      	add	r2, r1
90008a88:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a8a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008a8c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008a90:	69e2      	ldr	r2, [r4, #28]
90008a92:	440a      	add	r2, r1
90008a94:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008a98:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008a9a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008a9c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008a9e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008aa0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008aa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008aa4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008aa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008aa8:	69e2      	ldr	r2, [r4, #28]
90008aaa:	440a      	add	r2, r1
90008aac:	0a19      	lsrs	r1, r3, #8
90008aae:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ab2:	69e2      	ldr	r2, [r4, #28]
90008ab4:	440a      	add	r2, r1
90008ab6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ab8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008aba:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008abc:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008abe:	69e2      	ldr	r2, [r4, #28]
90008ac0:	440a      	add	r2, r1
90008ac2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008ac6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008ac8:	3304      	adds	r3, #4
90008aca:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008acc:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ad0:	69e1      	ldr	r1, [r4, #28]
90008ad2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008ad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ad6:	69e2      	ldr	r2, [r4, #28]
90008ad8:	440a      	add	r2, r1
90008ada:	0a19      	lsrs	r1, r3, #8
90008adc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ade:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008ae0:	69e2      	ldr	r2, [r4, #28]
90008ae2:	440a      	add	r2, r1
90008ae4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ae6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ae8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008aea:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008aec:	69e2      	ldr	r2, [r4, #28]
90008aee:	440a      	add	r2, r1
90008af0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008af4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90008af6:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008af8:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90008afa:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008afc:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008afe:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b00:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008b04:	69e2      	ldr	r2, [r4, #28]
90008b06:	440a      	add	r2, r1
90008b08:	0a19      	lsrs	r1, r3, #8
90008b0a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008b0e:	69e2      	ldr	r2, [r4, #28]
90008b10:	440a      	add	r2, r1
90008b12:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008b14:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008b16:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008b18:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008b1a:	69e2      	ldr	r2, [r4, #28]
90008b1c:	440a      	add	r2, r1
90008b1e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008b22:	3304      	adds	r3, #4
90008b24:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008b28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90008b2a:	429a      	cmp	r2, r3
90008b2c:	f000 82c7 	beq.w	900090be <JPEG_Process+0x7e6>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008b30:	6823      	ldr	r3, [r4, #0]
90008b32:	e6f2      	b.n	9000891a <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90008b34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90008b36:	2a00      	cmp	r2, #0
90008b38:	f000 810c 	beq.w	90008d54 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90008b3c:	6a21      	ldr	r1, [r4, #32]
90008b3e:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90008b40:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90008b42:	f240 81a1 	bls.w	90008e88 <JPEG_Process+0x5b0>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90008b46:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90008b48:	6d61      	ldr	r1, [r4, #84]	; 0x54
90008b4a:	04cd      	lsls	r5, r1, #19
90008b4c:	f53f aed9 	bmi.w	90008902 <JPEG_Process+0x2a>
90008b50:	2a00      	cmp	r2, #0
90008b52:	f43f aed6 	beq.w	90008902 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90008b56:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90008b58:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90008b5c:	f240 821d 	bls.w	90008f9a <JPEG_Process+0x6c2>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008b60:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
90008b62:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008b64:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008b66:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008b68:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008b6a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008b6c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008b6e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008b70:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008b74:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008b76:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008b7a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008b7c:	6a21      	ldr	r1, [r4, #32]
90008b7e:	3104      	adds	r1, #4
90008b80:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008b82:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008b84:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008b86:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008b88:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008b8a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008b8c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008b8e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008b90:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008b94:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008b96:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008b9a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008b9c:	6a21      	ldr	r1, [r4, #32]
90008b9e:	3104      	adds	r1, #4
90008ba0:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008ba2:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008ba4:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008ba6:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008ba8:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008baa:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bac:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008bae:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008bb0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008bb4:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bb6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008bba:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008bbc:	6a21      	ldr	r1, [r4, #32]
90008bbe:	3104      	adds	r1, #4
90008bc0:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008bc2:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008bc4:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008bc6:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bc8:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008bca:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bcc:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008bce:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008bd0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008bd4:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bd6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008bda:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008bdc:	6a21      	ldr	r1, [r4, #32]
90008bde:	3104      	adds	r1, #4
90008be0:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008be2:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008be4:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008be6:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008be8:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008bea:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bec:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008bee:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008bf0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008bf4:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008bf6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008bfa:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008bfc:	6a21      	ldr	r1, [r4, #32]
90008bfe:	3104      	adds	r1, #4
90008c00:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008c02:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c04:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c06:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c08:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c0a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c0c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008c0e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c10:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008c14:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c16:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c1a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008c1c:	6a21      	ldr	r1, [r4, #32]
90008c1e:	3104      	adds	r1, #4
90008c20:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90008c22:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c24:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c26:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c28:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c2a:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c2c:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008c2e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c30:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90008c34:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c36:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c3a:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008c3c:	6a21      	ldr	r1, [r4, #32]
90008c3e:	3104      	adds	r1, #4
90008c40:	6221      	str	r1, [r4, #32]
          input_count = hjpeg->JpegInCount;
90008c42:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c44:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c46:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c48:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008c4a:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c4c:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008c4e:	7849      	ldrb	r1, [r1, #1]
90008c50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90008c54:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008c56:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c5a:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90008c5c:	6a22      	ldr	r2, [r4, #32]
90008c5e:	3204      	adds	r2, #4
90008c60:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
90008c62:	e64e      	b.n	90008902 <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90008c64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90008c66:	2a00      	cmp	r2, #0
90008c68:	d074      	beq.n	90008d54 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90008c6a:	6a21      	ldr	r1, [r4, #32]
90008c6c:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90008c6e:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90008c70:	f200 817e 	bhi.w	90008f70 <JPEG_Process+0x698>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90008c74:	428a      	cmp	r2, r1
90008c76:	f040 8109 	bne.w	90008e8c <JPEG_Process+0x5b4>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008c7a:	6a21      	ldr	r1, [r4, #32]
90008c7c:	4620      	mov	r0, r4
90008c7e:	f7f8 fd81 	bl	90001784 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90008c82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90008c84:	2a04      	cmp	r2, #4
90008c86:	d902      	bls.n	90008c8e <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90008c88:	f022 0203 	bic.w	r2, r2, #3
90008c8c:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90008c8e:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008c90:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90008c92:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90008c94:	6d61      	ldr	r1, [r4, #84]	; 0x54
90008c96:	04c9      	lsls	r1, r1, #19
90008c98:	f53f ae33 	bmi.w	90008902 <JPEG_Process+0x2a>
90008c9c:	2a00      	cmp	r2, #0
90008c9e:	f43f ae30 	beq.w	90008902 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90008ca2:	0891      	lsrs	r1, r2, #2
90008ca4:	f040 821c 	bne.w	900090e0 <JPEG_Process+0x808>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008ca8:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90008caa:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90008cac:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008cae:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90008cb0:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008cb4:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
90008cb6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90008cb8:	d010      	beq.n	90008cdc <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008cba:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90008cbc:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008cbe:	5c69      	ldrb	r1, [r5, r1]
90008cc0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
90008cc4:	6a21      	ldr	r1, [r4, #32]
90008cc6:	f101 0101 	add.w	r1, r1, #1
90008cca:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90008ccc:	d106      	bne.n	90008cdc <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008cce:	6a22      	ldr	r2, [r4, #32]
90008cd0:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
90008cd2:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90008cd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
90008cd8:	3201      	adds	r2, #1
90008cda:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90008cdc:	6418      	str	r0, [r3, #64]	; 0x40
90008cde:	e610      	b.n	90008902 <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90008ce0:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008ce2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90008ce4:	3204      	adds	r2, #4
90008ce6:	4295      	cmp	r5, r2
90008ce8:	f0c0 80d2 	bcc.w	90008e90 <JPEG_Process+0x5b8>
      dataword = hjpeg->Instance->DOR;
90008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008cee:	69e1      	ldr	r1, [r4, #28]
90008cf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008cf2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008cf6:	69e2      	ldr	r2, [r4, #28]
90008cf8:	440a      	add	r2, r1
90008cfa:	0a19      	lsrs	r1, r3, #8
90008cfc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008cfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008d00:	69e2      	ldr	r2, [r4, #28]
90008d02:	440a      	add	r2, r1
90008d04:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008d06:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008d08:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008d0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008d0c:	69e2      	ldr	r2, [r4, #28]
90008d0e:	440a      	add	r2, r1
90008d10:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008d14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
90008d16:	3304      	adds	r3, #4
90008d18:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008d1c:	429a      	cmp	r2, r3
90008d1e:	f47f af07 	bne.w	90008b30 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008d22:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d24:	4620      	mov	r0, r4
90008d26:	69e1      	ldr	r1, [r4, #28]
90008d28:	f7f8 fd4c 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90008d2c:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90008d2e:	6266      	str	r6, [r4, #36]	; 0x24
90008d30:	e5f3      	b.n	9000891a <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008d32:	f7f8 fd91 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
90008d36:	4628      	mov	r0, r5
90008d38:	e5f5      	b.n	90008926 <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008d3c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008d40:	631a      	str	r2, [r3, #48]	; 0x30
90008d42:	e614      	b.n	9000896e <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008d44:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d46:	4620      	mov	r0, r4
90008d48:	69e1      	ldr	r1, [r4, #28]
90008d4a:	f7f8 fd3b 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008d4e:	2300      	movs	r3, #0
90008d50:	6263      	str	r3, [r4, #36]	; 0x24
90008d52:	e614      	b.n	9000897e <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008d54:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008d56:	f002 020c 	and.w	r2, r2, #12
90008d5a:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008d5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008d5e:	f000 8117 	beq.w	90008f90 <JPEG_Process+0x6b8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008d62:	f002 020c 	and.w	r2, r2, #12
90008d66:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008d68:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008d6a:	f47f adca 	bne.w	90008902 <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008d6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90008d72:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90008d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008d76:	f022 0206 	bic.w	r2, r2, #6
90008d7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90008d7c:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008d7e:	e5c0      	b.n	90008902 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90008d80:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d82:	4296      	cmp	r6, r2
90008d84:	f67f adc9 	bls.w	9000891a <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90008d88:	6a60      	ldr	r0, [r4, #36]	; 0x24
90008d8a:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
90008d8c:	0880      	lsrs	r0, r0, #2
90008d8e:	d020      	beq.n	90008dd2 <JPEG_Process+0x4fa>
90008d90:	4629      	mov	r1, r5
90008d92:	e000      	b.n	90008d96 <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
90008d94:	6823      	ldr	r3, [r4, #0]
90008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90008d98:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008d9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008d9c:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
90008d9e:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008da0:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008da2:	6a66      	ldr	r6, [r4, #36]	; 0x24
90008da4:	69e2      	ldr	r2, [r4, #28]
90008da6:	4432      	add	r2, r6
90008da8:	ea4f 2613 	mov.w	r6, r3, lsr #8
90008dac:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008dae:	6a66      	ldr	r6, [r4, #36]	; 0x24
90008db0:	69e2      	ldr	r2, [r4, #28]
90008db2:	4432      	add	r2, r6
90008db4:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008db8:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008dbc:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008dbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
90008dc0:	69e2      	ldr	r2, [r4, #28]
90008dc2:	4432      	add	r2, r6
90008dc4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008dc8:	f103 0304 	add.w	r3, r3, #4
90008dcc:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90008dce:	d1e1      	bne.n	90008d94 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90008dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008dd4:	42b3      	cmp	r3, r6
90008dd6:	f000 817a 	beq.w	900090ce <JPEG_Process+0x7f6>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90008dda:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008dde:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90008de0:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90008de4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90008de6:	d00e      	beq.n	90008e06 <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90008de8:	f005 0303 	and.w	r3, r5, #3
90008dec:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008dee:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90008df0:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90008df2:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90008df4:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90008df6:	fa27 f303 	lsr.w	r3, r7, r3
90008dfa:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90008dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008dfe:	f103 0301 	add.w	r3, r3, #1
90008e02:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90008e04:	d1f0      	bne.n	90008de8 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
90008e06:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008e0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e0c:	69e1      	ldr	r1, [r4, #28]
90008e0e:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90008e10:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008e14:	f7f8 fcd6 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008e18:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90008e1a:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
90008e1c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008e1e:	f63f ae87 	bhi.w	90008b30 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e22:	00f3      	lsls	r3, r6, #3
90008e24:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e26:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90008e28:	2e03      	cmp	r6, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e2a:	fa27 f303 	lsr.w	r3, r7, r3
90008e2e:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90008e30:	f106 0301 	add.w	r3, r6, #1
        hjpeg->JpegOutCount++;
90008e34:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e36:	f102 0201 	add.w	r2, r2, #1
90008e3a:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008e3c:	f43f ae78 	beq.w	90008b30 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e40:	00db      	lsls	r3, r3, #3
90008e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e44:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90008e46:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e48:	fa27 f303 	lsr.w	r3, r7, r3
90008e4c:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90008e4e:	f106 0202 	add.w	r2, r6, #2
        hjpeg->JpegOutCount++;
90008e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008e54:	f103 0301 	add.w	r3, r3, #1
90008e58:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008e5a:	f43f ae69 	beq.w	90008b30 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e5e:	00d3      	lsls	r3, r2, #3
90008e60:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008e62:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90008e64:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e66:	fa27 f303 	lsr.w	r3, r7, r3
90008e6a:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
90008e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008e6e:	f103 0301 	add.w	r3, r3, #1
90008e72:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008e74:	f47f ae5c 	bne.w	90008b30 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008e7a:	0e3f      	lsrs	r7, r7, #24
90008e7c:	69e2      	ldr	r2, [r4, #28]
90008e7e:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
90008e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008e82:	3301      	adds	r3, #1
90008e84:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008e86:	e653      	b.n	90008b30 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90008e88:	428a      	cmp	r2, r1
90008e8a:	d073      	beq.n	90008f74 <JPEG_Process+0x69c>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90008e8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008e8e:	e538      	b.n	90008902 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90008e90:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008e92:	4295      	cmp	r5, r2
90008e94:	f67f ad41 	bls.w	9000891a <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90008e98:	6a60      	ldr	r0, [r4, #36]	; 0x24
90008e9a:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
90008e9c:	0880      	lsrs	r0, r0, #2
90008e9e:	d020      	beq.n	90008ee2 <JPEG_Process+0x60a>
90008ea0:	4631      	mov	r1, r6
90008ea2:	e000      	b.n	90008ea6 <JPEG_Process+0x5ce>
      dataword = hjpeg->Instance->DOR;
90008ea4:	6823      	ldr	r3, [r4, #0]
90008ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90008ea8:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008eaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008eac:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
90008eae:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90008eb0:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90008eb2:	6a65      	ldr	r5, [r4, #36]	; 0x24
90008eb4:	69e2      	ldr	r2, [r4, #28]
90008eb6:	442a      	add	r2, r5
90008eb8:	ea4f 2513 	mov.w	r5, r3, lsr #8
90008ebc:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ebe:	6a65      	ldr	r5, [r4, #36]	; 0x24
90008ec0:	69e2      	ldr	r2, [r4, #28]
90008ec2:	442a      	add	r2, r5
90008ec4:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ec8:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90008ecc:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90008ece:	6a65      	ldr	r5, [r4, #36]	; 0x24
90008ed0:	69e2      	ldr	r2, [r4, #28]
90008ed2:	442a      	add	r2, r5
90008ed4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90008ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008ed8:	f103 0304 	add.w	r3, r3, #4
90008edc:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90008ede:	d1e1      	bne.n	90008ea4 <JPEG_Process+0x5cc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90008ee0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90008ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008ee4:	429d      	cmp	r5, r3
90008ee6:	f000 80f2 	beq.w	900090ce <JPEG_Process+0x7f6>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90008eea:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90008eee:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90008ef0:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
90008ef4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90008ef6:	d00e      	beq.n	90008f16 <JPEG_Process+0x63e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90008ef8:	f006 0303 	and.w	r3, r6, #3
90008efc:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008efe:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90008f00:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90008f02:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90008f04:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90008f06:	fa27 f303 	lsr.w	r3, r7, r3
90008f0a:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90008f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008f0e:	f103 0301 	add.w	r3, r3, #1
90008f12:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90008f14:	d1f0      	bne.n	90008ef8 <JPEG_Process+0x620>
      nb_bytes = 4UL - nb_bytes;
90008f16:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008f1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f1c:	69e1      	ldr	r1, [r4, #28]
90008f1e:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90008f20:	eba8 0505 	sub.w	r5, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008f24:	f7f8 fc4e 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008f28:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90008f2a:	2d03      	cmp	r5, #3
      hjpeg->JpegOutCount = 0;
90008f2c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008f2e:	f63f adff 	bhi.w	90008b30 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008f32:	00eb      	lsls	r3, r5, #3
90008f34:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f36:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90008f38:	2d03      	cmp	r5, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008f3a:	fa27 f303 	lsr.w	r3, r7, r3
90008f3e:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90008f40:	f105 0301 	add.w	r3, r5, #1
        hjpeg->JpegOutCount++;
90008f44:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f46:	f102 0201 	add.w	r2, r2, #1
90008f4a:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008f4c:	f43f adf0 	beq.w	90008b30 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008f50:	00db      	lsls	r3, r3, #3
90008f52:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f54:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90008f56:	2d02      	cmp	r5, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90008f58:	fa27 f303 	lsr.w	r3, r7, r3
90008f5c:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90008f5e:	f105 0202 	add.w	r2, r5, #2
        hjpeg->JpegOutCount++;
90008f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008f64:	f103 0301 	add.w	r3, r3, #1
90008f68:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90008f6a:	f47f af78 	bne.w	90008e5e <JPEG_Process+0x586>
90008f6e:	e5df      	b.n	90008b30 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90008f70:	1a52      	subs	r2, r2, r1
90008f72:	e68f      	b.n	90008c94 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008f74:	6a21      	ldr	r1, [r4, #32]
90008f76:	4620      	mov	r0, r4
90008f78:	f7f8 fc04 	bl	90001784 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90008f7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90008f7e:	2a04      	cmp	r2, #4
90008f80:	d902      	bls.n	90008f88 <JPEG_Process+0x6b0>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90008f82:	f022 0203 	bic.w	r2, r2, #3
90008f86:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90008f88:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008f8a:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90008f8c:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
90008f8e:	e5db      	b.n	90008b48 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008f90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90008f94:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90008f96:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008f98:	e4b3      	b.n	90008902 <JPEG_Process+0x2a>
      if (nb_words > 0UL)
90008f9a:	2a03      	cmp	r2, #3
90008f9c:	f240 80a3 	bls.w	900090e6 <JPEG_Process+0x80e>
        for (index = 0; index < nb_words; index++)
90008fa0:	2900      	cmp	r1, #0
90008fa2:	f43f acae 	beq.w	90008902 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90008fa6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90008fa8:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008faa:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fac:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fb0:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fb2:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fb4:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fb6:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008fba:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fbc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90008fc0:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fc4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fc8:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90008fca:	6a20      	ldr	r0, [r4, #32]
90008fcc:	f100 0004 	add.w	r0, r0, #4
90008fd0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90008fd2:	f43f ac96 	beq.w	90008902 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90008fd6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90008fd8:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fda:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008fde:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fe0:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fe2:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008fe4:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90008fe8:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90008fea:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90008fee:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90008ff2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90008ff6:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90008ff8:	6a20      	ldr	r0, [r4, #32]
90008ffa:	f100 0004 	add.w	r0, r0, #4
90008ffe:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009000:	f43f ac7f 	beq.w	90008902 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009004:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009006:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009008:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000900c:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000900e:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009010:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009012:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009016:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009018:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000901c:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009020:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009024:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009026:	6a20      	ldr	r0, [r4, #32]
90009028:	f100 0004 	add.w	r0, r0, #4
9000902c:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000902e:	f43f ac68 	beq.w	90008902 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009032:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009034:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009036:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000903a:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000903c:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000903e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009040:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009044:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009046:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000904a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000904e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009052:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009054:	6a20      	ldr	r0, [r4, #32]
90009056:	f100 0004 	add.w	r0, r0, #4
9000905a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000905c:	f43f ac51 	beq.w	90008902 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009060:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009062:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009064:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009068:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000906a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000906c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000906e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009072:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009074:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90009078:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000907c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009080:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009082:	6a20      	ldr	r0, [r4, #32]
90009084:	f100 0004 	add.w	r0, r0, #4
90009088:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000908a:	f43f ac3a 	beq.w	90008902 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000908e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009090:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009092:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009096:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009098:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000909a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000909c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900090a0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900090a2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900090a6:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900090aa:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090ae:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900090b0:	6a20      	ldr	r0, [r4, #32]
900090b2:	f100 0004 	add.w	r0, r0, #4
900090b6:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900090b8:	f43f adc3 	beq.w	90008c42 <JPEG_Process+0x36a>
900090bc:	e421      	b.n	90008902 <JPEG_Process+0x2a>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090be:	6a62      	ldr	r2, [r4, #36]	; 0x24
900090c0:	4620      	mov	r0, r4
900090c2:	69e1      	ldr	r1, [r4, #28]
900090c4:	f7f8 fb7e 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900090c8:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
900090ca:	6265      	str	r5, [r4, #36]	; 0x24
900090cc:	e425      	b.n	9000891a <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
900090d0:	4620      	mov	r0, r4
900090d2:	69e1      	ldr	r1, [r4, #28]
900090d4:	f7f8 fb76 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900090d8:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900090da:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
900090dc:	6262      	str	r2, [r4, #36]	; 0x24
900090de:	e41c      	b.n	9000891a <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
900090e0:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900090e2:	69a0      	ldr	r0, [r4, #24]
900090e4:	e5ae      	b.n	90008c44 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900090e6:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900090e8:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
900090ea:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900090ec:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
900090ee:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900090f2:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
900090f4:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900090f6:	d010      	beq.n	9000911a <JPEG_Process+0x842>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900090f8:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
900090fa:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
900090fc:	5c28      	ldrb	r0, [r5, r0]
900090fe:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
90009102:	6a20      	ldr	r0, [r4, #32]
90009104:	f100 0001 	add.w	r0, r0, #1
90009108:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000910a:	d106      	bne.n	9000911a <JPEG_Process+0x842>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000910c:	6a22      	ldr	r2, [r4, #32]
9000910e:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
90009110:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009112:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
90009116:	3201      	adds	r2, #1
90009118:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000911a:	6419      	str	r1, [r3, #64]	; 0x40
9000911c:	f7ff bbf1 	b.w	90008902 <JPEG_Process+0x2a>

90009120 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
90009120:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
90009124:	3b03      	subs	r3, #3
90009126:	2b01      	cmp	r3, #1
90009128:	d900      	bls.n	9000912c <HAL_JPEG_IRQHandler+0xc>
9000912a:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000912c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000912e:	f003 030c 	and.w	r3, r3, #12
90009132:	2b08      	cmp	r3, #8
{
90009134:	b530      	push	{r4, r5, lr}
90009136:	4604      	mov	r4, r0
90009138:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000913a:	d006      	beq.n	9000914a <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000913c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000913e:	f003 030c 	and.w	r3, r3, #12
90009142:	2b0c      	cmp	r3, #12
90009144:	d006      	beq.n	90009154 <HAL_JPEG_IRQHandler+0x34>
}
90009146:	b003      	add	sp, #12
90009148:	bd30      	pop	{r4, r5, pc}
9000914a:	b003      	add	sp, #12
9000914c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
90009150:	f7ff bbc2 	b.w	900088d8 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009154:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009156:	f003 0303 	and.w	r3, r3, #3
9000915a:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000915c:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000915e:	d045      	beq.n	900091ec <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
90009160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009162:	0692      	lsls	r2, r2, #26
90009164:	d5ef      	bpl.n	90009146 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
90009166:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
90009168:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000916a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000916e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009170:	681a      	ldr	r2, [r3, #0]
90009172:	f022 0201 	bic.w	r2, r2, #1
90009176:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000917a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000917e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009182:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009186:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
90009188:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000918c:	2b02      	cmp	r3, #2
9000918e:	d052      	beq.n	90009236 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
90009190:	6b60      	ldr	r0, [r4, #52]	; 0x34
90009192:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90009196:	2b02      	cmp	r3, #2
90009198:	d03f      	beq.n	9000921a <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000919a:	6803      	ldr	r3, [r0, #0]
9000919c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000919e:	695b      	ldr	r3, [r3, #20]
900091a0:	f3c3 0310 	ubfx	r3, r3, #0, #17
900091a4:	1ad3      	subs	r3, r2, r3
900091a6:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900091a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900091aa:	429a      	cmp	r2, r3
900091ac:	d046      	beq.n	9000923c <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
900091ae:	6822      	ldr	r2, [r4, #0]
900091b0:	6b55      	ldr	r5, [r2, #52]	; 0x34
900091b2:	f015 0510 	ands.w	r5, r5, #16
900091b6:	d135      	bne.n	90009224 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
900091b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900091ba:	2b00      	cmp	r3, #0
900091bc:	d149      	bne.n	90009252 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900091be:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
900091c0:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
900091c2:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900091c4:	f023 0301 	bic.w	r3, r3, #1
900091c8:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
900091ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900091cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900091ce:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900091d2:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900091d6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900091da:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900091dc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900091de:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900091e0:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900091e4:	d032      	beq.n	9000924c <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
900091e6:	f7ff f9ab 	bl	90008540 <HAL_JPEG_EncodeCpltCallback>
900091ea:	e7ac      	b.n	90009146 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
900091ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900091ee:	0651      	lsls	r1, r2, #25
900091f0:	d5b6      	bpl.n	90009160 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
900091f2:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
900091f4:	9101      	str	r1, [sp, #4]
900091f6:	f7fe ff11 	bl	9000801c <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
900091fa:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900091fc:	9901      	ldr	r1, [sp, #4]
900091fe:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90009200:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009202:	f7f8 fa6d 	bl	900016e0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009206:	6823      	ldr	r3, [r4, #0]
90009208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000920a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000920e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009216:	639a      	str	r2, [r3, #56]	; 0x38
90009218:	e7a2      	b.n	90009160 <HAL_JPEG_IRQHandler+0x40>
}
9000921a:	b003      	add	sp, #12
9000921c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
90009220:	f000 bb34 	b.w	9000988c <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009224:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009226:	049b      	lsls	r3, r3, #18
90009228:	d48d      	bmi.n	90009146 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000922a:	4620      	mov	r0, r4
}
9000922c:	b003      	add	sp, #12
9000922e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009232:	f7ff b9f3 	b.w	9000861c <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
90009236:	f000 fb29 	bl	9000988c <HAL_MDMA_Abort_IT>
9000923a:	e7a9      	b.n	90009190 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000923c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000923e:	4620      	mov	r0, r4
90009240:	69e1      	ldr	r1, [r4, #28]
90009242:	f7f8 fabf 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009246:	2300      	movs	r3, #0
90009248:	6263      	str	r3, [r4, #36]	; 0x24
9000924a:	e7b0      	b.n	900091ae <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000924c:	f7f8 fb04 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
90009250:	e779      	b.n	90009146 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009252:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009254:	4620      	mov	r0, r4
90009256:	69e1      	ldr	r1, [r4, #28]
90009258:	f7f8 fab4 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000925c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000925e:	6265      	str	r5, [r4, #36]	; 0x24
90009260:	e7ad      	b.n	900091be <HAL_JPEG_IRQHandler+0x9e>
90009262:	bf00      	nop

90009264 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90009264:	2800      	cmp	r0, #0
90009266:	d067      	beq.n	90009338 <HAL_LTDC_Init+0xd4>
{
90009268:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000926a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000926e:	4604      	mov	r4, r0
90009270:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009274:	2b00      	cmp	r3, #0
90009276:	d05a      	beq.n	9000932e <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009278:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000927a:	2102      	movs	r1, #2
  tmp = (hltdc->Init.HorizontalSync << 16U);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000927c:	69e5      	ldr	r5, [r4, #28]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000927e:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009282:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009286:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009288:	4302      	orrs	r2, r0
9000928a:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000928c:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009290:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009292:	6920      	ldr	r0, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009294:	6199      	str	r1, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009296:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009298:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000929a:	4828      	ldr	r0, [pc, #160]	; (9000933c <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000929c:	430a      	orrs	r2, r1
9000929e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
900092a0:	689a      	ldr	r2, [r3, #8]
900092a2:	4002      	ands	r2, r0
900092a4:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
900092a6:	6962      	ldr	r2, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
900092a8:	6899      	ldr	r1, [r3, #8]
900092aa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
900092ae:	69a2      	ldr	r2, [r4, #24]
900092b0:	4311      	orrs	r1, r2
900092b2:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
900092b4:	68d9      	ldr	r1, [r3, #12]
900092b6:	4001      	ands	r1, r0
900092b8:	60d9      	str	r1, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900092ba:	68da      	ldr	r2, [r3, #12]
900092bc:	6a21      	ldr	r1, [r4, #32]
900092be:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900092c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900092c4:	430a      	orrs	r2, r1
900092c6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
900092c8:	691a      	ldr	r2, [r3, #16]
900092ca:	4002      	ands	r2, r0
900092cc:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900092ce:	6919      	ldr	r1, [r3, #16]
900092d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900092d2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
900092d6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900092d8:	4311      	orrs	r1, r2
900092da:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900092dc:	6959      	ldr	r1, [r3, #20]
900092de:	4008      	ands	r0, r1
900092e0:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900092e2:	695a      	ldr	r2, [r3, #20]
900092e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
900092e6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
900092ea:	430a      	orrs	r2, r1
900092ec:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900092ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900092f0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900092f4:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900092f8:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900092fc:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900092fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90009300:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90009304:	430a      	orrs	r2, r1
90009306:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000930a:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000930c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
90009310:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90009312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009314:	f042 0206 	orr.w	r2, r2, #6
90009318:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000931a:	699a      	ldr	r2, [r3, #24]
9000931c:	f042 0201 	orr.w	r2, r2, #1
90009320:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90009322:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90009324:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90009328:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000932c:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000932e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90009332:	f7fb f94f 	bl	900045d4 <HAL_LTDC_MspInit>
90009336:	e79f      	b.n	90009278 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
90009338:	2001      	movs	r0, #1
}
9000933a:	4770      	bx	lr
9000933c:	f000f800 	.word	0xf000f800

90009340 <HAL_LTDC_ErrorCallback>:
90009340:	4770      	bx	lr
90009342:	bf00      	nop

90009344 <HAL_LTDC_ReloadEventCallback>:
90009344:	4770      	bx	lr
90009346:	bf00      	nop

90009348 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90009348:	6803      	ldr	r3, [r0, #0]
{
9000934a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000934c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000934e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
90009350:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
90009352:	076a      	lsls	r2, r5, #29
90009354:	d501      	bpl.n	9000935a <HAL_LTDC_IRQHandler+0x12>
90009356:	0771      	lsls	r1, r6, #29
90009358:	d41d      	bmi.n	90009396 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000935a:	07aa      	lsls	r2, r5, #30
9000935c:	d501      	bpl.n	90009362 <HAL_LTDC_IRQHandler+0x1a>
9000935e:	07b3      	lsls	r3, r6, #30
90009360:	d42d      	bmi.n	900093be <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90009362:	07e8      	lsls	r0, r5, #31
90009364:	d501      	bpl.n	9000936a <HAL_LTDC_IRQHandler+0x22>
90009366:	07f1      	lsls	r1, r6, #31
90009368:	d440      	bmi.n	900093ec <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000936a:	072a      	lsls	r2, r5, #28
9000936c:	d501      	bpl.n	90009372 <HAL_LTDC_IRQHandler+0x2a>
9000936e:	0733      	lsls	r3, r6, #28
90009370:	d400      	bmi.n	90009374 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
90009372:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009374:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009376:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
90009378:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000937a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000937c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000937e:	f022 0208 	bic.w	r2, r2, #8
90009382:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009384:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
90009386:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
90009388:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000938c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
90009390:	f7ff ffd8 	bl	90009344 <HAL_LTDC_ReloadEventCallback>
}
90009394:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
90009396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009398:	f022 0204 	bic.w	r2, r2, #4
9000939c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000939e:	2204      	movs	r2, #4
900093a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
900093a2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
900093a6:	f043 0301 	orr.w	r3, r3, #1
900093aa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
900093ae:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
900093b0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
900093b4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
900093b8:	f7ff ffc2 	bl	90009340 <HAL_LTDC_ErrorCallback>
900093bc:	e7cd      	b.n	9000935a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
900093be:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
900093c0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
900093c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900093c4:	f022 0202 	bic.w	r2, r2, #2
900093c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
900093ca:	2202      	movs	r2, #2
900093cc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
900093ce:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
900093d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
900093d4:	f043 0302 	orr.w	r3, r3, #2
900093d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
900093dc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
900093de:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
900093e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
900093e6:	f7ff ffab 	bl	90009340 <HAL_LTDC_ErrorCallback>
900093ea:	e7ba      	b.n	90009362 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900093ec:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
900093ee:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900093f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900093f2:	f022 0201 	bic.w	r2, r2, #1
900093f6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
900093f8:	2201      	movs	r2, #1
900093fa:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
900093fc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
900093fe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009402:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
90009406:	f7f9 fa03 	bl	90002810 <HAL_LTDC_LineEventCallback>
9000940a:	e7ae      	b.n	9000936a <HAL_LTDC_IRQHandler+0x22>

9000940c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000940c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
90009410:	2b01      	cmp	r3, #1
90009412:	f000 80c6 	beq.w	900095a2 <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009416:	2302      	movs	r3, #2
{
90009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000941c:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009420:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009424:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
90009428:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000942a:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000942e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009430:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009434:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009436:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000943a:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000943c:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
90009440:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009442:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009446:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000944a:	f8df a164 	ldr.w	sl, [pc, #356]	; 900095b0 <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000944e:	f8dc 3004 	ldr.w	r3, [ip, #4]
90009452:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90009456:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000945a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000945e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009460:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009462:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90009468:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000946c:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000946e:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009470:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009474:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009476:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009478:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000947c:	f8d9 300c 	ldr.w	r3, [r9, #12]
90009480:	1c51      	adds	r1, r2, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90009482:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009486:	f3c3 430b 	ubfx	r3, r3, #16, #12
9000948a:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000948c:	68e9      	ldr	r1, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000948e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009492:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009496:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000949a:	f8dc 0008 	ldr.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000949e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900094a2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900094a6:	4419      	add	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900094a8:	68ab      	ldr	r3, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900094aa:	f8cc 0008 	str.w	r0, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900094ae:	f8d9 000c 	ldr.w	r0, [r9, #12]
900094b2:	3301      	adds	r3, #1
900094b4:	f3c0 000a 	ubfx	r0, r0, #0, #11
900094b8:	4403      	add	r3, r0
900094ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900094be:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900094c0:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900094c4:	f8dc 3010 	ldr.w	r3, [ip, #16]
900094c8:	f023 0307 	bic.w	r3, r3, #7
900094cc:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900094d0:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
900094d4:	f8dc 3018 	ldr.w	r3, [ip, #24]
900094d8:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900094da:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900094de:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
900094e2:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900094e6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
900094ea:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
900094ee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
900094f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
900094f6:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900094fa:	f8dc 3014 	ldr.w	r3, [ip, #20]
900094fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90009502:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90009506:	696b      	ldr	r3, [r5, #20]
90009508:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000950c:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009510:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009512:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009516:	6a28      	ldr	r0, [r5, #32]
90009518:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000951a:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000951e:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90009522:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
90009526:	2300      	movs	r3, #0
90009528:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000952c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000952e:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90009532:	bb59      	cbnz	r1, 9000958c <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
90009534:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009536:	1abf      	subs	r7, r7, r2
90009538:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000953a:	fb03 f707 	mul.w	r7, r3, r7
9000953e:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009542:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009544:	3707      	adds	r7, #7
90009546:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000954a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000954e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90009552:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009556:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000955a:	4b14      	ldr	r3, [pc, #80]	; (900095ac <HAL_LTDC_ConfigLayer+0x1a0>)
9000955c:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
90009560:	400b      	ands	r3, r1
90009562:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009566:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000956a:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000956c:	f859 3006 	ldr.w	r3, [r9, r6]
90009570:	4313      	orrs	r3, r2
90009572:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
90009576:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009578:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000957c:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000957e:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90009582:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
90009586:	b003      	add	sp, #12
90009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000958c:	2901      	cmp	r1, #1
9000958e:	d00a      	beq.n	900095a6 <HAL_LTDC_ConfigLayer+0x19a>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90009590:	1e8b      	subs	r3, r1, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90009592:	2b02      	cmp	r3, #2
90009594:	d903      	bls.n	9000959e <HAL_LTDC_ConfigLayer+0x192>
90009596:	2907      	cmp	r1, #7
90009598:	d001      	beq.n	9000959e <HAL_LTDC_ConfigLayer+0x192>
    tmp = 1U;
9000959a:	2301      	movs	r3, #1
9000959c:	e7cb      	b.n	90009536 <HAL_LTDC_ConfigLayer+0x12a>
    tmp = 2U;
9000959e:	2302      	movs	r3, #2
900095a0:	e7c9      	b.n	90009536 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
900095a2:	2002      	movs	r0, #2
}
900095a4:	4770      	bx	lr
    tmp = 3U;
900095a6:	2303      	movs	r3, #3
900095a8:	e7c5      	b.n	90009536 <HAL_LTDC_ConfigLayer+0x12a>
900095aa:	bf00      	nop
900095ac:	fffff800 	.word	0xfffff800
900095b0:	fffff8f8 	.word	0xfffff8f8

900095b4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
900095b4:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
900095b8:	2a01      	cmp	r2, #1
900095ba:	d019      	beq.n	900095f0 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900095bc:	6802      	ldr	r2, [r0, #0]
900095be:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
900095c0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
900095c2:	f04f 0c00 	mov.w	ip, #0
{
900095c6:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
900095c8:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900095cc:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
900095ce:	4c09      	ldr	r4, [pc, #36]	; (900095f4 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
900095d0:	f020 0001 	bic.w	r0, r0, #1
900095d4:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
900095d6:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
900095d8:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
900095da:	6b51      	ldr	r1, [r2, #52]	; 0x34
900095dc:	4301      	orrs	r1, r0
900095de:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
900095e0:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
900095e4:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
900095e6:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
900095ea:	f85d 4b04 	ldr.w	r4, [sp], #4
900095ee:	4770      	bx	lr
  __HAL_LOCK(hltdc);
900095f0:	2002      	movs	r0, #2
}
900095f2:	4770      	bx	lr
900095f4:	50001000 	.word	0x50001000

900095f8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
900095f8:	b538      	push	{r3, r4, r5, lr}
900095fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900095fc:	f7fd f974 	bl	900068e8 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90009600:	2c00      	cmp	r4, #0
90009602:	d05a      	beq.n	900096ba <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90009604:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009606:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
90009608:	2100      	movs	r1, #0
9000960a:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000960c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
90009610:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
90009614:	68da      	ldr	r2, [r3, #12]
90009616:	f022 0201 	bic.w	r2, r2, #1
9000961a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000961c:	e005      	b.n	9000962a <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000961e:	f7fd f963 	bl	900068e8 <HAL_GetTick>
90009622:	1b43      	subs	r3, r0, r5
90009624:	2b05      	cmp	r3, #5
90009626:	d841      	bhi.n	900096ac <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009628:	6823      	ldr	r3, [r4, #0]
9000962a:	68da      	ldr	r2, [r3, #12]
9000962c:	07d2      	lsls	r2, r2, #31
9000962e:	d4f6      	bmi.n	9000961e <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009630:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
90009634:	69e0      	ldr	r0, [r4, #28]
90009636:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009638:	68e1      	ldr	r1, [r4, #12]
9000963a:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000963c:	4302      	orrs	r2, r0
9000963e:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009640:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009642:	4302      	orrs	r2, r0
90009644:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009646:	4302      	orrs	r2, r0
90009648:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000964a:	4302      	orrs	r2, r0
9000964c:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000964e:	4302      	orrs	r2, r0
90009650:	68a0      	ldr	r0, [r4, #8]
90009652:	4302      	orrs	r2, r0
90009654:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90009656:	3801      	subs	r0, #1
90009658:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000965c:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000965e:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009660:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009664:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009666:	d103      	bne.n	90009670 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90009668:	691a      	ldr	r2, [r3, #16]
9000966a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000966e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90009670:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009672:	6b62      	ldr	r2, [r4, #52]	; 0x34
90009674:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
90009676:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009678:	db30      	blt.n	900096dc <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000967a:	b292      	uxth	r2, r2
9000967c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000967e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
90009680:	2a00      	cmp	r2, #0
90009682:	db1c      	blt.n	900096be <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009684:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009686:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000968a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000968e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009690:	d021      	beq.n	900096d6 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90009692:	b2c0      	uxtb	r0, r0
90009694:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90009696:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
90009698:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000969a:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000969c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000969e:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
900096a0:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
900096a2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
900096a6:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
900096aa:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900096ac:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
900096ae:	2303      	movs	r3, #3
      return HAL_ERROR;
900096b0:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
900096b2:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
900096b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
900096b8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900096ba:	2001      	movs	r0, #1
}
900096bc:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
900096be:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
900096c0:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
900096c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
900096c6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
900096ca:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
900096cc:	6a19      	ldr	r1, [r3, #32]
900096ce:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
900096d2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
900096d4:	d1dd      	bne.n	90009692 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
900096d6:	2200      	movs	r2, #0
900096d8:	629a      	str	r2, [r3, #40]	; 0x28
900096da:	e7dc      	b.n	90009696 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
900096dc:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
900096de:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
900096e0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
900096e4:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
900096e6:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
900096e8:	621a      	str	r2, [r3, #32]
900096ea:	e7c8      	b.n	9000967e <HAL_MDMA_Init+0x86>

900096ec <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
900096ec:	b1f8      	cbz	r0, 9000972e <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
900096ee:	6802      	ldr	r2, [r0, #0]
900096f0:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
900096f2:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
900096f4:	68d0      	ldr	r0, [r2, #12]
{
900096f6:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
900096f8:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
900096fc:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
900096fe:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
90009700:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
90009702:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
90009704:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
90009706:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
90009708:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000970a:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000970c:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000970e:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
90009710:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
90009712:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
90009714:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009716:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009718:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000971a:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000971e:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
90009722:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
90009726:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
90009728:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000972c:	4770      	bx	lr
    return HAL_ERROR;
9000972e:	2001      	movs	r0, #1
}
90009730:	4770      	bx	lr
90009732:	bf00      	nop

90009734 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
90009734:	b310      	cbz	r0, 9000977c <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
90009736:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
9000973a:	2b01      	cmp	r3, #1
9000973c:	d021      	beq.n	90009782 <HAL_MDMA_ConfigPostRequestMask+0x4e>
{
9000973e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
90009740:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009744:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
90009748:	45f4      	cmp	ip, lr
9000974a:	fa5f f38c 	uxtb.w	r3, ip
  __HAL_LOCK(hmdma);
9000974e:	f880 e03c 	strb.w	lr, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009752:	d005      	beq.n	90009760 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
90009754:	4673      	mov	r3, lr
  __HAL_UNLOCK(hmdma);
90009756:	2200      	movs	r2, #0
90009758:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
9000975c:	4618      	mov	r0, r3
9000975e:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
90009760:	6805      	ldr	r5, [r0, #0]
90009762:	692c      	ldr	r4, [r5, #16]
90009764:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
90009768:	d1f5      	bne.n	90009756 <HAL_MDMA_ConfigPostRequestMask+0x22>
      hmdma->Instance->CMAR = MaskAddress;
9000976a:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000976c:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000976e:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
90009770:	b951      	cbnz	r1, 90009788 <HAL_MDMA_ConfigPostRequestMask+0x54>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
90009776:	460b      	mov	r3, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009778:	612a      	str	r2, [r5, #16]
9000977a:	e7ec      	b.n	90009756 <HAL_MDMA_ConfigPostRequestMask+0x22>
    return HAL_ERROR;
9000977c:	2301      	movs	r3, #1
}
9000977e:	4618      	mov	r0, r3
90009780:	4770      	bx	lr
  __HAL_LOCK(hmdma);
90009782:	2302      	movs	r3, #2
}
90009784:	4618      	mov	r0, r3
90009786:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
90009788:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000978c:	4623      	mov	r3, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000978e:	612a      	str	r2, [r5, #16]
90009790:	e7e1      	b.n	90009756 <HAL_MDMA_ConfigPostRequestMask+0x22>
90009792:	bf00      	nop

90009794 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
90009794:	2800      	cmp	r0, #0
90009796:	d06e      	beq.n	90009876 <HAL_MDMA_Start_IT+0xe2>
90009798:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000979a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000979e:	2801      	cmp	r0, #1
900097a0:	d071      	beq.n	90009886 <HAL_MDMA_Start_IT+0xf2>
900097a2:	2001      	movs	r0, #1
900097a4:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
900097a8:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
900097ac:	2801      	cmp	r0, #1
900097ae:	d004      	beq.n	900097ba <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
900097b0:	2300      	movs	r3, #0
    return HAL_BUSY;
900097b2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
900097b4:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
900097b8:	4770      	bx	lr
{
900097ba:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
900097bc:	f3c3 0010 	ubfx	r0, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
900097c0:	2402      	movs	r4, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900097c2:	2300      	movs	r3, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
900097c4:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
900097c6:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
900097ca:	f1a4 1402 	sub.w	r4, r4, #131074	; 0x20002
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900097ce:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
900097d2:	f105 3eff 	add.w	lr, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
900097d6:	f8dc 3000 	ldr.w	r3, [ip]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
900097da:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
    __HAL_MDMA_DISABLE(hmdma);
900097de:	68dd      	ldr	r5, [r3, #12]
900097e0:	f025 0501 	bic.w	r5, r5, #1
900097e4:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
900097e6:	695d      	ldr	r5, [r3, #20]
900097e8:	ea04 0405 	and.w	r4, r4, r5
900097ec:	ea44 0400 	orr.w	r4, r4, r0
900097f0:	615c      	str	r4, [r3, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
900097f2:	6958      	ldr	r0, [r3, #20]
900097f4:	f3c0 0013 	ubfx	r0, r0, #0, #20
900097f8:	ea40 500e 	orr.w	r0, r0, lr, lsl #20
900097fc:	6158      	str	r0, [r3, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
900097fe:	f04f 001f 	mov.w	r0, #31
90009802:	6058      	str	r0, [r3, #4]
  hmdma->Instance->CDAR = DstAddress;
90009804:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CSAR = SrcAddress;
90009806:	6199      	str	r1, [r3, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
90009808:	6a99      	ldr	r1, [r3, #40]	; 0x28
9000980a:	bf0c      	ite	eq
9000980c:	f441 3180 	orreq.w	r1, r1, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
90009810:	f421 3180 	bicne.w	r1, r1, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
90009814:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
90009818:	6299      	str	r1, [r3, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000981a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(hmdma->XferBlockCpltCallback != NULL)
9000981c:	f8dc 104c 	ldr.w	r1, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
90009820:	bf0c      	ite	eq
90009822:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
90009826:	f422 3200 	bicne.w	r2, r2, #131072	; 0x20000
9000982a:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000982c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
90009830:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
90009832:	68da      	ldr	r2, [r3, #12]
90009834:	f042 0206 	orr.w	r2, r2, #6
90009838:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000983a:	b119      	cbz	r1, 90009844 <HAL_MDMA_Start_IT+0xb0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000983c:	68da      	ldr	r2, [r3, #12]
9000983e:	f042 0210 	orr.w	r2, r2, #16
90009842:	60da      	str	r2, [r3, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009844:	f8dc 2050 	ldr.w	r2, [ip, #80]	; 0x50
90009848:	b11a      	cbz	r2, 90009852 <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000984a:	68da      	ldr	r2, [r3, #12]
9000984c:	f042 0208 	orr.w	r2, r2, #8
90009850:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
90009852:	f8dc 2048 	ldr.w	r2, [ip, #72]	; 0x48
90009856:	b11a      	cbz	r2, 90009860 <HAL_MDMA_Start_IT+0xcc>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
90009858:	68da      	ldr	r2, [r3, #12]
9000985a:	f042 0220 	orr.w	r2, r2, #32
9000985e:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_ENABLE(hmdma);
90009860:	68da      	ldr	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009862:	f8dc 1004 	ldr.w	r1, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
90009866:	f042 0201 	orr.w	r2, r2, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000986a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000986e:	60da      	str	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009870:	d003      	beq.n	9000987a <HAL_MDMA_Start_IT+0xe6>
  return HAL_OK;
90009872:	2000      	movs	r0, #0
}
90009874:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
90009876:	2001      	movs	r0, #1
90009878:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000987a:	68da      	ldr	r2, [r3, #12]
  return HAL_OK;
9000987c:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000987e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90009882:	60da      	str	r2, [r3, #12]
}
90009884:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
90009886:	2002      	movs	r0, #2
}
90009888:	4770      	bx	lr
9000988a:	bf00      	nop

9000988c <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000988c:	4603      	mov	r3, r0
9000988e:	b188      	cbz	r0, 900098b4 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
90009890:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
90009894:	2a02      	cmp	r2, #2
90009896:	d003      	beq.n	900098a0 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
90009898:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000989a:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000989c:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000989e:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
900098a0:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
900098a2:	2104      	movs	r1, #4
  return HAL_OK;
900098a4:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
900098a6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
900098aa:	68d3      	ldr	r3, [r2, #12]
900098ac:	f023 0301 	bic.w	r3, r3, #1
900098b0:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
900098b2:	4770      	bx	lr
    return HAL_ERROR;
900098b4:	2001      	movs	r0, #1
}
900098b6:	4770      	bx	lr

900098b8 <HAL_MDMA_IRQHandler>:
{
900098b8:	b530      	push	{r4, r5, lr}
  if((MDMA->GISR0 & generalIntFlag) == 0U)
900098ba:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
{
900098be:	4604      	mov	r4, r0
900098c0:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
900098c2:	2500      	movs	r5, #0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
900098c4:	4a58      	ldr	r2, [pc, #352]	; (90009a28 <HAL_MDMA_IRQHandler+0x170>)
900098c6:	2101      	movs	r1, #1
  __IO uint32_t count = 0;
900098c8:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
900098ca:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
900098cc:	6823      	ldr	r3, [r4, #0]
900098ce:	441a      	add	r2, r3
900098d0:	f3c2 1284 	ubfx	r2, r2, #6, #5
900098d4:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
900098d8:	4202      	tst	r2, r0
900098da:	f000 80a2 	beq.w	90009a22 <HAL_MDMA_IRQHandler+0x16a>
  uint32_t timeout = SystemCoreClock / 9600U;
900098de:	4953      	ldr	r1, [pc, #332]	; (90009a2c <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
900098e0:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
900098e2:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
900098e4:	07d1      	lsls	r1, r2, #31
900098e6:	d529      	bpl.n	9000993c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
900098e8:	68da      	ldr	r2, [r3, #12]
900098ea:	0792      	lsls	r2, r2, #30
900098ec:	d526      	bpl.n	9000993c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
900098ee:	68da      	ldr	r2, [r3, #12]
900098f0:	f022 0202 	bic.w	r2, r2, #2
900098f4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
900098f6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
900098f8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
900098fa:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
900098fc:	bf54      	ite	pl
900098fe:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
90009902:	f041 0102 	orrmi.w	r1, r1, #2
90009906:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
90009908:	0591      	lsls	r1, r2, #22
9000990a:	d503      	bpl.n	90009914 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000990c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000990e:	f041 0104 	orr.w	r1, r1, #4
90009912:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
90009914:	05d0      	lsls	r0, r2, #23
90009916:	d503      	bpl.n	90009920 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
90009918:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000991a:	f041 0108 	orr.w	r1, r1, #8
9000991e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
90009920:	0551      	lsls	r1, r2, #21
90009922:	d503      	bpl.n	9000992c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
90009924:	6ea1      	ldr	r1, [r4, #104]	; 0x68
90009926:	f041 0110 	orr.w	r1, r1, #16
9000992a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000992c:	0510      	lsls	r0, r2, #20
9000992e:	d503      	bpl.n	90009938 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
90009930:	6ea2      	ldr	r2, [r4, #104]	; 0x68
90009932:	f042 0220 	orr.w	r2, r2, #32
90009936:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
90009938:	2201      	movs	r2, #1
9000993a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000993c:	681a      	ldr	r2, [r3, #0]
9000993e:	06d1      	lsls	r1, r2, #27
90009940:	d509      	bpl.n	90009956 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
90009942:	68da      	ldr	r2, [r3, #12]
90009944:	0692      	lsls	r2, r2, #26
90009946:	d506      	bpl.n	90009956 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
90009948:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000994a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000994c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000994e:	b112      	cbz	r2, 90009956 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
90009950:	4620      	mov	r0, r4
90009952:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
90009954:	6823      	ldr	r3, [r4, #0]
90009956:	681a      	ldr	r2, [r3, #0]
90009958:	0710      	lsls	r0, r2, #28
9000995a:	d509      	bpl.n	90009970 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000995c:	68da      	ldr	r2, [r3, #12]
9000995e:	06d1      	lsls	r1, r2, #27
90009960:	d506      	bpl.n	90009970 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
90009962:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
90009964:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
90009966:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
90009968:	b112      	cbz	r2, 90009970 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000996a:	4620      	mov	r0, r4
9000996c:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000996e:	6823      	ldr	r3, [r4, #0]
90009970:	681a      	ldr	r2, [r3, #0]
90009972:	0752      	lsls	r2, r2, #29
90009974:	d509      	bpl.n	9000998a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
90009976:	68da      	ldr	r2, [r3, #12]
90009978:	0710      	lsls	r0, r2, #28
9000997a:	d506      	bpl.n	9000998a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000997c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000997e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
90009980:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
90009982:	b112      	cbz	r2, 9000998a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
90009984:	4620      	mov	r0, r4
90009986:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
90009988:	6823      	ldr	r3, [r4, #0]
9000998a:	681a      	ldr	r2, [r3, #0]
9000998c:	0791      	lsls	r1, r2, #30
9000998e:	d516      	bpl.n	900099be <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
90009990:	68da      	ldr	r2, [r3, #12]
90009992:	0752      	lsls	r2, r2, #29
90009994:	d513      	bpl.n	900099be <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
90009996:	68da      	ldr	r2, [r3, #12]
90009998:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000999c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000999e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
900099a2:	2a04      	cmp	r2, #4
900099a4:	d034      	beq.n	90009a10 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
900099a6:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
900099a8:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
900099aa:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
900099ac:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
900099ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
900099b0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
900099b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
900099b8:	b10b      	cbz	r3, 900099be <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
900099ba:	4620      	mov	r0, r4
900099bc:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
900099be:	6ea3      	ldr	r3, [r4, #104]	; 0x68
900099c0:	2b00      	cmp	r3, #0
900099c2:	d02e      	beq.n	90009a22 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
900099c4:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
900099c6:	2304      	movs	r3, #4
  uint32_t timeout = SystemCoreClock / 9600U;
900099c8:	4a19      	ldr	r2, [pc, #100]	; (90009a30 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
900099ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
900099ce:	68cb      	ldr	r3, [r1, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
900099d0:	fba2 0205 	umull	r0, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
900099d4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
900099d8:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
900099da:	60cb      	str	r3, [r1, #12]
900099dc:	e002      	b.n	900099e4 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
900099de:	68cb      	ldr	r3, [r1, #12]
900099e0:	07d8      	lsls	r0, r3, #31
900099e2:	d504      	bpl.n	900099ee <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
900099e4:	9b01      	ldr	r3, [sp, #4]
900099e6:	3301      	adds	r3, #1
900099e8:	4293      	cmp	r3, r2
900099ea:	9301      	str	r3, [sp, #4]
900099ec:	d9f7      	bls.n	900099de <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
900099ee:	2300      	movs	r3, #0
900099f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
900099f4:	68cb      	ldr	r3, [r1, #12]
900099f6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
900099f8:	bf4c      	ite	mi
900099fa:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
900099fc:	2301      	movpl	r3, #1
900099fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
90009a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009a04:	b16b      	cbz	r3, 90009a22 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
90009a06:	4620      	mov	r0, r4
}
90009a08:	b003      	add	sp, #12
90009a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
90009a0e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
90009a10:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
90009a12:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
90009a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
90009a16:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
90009a1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
90009a1e:	2b00      	cmp	r3, #0
90009a20:	d1f1      	bne.n	90009a06 <HAL_MDMA_IRQHandler+0x14e>
}
90009a22:	b003      	add	sp, #12
90009a24:	bd30      	pop	{r4, r5, pc}
90009a26:	bf00      	nop
90009a28:	adffffc0 	.word	0xadffffc0
90009a2c:	24000054 	.word	0x24000054
90009a30:	1b4e81b5 	.word	0x1b4e81b5

90009a34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90009a34:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90009a36:	4c10      	ldr	r4, [pc, #64]	; (90009a78 <HAL_PWREx_ConfigSupply+0x44>)
90009a38:	68e3      	ldr	r3, [r4, #12]
90009a3a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90009a3e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90009a40:	d105      	bne.n	90009a4e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90009a42:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90009a46:	1a18      	subs	r0, r3, r0
90009a48:	bf18      	it	ne
90009a4a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
90009a4c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90009a4e:	f023 0307 	bic.w	r3, r3, #7
90009a52:	4318      	orrs	r0, r3
90009a54:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
90009a56:	f7fc ff47 	bl	900068e8 <HAL_GetTick>
90009a5a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90009a5c:	e005      	b.n	90009a6a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90009a5e:	f7fc ff43 	bl	900068e8 <HAL_GetTick>
90009a62:	1b40      	subs	r0, r0, r5
90009a64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90009a68:	d804      	bhi.n	90009a74 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90009a6a:	6863      	ldr	r3, [r4, #4]
90009a6c:	049b      	lsls	r3, r3, #18
90009a6e:	d5f6      	bpl.n	90009a5e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
90009a70:	2000      	movs	r0, #0
}
90009a72:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
90009a74:	2001      	movs	r0, #1
}
90009a76:	bd38      	pop	{r3, r4, r5, pc}
90009a78:	58024800 	.word	0x58024800

90009a7c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009a7c:	4b45      	ldr	r3, [pc, #276]	; (90009b94 <HAL_RCC_GetSysClockFreq.part.0+0x118>)
uint32_t HAL_RCC_GetSysClockFreq(void)
90009a7e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90009a82:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90009a84:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
90009a86:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90009a8c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
90009a90:	d038      	beq.n	90009b04 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009a92:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90009a96:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90009a9a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90009a9e:	fb05 f101 	mul.w	r1, r5, r1
90009aa2:	2a01      	cmp	r2, #1
90009aa4:	ee07 1a90 	vmov	s15, r1
90009aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
90009aac:	d002      	beq.n	90009ab4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
90009aae:	2a02      	cmp	r2, #2
90009ab0:	d04e      	beq.n	90009b50 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
90009ab2:	b34a      	cbz	r2, 90009b08 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009ab4:	ee07 0a90 	vmov	s15, r0
90009ab8:	eddf 6a37 	vldr	s13, [pc, #220]	; 90009b98 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
90009abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009ac2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
90009ac6:	ed9f 5a35 	vldr	s10, [pc, #212]	; 90009b9c <HAL_RCC_GetSysClockFreq.part.0+0x120>
90009aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009ace:	ee06 3a90 	vmov	s13, r3
90009ad2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
90009ad6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90009ada:	eee7 6a05 	vfma.f32	s13, s14, s10
90009ade:	ee76 6aa5 	vadd.f32	s13, s13, s11
90009ae2:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90009ae6:	4b2b      	ldr	r3, [pc, #172]	; (90009b94 <HAL_RCC_GetSysClockFreq.part.0+0x118>)
90009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009aea:	f3c3 2346 	ubfx	r3, r3, #9, #7
90009aee:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90009af0:	ee07 3a90 	vmov	s15, r3
90009af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
90009af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009b00:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
90009b04:	bc30      	pop	{r4, r5}
90009b06:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90009b08:	681a      	ldr	r2, [r3, #0]
90009b0a:	0692      	lsls	r2, r2, #26
90009b0c:	d527      	bpl.n	90009b5e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009b0e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009b10:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009b14:	4a22      	ldr	r2, [pc, #136]	; (90009ba0 <HAL_RCC_GetSysClockFreq.part.0+0x124>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009b16:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
90009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009b1c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009b24:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 90009b9c <HAL_RCC_GetSysClockFreq.part.0+0x120>
90009b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90009b2c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009b2e:	ee06 3a90 	vmov	s13, r3
90009b32:	ee06 2a10 	vmov	s12, r2
90009b36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90009b3a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
90009b3e:	eee7 6a05 	vfma.f32	s13, s14, s10
90009b42:	ee86 7a27 	vdiv.f32	s14, s12, s15
90009b46:	ee76 6aa5 	vadd.f32	s13, s13, s11
90009b4a:	ee66 6a87 	vmul.f32	s13, s13, s14
90009b4e:	e7ca      	b.n	90009ae6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009b50:	ee07 0a90 	vmov	s15, r0
90009b54:	eddf 6a13 	vldr	s13, [pc, #76]	; 90009ba4 <HAL_RCC_GetSysClockFreq.part.0+0x128>
90009b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009b5c:	e7b0      	b.n	90009ac0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90009b5e:	ee07 0a90 	vmov	s15, r0
90009b62:	ed9f 5a11 	vldr	s10, [pc, #68]	; 90009ba8 <HAL_RCC_GetSysClockFreq.part.0+0x12c>
90009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009b68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
90009b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009b70:	eddf 5a0a 	vldr	s11, [pc, #40]	; 90009b9c <HAL_RCC_GetSysClockFreq.part.0+0x120>
90009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
90009b78:	eec5 6a27 	vdiv.f32	s13, s10, s15
90009b7c:	ee07 3a90 	vmov	s15, r3
90009b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90009b84:	eee7 7a25 	vfma.f32	s15, s14, s11
90009b88:	ee77 7a86 	vadd.f32	s15, s15, s12
90009b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
90009b90:	e7a9      	b.n	90009ae6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
90009b92:	bf00      	nop
90009b94:	58024400 	.word	0x58024400
90009b98:	4a742400 	.word	0x4a742400
90009b9c:	39000000 	.word	0x39000000
90009ba0:	03d09000 	.word	0x03d09000
90009ba4:	4bbebc20 	.word	0x4bbebc20
90009ba8:	4c742400 	.word	0x4c742400

90009bac <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
90009bac:	2800      	cmp	r0, #0
90009bae:	f000 81e8 	beq.w	90009f82 <HAL_RCC_OscConfig+0x3d6>
{
90009bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90009bb4:	6803      	ldr	r3, [r0, #0]
90009bb6:	4604      	mov	r4, r0
90009bb8:	07d9      	lsls	r1, r3, #31
90009bba:	d52e      	bpl.n	90009c1a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009bbc:	49a4      	ldr	r1, [pc, #656]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009bbe:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90009bc0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009bc2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90009bc6:	2a10      	cmp	r2, #16
90009bc8:	f000 8107 	beq.w	90009dda <HAL_RCC_OscConfig+0x22e>
90009bcc:	2a18      	cmp	r2, #24
90009bce:	f000 80ff 	beq.w	90009dd0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90009bd2:	6863      	ldr	r3, [r4, #4]
90009bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009bd8:	f000 812a 	beq.w	90009e30 <HAL_RCC_OscConfig+0x284>
90009bdc:	2b00      	cmp	r3, #0
90009bde:	f000 8168 	beq.w	90009eb2 <HAL_RCC_OscConfig+0x306>
90009be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90009be6:	4b9a      	ldr	r3, [pc, #616]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009be8:	681a      	ldr	r2, [r3, #0]
90009bea:	f000 8289 	beq.w	9000a100 <HAL_RCC_OscConfig+0x554>
90009bee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009bf2:	601a      	str	r2, [r3, #0]
90009bf4:	681a      	ldr	r2, [r3, #0]
90009bf6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90009bfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90009bfc:	f7fc fe74 	bl	900068e8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009c00:	4e93      	ldr	r6, [pc, #588]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
90009c02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009c04:	e005      	b.n	90009c12 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90009c06:	f7fc fe6f 	bl	900068e8 <HAL_GetTick>
90009c0a:	1b40      	subs	r0, r0, r5
90009c0c:	2864      	cmp	r0, #100	; 0x64
90009c0e:	f200 814e 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90009c12:	6833      	ldr	r3, [r6, #0]
90009c14:	039b      	lsls	r3, r3, #14
90009c16:	d5f6      	bpl.n	90009c06 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90009c18:	6823      	ldr	r3, [r4, #0]
90009c1a:	079d      	lsls	r5, r3, #30
90009c1c:	f100 808a 	bmi.w	90009d34 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90009c20:	06d9      	lsls	r1, r3, #27
90009c22:	d533      	bpl.n	90009c8c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009c24:	4a8a      	ldr	r2, [pc, #552]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009c26:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90009c28:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90009c2e:	2b08      	cmp	r3, #8
90009c30:	f000 80e3 	beq.w	90009dfa <HAL_RCC_OscConfig+0x24e>
90009c34:	2b18      	cmp	r3, #24
90009c36:	f000 80db 	beq.w	90009df0 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90009c3a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
90009c3c:	4d84      	ldr	r5, [pc, #528]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90009c3e:	2b00      	cmp	r3, #0
90009c40:	f000 816f 	beq.w	90009f22 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
90009c44:	682b      	ldr	r3, [r5, #0]
90009c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90009c4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90009c4c:	f7fc fe4c 	bl	900068e8 <HAL_GetTick>
90009c50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90009c52:	e005      	b.n	90009c60 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90009c54:	f7fc fe48 	bl	900068e8 <HAL_GetTick>
90009c58:	1b80      	subs	r0, r0, r6
90009c5a:	2802      	cmp	r0, #2
90009c5c:	f200 8127 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90009c60:	682b      	ldr	r3, [r5, #0]
90009c62:	05db      	lsls	r3, r3, #23
90009c64:	d5f6      	bpl.n	90009c54 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90009c66:	f7fc fe45 	bl	900068f4 <HAL_GetREVID>
90009c6a:	f241 0303 	movw	r3, #4099	; 0x1003
90009c6e:	4298      	cmp	r0, r3
90009c70:	f200 826d 	bhi.w	9000a14e <HAL_RCC_OscConfig+0x5a2>
90009c74:	6a22      	ldr	r2, [r4, #32]
90009c76:	686b      	ldr	r3, [r5, #4]
90009c78:	2a20      	cmp	r2, #32
90009c7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90009c7e:	bf0c      	ite	eq
90009c80:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
90009c84:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
90009c88:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90009c8a:	6823      	ldr	r3, [r4, #0]
90009c8c:	071d      	lsls	r5, r3, #28
90009c8e:	d516      	bpl.n	90009cbe <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90009c90:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
90009c92:	4d6f      	ldr	r5, [pc, #444]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90009c94:	2b00      	cmp	r3, #0
90009c96:	f000 8122 	beq.w	90009ede <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
90009c9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90009c9c:	f043 0301 	orr.w	r3, r3, #1
90009ca0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90009ca2:	f7fc fe21 	bl	900068e8 <HAL_GetTick>
90009ca6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90009ca8:	e005      	b.n	90009cb6 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90009caa:	f7fc fe1d 	bl	900068e8 <HAL_GetTick>
90009cae:	1b80      	subs	r0, r0, r6
90009cb0:	2802      	cmp	r0, #2
90009cb2:	f200 80fc 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90009cb6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90009cb8:	0798      	lsls	r0, r3, #30
90009cba:	d5f6      	bpl.n	90009caa <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90009cbc:	6823      	ldr	r3, [r4, #0]
90009cbe:	069a      	lsls	r2, r3, #26
90009cc0:	d516      	bpl.n	90009cf0 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90009cc2:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
90009cc4:	4d62      	ldr	r5, [pc, #392]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
90009cc6:	2b00      	cmp	r3, #0
90009cc8:	f000 811a 	beq.w	90009f00 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
90009ccc:	682b      	ldr	r3, [r5, #0]
90009cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90009cd2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
90009cd4:	f7fc fe08 	bl	900068e8 <HAL_GetTick>
90009cd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90009cda:	e005      	b.n	90009ce8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90009cdc:	f7fc fe04 	bl	900068e8 <HAL_GetTick>
90009ce0:	1b80      	subs	r0, r0, r6
90009ce2:	2802      	cmp	r0, #2
90009ce4:	f200 80e3 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90009ce8:	682b      	ldr	r3, [r5, #0]
90009cea:	049f      	lsls	r7, r3, #18
90009cec:	d5f6      	bpl.n	90009cdc <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90009cee:	6823      	ldr	r3, [r4, #0]
90009cf0:	0759      	lsls	r1, r3, #29
90009cf2:	f100 80a3 	bmi.w	90009e3c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90009cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009cf8:	b1d0      	cbz	r0, 90009d30 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90009cfa:	4d55      	ldr	r5, [pc, #340]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009cfc:	692b      	ldr	r3, [r5, #16]
90009cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
90009d02:	2b18      	cmp	r3, #24
90009d04:	f000 81ae 	beq.w	9000a064 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
90009d08:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90009d0a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
90009d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90009d10:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90009d12:	f000 8142 	beq.w	90009f9a <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
90009d16:	f7fc fde7 	bl	900068e8 <HAL_GetTick>
90009d1a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90009d1c:	e005      	b.n	90009d2a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90009d1e:	f7fc fde3 	bl	900068e8 <HAL_GetTick>
90009d22:	1b00      	subs	r0, r0, r4
90009d24:	2802      	cmp	r0, #2
90009d26:	f200 80c2 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90009d2a:	682b      	ldr	r3, [r5, #0]
90009d2c:	019b      	lsls	r3, r3, #6
90009d2e:	d4f6      	bmi.n	90009d1e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
90009d30:	2000      	movs	r0, #0
}
90009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90009d34:	4a46      	ldr	r2, [pc, #280]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009d36:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90009d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90009d3a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
90009d3e:	d12d      	bne.n	90009d9c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90009d40:	4b43      	ldr	r3, [pc, #268]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009d42:	68e2      	ldr	r2, [r4, #12]
90009d44:	681b      	ldr	r3, [r3, #0]
90009d46:	0759      	lsls	r1, r3, #29
90009d48:	d501      	bpl.n	90009d4e <HAL_RCC_OscConfig+0x1a2>
90009d4a:	2a00      	cmp	r2, #0
90009d4c:	d04e      	beq.n	90009dec <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90009d4e:	4d40      	ldr	r5, [pc, #256]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009d50:	682b      	ldr	r3, [r5, #0]
90009d52:	f023 0319 	bic.w	r3, r3, #25
90009d56:	4313      	orrs	r3, r2
90009d58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90009d5a:	f7fc fdc5 	bl	900068e8 <HAL_GetTick>
90009d5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90009d60:	e005      	b.n	90009d6e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90009d62:	f7fc fdc1 	bl	900068e8 <HAL_GetTick>
90009d66:	1b80      	subs	r0, r0, r6
90009d68:	2802      	cmp	r0, #2
90009d6a:	f200 80a0 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90009d6e:	682b      	ldr	r3, [r5, #0]
90009d70:	075b      	lsls	r3, r3, #29
90009d72:	d5f6      	bpl.n	90009d62 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90009d74:	f7fc fdbe 	bl	900068f4 <HAL_GetREVID>
90009d78:	f241 0303 	movw	r3, #4099	; 0x1003
90009d7c:	4298      	cmp	r0, r3
90009d7e:	f200 80f7 	bhi.w	90009f70 <HAL_RCC_OscConfig+0x3c4>
90009d82:	6922      	ldr	r2, [r4, #16]
90009d84:	686b      	ldr	r3, [r5, #4]
90009d86:	2a40      	cmp	r2, #64	; 0x40
90009d88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90009d8c:	bf0c      	ite	eq
90009d8e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
90009d92:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
90009d96:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90009d98:	6823      	ldr	r3, [r4, #0]
90009d9a:	e741      	b.n	90009c20 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90009d9c:	2b18      	cmp	r3, #24
90009d9e:	f000 80e3 	beq.w	90009f68 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90009da2:	4d2b      	ldr	r5, [pc, #172]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90009da4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90009da6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90009da8:	2a00      	cmp	r2, #0
90009daa:	f000 80cc 	beq.w	90009f46 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90009dae:	f023 0319 	bic.w	r3, r3, #25
90009db2:	4313      	orrs	r3, r2
90009db4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90009db6:	f7fc fd97 	bl	900068e8 <HAL_GetTick>
90009dba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90009dbc:	e004      	b.n	90009dc8 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90009dbe:	f7fc fd93 	bl	900068e8 <HAL_GetTick>
90009dc2:	1b80      	subs	r0, r0, r6
90009dc4:	2802      	cmp	r0, #2
90009dc6:	d872      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90009dc8:	682b      	ldr	r3, [r5, #0]
90009dca:	075f      	lsls	r7, r3, #29
90009dcc:	d5f7      	bpl.n	90009dbe <HAL_RCC_OscConfig+0x212>
90009dce:	e7d1      	b.n	90009d74 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90009dd0:	f001 0103 	and.w	r1, r1, #3
90009dd4:	2902      	cmp	r1, #2
90009dd6:	f47f aefc 	bne.w	90009bd2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90009dda:	4a1d      	ldr	r2, [pc, #116]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009ddc:	6812      	ldr	r2, [r2, #0]
90009dde:	0392      	lsls	r2, r2, #14
90009de0:	f57f af1b 	bpl.w	90009c1a <HAL_RCC_OscConfig+0x6e>
90009de4:	6862      	ldr	r2, [r4, #4]
90009de6:	2a00      	cmp	r2, #0
90009de8:	f47f af17 	bne.w	90009c1a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
90009dec:	2001      	movs	r0, #1
}
90009dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90009df0:	f002 0203 	and.w	r2, r2, #3
90009df4:	2a01      	cmp	r2, #1
90009df6:	f47f af20 	bne.w	90009c3a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90009dfa:	4b15      	ldr	r3, [pc, #84]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009dfc:	681b      	ldr	r3, [r3, #0]
90009dfe:	05da      	lsls	r2, r3, #23
90009e00:	d502      	bpl.n	90009e08 <HAL_RCC_OscConfig+0x25c>
90009e02:	69e3      	ldr	r3, [r4, #28]
90009e04:	2b80      	cmp	r3, #128	; 0x80
90009e06:	d1f1      	bne.n	90009dec <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90009e08:	f7fc fd74 	bl	900068f4 <HAL_GetREVID>
90009e0c:	f241 0303 	movw	r3, #4099	; 0x1003
90009e10:	4298      	cmp	r0, r3
90009e12:	f200 80b8 	bhi.w	90009f86 <HAL_RCC_OscConfig+0x3da>
90009e16:	6a22      	ldr	r2, [r4, #32]
90009e18:	2a20      	cmp	r2, #32
90009e1a:	f000 81a7 	beq.w	9000a16c <HAL_RCC_OscConfig+0x5c0>
90009e1e:	490c      	ldr	r1, [pc, #48]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009e20:	684b      	ldr	r3, [r1, #4]
90009e22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90009e26:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
90009e2a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90009e2c:	6823      	ldr	r3, [r4, #0]
90009e2e:	e72d      	b.n	90009c8c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90009e30:	4a07      	ldr	r2, [pc, #28]	; (90009e50 <HAL_RCC_OscConfig+0x2a4>)
90009e32:	6813      	ldr	r3, [r2, #0]
90009e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90009e38:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90009e3a:	e6df      	b.n	90009bfc <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
90009e3c:	4d05      	ldr	r5, [pc, #20]	; (90009e54 <HAL_RCC_OscConfig+0x2a8>)
90009e3e:	682b      	ldr	r3, [r5, #0]
90009e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90009e44:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
90009e46:	f7fc fd4f 	bl	900068e8 <HAL_GetTick>
90009e4a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90009e4c:	e009      	b.n	90009e62 <HAL_RCC_OscConfig+0x2b6>
90009e4e:	bf00      	nop
90009e50:	58024400 	.word	0x58024400
90009e54:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90009e58:	f7fc fd46 	bl	900068e8 <HAL_GetTick>
90009e5c:	1b80      	subs	r0, r0, r6
90009e5e:	2864      	cmp	r0, #100	; 0x64
90009e60:	d825      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90009e62:	682b      	ldr	r3, [r5, #0]
90009e64:	05da      	lsls	r2, r3, #23
90009e66:	d5f7      	bpl.n	90009e58 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90009e68:	68a3      	ldr	r3, [r4, #8]
90009e6a:	2b01      	cmp	r3, #1
90009e6c:	f000 8178 	beq.w	9000a160 <HAL_RCC_OscConfig+0x5b4>
90009e70:	2b00      	cmp	r3, #0
90009e72:	f000 8153 	beq.w	9000a11c <HAL_RCC_OscConfig+0x570>
90009e76:	2b05      	cmp	r3, #5
90009e78:	4ba5      	ldr	r3, [pc, #660]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
90009e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90009e7c:	f000 817f 	beq.w	9000a17e <HAL_RCC_OscConfig+0x5d2>
90009e80:	f022 0201 	bic.w	r2, r2, #1
90009e84:	671a      	str	r2, [r3, #112]	; 0x70
90009e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90009e88:	f022 0204 	bic.w	r2, r2, #4
90009e8c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
90009e8e:	f7fc fd2b 	bl	900068e8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009e92:	4e9f      	ldr	r6, [pc, #636]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90009e94:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
90009e98:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009e9a:	e004      	b.n	90009ea6 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90009e9c:	f7fc fd24 	bl	900068e8 <HAL_GetTick>
90009ea0:	1b40      	subs	r0, r0, r5
90009ea2:	42b8      	cmp	r0, r7
90009ea4:	d803      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009ea6:	6f33      	ldr	r3, [r6, #112]	; 0x70
90009ea8:	079b      	lsls	r3, r3, #30
90009eaa:	d5f7      	bpl.n	90009e9c <HAL_RCC_OscConfig+0x2f0>
90009eac:	e723      	b.n	90009cf6 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
90009eae:	2003      	movs	r0, #3
}
90009eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90009eb2:	4d97      	ldr	r5, [pc, #604]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
90009eb4:	682b      	ldr	r3, [r5, #0]
90009eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90009eba:	602b      	str	r3, [r5, #0]
90009ebc:	682b      	ldr	r3, [r5, #0]
90009ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90009ec2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90009ec4:	f7fc fd10 	bl	900068e8 <HAL_GetTick>
90009ec8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90009eca:	e004      	b.n	90009ed6 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90009ecc:	f7fc fd0c 	bl	900068e8 <HAL_GetTick>
90009ed0:	1b80      	subs	r0, r0, r6
90009ed2:	2864      	cmp	r0, #100	; 0x64
90009ed4:	d8eb      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90009ed6:	682b      	ldr	r3, [r5, #0]
90009ed8:	039f      	lsls	r7, r3, #14
90009eda:	d4f7      	bmi.n	90009ecc <HAL_RCC_OscConfig+0x320>
90009edc:	e69c      	b.n	90009c18 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
90009ede:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90009ee0:	f023 0301 	bic.w	r3, r3, #1
90009ee4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90009ee6:	f7fc fcff 	bl	900068e8 <HAL_GetTick>
90009eea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90009eec:	e004      	b.n	90009ef8 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90009eee:	f7fc fcfb 	bl	900068e8 <HAL_GetTick>
90009ef2:	1b80      	subs	r0, r0, r6
90009ef4:	2802      	cmp	r0, #2
90009ef6:	d8da      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90009ef8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90009efa:	0799      	lsls	r1, r3, #30
90009efc:	d4f7      	bmi.n	90009eee <HAL_RCC_OscConfig+0x342>
90009efe:	e6dd      	b.n	90009cbc <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
90009f00:	682b      	ldr	r3, [r5, #0]
90009f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90009f06:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
90009f08:	f7fc fcee 	bl	900068e8 <HAL_GetTick>
90009f0c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90009f0e:	e004      	b.n	90009f1a <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90009f10:	f7fc fcea 	bl	900068e8 <HAL_GetTick>
90009f14:	1b80      	subs	r0, r0, r6
90009f16:	2802      	cmp	r0, #2
90009f18:	d8c9      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90009f1a:	682b      	ldr	r3, [r5, #0]
90009f1c:	0498      	lsls	r0, r3, #18
90009f1e:	d4f7      	bmi.n	90009f10 <HAL_RCC_OscConfig+0x364>
90009f20:	e6e5      	b.n	90009cee <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
90009f22:	682b      	ldr	r3, [r5, #0]
90009f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90009f28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90009f2a:	f7fc fcdd 	bl	900068e8 <HAL_GetTick>
90009f2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90009f30:	e004      	b.n	90009f3c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90009f32:	f7fc fcd9 	bl	900068e8 <HAL_GetTick>
90009f36:	1b80      	subs	r0, r0, r6
90009f38:	2802      	cmp	r0, #2
90009f3a:	d8b8      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90009f3c:	682b      	ldr	r3, [r5, #0]
90009f3e:	05df      	lsls	r7, r3, #23
90009f40:	d4f7      	bmi.n	90009f32 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90009f42:	6823      	ldr	r3, [r4, #0]
90009f44:	e6a2      	b.n	90009c8c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
90009f46:	f023 0301 	bic.w	r3, r3, #1
90009f4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90009f4c:	f7fc fccc 	bl	900068e8 <HAL_GetTick>
90009f50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90009f52:	e004      	b.n	90009f5e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90009f54:	f7fc fcc8 	bl	900068e8 <HAL_GetTick>
90009f58:	1b80      	subs	r0, r0, r6
90009f5a:	2802      	cmp	r0, #2
90009f5c:	d8a7      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90009f5e:	682b      	ldr	r3, [r5, #0]
90009f60:	0758      	lsls	r0, r3, #29
90009f62:	d4f7      	bmi.n	90009f54 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90009f64:	6823      	ldr	r3, [r4, #0]
90009f66:	e65b      	b.n	90009c20 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90009f68:	0790      	lsls	r0, r2, #30
90009f6a:	f47f af1a 	bne.w	90009da2 <HAL_RCC_OscConfig+0x1f6>
90009f6e:	e6e7      	b.n	90009d40 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90009f70:	686b      	ldr	r3, [r5, #4]
90009f72:	6922      	ldr	r2, [r4, #16]
90009f74:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
90009f78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90009f7c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90009f7e:	6823      	ldr	r3, [r4, #0]
90009f80:	e64e      	b.n	90009c20 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
90009f82:	2001      	movs	r0, #1
}
90009f84:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90009f86:	4a62      	ldr	r2, [pc, #392]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
90009f88:	6a21      	ldr	r1, [r4, #32]
90009f8a:	68d3      	ldr	r3, [r2, #12]
90009f8c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
90009f90:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
90009f94:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90009f96:	6823      	ldr	r3, [r4, #0]
90009f98:	e678      	b.n	90009c8c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
90009f9a:	f7fc fca5 	bl	900068e8 <HAL_GetTick>
90009f9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90009fa0:	e004      	b.n	90009fac <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90009fa2:	f7fc fca1 	bl	900068e8 <HAL_GetTick>
90009fa6:	1b80      	subs	r0, r0, r6
90009fa8:	2802      	cmp	r0, #2
90009faa:	d880      	bhi.n	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90009fac:	682b      	ldr	r3, [r5, #0]
90009fae:	0199      	lsls	r1, r3, #6
90009fb0:	d4f7      	bmi.n	90009fa2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90009fb2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
90009fb4:	4b57      	ldr	r3, [pc, #348]	; (9000a114 <HAL_RCC_OscConfig+0x568>)
90009fb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009fb8:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90009fba:	4957      	ldr	r1, [pc, #348]	; (9000a118 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90009fbc:	4e54      	ldr	r6, [pc, #336]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90009fbe:	4313      	orrs	r3, r2
90009fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009fc2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
90009fc6:	62ab      	str	r3, [r5, #40]	; 0x28
90009fc8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
90009fcc:	3b01      	subs	r3, #1
90009fce:	3a01      	subs	r2, #1
90009fd0:	025b      	lsls	r3, r3, #9
90009fd2:	0412      	lsls	r2, r2, #16
90009fd4:	b29b      	uxth	r3, r3
90009fd6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
90009fda:	4313      	orrs	r3, r2
90009fdc:	6b22      	ldr	r2, [r4, #48]	; 0x30
90009fde:	3a01      	subs	r2, #1
90009fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
90009fe4:	4313      	orrs	r3, r2
90009fe6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90009fe8:	3a01      	subs	r2, #1
90009fea:	0612      	lsls	r2, r2, #24
90009fec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
90009ff0:	4313      	orrs	r3, r2
90009ff2:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
90009ff4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
90009ff6:	f023 0301 	bic.w	r3, r3, #1
90009ffa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90009ffc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
90009ffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000a000:	4011      	ands	r1, r2
9000a002:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000a006:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000a008:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a00a:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000a00c:	f023 030c 	bic.w	r3, r3, #12
9000a010:	4313      	orrs	r3, r2
9000a012:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000a014:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a016:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000a018:	f023 0302 	bic.w	r3, r3, #2
9000a01c:	4313      	orrs	r3, r2
9000a01e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000a020:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a026:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a028:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a02a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000a02e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000a030:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000a036:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000a038:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a03a:	f043 0301 	orr.w	r3, r3, #1
9000a03e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000a040:	682b      	ldr	r3, [r5, #0]
9000a042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000a046:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a048:	f7fc fc4e 	bl	900068e8 <HAL_GetTick>
9000a04c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a04e:	e005      	b.n	9000a05c <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a050:	f7fc fc4a 	bl	900068e8 <HAL_GetTick>
9000a054:	1b00      	subs	r0, r0, r4
9000a056:	2802      	cmp	r0, #2
9000a058:	f63f af29 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a05c:	6833      	ldr	r3, [r6, #0]
9000a05e:	019a      	lsls	r2, r3, #6
9000a060:	d5f6      	bpl.n	9000a050 <HAL_RCC_OscConfig+0x4a4>
9000a062:	e665      	b.n	90009d30 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a064:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000a066:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000a068:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a06a:	f43f ae62 	beq.w	90009d32 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a06e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a072:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000a074:	428b      	cmp	r3, r1
9000a076:	f47f aeb9 	bne.w	90009dec <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a07a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a07e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a080:	429a      	cmp	r2, r3
9000a082:	f47f aeb3 	bne.w	90009dec <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a086:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a088:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000a08c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a08e:	429a      	cmp	r2, r3
9000a090:	f47f aeac 	bne.w	90009dec <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a094:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000a096:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000a09a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a09c:	429a      	cmp	r2, r3
9000a09e:	f47f aea5 	bne.w	90009dec <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a0a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000a0a4:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000a0a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a0aa:	429a      	cmp	r2, r3
9000a0ac:	f47f ae9e 	bne.w	90009dec <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000a0b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000a0b2:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000a0b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a0b8:	429e      	cmp	r6, r3
9000a0ba:	f47f ae97 	bne.w	90009dec <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a0be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a0c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a0c2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a0c6:	429a      	cmp	r2, r3
9000a0c8:	f43f ae32 	beq.w	90009d30 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000a0cc:	4a10      	ldr	r2, [pc, #64]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
9000a0ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a0d0:	f023 0301 	bic.w	r3, r3, #1
9000a0d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000a0d6:	f7fc fc07 	bl	900068e8 <HAL_GetTick>
9000a0da:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000a0dc:	f7fc fc04 	bl	900068e8 <HAL_GetTick>
9000a0e0:	42a8      	cmp	r0, r5
9000a0e2:	d0fb      	beq.n	9000a0dc <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a0e4:	4a0a      	ldr	r2, [pc, #40]	; (9000a110 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000a0e6:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a0e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000a0ea:	4b0b      	ldr	r3, [pc, #44]	; (9000a118 <HAL_RCC_OscConfig+0x56c>)
9000a0ec:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000a0ee:	4023      	ands	r3, r4
9000a0f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000a0f4:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000a0f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a0f8:	f043 0301 	orr.w	r3, r3, #1
9000a0fc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000a0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a100:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000a104:	601a      	str	r2, [r3, #0]
9000a106:	681a      	ldr	r2, [r3, #0]
9000a108:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000a10c:	601a      	str	r2, [r3, #0]
9000a10e:	e575      	b.n	90009bfc <HAL_RCC_OscConfig+0x50>
9000a110:	58024400 	.word	0x58024400
9000a114:	fffffc0c 	.word	0xfffffc0c
9000a118:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a11c:	4d1c      	ldr	r5, [pc, #112]	; (9000a190 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a11e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a122:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a124:	f023 0301 	bic.w	r3, r3, #1
9000a128:	672b      	str	r3, [r5, #112]	; 0x70
9000a12a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a12c:	f023 0304 	bic.w	r3, r3, #4
9000a130:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a132:	f7fc fbd9 	bl	900068e8 <HAL_GetTick>
9000a136:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a138:	e005      	b.n	9000a146 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a13a:	f7fc fbd5 	bl	900068e8 <HAL_GetTick>
9000a13e:	1b80      	subs	r0, r0, r6
9000a140:	42b8      	cmp	r0, r7
9000a142:	f63f aeb4 	bhi.w	90009eae <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a146:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a148:	0798      	lsls	r0, r3, #30
9000a14a:	d4f6      	bmi.n	9000a13a <HAL_RCC_OscConfig+0x58e>
9000a14c:	e5d3      	b.n	90009cf6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a14e:	68eb      	ldr	r3, [r5, #12]
9000a150:	6a22      	ldr	r2, [r4, #32]
9000a152:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a156:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a15a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a15c:	6823      	ldr	r3, [r4, #0]
9000a15e:	e595      	b.n	90009c8c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a160:	4a0b      	ldr	r2, [pc, #44]	; (9000a190 <HAL_RCC_OscConfig+0x5e4>)
9000a162:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000a164:	f043 0301 	orr.w	r3, r3, #1
9000a168:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000a16a:	e690      	b.n	90009e8e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a16c:	4a08      	ldr	r2, [pc, #32]	; (9000a190 <HAL_RCC_OscConfig+0x5e4>)
9000a16e:	6853      	ldr	r3, [r2, #4]
9000a170:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000a178:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a17a:	6823      	ldr	r3, [r4, #0]
9000a17c:	e586      	b.n	90009c8c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a17e:	f042 0204 	orr.w	r2, r2, #4
9000a182:	671a      	str	r2, [r3, #112]	; 0x70
9000a184:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a186:	f042 0201 	orr.w	r2, r2, #1
9000a18a:	671a      	str	r2, [r3, #112]	; 0x70
9000a18c:	e67f      	b.n	90009e8e <HAL_RCC_OscConfig+0x2e2>
9000a18e:	bf00      	nop
9000a190:	58024400 	.word	0x58024400

9000a194 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a194:	4a47      	ldr	r2, [pc, #284]	; (9000a2b4 <HAL_RCC_GetSysClockFreq+0x120>)
9000a196:	6913      	ldr	r3, [r2, #16]
9000a198:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a19c:	2b10      	cmp	r3, #16
9000a19e:	d004      	beq.n	9000a1aa <HAL_RCC_GetSysClockFreq+0x16>
9000a1a0:	2b18      	cmp	r3, #24
9000a1a2:	d00d      	beq.n	9000a1c0 <HAL_RCC_GetSysClockFreq+0x2c>
9000a1a4:	b11b      	cbz	r3, 9000a1ae <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000a1a6:	4844      	ldr	r0, [pc, #272]	; (9000a2b8 <HAL_RCC_GetSysClockFreq+0x124>)
9000a1a8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a1aa:	4844      	ldr	r0, [pc, #272]	; (9000a2bc <HAL_RCC_GetSysClockFreq+0x128>)
9000a1ac:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a1ae:	6813      	ldr	r3, [r2, #0]
9000a1b0:	0699      	lsls	r1, r3, #26
9000a1b2:	d54a      	bpl.n	9000a24a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a1b4:	6813      	ldr	r3, [r2, #0]
9000a1b6:	4842      	ldr	r0, [pc, #264]	; (9000a2c0 <HAL_RCC_GetSysClockFreq+0x12c>)
9000a1b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000a1bc:	40d8      	lsrs	r0, r3
9000a1be:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a1c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000a1c2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a1c4:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a1c6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000a1c8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a1cc:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a1ce:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000a1d2:	d038      	beq.n	9000a246 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a1d4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a1d8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a1dc:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a1e0:	fb05 f101 	mul.w	r1, r5, r1
9000a1e4:	2b01      	cmp	r3, #1
9000a1e6:	ee07 1a90 	vmov	s15, r1
9000a1ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000a1ee:	d002      	beq.n	9000a1f6 <HAL_RCC_GetSysClockFreq+0x62>
9000a1f0:	2b02      	cmp	r3, #2
9000a1f2:	d02c      	beq.n	9000a24e <HAL_RCC_GetSysClockFreq+0xba>
9000a1f4:	b393      	cbz	r3, 9000a25c <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a1f6:	ee07 0a90 	vmov	s15, r0
9000a1fa:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000a2c4 <HAL_RCC_GetSysClockFreq+0x130>
9000a1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a202:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000a204:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000a208:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000a2c8 <HAL_RCC_GetSysClockFreq+0x134>
9000a20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a210:	ee07 3a90 	vmov	s15, r3
9000a214:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000a218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a21c:	eee7 7a25 	vfma.f32	s15, s14, s11
9000a220:	ee77 7a86 	vadd.f32	s15, s15, s12
9000a224:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a228:	4b22      	ldr	r3, [pc, #136]	; (9000a2b4 <HAL_RCC_GetSysClockFreq+0x120>)
9000a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000a22c:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000a230:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a232:	ee07 3a90 	vmov	s15, r3
9000a236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000a23a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a242:	ee17 0a90 	vmov	r0, s15
}
9000a246:	bc30      	pop	{r4, r5}
9000a248:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a24a:	481d      	ldr	r0, [pc, #116]	; (9000a2c0 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000a24c:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a24e:	ee07 0a90 	vmov	s15, r0
9000a252:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000a2cc <HAL_RCC_GetSysClockFreq+0x138>
9000a256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a25a:	e7d2      	b.n	9000a202 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a25c:	6813      	ldr	r3, [r2, #0]
9000a25e:	069b      	lsls	r3, r3, #26
9000a260:	d520      	bpl.n	9000a2a4 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a262:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a264:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a268:	4915      	ldr	r1, [pc, #84]	; (9000a2c0 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a26a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000a26e:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a270:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a278:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000a2c8 <HAL_RCC_GetSysClockFreq+0x134>
9000a27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a280:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a282:	ee06 3a90 	vmov	s13, r3
9000a286:	ee06 1a10 	vmov	s12, r1
9000a28a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000a28e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000a292:	eee7 6a05 	vfma.f32	s13, s14, s10
9000a296:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000a29a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000a29e:	ee66 6a87 	vmul.f32	s13, s13, s14
9000a2a2:	e7c1      	b.n	9000a228 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a2a4:	ee07 0a90 	vmov	s15, r0
9000a2a8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000a2d0 <HAL_RCC_GetSysClockFreq+0x13c>
9000a2ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a2b0:	e7a7      	b.n	9000a202 <HAL_RCC_GetSysClockFreq+0x6e>
9000a2b2:	bf00      	nop
9000a2b4:	58024400 	.word	0x58024400
9000a2b8:	003d0900 	.word	0x003d0900
9000a2bc:	017d7840 	.word	0x017d7840
9000a2c0:	03d09000 	.word	0x03d09000
9000a2c4:	4a742400 	.word	0x4a742400
9000a2c8:	39000000 	.word	0x39000000
9000a2cc:	4bbebc20 	.word	0x4bbebc20
9000a2d0:	4c742400 	.word	0x4c742400

9000a2d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000a2d4:	2800      	cmp	r0, #0
9000a2d6:	f000 810c 	beq.w	9000a4f2 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000a2da:	4a8c      	ldr	r2, [pc, #560]	; (9000a50c <HAL_RCC_ClockConfig+0x238>)
9000a2dc:	6813      	ldr	r3, [r2, #0]
9000a2de:	f003 030f 	and.w	r3, r3, #15
9000a2e2:	428b      	cmp	r3, r1
{
9000a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a2e8:	4604      	mov	r4, r0
9000a2ea:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000a2ec:	d20c      	bcs.n	9000a308 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000a2ee:	6813      	ldr	r3, [r2, #0]
9000a2f0:	f023 030f 	bic.w	r3, r3, #15
9000a2f4:	430b      	orrs	r3, r1
9000a2f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000a2f8:	6813      	ldr	r3, [r2, #0]
9000a2fa:	f003 030f 	and.w	r3, r3, #15
9000a2fe:	428b      	cmp	r3, r1
9000a300:	d002      	beq.n	9000a308 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000a302:	2001      	movs	r0, #1
}
9000a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000a308:	6823      	ldr	r3, [r4, #0]
9000a30a:	075f      	lsls	r7, r3, #29
9000a30c:	d50b      	bpl.n	9000a326 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000a30e:	4980      	ldr	r1, [pc, #512]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a310:	6920      	ldr	r0, [r4, #16]
9000a312:	698a      	ldr	r2, [r1, #24]
9000a314:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a318:	4290      	cmp	r0, r2
9000a31a:	d904      	bls.n	9000a326 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000a31c:	698a      	ldr	r2, [r1, #24]
9000a31e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a322:	4302      	orrs	r2, r0
9000a324:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000a326:	071e      	lsls	r6, r3, #28
9000a328:	d50b      	bpl.n	9000a342 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000a32a:	4979      	ldr	r1, [pc, #484]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a32c:	6960      	ldr	r0, [r4, #20]
9000a32e:	69ca      	ldr	r2, [r1, #28]
9000a330:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a334:	4290      	cmp	r0, r2
9000a336:	d904      	bls.n	9000a342 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000a338:	69ca      	ldr	r2, [r1, #28]
9000a33a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a33e:	4302      	orrs	r2, r0
9000a340:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000a342:	06d8      	lsls	r0, r3, #27
9000a344:	d50b      	bpl.n	9000a35e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000a346:	4972      	ldr	r1, [pc, #456]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a348:	69a0      	ldr	r0, [r4, #24]
9000a34a:	69ca      	ldr	r2, [r1, #28]
9000a34c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a350:	4290      	cmp	r0, r2
9000a352:	d904      	bls.n	9000a35e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000a354:	69ca      	ldr	r2, [r1, #28]
9000a356:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000a35a:	4302      	orrs	r2, r0
9000a35c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000a35e:	0699      	lsls	r1, r3, #26
9000a360:	d50b      	bpl.n	9000a37a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000a362:	496b      	ldr	r1, [pc, #428]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a364:	69e0      	ldr	r0, [r4, #28]
9000a366:	6a0a      	ldr	r2, [r1, #32]
9000a368:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a36c:	4290      	cmp	r0, r2
9000a36e:	d904      	bls.n	9000a37a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000a370:	6a0a      	ldr	r2, [r1, #32]
9000a372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a376:	4302      	orrs	r2, r0
9000a378:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000a37a:	079a      	lsls	r2, r3, #30
9000a37c:	f140 80ab 	bpl.w	9000a4d6 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000a380:	4863      	ldr	r0, [pc, #396]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a382:	68e1      	ldr	r1, [r4, #12]
9000a384:	6982      	ldr	r2, [r0, #24]
9000a386:	f002 020f 	and.w	r2, r2, #15
9000a38a:	4291      	cmp	r1, r2
9000a38c:	d904      	bls.n	9000a398 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000a38e:	6982      	ldr	r2, [r0, #24]
9000a390:	f022 020f 	bic.w	r2, r2, #15
9000a394:	430a      	orrs	r2, r1
9000a396:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000a398:	07d8      	lsls	r0, r3, #31
9000a39a:	d530      	bpl.n	9000a3fe <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000a39c:	4a5c      	ldr	r2, [pc, #368]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a39e:	68a1      	ldr	r1, [r4, #8]
9000a3a0:	6993      	ldr	r3, [r2, #24]
9000a3a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000a3a6:	430b      	orrs	r3, r1
9000a3a8:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000a3aa:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a3ac:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000a3ae:	2902      	cmp	r1, #2
9000a3b0:	f000 80a1 	beq.w	9000a4f6 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000a3b4:	2903      	cmp	r1, #3
9000a3b6:	f000 8098 	beq.w	9000a4ea <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000a3ba:	2901      	cmp	r1, #1
9000a3bc:	f000 80a1 	beq.w	9000a502 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a3c0:	0758      	lsls	r0, r3, #29
9000a3c2:	d59e      	bpl.n	9000a302 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000a3c4:	4e52      	ldr	r6, [pc, #328]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000a3c6:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000a3ca:	6933      	ldr	r3, [r6, #16]
9000a3cc:	f023 0307 	bic.w	r3, r3, #7
9000a3d0:	430b      	orrs	r3, r1
9000a3d2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000a3d4:	f7fc fa88 	bl	900068e8 <HAL_GetTick>
9000a3d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000a3da:	e005      	b.n	9000a3e8 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000a3dc:	f7fc fa84 	bl	900068e8 <HAL_GetTick>
9000a3e0:	1bc0      	subs	r0, r0, r7
9000a3e2:	4540      	cmp	r0, r8
9000a3e4:	f200 808b 	bhi.w	9000a4fe <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000a3e8:	6933      	ldr	r3, [r6, #16]
9000a3ea:	6862      	ldr	r2, [r4, #4]
9000a3ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a3f0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000a3f4:	d1f2      	bne.n	9000a3dc <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000a3f6:	6823      	ldr	r3, [r4, #0]
9000a3f8:	0799      	lsls	r1, r3, #30
9000a3fa:	d506      	bpl.n	9000a40a <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000a3fc:	68e1      	ldr	r1, [r4, #12]
9000a3fe:	4844      	ldr	r0, [pc, #272]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a400:	6982      	ldr	r2, [r0, #24]
9000a402:	f002 020f 	and.w	r2, r2, #15
9000a406:	428a      	cmp	r2, r1
9000a408:	d869      	bhi.n	9000a4de <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000a40a:	4940      	ldr	r1, [pc, #256]	; (9000a50c <HAL_RCC_ClockConfig+0x238>)
9000a40c:	680a      	ldr	r2, [r1, #0]
9000a40e:	f002 020f 	and.w	r2, r2, #15
9000a412:	42aa      	cmp	r2, r5
9000a414:	d90a      	bls.n	9000a42c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000a416:	680a      	ldr	r2, [r1, #0]
9000a418:	f022 020f 	bic.w	r2, r2, #15
9000a41c:	432a      	orrs	r2, r5
9000a41e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000a420:	680a      	ldr	r2, [r1, #0]
9000a422:	f002 020f 	and.w	r2, r2, #15
9000a426:	42aa      	cmp	r2, r5
9000a428:	f47f af6b 	bne.w	9000a302 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000a42c:	075a      	lsls	r2, r3, #29
9000a42e:	d50b      	bpl.n	9000a448 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000a430:	4937      	ldr	r1, [pc, #220]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a432:	6920      	ldr	r0, [r4, #16]
9000a434:	698a      	ldr	r2, [r1, #24]
9000a436:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a43a:	4290      	cmp	r0, r2
9000a43c:	d204      	bcs.n	9000a448 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000a43e:	698a      	ldr	r2, [r1, #24]
9000a440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a444:	4302      	orrs	r2, r0
9000a446:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000a448:	071f      	lsls	r7, r3, #28
9000a44a:	d50b      	bpl.n	9000a464 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000a44c:	4930      	ldr	r1, [pc, #192]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a44e:	6960      	ldr	r0, [r4, #20]
9000a450:	69ca      	ldr	r2, [r1, #28]
9000a452:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a456:	4290      	cmp	r0, r2
9000a458:	d204      	bcs.n	9000a464 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000a45a:	69ca      	ldr	r2, [r1, #28]
9000a45c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000a460:	4302      	orrs	r2, r0
9000a462:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000a464:	06de      	lsls	r6, r3, #27
9000a466:	d50b      	bpl.n	9000a480 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000a468:	4929      	ldr	r1, [pc, #164]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a46a:	69a0      	ldr	r0, [r4, #24]
9000a46c:	69ca      	ldr	r2, [r1, #28]
9000a46e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a472:	4290      	cmp	r0, r2
9000a474:	d204      	bcs.n	9000a480 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000a476:	69ca      	ldr	r2, [r1, #28]
9000a478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000a47c:	4302      	orrs	r2, r0
9000a47e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000a480:	069d      	lsls	r5, r3, #26
9000a482:	d50b      	bpl.n	9000a49c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000a484:	4a22      	ldr	r2, [pc, #136]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a486:	69e1      	ldr	r1, [r4, #28]
9000a488:	6a13      	ldr	r3, [r2, #32]
9000a48a:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000a48e:	4299      	cmp	r1, r3
9000a490:	d204      	bcs.n	9000a49c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000a492:	6a13      	ldr	r3, [r2, #32]
9000a494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000a498:	430b      	orrs	r3, r1
9000a49a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a49c:	f7ff fe7a 	bl	9000a194 <HAL_RCC_GetSysClockFreq>
9000a4a0:	4a1b      	ldr	r2, [pc, #108]	; (9000a510 <HAL_RCC_ClockConfig+0x23c>)
9000a4a2:	4603      	mov	r3, r0
9000a4a4:	481b      	ldr	r0, [pc, #108]	; (9000a514 <HAL_RCC_ClockConfig+0x240>)
9000a4a6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a4a8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a4aa:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000a4ae:	4d1a      	ldr	r5, [pc, #104]	; (9000a518 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a4b0:	f002 020f 	and.w	r2, r2, #15
9000a4b4:	4c19      	ldr	r4, [pc, #100]	; (9000a51c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a4b6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a4b8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a4ba:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000a4be:	4818      	ldr	r0, [pc, #96]	; (9000a520 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a4c0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000a4c4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000a4c6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000a4c8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a4ca:	40d3      	lsrs	r3, r2
9000a4cc:	6023      	str	r3, [r4, #0]
}
9000a4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000a4d2:	f7fa b9e3 	b.w	9000489c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000a4d6:	07da      	lsls	r2, r3, #31
9000a4d8:	f53f af60 	bmi.w	9000a39c <HAL_RCC_ClockConfig+0xc8>
9000a4dc:	e795      	b.n	9000a40a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000a4de:	6982      	ldr	r2, [r0, #24]
9000a4e0:	f022 020f 	bic.w	r2, r2, #15
9000a4e4:	4311      	orrs	r1, r2
9000a4e6:	6181      	str	r1, [r0, #24]
9000a4e8:	e78f      	b.n	9000a40a <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a4ea:	019f      	lsls	r7, r3, #6
9000a4ec:	f53f af6a 	bmi.w	9000a3c4 <HAL_RCC_ClockConfig+0xf0>
9000a4f0:	e707      	b.n	9000a302 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000a4f2:	2001      	movs	r0, #1
}
9000a4f4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a4f6:	039b      	lsls	r3, r3, #14
9000a4f8:	f53f af64 	bmi.w	9000a3c4 <HAL_RCC_ClockConfig+0xf0>
9000a4fc:	e701      	b.n	9000a302 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000a4fe:	2003      	movs	r0, #3
9000a500:	e700      	b.n	9000a304 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a502:	05de      	lsls	r6, r3, #23
9000a504:	f53f af5e 	bmi.w	9000a3c4 <HAL_RCC_ClockConfig+0xf0>
9000a508:	e6fb      	b.n	9000a302 <HAL_RCC_ClockConfig+0x2e>
9000a50a:	bf00      	nop
9000a50c:	52002000 	.word	0x52002000
9000a510:	58024400 	.word	0x58024400
9000a514:	90024884 	.word	0x90024884
9000a518:	24000054 	.word	0x24000054
9000a51c:	24000058 	.word	0x24000058
9000a520:	24000060 	.word	0x24000060

9000a524 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a524:	4a1c      	ldr	r2, [pc, #112]	; (9000a598 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000a526:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a528:	6913      	ldr	r3, [r2, #16]
9000a52a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a52e:	2b10      	cmp	r3, #16
9000a530:	d021      	beq.n	9000a576 <HAL_RCC_GetPCLK1Freq+0x52>
9000a532:	2b18      	cmp	r3, #24
9000a534:	d02b      	beq.n	9000a58e <HAL_RCC_GetPCLK1Freq+0x6a>
9000a536:	b303      	cbz	r3, 9000a57a <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000a538:	4818      	ldr	r0, [pc, #96]	; (9000a59c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a53a:	4a17      	ldr	r2, [pc, #92]	; (9000a598 <HAL_RCC_GetPCLK1Freq+0x74>)
9000a53c:	4918      	ldr	r1, [pc, #96]	; (9000a5a0 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000a53e:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
9000a540:	4d18      	ldr	r5, [pc, #96]	; (9000a5a4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a542:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a546:	4c18      	ldr	r4, [pc, #96]	; (9000a5a8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a548:	5ccb      	ldrb	r3, [r1, r3]
9000a54a:	f003 031f 	and.w	r3, r3, #31
9000a54e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a552:	6990      	ldr	r0, [r2, #24]
9000a554:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000a558:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a55a:	5c08      	ldrb	r0, [r1, r0]
9000a55c:	f000 001f 	and.w	r0, r0, #31
9000a560:	40c3      	lsrs	r3, r0
9000a562:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000a564:	69d2      	ldr	r2, [r2, #28]
9000a566:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000a56a:	5c88      	ldrb	r0, [r1, r2]
9000a56c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000a570:	fa23 f000 	lsr.w	r0, r3, r0
9000a574:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a576:	480d      	ldr	r0, [pc, #52]	; (9000a5ac <HAL_RCC_GetPCLK1Freq+0x88>)
9000a578:	e7df      	b.n	9000a53a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a57a:	6813      	ldr	r3, [r2, #0]
9000a57c:	069b      	lsls	r3, r3, #26
9000a57e:	d509      	bpl.n	9000a594 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a580:	6810      	ldr	r0, [r2, #0]
9000a582:	4b0b      	ldr	r3, [pc, #44]	; (9000a5b0 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000a584:	f3c0 00c1 	ubfx	r0, r0, #3, #2
9000a588:	fa23 f000 	lsr.w	r0, r3, r0
9000a58c:	e7d5      	b.n	9000a53a <HAL_RCC_GetPCLK1Freq+0x16>
9000a58e:	f7ff fa75 	bl	90009a7c <HAL_RCC_GetSysClockFreq.part.0>
9000a592:	e7d2      	b.n	9000a53a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a594:	4806      	ldr	r0, [pc, #24]	; (9000a5b0 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000a596:	e7d0      	b.n	9000a53a <HAL_RCC_GetPCLK1Freq+0x16>
9000a598:	58024400 	.word	0x58024400
9000a59c:	003d0900 	.word	0x003d0900
9000a5a0:	90024884 	.word	0x90024884
9000a5a4:	24000054 	.word	0x24000054
9000a5a8:	24000058 	.word	0x24000058
9000a5ac:	017d7840 	.word	0x017d7840
9000a5b0:	03d09000 	.word	0x03d09000

9000a5b4 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a5b4:	4a1c      	ldr	r2, [pc, #112]	; (9000a628 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000a5b6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a5b8:	6913      	ldr	r3, [r2, #16]
9000a5ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a5be:	2b10      	cmp	r3, #16
9000a5c0:	d021      	beq.n	9000a606 <HAL_RCC_GetPCLK2Freq+0x52>
9000a5c2:	2b18      	cmp	r3, #24
9000a5c4:	d02b      	beq.n	9000a61e <HAL_RCC_GetPCLK2Freq+0x6a>
9000a5c6:	b303      	cbz	r3, 9000a60a <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000a5c8:	4818      	ldr	r0, [pc, #96]	; (9000a62c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a5ca:	4a17      	ldr	r2, [pc, #92]	; (9000a628 <HAL_RCC_GetPCLK2Freq+0x74>)
9000a5cc:	4918      	ldr	r1, [pc, #96]	; (9000a630 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000a5ce:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
9000a5d0:	4d18      	ldr	r5, [pc, #96]	; (9000a634 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a5d2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a5d6:	4c18      	ldr	r4, [pc, #96]	; (9000a638 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000a5d8:	5ccb      	ldrb	r3, [r1, r3]
9000a5da:	f003 031f 	and.w	r3, r3, #31
9000a5de:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a5e2:	6990      	ldr	r0, [r2, #24]
9000a5e4:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000a5e8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000a5ea:	5c08      	ldrb	r0, [r1, r0]
9000a5ec:	f000 001f 	and.w	r0, r0, #31
9000a5f0:	40c3      	lsrs	r3, r0
9000a5f2:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000a5f4:	69d2      	ldr	r2, [r2, #28]
9000a5f6:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000a5fa:	5c88      	ldrb	r0, [r1, r2]
9000a5fc:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000a600:	fa23 f000 	lsr.w	r0, r3, r0
9000a604:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a606:	480d      	ldr	r0, [pc, #52]	; (9000a63c <HAL_RCC_GetPCLK2Freq+0x88>)
9000a608:	e7df      	b.n	9000a5ca <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a60a:	6813      	ldr	r3, [r2, #0]
9000a60c:	069b      	lsls	r3, r3, #26
9000a60e:	d509      	bpl.n	9000a624 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a610:	6810      	ldr	r0, [r2, #0]
9000a612:	4b0b      	ldr	r3, [pc, #44]	; (9000a640 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000a614:	f3c0 00c1 	ubfx	r0, r0, #3, #2
9000a618:	fa23 f000 	lsr.w	r0, r3, r0
9000a61c:	e7d5      	b.n	9000a5ca <HAL_RCC_GetPCLK2Freq+0x16>
9000a61e:	f7ff fa2d 	bl	90009a7c <HAL_RCC_GetSysClockFreq.part.0>
9000a622:	e7d2      	b.n	9000a5ca <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000a624:	4806      	ldr	r0, [pc, #24]	; (9000a640 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000a626:	e7d0      	b.n	9000a5ca <HAL_RCC_GetPCLK2Freq+0x16>
9000a628:	58024400 	.word	0x58024400
9000a62c:	003d0900 	.word	0x003d0900
9000a630:	90024884 	.word	0x90024884
9000a634:	24000054 	.word	0x24000054
9000a638:	24000058 	.word	0x24000058
9000a63c:	017d7840 	.word	0x017d7840
9000a640:	03d09000 	.word	0x03d09000

9000a644 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000a644:	4b13      	ldr	r3, [pc, #76]	; (9000a694 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000a646:	223f      	movs	r2, #63	; 0x3f
9000a648:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000a64a:	691a      	ldr	r2, [r3, #16]
9000a64c:	f002 0207 	and.w	r2, r2, #7
9000a650:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000a652:	699a      	ldr	r2, [r3, #24]
9000a654:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000a658:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000a65a:	699a      	ldr	r2, [r3, #24]
9000a65c:	f002 020f 	and.w	r2, r2, #15
9000a660:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000a662:	699a      	ldr	r2, [r3, #24]
9000a664:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a668:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000a66a:	69da      	ldr	r2, [r3, #28]
9000a66c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000a670:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000a672:	69da      	ldr	r2, [r3, #28]
9000a674:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000a678:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000a67a:	6a1b      	ldr	r3, [r3, #32]
{
9000a67c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000a67e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000a682:	4c05      	ldr	r4, [pc, #20]	; (9000a698 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000a684:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000a686:	6823      	ldr	r3, [r4, #0]
}
9000a688:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000a68c:	f003 030f 	and.w	r3, r3, #15
9000a690:	600b      	str	r3, [r1, #0]
}
9000a692:	4770      	bx	lr
9000a694:	58024400 	.word	0x58024400
9000a698:	52002000 	.word	0x52002000

9000a69c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a69e:	4c3a      	ldr	r4, [pc, #232]	; (9000a788 <RCCEx_PLL2_Config+0xec>)
9000a6a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a6a2:	f003 0303 	and.w	r3, r3, #3
9000a6a6:	2b03      	cmp	r3, #3
9000a6a8:	d067      	beq.n	9000a77a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000a6aa:	6823      	ldr	r3, [r4, #0]
9000a6ac:	4606      	mov	r6, r0
9000a6ae:	460f      	mov	r7, r1
9000a6b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000a6b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a6b6:	f7fc f917 	bl	900068e8 <HAL_GetTick>
9000a6ba:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000a6bc:	e004      	b.n	9000a6c8 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000a6be:	f7fc f913 	bl	900068e8 <HAL_GetTick>
9000a6c2:	1b43      	subs	r3, r0, r5
9000a6c4:	2b02      	cmp	r3, #2
9000a6c6:	d856      	bhi.n	9000a776 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000a6c8:	6823      	ldr	r3, [r4, #0]
9000a6ca:	011a      	lsls	r2, r3, #4
9000a6cc:	d4f7      	bmi.n	9000a6be <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000a6ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a6d0:	6832      	ldr	r2, [r6, #0]
9000a6d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000a6d6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000a6da:	62a3      	str	r3, [r4, #40]	; 0x28
9000a6dc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000a6e0:	3b01      	subs	r3, #1
9000a6e2:	3a01      	subs	r2, #1
9000a6e4:	025b      	lsls	r3, r3, #9
9000a6e6:	0412      	lsls	r2, r2, #16
9000a6e8:	b29b      	uxth	r3, r3
9000a6ea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000a6ee:	4313      	orrs	r3, r2
9000a6f0:	6872      	ldr	r2, [r6, #4]
9000a6f2:	3a01      	subs	r2, #1
9000a6f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a6f8:	4313      	orrs	r3, r2
9000a6fa:	6932      	ldr	r2, [r6, #16]
9000a6fc:	3a01      	subs	r2, #1
9000a6fe:	0612      	lsls	r2, r2, #24
9000a700:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000a704:	4313      	orrs	r3, r2
9000a706:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000a708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a70a:	6972      	ldr	r2, [r6, #20]
9000a70c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000a710:	4313      	orrs	r3, r2
9000a712:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000a714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a716:	69b3      	ldr	r3, [r6, #24]
9000a718:	f022 0220 	bic.w	r2, r2, #32
9000a71c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000a71e:	4b1b      	ldr	r3, [pc, #108]	; (9000a78c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000a720:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000a722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a724:	f022 0210 	bic.w	r2, r2, #16
9000a728:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000a72a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000a72c:	69f2      	ldr	r2, [r6, #28]
9000a72e:	400b      	ands	r3, r1
9000a730:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000a734:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000a736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a738:	f043 0310 	orr.w	r3, r3, #16
9000a73c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000a73e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000a740:	b1ef      	cbz	r7, 9000a77e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000a742:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000a744:	bf0c      	ite	eq
9000a746:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000a74a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000a74e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000a750:	4c0d      	ldr	r4, [pc, #52]	; (9000a788 <RCCEx_PLL2_Config+0xec>)
9000a752:	6823      	ldr	r3, [r4, #0]
9000a754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000a758:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a75a:	f7fc f8c5 	bl	900068e8 <HAL_GetTick>
9000a75e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a760:	e004      	b.n	9000a76c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000a762:	f7fc f8c1 	bl	900068e8 <HAL_GetTick>
9000a766:	1b40      	subs	r0, r0, r5
9000a768:	2802      	cmp	r0, #2
9000a76a:	d804      	bhi.n	9000a776 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a76c:	6823      	ldr	r3, [r4, #0]
9000a76e:	011b      	lsls	r3, r3, #4
9000a770:	d5f7      	bpl.n	9000a762 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000a772:	2000      	movs	r0, #0
}
9000a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000a776:	2003      	movs	r0, #3
}
9000a778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000a77a:	2001      	movs	r0, #1
}
9000a77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000a77e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000a782:	62e3      	str	r3, [r4, #44]	; 0x2c
9000a784:	e7e4      	b.n	9000a750 <RCCEx_PLL2_Config+0xb4>
9000a786:	bf00      	nop
9000a788:	58024400 	.word	0x58024400
9000a78c:	ffff0007 	.word	0xffff0007

9000a790 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a792:	4c3a      	ldr	r4, [pc, #232]	; (9000a87c <RCCEx_PLL3_Config+0xec>)
9000a794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a796:	f003 0303 	and.w	r3, r3, #3
9000a79a:	2b03      	cmp	r3, #3
9000a79c:	d067      	beq.n	9000a86e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000a79e:	6823      	ldr	r3, [r4, #0]
9000a7a0:	4606      	mov	r6, r0
9000a7a2:	460f      	mov	r7, r1
9000a7a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000a7a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a7aa:	f7fc f89d 	bl	900068e8 <HAL_GetTick>
9000a7ae:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a7b0:	e004      	b.n	9000a7bc <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000a7b2:	f7fc f899 	bl	900068e8 <HAL_GetTick>
9000a7b6:	1b43      	subs	r3, r0, r5
9000a7b8:	2b02      	cmp	r3, #2
9000a7ba:	d856      	bhi.n	9000a86a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a7bc:	6823      	ldr	r3, [r4, #0]
9000a7be:	009a      	lsls	r2, r3, #2
9000a7c0:	d4f7      	bmi.n	9000a7b2 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000a7c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a7c4:	6832      	ldr	r2, [r6, #0]
9000a7c6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000a7ca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000a7ce:	62a3      	str	r3, [r4, #40]	; 0x28
9000a7d0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000a7d4:	3b01      	subs	r3, #1
9000a7d6:	3a01      	subs	r2, #1
9000a7d8:	025b      	lsls	r3, r3, #9
9000a7da:	0412      	lsls	r2, r2, #16
9000a7dc:	b29b      	uxth	r3, r3
9000a7de:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000a7e2:	4313      	orrs	r3, r2
9000a7e4:	6872      	ldr	r2, [r6, #4]
9000a7e6:	3a01      	subs	r2, #1
9000a7e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a7ec:	4313      	orrs	r3, r2
9000a7ee:	6932      	ldr	r2, [r6, #16]
9000a7f0:	3a01      	subs	r2, #1
9000a7f2:	0612      	lsls	r2, r2, #24
9000a7f4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000a7f8:	4313      	orrs	r3, r2
9000a7fa:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000a7fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a7fe:	6972      	ldr	r2, [r6, #20]
9000a800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000a804:	4313      	orrs	r3, r2
9000a806:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000a808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a80a:	69b3      	ldr	r3, [r6, #24]
9000a80c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000a810:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000a812:	4b1b      	ldr	r3, [pc, #108]	; (9000a880 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000a814:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000a816:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000a81c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000a81e:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000a820:	69f2      	ldr	r2, [r6, #28]
9000a822:	400b      	ands	r3, r1
9000a824:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000a828:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000a82a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a82c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000a830:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000a832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000a834:	b1ef      	cbz	r7, 9000a872 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000a836:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000a838:	bf0c      	ite	eq
9000a83a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000a83e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000a842:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000a844:	4c0d      	ldr	r4, [pc, #52]	; (9000a87c <RCCEx_PLL3_Config+0xec>)
9000a846:	6823      	ldr	r3, [r4, #0]
9000a848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000a84c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a84e:	f7fc f84b 	bl	900068e8 <HAL_GetTick>
9000a852:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a854:	e004      	b.n	9000a860 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000a856:	f7fc f847 	bl	900068e8 <HAL_GetTick>
9000a85a:	1b40      	subs	r0, r0, r5
9000a85c:	2802      	cmp	r0, #2
9000a85e:	d804      	bhi.n	9000a86a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a860:	6823      	ldr	r3, [r4, #0]
9000a862:	009b      	lsls	r3, r3, #2
9000a864:	d5f7      	bpl.n	9000a856 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000a866:	2000      	movs	r0, #0
}
9000a868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000a86a:	2003      	movs	r0, #3
}
9000a86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000a86e:	2001      	movs	r0, #1
}
9000a870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000a872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000a876:	62e3      	str	r3, [r4, #44]	; 0x2c
9000a878:	e7e4      	b.n	9000a844 <RCCEx_PLL3_Config+0xb4>
9000a87a:	bf00      	nop
9000a87c:	58024400 	.word	0x58024400
9000a880:	ffff0007 	.word	0xffff0007

9000a884 <HAL_RCCEx_PeriphCLKConfig>:
{
9000a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000a888:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000a88c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000a88e:	011d      	lsls	r5, r3, #4
9000a890:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000a894:	d523      	bpl.n	9000a8de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000a896:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000a898:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000a89c:	f000 854f 	beq.w	9000b33e <HAL_RCCEx_PeriphCLKConfig+0xaba>
9000a8a0:	d812      	bhi.n	9000a8c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000a8a2:	2900      	cmp	r1, #0
9000a8a4:	f000 85a5 	beq.w	9000b3f2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
9000a8a8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000a8ac:	f040 859e 	bne.w	9000b3ec <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000a8b0:	2102      	movs	r1, #2
9000a8b2:	3008      	adds	r0, #8
9000a8b4:	f7ff fef2 	bl	9000a69c <RCCEx_PLL2_Config>
9000a8b8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000a8ba:	2e00      	cmp	r6, #0
9000a8bc:	f040 851e 	bne.w	9000b2fc <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000a8c0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000a8c2:	e9d4 3200 	ldrd	r3, r2, [r4]
9000a8c6:	e003      	b.n	9000a8d0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000a8c8:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000a8cc:	f040 858e 	bne.w	9000b3ec <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000a8d0:	4dae      	ldr	r5, [pc, #696]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000a8d2:	2600      	movs	r6, #0
9000a8d4:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000a8d6:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000a8da:	4301      	orrs	r1, r0
9000a8dc:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000a8de:	05d8      	lsls	r0, r3, #23
9000a8e0:	d50a      	bpl.n	9000a8f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000a8e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000a8e4:	2904      	cmp	r1, #4
9000a8e6:	d806      	bhi.n	9000a8f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000a8e8:	e8df f011 	tbh	[pc, r1, lsl #1]
9000a8ec:	05390532 	.word	0x05390532
9000a8f0:	03100516 	.word	0x03100516
9000a8f4:	0310      	.short	0x0310
9000a8f6:	2601      	movs	r6, #1
9000a8f8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000a8fa:	0599      	lsls	r1, r3, #22
9000a8fc:	d51d      	bpl.n	9000a93a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000a8fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000a900:	2980      	cmp	r1, #128	; 0x80
9000a902:	f000 8512 	beq.w	9000b32a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
9000a906:	f200 80f9 	bhi.w	9000aafc <HAL_RCCEx_PeriphCLKConfig+0x278>
9000a90a:	2900      	cmp	r1, #0
9000a90c:	f000 8420 	beq.w	9000b150 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
9000a910:	2940      	cmp	r1, #64	; 0x40
9000a912:	f040 80fa 	bne.w	9000ab0a <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a916:	2100      	movs	r1, #0
9000a918:	f104 0008 	add.w	r0, r4, #8
9000a91c:	f7ff febe 	bl	9000a69c <RCCEx_PLL2_Config>
9000a920:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000a922:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000a926:	2d00      	cmp	r5, #0
9000a928:	f040 83eb 	bne.w	9000b102 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000a92c:	4f97      	ldr	r7, [pc, #604]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000a92e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000a930:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000a932:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000a936:	4301      	orrs	r1, r0
9000a938:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000a93a:	055f      	lsls	r7, r3, #21
9000a93c:	d521      	bpl.n	9000a982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000a93e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000a942:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000a946:	f000 851d 	beq.w	9000b384 <HAL_RCCEx_PeriphCLKConfig+0xb00>
9000a94a:	f200 80e1 	bhi.w	9000ab10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000a94e:	2900      	cmp	r1, #0
9000a950:	f000 8405 	beq.w	9000b15e <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000a954:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000a958:	f040 80e2 	bne.w	9000ab20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a95c:	2100      	movs	r1, #0
9000a95e:	f104 0008 	add.w	r0, r4, #8
9000a962:	f7ff fe9b 	bl	9000a69c <RCCEx_PLL2_Config>
9000a966:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000a968:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000a96c:	2d00      	cmp	r5, #0
9000a96e:	f040 83cf 	bne.w	9000b110 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000a972:	4f86      	ldr	r7, [pc, #536]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000a974:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000a978:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000a97a:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000a97e:	4301      	orrs	r1, r0
9000a980:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000a982:	0518      	lsls	r0, r3, #20
9000a984:	d521      	bpl.n	9000a9ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000a986:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000a98a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000a98e:	f000 84b9 	beq.w	9000b304 <HAL_RCCEx_PeriphCLKConfig+0xa80>
9000a992:	f200 80c8 	bhi.w	9000ab26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000a996:	2900      	cmp	r1, #0
9000a998:	f000 83d4 	beq.w	9000b144 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
9000a99c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000a9a0:	f040 80c9 	bne.w	9000ab36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000a9a4:	2100      	movs	r1, #0
9000a9a6:	f104 0008 	add.w	r0, r4, #8
9000a9aa:	f7ff fe77 	bl	9000a69c <RCCEx_PLL2_Config>
9000a9ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000a9b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000a9b4:	2d00      	cmp	r5, #0
9000a9b6:	f040 83a2 	bne.w	9000b0fe <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000a9ba:	4f74      	ldr	r7, [pc, #464]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000a9bc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000a9c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000a9c2:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000a9c6:	4301      	orrs	r1, r0
9000a9c8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000a9ca:	0199      	lsls	r1, r3, #6
9000a9cc:	d518      	bpl.n	9000aa00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000a9ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000a9d0:	2920      	cmp	r1, #32
9000a9d2:	f000 841e 	beq.w	9000b212 <HAL_RCCEx_PeriphCLKConfig+0x98e>
9000a9d6:	f200 80b1 	bhi.w	9000ab3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000a9da:	b139      	cbz	r1, 9000a9ec <HAL_RCCEx_PeriphCLKConfig+0x168>
9000a9dc:	2910      	cmp	r1, #16
9000a9de:	f040 80b0 	bne.w	9000ab42 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a9e2:	486a      	ldr	r0, [pc, #424]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000a9e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000a9e6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000a9ea:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000a9ec:	2d00      	cmp	r5, #0
9000a9ee:	f040 83d3 	bne.w	9000b198 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000a9f2:	4f66      	ldr	r7, [pc, #408]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000a9f4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000a9f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000a9f8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000a9fc:	4301      	orrs	r1, r0
9000a9fe:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000aa00:	04df      	lsls	r7, r3, #19
9000aa02:	d51f      	bpl.n	9000aa44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000aa04:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000aa06:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000aa0a:	f000 84b1 	beq.w	9000b370 <HAL_RCCEx_PeriphCLKConfig+0xaec>
9000aa0e:	f200 809b 	bhi.w	9000ab48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000aa12:	2900      	cmp	r1, #0
9000aa14:	f000 8390 	beq.w	9000b138 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
9000aa18:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000aa1c:	f040 809c 	bne.w	9000ab58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000aa20:	2100      	movs	r1, #0
9000aa22:	f104 0008 	add.w	r0, r4, #8
9000aa26:	f7ff fe39 	bl	9000a69c <RCCEx_PLL2_Config>
9000aa2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000aa2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aa30:	2d00      	cmp	r5, #0
9000aa32:	f040 8368 	bne.w	9000b106 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000aa36:	4f55      	ldr	r7, [pc, #340]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aa38:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000aa3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000aa3c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000aa40:	4301      	orrs	r1, r0
9000aa42:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000aa44:	0498      	lsls	r0, r3, #18
9000aa46:	d51d      	bpl.n	9000aa84 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000aa48:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000aa4a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000aa4e:	f000 840f 	beq.w	9000b270 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
9000aa52:	f200 8084 	bhi.w	9000ab5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000aa56:	b159      	cbz	r1, 9000aa70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000aa58:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000aa5c:	f040 8087 	bne.w	9000ab6e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000aa60:	2101      	movs	r1, #1
9000aa62:	f104 0008 	add.w	r0, r4, #8
9000aa66:	f7ff fe19 	bl	9000a69c <RCCEx_PLL2_Config>
9000aa6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000aa6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aa70:	2d00      	cmp	r5, #0
9000aa72:	f040 839b 	bne.w	9000b1ac <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000aa76:	4f45      	ldr	r7, [pc, #276]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aa78:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000aa7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000aa7c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000aa80:	4301      	orrs	r1, r0
9000aa82:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000aa84:	0459      	lsls	r1, r3, #17
9000aa86:	d51d      	bpl.n	9000aac4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000aa88:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000aa8c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000aa90:	f000 83fa 	beq.w	9000b288 <HAL_RCCEx_PeriphCLKConfig+0xa04>
9000aa94:	d86e      	bhi.n	9000ab74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000aa96:	b151      	cbz	r1, 9000aaae <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000aa98:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000aa9c:	d172      	bne.n	9000ab84 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000aa9e:	2101      	movs	r1, #1
9000aaa0:	f104 0008 	add.w	r0, r4, #8
9000aaa4:	f7ff fdfa 	bl	9000a69c <RCCEx_PLL2_Config>
9000aaa8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000aaaa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aaae:	2d00      	cmp	r5, #0
9000aab0:	f040 8380 	bne.w	9000b1b4 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000aab4:	4f35      	ldr	r7, [pc, #212]	; (9000ab8c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000aab6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000aaba:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000aabc:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000aac0:	4301      	orrs	r1, r0
9000aac2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000aac4:	041f      	lsls	r7, r3, #16
9000aac6:	d50d      	bpl.n	9000aae4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000aac8:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000aaca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000aace:	f000 83c7 	beq.w	9000b260 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
9000aad2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000aad6:	f000 8225 	beq.w	9000af24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
9000aada:	2900      	cmp	r1, #0
9000aadc:	f000 822a 	beq.w	9000af34 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
9000aae0:	2601      	movs	r6, #1
9000aae2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000aae4:	01d8      	lsls	r0, r3, #7
9000aae6:	d55f      	bpl.n	9000aba8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
9000aae8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000aaea:	2903      	cmp	r1, #3
9000aaec:	f200 84bb 	bhi.w	9000b466 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000aaf0:	e8df f011 	tbh	[pc, r1, lsl #1]
9000aaf4:	03e10056 	.word	0x03e10056
9000aaf8:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
9000aafc:	29c0      	cmp	r1, #192	; 0xc0
9000aafe:	f43f af12 	beq.w	9000a926 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000ab02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000ab06:	f43f af0e 	beq.w	9000a926 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000ab0a:	2601      	movs	r6, #1
9000ab0c:	4635      	mov	r5, r6
9000ab0e:	e714      	b.n	9000a93a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000ab10:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000ab14:	f43f af2a 	beq.w	9000a96c <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000ab18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000ab1c:	f43f af26 	beq.w	9000a96c <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000ab20:	2601      	movs	r6, #1
9000ab22:	4635      	mov	r5, r6
9000ab24:	e72d      	b.n	9000a982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000ab26:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000ab2a:	f43f af43 	beq.w	9000a9b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000ab2e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000ab32:	f43f af3f 	beq.w	9000a9b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000ab36:	2601      	movs	r6, #1
9000ab38:	4635      	mov	r5, r6
9000ab3a:	e746      	b.n	9000a9ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000ab3c:	2930      	cmp	r1, #48	; 0x30
9000ab3e:	f43f af55 	beq.w	9000a9ec <HAL_RCCEx_PeriphCLKConfig+0x168>
9000ab42:	2601      	movs	r6, #1
9000ab44:	4635      	mov	r5, r6
9000ab46:	e75b      	b.n	9000aa00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000ab48:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000ab4c:	f43f af70 	beq.w	9000aa30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000ab50:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000ab54:	f43f af6c 	beq.w	9000aa30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000ab58:	2601      	movs	r6, #1
9000ab5a:	4635      	mov	r5, r6
9000ab5c:	e772      	b.n	9000aa44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000ab5e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000ab62:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000ab66:	d083      	beq.n	9000aa70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000ab68:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000ab6c:	d080      	beq.n	9000aa70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000ab6e:	2601      	movs	r6, #1
9000ab70:	4635      	mov	r5, r6
9000ab72:	e787      	b.n	9000aa84 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000ab74:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000ab78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000ab7c:	d097      	beq.n	9000aaae <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000ab7e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000ab82:	d094      	beq.n	9000aaae <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000ab84:	2601      	movs	r6, #1
9000ab86:	4635      	mov	r5, r6
9000ab88:	e79c      	b.n	9000aac4 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000ab8a:	bf00      	nop
9000ab8c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000ab90:	2102      	movs	r1, #2
9000ab92:	f104 0008 	add.w	r0, r4, #8
9000ab96:	f7ff fd81 	bl	9000a69c <RCCEx_PLL2_Config>
9000ab9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000ab9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000aba0:	2d00      	cmp	r5, #0
9000aba2:	f000 82fb 	beq.w	9000b19c <HAL_RCCEx_PeriphCLKConfig+0x918>
9000aba6:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000aba8:	0259      	lsls	r1, r3, #9
9000abaa:	f100 825a 	bmi.w	9000b062 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000abae:	07d8      	lsls	r0, r3, #31
9000abb0:	d52f      	bpl.n	9000ac12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
9000abb2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000abb4:	2928      	cmp	r1, #40	; 0x28
9000abb6:	d82a      	bhi.n	9000ac0e <HAL_RCCEx_PeriphCLKConfig+0x38a>
9000abb8:	e8df f011 	tbh	[pc, r1, lsl #1]
9000abbc:	002901fa 	.word	0x002901fa
9000abc0:	00290029 	.word	0x00290029
9000abc4:	00290029 	.word	0x00290029
9000abc8:	00290029 	.word	0x00290029
9000abcc:	00290406 	.word	0x00290406
9000abd0:	00290029 	.word	0x00290029
9000abd4:	00290029 	.word	0x00290029
9000abd8:	00290029 	.word	0x00290029
9000abdc:	002901f2 	.word	0x002901f2
9000abe0:	00290029 	.word	0x00290029
9000abe4:	00290029 	.word	0x00290029
9000abe8:	00290029 	.word	0x00290029
9000abec:	002901fa 	.word	0x002901fa
9000abf0:	00290029 	.word	0x00290029
9000abf4:	00290029 	.word	0x00290029
9000abf8:	00290029 	.word	0x00290029
9000abfc:	002901fa 	.word	0x002901fa
9000ac00:	00290029 	.word	0x00290029
9000ac04:	00290029 	.word	0x00290029
9000ac08:	00290029 	.word	0x00290029
9000ac0c:	01fa      	.short	0x01fa
9000ac0e:	2601      	movs	r6, #1
9000ac10:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000ac12:	0799      	lsls	r1, r3, #30
9000ac14:	d517      	bpl.n	9000ac46 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000ac16:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000ac18:	2905      	cmp	r1, #5
9000ac1a:	f200 8420 	bhi.w	9000b45e <HAL_RCCEx_PeriphCLKConfig+0xbda>
9000ac1e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000ac22:	000e      	.short	0x000e
9000ac24:	000603bb 	.word	0x000603bb
9000ac28:	000e000e 	.word	0x000e000e
9000ac2c:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000ac2e:	2101      	movs	r1, #1
9000ac30:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ac34:	f7ff fdac 	bl	9000a790 <RCCEx_PLL3_Config>
9000ac38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000ac3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ac3e:	2d00      	cmp	r5, #0
9000ac40:	f000 8299 	beq.w	9000b176 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000ac44:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000ac46:	075f      	lsls	r7, r3, #29
9000ac48:	d518      	bpl.n	9000ac7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000ac4a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000ac4e:	2905      	cmp	r1, #5
9000ac50:	f200 840d 	bhi.w	9000b46e <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000ac54:	e8df f011 	tbh	[pc, r1, lsl #1]
9000ac58:	03ac000e 	.word	0x03ac000e
9000ac5c:	000e0006 	.word	0x000e0006
9000ac60:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000ac64:	2101      	movs	r1, #1
9000ac66:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ac6a:	f7ff fd91 	bl	9000a790 <RCCEx_PLL3_Config>
9000ac6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000ac70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ac74:	2d00      	cmp	r5, #0
9000ac76:	f000 8286 	beq.w	9000b186 <HAL_RCCEx_PeriphCLKConfig+0x902>
9000ac7a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000ac7c:	0698      	lsls	r0, r3, #26
9000ac7e:	d51f      	bpl.n	9000acc0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000ac80:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000ac84:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000ac88:	f000 8309 	beq.w	9000b29e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
9000ac8c:	f200 810b 	bhi.w	9000aea6 <HAL_RCCEx_PeriphCLKConfig+0x622>
9000ac90:	b159      	cbz	r1, 9000acaa <HAL_RCCEx_PeriphCLKConfig+0x426>
9000ac92:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000ac96:	f040 8110 	bne.w	9000aeba <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ac9a:	2100      	movs	r1, #0
9000ac9c:	f104 0008 	add.w	r0, r4, #8
9000aca0:	f7ff fcfc 	bl	9000a69c <RCCEx_PLL2_Config>
9000aca4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000aca6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000acaa:	2d00      	cmp	r5, #0
9000acac:	f040 825f 	bne.w	9000b16e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000acb0:	4fa6      	ldr	r7, [pc, #664]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000acb2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000acb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000acb8:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000acbc:	4301      	orrs	r1, r0
9000acbe:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000acc0:	0659      	lsls	r1, r3, #25
9000acc2:	d51f      	bpl.n	9000ad04 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000acc4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000acc8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000accc:	f000 82b2 	beq.w	9000b234 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
9000acd0:	f200 80f6 	bhi.w	9000aec0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
9000acd4:	b159      	cbz	r1, 9000acee <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000acd6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000acda:	f040 80fb 	bne.w	9000aed4 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000acde:	2100      	movs	r1, #0
9000ace0:	f104 0008 	add.w	r0, r4, #8
9000ace4:	f7ff fcda 	bl	9000a69c <RCCEx_PLL2_Config>
9000ace8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000acea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000acee:	2d00      	cmp	r5, #0
9000acf0:	f040 8262 	bne.w	9000b1b8 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000acf4:	4f95      	ldr	r7, [pc, #596]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000acf6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000acfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000acfc:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000ad00:	4301      	orrs	r1, r0
9000ad02:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000ad04:	061f      	lsls	r7, r3, #24
9000ad06:	d51f      	bpl.n	9000ad48 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000ad08:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000ad0c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000ad10:	f000 829b 	beq.w	9000b24a <HAL_RCCEx_PeriphCLKConfig+0x9c6>
9000ad14:	f200 80e1 	bhi.w	9000aeda <HAL_RCCEx_PeriphCLKConfig+0x656>
9000ad18:	b159      	cbz	r1, 9000ad32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000ad1a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000ad1e:	f040 80e6 	bne.w	9000aeee <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ad22:	2100      	movs	r1, #0
9000ad24:	f104 0008 	add.w	r0, r4, #8
9000ad28:	f7ff fcb8 	bl	9000a69c <RCCEx_PLL2_Config>
9000ad2c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000ad2e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ad32:	2d00      	cmp	r5, #0
9000ad34:	f040 823c 	bne.w	9000b1b0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000ad38:	4f84      	ldr	r7, [pc, #528]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ad3a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000ad3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ad40:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000ad44:	4301      	orrs	r1, r0
9000ad46:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000ad48:	0718      	lsls	r0, r3, #28
9000ad4a:	d50b      	bpl.n	9000ad64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000ad4c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000ad50:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000ad54:	f000 82b8 	beq.w	9000b2c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000ad58:	4f7c      	ldr	r7, [pc, #496]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ad5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000ad5c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000ad60:	4301      	orrs	r1, r0
9000ad62:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000ad64:	06d9      	lsls	r1, r3, #27
9000ad66:	d50b      	bpl.n	9000ad80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000ad68:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000ad6c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000ad70:	f000 82b7 	beq.w	9000b2e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000ad74:	4f75      	ldr	r7, [pc, #468]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ad76:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ad78:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000ad7c:	4301      	orrs	r1, r0
9000ad7e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000ad80:	031f      	lsls	r7, r3, #12
9000ad82:	d50e      	bpl.n	9000ada2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
9000ad84:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000ad88:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000ad8c:	f000 80f4 	beq.w	9000af78 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
9000ad90:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000ad94:	f000 80f8 	beq.w	9000af88 <HAL_RCCEx_PeriphCLKConfig+0x704>
9000ad98:	2900      	cmp	r1, #0
9000ad9a:	f000 822e 	beq.w	9000b1fa <HAL_RCCEx_PeriphCLKConfig+0x976>
9000ad9e:	2601      	movs	r6, #1
9000ada0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000ada2:	0358      	lsls	r0, r3, #13
9000ada4:	d50f      	bpl.n	9000adc6 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
9000ada6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000adaa:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000adae:	f000 80cf 	beq.w	9000af50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000adb2:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000adb6:	f000 80d3 	beq.w	9000af60 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000adba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000adbe:	f000 8214 	beq.w	9000b1ea <HAL_RCCEx_PeriphCLKConfig+0x966>
9000adc2:	2601      	movs	r6, #1
9000adc4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000adc6:	03d9      	lsls	r1, r3, #15
9000adc8:	d509      	bpl.n	9000adde <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
9000adca:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000adcc:	2900      	cmp	r1, #0
9000adce:	f000 8203 	beq.w	9000b1d8 <HAL_RCCEx_PeriphCLKConfig+0x954>
9000add2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000add6:	f000 819d 	beq.w	9000b114 <HAL_RCCEx_PeriphCLKConfig+0x890>
9000adda:	2601      	movs	r6, #1
9000addc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000adde:	009f      	lsls	r7, r3, #2
9000ade0:	f100 80f1 	bmi.w	9000afc6 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000ade4:	0398      	lsls	r0, r3, #14
9000ade6:	d50c      	bpl.n	9000ae02 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
9000ade8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000adec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000adf0:	f000 81ea 	beq.w	9000b1c8 <HAL_RCCEx_PeriphCLKConfig+0x944>
9000adf4:	d97e      	bls.n	9000aef4 <HAL_RCCEx_PeriphCLKConfig+0x670>
9000adf6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000adfa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000adfe:	d07b      	beq.n	9000aef8 <HAL_RCCEx_PeriphCLKConfig+0x674>
9000ae00:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000ae02:	02d9      	lsls	r1, r3, #11
9000ae04:	d506      	bpl.n	9000ae14 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000ae06:	4851      	ldr	r0, [pc, #324]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ae08:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000ae0a:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000ae0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000ae10:	4329      	orrs	r1, r5
9000ae12:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000ae14:	00df      	lsls	r7, r3, #3
9000ae16:	d507      	bpl.n	9000ae28 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000ae18:	484c      	ldr	r0, [pc, #304]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ae1a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000ae1e:	6901      	ldr	r1, [r0, #16]
9000ae20:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000ae24:	4329      	orrs	r1, r5
9000ae26:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000ae28:	029d      	lsls	r5, r3, #10
9000ae2a:	d506      	bpl.n	9000ae3a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000ae2c:	4847      	ldr	r0, [pc, #284]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ae2e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000ae30:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000ae32:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000ae36:	4329      	orrs	r1, r5
9000ae38:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000ae3a:	0058      	lsls	r0, r3, #1
9000ae3c:	d509      	bpl.n	9000ae52 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000ae3e:	4943      	ldr	r1, [pc, #268]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ae40:	6908      	ldr	r0, [r1, #16]
9000ae42:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000ae46:	6108      	str	r0, [r1, #16]
9000ae48:	6908      	ldr	r0, [r1, #16]
9000ae4a:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000ae4e:	4328      	orrs	r0, r5
9000ae50:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000ae52:	2b00      	cmp	r3, #0
9000ae54:	da06      	bge.n	9000ae64 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000ae56:	483d      	ldr	r0, [pc, #244]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ae58:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000ae5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000ae5c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000ae60:	4329      	orrs	r1, r5
9000ae62:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000ae64:	0219      	lsls	r1, r3, #8
9000ae66:	d507      	bpl.n	9000ae78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000ae68:	4938      	ldr	r1, [pc, #224]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ae6a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000ae6e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000ae70:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000ae74:	4303      	orrs	r3, r0
9000ae76:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000ae78:	07d3      	lsls	r3, r2, #31
9000ae7a:	f100 80b0 	bmi.w	9000afde <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000ae7e:	0797      	lsls	r7, r2, #30
9000ae80:	f100 80ba 	bmi.w	9000aff8 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000ae84:	0755      	lsls	r5, r2, #29
9000ae86:	f100 80c4 	bmi.w	9000b012 <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000ae8a:	0710      	lsls	r0, r2, #28
9000ae8c:	f100 80ce 	bmi.w	9000b02c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000ae90:	06d1      	lsls	r1, r2, #27
9000ae92:	f100 80d8 	bmi.w	9000b046 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000ae96:	0692      	lsls	r2, r2, #26
9000ae98:	f100 8125 	bmi.w	9000b0e6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
9000ae9c:	1e30      	subs	r0, r6, #0
9000ae9e:	bf18      	it	ne
9000aea0:	2001      	movne	r0, #1
}
9000aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000aea6:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000aeaa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000aeae:	f43f aefc 	beq.w	9000acaa <HAL_RCCEx_PeriphCLKConfig+0x426>
9000aeb2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000aeb6:	f43f aef8 	beq.w	9000acaa <HAL_RCCEx_PeriphCLKConfig+0x426>
9000aeba:	2601      	movs	r6, #1
9000aebc:	4635      	mov	r5, r6
9000aebe:	e6ff      	b.n	9000acc0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000aec0:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000aec4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000aec8:	f43f af11 	beq.w	9000acee <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000aecc:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000aed0:	f43f af0d 	beq.w	9000acee <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000aed4:	2601      	movs	r6, #1
9000aed6:	4635      	mov	r5, r6
9000aed8:	e714      	b.n	9000ad04 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000aeda:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000aede:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000aee2:	f43f af26 	beq.w	9000ad32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000aee6:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000aeea:	f43f af22 	beq.w	9000ad32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000aeee:	2601      	movs	r6, #1
9000aef0:	4635      	mov	r5, r6
9000aef2:	e729      	b.n	9000ad48 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
9000aef4:	2900      	cmp	r1, #0
9000aef6:	d183      	bne.n	9000ae00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
9000aef8:	2d00      	cmp	r5, #0
9000aefa:	f040 8163 	bne.w	9000b1c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000aefe:	4d13      	ldr	r5, [pc, #76]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000af00:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000af02:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000af06:	4301      	orrs	r1, r0
9000af08:	6569      	str	r1, [r5, #84]	; 0x54
9000af0a:	e77a      	b.n	9000ae02 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
9000af0c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000af0e:	2d00      	cmp	r5, #0
9000af10:	f040 80fb 	bne.w	9000b10a <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000af14:	4f0d      	ldr	r7, [pc, #52]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000af16:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000af18:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000af1a:	f021 0107 	bic.w	r1, r1, #7
9000af1e:	4301      	orrs	r1, r0
9000af20:	6539      	str	r1, [r7, #80]	; 0x50
9000af22:	e4ea      	b.n	9000a8fa <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000af24:	2101      	movs	r1, #1
9000af26:	f104 0008 	add.w	r0, r4, #8
9000af2a:	f7ff fbb7 	bl	9000a69c <RCCEx_PLL2_Config>
9000af2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000af30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000af34:	2d00      	cmp	r5, #0
9000af36:	f040 811c 	bne.w	9000b172 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000af3a:	4f04      	ldr	r7, [pc, #16]	; (9000af4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000af3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000af3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000af40:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000af44:	4301      	orrs	r1, r0
9000af46:	6539      	str	r1, [r7, #80]	; 0x50
9000af48:	e5cc      	b.n	9000aae4 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000af4a:	bf00      	nop
9000af4c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000af50:	2101      	movs	r1, #1
9000af52:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000af56:	f7ff fc1b 	bl	9000a790 <RCCEx_PLL3_Config>
9000af5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000af5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000af60:	2d00      	cmp	r5, #0
9000af62:	f040 812d 	bne.w	9000b1c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000af66:	4fb1      	ldr	r7, [pc, #708]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000af68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000af6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000af6e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000af72:	4301      	orrs	r1, r0
9000af74:	6579      	str	r1, [r7, #84]	; 0x54
9000af76:	e726      	b.n	9000adc6 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000af78:	2102      	movs	r1, #2
9000af7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000af7e:	f7ff fc07 	bl	9000a790 <RCCEx_PLL3_Config>
9000af82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000af84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000af88:	2d00      	cmp	r5, #0
9000af8a:	f040 8117 	bne.w	9000b1bc <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000af8e:	4fa7      	ldr	r7, [pc, #668]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000af90:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000af94:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000af96:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000af9a:	4301      	orrs	r1, r0
9000af9c:	65b9      	str	r1, [r7, #88]	; 0x58
9000af9e:	e700      	b.n	9000ada2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000afa0:	2101      	movs	r1, #1
9000afa2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000afa6:	f7ff fbf3 	bl	9000a790 <RCCEx_PLL3_Config>
9000afaa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000afac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000afb0:	2d00      	cmp	r5, #0
9000afb2:	f040 80da 	bne.w	9000b16a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000afb6:	4f9d      	ldr	r7, [pc, #628]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000afb8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000afba:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000afbc:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000afc0:	4301      	orrs	r1, r0
9000afc2:	6579      	str	r1, [r7, #84]	; 0x54
9000afc4:	e625      	b.n	9000ac12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000afc6:	2102      	movs	r1, #2
9000afc8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000afcc:	f7ff fbe0 	bl	9000a790 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000afd0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000afd4:	2800      	cmp	r0, #0
9000afd6:	f43f af05 	beq.w	9000ade4 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
9000afda:	2601      	movs	r6, #1
9000afdc:	e702      	b.n	9000ade4 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000afde:	2100      	movs	r1, #0
9000afe0:	f104 0008 	add.w	r0, r4, #8
9000afe4:	f7ff fb5a 	bl	9000a69c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000afe8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000afea:	2800      	cmp	r0, #0
9000afec:	f43f af47 	beq.w	9000ae7e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000aff0:	0797      	lsls	r7, r2, #30
9000aff2:	4606      	mov	r6, r0
9000aff4:	f57f af46 	bpl.w	9000ae84 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000aff8:	2101      	movs	r1, #1
9000affa:	f104 0008 	add.w	r0, r4, #8
9000affe:	f7ff fb4d 	bl	9000a69c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b002:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b004:	2800      	cmp	r0, #0
9000b006:	f43f af3d 	beq.w	9000ae84 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b00a:	0755      	lsls	r5, r2, #29
9000b00c:	4606      	mov	r6, r0
9000b00e:	f57f af3c 	bpl.w	9000ae8a <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b012:	2102      	movs	r1, #2
9000b014:	f104 0008 	add.w	r0, r4, #8
9000b018:	f7ff fb40 	bl	9000a69c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b01c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b01e:	2800      	cmp	r0, #0
9000b020:	f43f af33 	beq.w	9000ae8a <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b024:	4606      	mov	r6, r0
9000b026:	0710      	lsls	r0, r2, #28
9000b028:	f57f af32 	bpl.w	9000ae90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b02c:	2100      	movs	r1, #0
9000b02e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b032:	f7ff fbad 	bl	9000a790 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b036:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b038:	2800      	cmp	r0, #0
9000b03a:	f43f af29 	beq.w	9000ae90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b03e:	06d1      	lsls	r1, r2, #27
9000b040:	4606      	mov	r6, r0
9000b042:	f57f af28 	bpl.w	9000ae96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b046:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000b04a:	2101      	movs	r1, #1
9000b04c:	4628      	mov	r0, r5
9000b04e:	f7ff fb9f 	bl	9000a790 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b052:	2800      	cmp	r0, #0
9000b054:	f000 80db 	beq.w	9000b20e <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b058:	6863      	ldr	r3, [r4, #4]
9000b05a:	069b      	lsls	r3, r3, #26
9000b05c:	d54c      	bpl.n	9000b0f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
9000b05e:	4606      	mov	r6, r0
9000b060:	e043      	b.n	9000b0ea <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000b062:	4f73      	ldr	r7, [pc, #460]	; (9000b230 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
9000b064:	683b      	ldr	r3, [r7, #0]
9000b066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b06a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000b06c:	f7fb fc3c 	bl	900068e8 <HAL_GetTick>
9000b070:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b072:	e006      	b.n	9000b082 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000b074:	f7fb fc38 	bl	900068e8 <HAL_GetTick>
9000b078:	eba0 0008 	sub.w	r0, r0, r8
9000b07c:	2864      	cmp	r0, #100	; 0x64
9000b07e:	f200 81af 	bhi.w	9000b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b082:	683b      	ldr	r3, [r7, #0]
9000b084:	05da      	lsls	r2, r3, #23
9000b086:	d5f5      	bpl.n	9000b074 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
9000b088:	2d00      	cmp	r5, #0
9000b08a:	f040 81e3 	bne.w	9000b454 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000b08e:	4a67      	ldr	r2, [pc, #412]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b090:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b094:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000b096:	4059      	eors	r1, r3
9000b098:	f411 7f40 	tst.w	r1, #768	; 0x300
9000b09c:	d00b      	beq.n	9000b0b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b09e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000b0a0:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b0a2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000b0a6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000b0aa:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000b0ac:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000b0ae:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000b0b2:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000b0b4:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000b0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000b0ba:	f000 81ad 	beq.w	9000b418 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b0be:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000b0c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000b0c6:	f000 81bb 	beq.w	9000b440 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
9000b0ca:	4958      	ldr	r1, [pc, #352]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b0cc:	690a      	ldr	r2, [r1, #16]
9000b0ce:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000b0d2:	610a      	str	r2, [r1, #16]
9000b0d4:	4855      	ldr	r0, [pc, #340]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b0d6:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000b0da:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000b0dc:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b0de:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b0e2:	6701      	str	r1, [r0, #112]	; 0x70
9000b0e4:	e563      	b.n	9000abae <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b0e6:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b0ea:	2102      	movs	r1, #2
9000b0ec:	4628      	mov	r0, r5
9000b0ee:	f7ff fb4f 	bl	9000a790 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b0f2:	2800      	cmp	r0, #0
9000b0f4:	f43f aed2 	beq.w	9000ae9c <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
9000b0f8:	2001      	movs	r0, #1
}
9000b0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b0fe:	462e      	mov	r6, r5
9000b100:	e463      	b.n	9000a9ca <HAL_RCCEx_PeriphCLKConfig+0x146>
9000b102:	462e      	mov	r6, r5
9000b104:	e419      	b.n	9000a93a <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000b106:	462e      	mov	r6, r5
9000b108:	e49c      	b.n	9000aa44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000b10a:	462e      	mov	r6, r5
9000b10c:	f7ff bbf5 	b.w	9000a8fa <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b110:	462e      	mov	r6, r5
9000b112:	e436      	b.n	9000a982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b114:	2102      	movs	r1, #2
9000b116:	f104 0008 	add.w	r0, r4, #8
9000b11a:	f7ff fabf 	bl	9000a69c <RCCEx_PLL2_Config>
9000b11e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b120:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b124:	2d00      	cmp	r5, #0
9000b126:	d15e      	bne.n	9000b1e6 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000b128:	4f40      	ldr	r7, [pc, #256]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b12a:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000b12c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b12e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000b132:	4301      	orrs	r1, r0
9000b134:	64f9      	str	r1, [r7, #76]	; 0x4c
9000b136:	e652      	b.n	9000adde <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b138:	483c      	ldr	r0, [pc, #240]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b13a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b13c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b140:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b142:	e475      	b.n	9000aa30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b144:	4839      	ldr	r0, [pc, #228]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b146:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b148:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b14c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b14e:	e431      	b.n	9000a9b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b150:	4836      	ldr	r0, [pc, #216]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b152:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b154:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b158:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b15a:	f7ff bbe4 	b.w	9000a926 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b15e:	4833      	ldr	r0, [pc, #204]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b160:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b162:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b166:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b168:	e400      	b.n	9000a96c <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000b16a:	462e      	mov	r6, r5
9000b16c:	e551      	b.n	9000ac12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
9000b16e:	462e      	mov	r6, r5
9000b170:	e5a6      	b.n	9000acc0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
9000b172:	462e      	mov	r6, r5
9000b174:	e4b6      	b.n	9000aae4 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000b176:	4f2d      	ldr	r7, [pc, #180]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b178:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000b17a:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b17c:	f021 0107 	bic.w	r1, r1, #7
9000b180:	4301      	orrs	r1, r0
9000b182:	6579      	str	r1, [r7, #84]	; 0x54
9000b184:	e55f      	b.n	9000ac46 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000b186:	4f29      	ldr	r7, [pc, #164]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b188:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000b18c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b18e:	f021 0107 	bic.w	r1, r1, #7
9000b192:	4301      	orrs	r1, r0
9000b194:	65b9      	str	r1, [r7, #88]	; 0x58
9000b196:	e571      	b.n	9000ac7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000b198:	462e      	mov	r6, r5
9000b19a:	e431      	b.n	9000aa00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000b19c:	4f23      	ldr	r7, [pc, #140]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b19e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000b1a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b1a2:	f021 0103 	bic.w	r1, r1, #3
9000b1a6:	4301      	orrs	r1, r0
9000b1a8:	64f9      	str	r1, [r7, #76]	; 0x4c
9000b1aa:	e4fd      	b.n	9000aba8 <HAL_RCCEx_PeriphCLKConfig+0x324>
9000b1ac:	462e      	mov	r6, r5
9000b1ae:	e469      	b.n	9000aa84 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000b1b0:	462e      	mov	r6, r5
9000b1b2:	e5c9      	b.n	9000ad48 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
9000b1b4:	462e      	mov	r6, r5
9000b1b6:	e485      	b.n	9000aac4 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000b1b8:	462e      	mov	r6, r5
9000b1ba:	e5a3      	b.n	9000ad04 <HAL_RCCEx_PeriphCLKConfig+0x480>
9000b1bc:	462e      	mov	r6, r5
9000b1be:	e5f0      	b.n	9000ada2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
9000b1c0:	462e      	mov	r6, r5
9000b1c2:	e600      	b.n	9000adc6 <HAL_RCCEx_PeriphCLKConfig+0x542>
9000b1c4:	462e      	mov	r6, r5
9000b1c6:	e61c      	b.n	9000ae02 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b1c8:	4f18      	ldr	r7, [pc, #96]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000b1cc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000b1d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000b1d2:	2d00      	cmp	r5, #0
9000b1d4:	d1f6      	bne.n	9000b1c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
9000b1d6:	e692      	b.n	9000aefe <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b1d8:	4814      	ldr	r0, [pc, #80]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b1da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b1dc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b1e0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b1e2:	2d00      	cmp	r5, #0
9000b1e4:	d0a0      	beq.n	9000b128 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
9000b1e6:	462e      	mov	r6, r5
9000b1e8:	e5f9      	b.n	9000adde <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b1ea:	4810      	ldr	r0, [pc, #64]	; (9000b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000b1ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b1ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b1f2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b1f4:	2d00      	cmp	r5, #0
9000b1f6:	d1e3      	bne.n	9000b1c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
9000b1f8:	e6b5      	b.n	9000af66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b1fa:	f104 0008 	add.w	r0, r4, #8
9000b1fe:	f7ff fa4d 	bl	9000a69c <RCCEx_PLL2_Config>
9000b202:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b204:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b208:	2d00      	cmp	r5, #0
9000b20a:	d1d7      	bne.n	9000b1bc <HAL_RCCEx_PeriphCLKConfig+0x938>
9000b20c:	e6bf      	b.n	9000af8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b20e:	6862      	ldr	r2, [r4, #4]
9000b210:	e641      	b.n	9000ae96 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b212:	2102      	movs	r1, #2
9000b214:	f104 0008 	add.w	r0, r4, #8
9000b218:	f7ff fa40 	bl	9000a69c <RCCEx_PLL2_Config>
9000b21c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000b21e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b222:	2d00      	cmp	r5, #0
9000b224:	d1b8      	bne.n	9000b198 <HAL_RCCEx_PeriphCLKConfig+0x914>
9000b226:	f7ff bbe4 	b.w	9000a9f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
9000b22a:	bf00      	nop
9000b22c:	58024400 	.word	0x58024400
9000b230:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b234:	2102      	movs	r1, #2
9000b236:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b23a:	f7ff faa9 	bl	9000a790 <RCCEx_PLL3_Config>
9000b23e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b240:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b244:	2d00      	cmp	r5, #0
9000b246:	d1b7      	bne.n	9000b1b8 <HAL_RCCEx_PeriphCLKConfig+0x934>
9000b248:	e554      	b.n	9000acf4 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b24a:	2102      	movs	r1, #2
9000b24c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b250:	f7ff fa9e 	bl	9000a790 <RCCEx_PLL3_Config>
9000b254:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b256:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b25a:	2d00      	cmp	r5, #0
9000b25c:	d1a8      	bne.n	9000b1b0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
9000b25e:	e56b      	b.n	9000ad38 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b260:	4884      	ldr	r0, [pc, #528]	; (9000b474 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000b262:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b264:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b268:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b26a:	2d00      	cmp	r5, #0
9000b26c:	d181      	bne.n	9000b172 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000b26e:	e664      	b.n	9000af3a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b270:	2101      	movs	r1, #1
9000b272:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b276:	f7ff fa8b 	bl	9000a790 <RCCEx_PLL3_Config>
9000b27a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b27c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b280:	2d00      	cmp	r5, #0
9000b282:	d193      	bne.n	9000b1ac <HAL_RCCEx_PeriphCLKConfig+0x928>
9000b284:	f7ff bbf7 	b.w	9000aa76 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b288:	2101      	movs	r1, #1
9000b28a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b28e:	f7ff fa7f 	bl	9000a790 <RCCEx_PLL3_Config>
9000b292:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b294:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b298:	2d00      	cmp	r5, #0
9000b29a:	d18b      	bne.n	9000b1b4 <HAL_RCCEx_PeriphCLKConfig+0x930>
9000b29c:	e40a      	b.n	9000aab4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b29e:	2102      	movs	r1, #2
9000b2a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b2a4:	f7ff fa74 	bl	9000a790 <RCCEx_PLL3_Config>
9000b2a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b2aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b2ae:	2d00      	cmp	r5, #0
9000b2b0:	f47f af5d 	bne.w	9000b16e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
9000b2b4:	e4fc      	b.n	9000acb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b2b6:	486f      	ldr	r0, [pc, #444]	; (9000b474 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000b2b8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b2ba:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b2be:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b2c0:	2d00      	cmp	r5, #0
9000b2c2:	f47f ac70 	bne.w	9000aba6 <HAL_RCCEx_PeriphCLKConfig+0x322>
9000b2c6:	e769      	b.n	9000b19c <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b2c8:	2102      	movs	r1, #2
9000b2ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b2ce:	f7ff fa5f 	bl	9000a790 <RCCEx_PLL3_Config>
9000b2d2:	2800      	cmp	r0, #0
9000b2d4:	f040 8094 	bne.w	9000b400 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b2d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b2dc:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b2e0:	e53a      	b.n	9000ad58 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b2e2:	2102      	movs	r1, #2
9000b2e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b2e8:	f7ff fa52 	bl	9000a790 <RCCEx_PLL3_Config>
9000b2ec:	2800      	cmp	r0, #0
9000b2ee:	f040 808d 	bne.w	9000b40c <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b2f2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b2f6:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b2fa:	e53b      	b.n	9000ad74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b2fc:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b300:	f7ff baed 	b.w	9000a8de <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b304:	2100      	movs	r1, #0
9000b306:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b30a:	f7ff fa41 	bl	9000a790 <RCCEx_PLL3_Config>
9000b30e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b310:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b314:	f7ff bb4e 	b.w	9000a9b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b318:	2100      	movs	r1, #0
9000b31a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b31e:	f7ff fa37 	bl	9000a790 <RCCEx_PLL3_Config>
9000b322:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b324:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b328:	e5f1      	b.n	9000af0e <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b32a:	2100      	movs	r1, #0
9000b32c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b330:	f7ff fa2e 	bl	9000a790 <RCCEx_PLL3_Config>
9000b334:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b336:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b33a:	f7ff baf4 	b.w	9000a926 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b33e:	2102      	movs	r1, #2
9000b340:	3028      	adds	r0, #40	; 0x28
9000b342:	f7ff fa25 	bl	9000a790 <RCCEx_PLL3_Config>
9000b346:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000b348:	2e00      	cmp	r6, #0
9000b34a:	f43f aab9 	beq.w	9000a8c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000b34e:	e7d5      	b.n	9000b2fc <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b350:	4848      	ldr	r0, [pc, #288]	; (9000b474 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
9000b352:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b354:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b356:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b35a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b35c:	e5d7      	b.n	9000af0e <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b35e:	2100      	movs	r1, #0
9000b360:	f104 0008 	add.w	r0, r4, #8
9000b364:	f7ff f99a 	bl	9000a69c <RCCEx_PLL2_Config>
9000b368:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b36a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b36e:	e5ce      	b.n	9000af0e <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b370:	2100      	movs	r1, #0
9000b372:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b376:	f7ff fa0b 	bl	9000a790 <RCCEx_PLL3_Config>
9000b37a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b37c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b380:	f7ff bb56 	b.w	9000aa30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b384:	2100      	movs	r1, #0
9000b386:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b38a:	f7ff fa01 	bl	9000a790 <RCCEx_PLL3_Config>
9000b38e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b390:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000b394:	f7ff baea 	b.w	9000a96c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b398:	2101      	movs	r1, #1
9000b39a:	f104 0008 	add.w	r0, r4, #8
9000b39e:	f7ff f97d 	bl	9000a69c <RCCEx_PLL2_Config>
9000b3a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b3a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3a8:	2d00      	cmp	r5, #0
9000b3aa:	f47f ac4b 	bne.w	9000ac44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
9000b3ae:	e6e2      	b.n	9000b176 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b3b0:	2101      	movs	r1, #1
9000b3b2:	f104 0008 	add.w	r0, r4, #8
9000b3b6:	f7ff f971 	bl	9000a69c <RCCEx_PLL2_Config>
9000b3ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b3bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3c0:	2d00      	cmp	r5, #0
9000b3c2:	f47f ac5a 	bne.w	9000ac7a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
9000b3c6:	e6de      	b.n	9000b186 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b3c8:	2101      	movs	r1, #1
9000b3ca:	f104 0008 	add.w	r0, r4, #8
9000b3ce:	f7ff f965 	bl	9000a69c <RCCEx_PLL2_Config>
9000b3d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b3d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b3d8:	2d00      	cmp	r5, #0
9000b3da:	f47f aec6 	bne.w	9000b16a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000b3de:	e5ea      	b.n	9000afb6 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
9000b3e0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b3e2:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
9000b3e6:	4635      	mov	r5, r6
9000b3e8:	f7ff bbe1 	b.w	9000abae <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b3ec:	2601      	movs	r6, #1
9000b3ee:	f7ff ba76 	b.w	9000a8de <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b3f2:	4d20      	ldr	r5, [pc, #128]	; (9000b474 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000b3f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000b3f6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000b3fa:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000b3fc:	f7ff ba68 	b.w	9000a8d0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b400:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000b404:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b406:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b40a:	e4a5      	b.n	9000ad58 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b40c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000b410:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b412:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b416:	e4ad      	b.n	9000ad74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
9000b418:	f7fb fa66 	bl	900068e8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b41c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000b474 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
9000b420:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b422:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b426:	e004      	b.n	9000b432 <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b428:	f7fb fa5e 	bl	900068e8 <HAL_GetTick>
9000b42c:	1bc0      	subs	r0, r0, r7
9000b42e:	4548      	cmp	r0, r9
9000b430:	d8d6      	bhi.n	9000b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b432:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000b436:	079b      	lsls	r3, r3, #30
9000b438:	d5f6      	bpl.n	9000b428 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b43a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b43e:	e63e      	b.n	9000b0be <HAL_RCCEx_PeriphCLKConfig+0x83a>
9000b440:	480c      	ldr	r0, [pc, #48]	; (9000b474 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000b442:	4a0d      	ldr	r2, [pc, #52]	; (9000b478 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
9000b444:	6901      	ldr	r1, [r0, #16]
9000b446:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000b44a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000b44e:	430a      	orrs	r2, r1
9000b450:	6102      	str	r2, [r0, #16]
9000b452:	e63f      	b.n	9000b0d4 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b454:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b458:	462e      	mov	r6, r5
9000b45a:	f7ff bba8 	b.w	9000abae <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b45e:	2601      	movs	r6, #1
9000b460:	4635      	mov	r5, r6
9000b462:	f7ff bbf0 	b.w	9000ac46 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
9000b466:	2601      	movs	r6, #1
9000b468:	4635      	mov	r5, r6
9000b46a:	f7ff bb9d 	b.w	9000aba8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b46e:	2601      	movs	r6, #1
9000b470:	4635      	mov	r5, r6
9000b472:	e403      	b.n	9000ac7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000b474:	58024400 	.word	0x58024400
9000b478:	00ffffcf 	.word	0x00ffffcf

9000b47c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000b47c:	b318      	cbz	r0, 9000b4c6 <HAL_SDRAM_Init+0x4a>
{
9000b47e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000b480:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000b484:	4604      	mov	r4, r0
9000b486:	460d      	mov	r5, r1
9000b488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b48c:	b1b3      	cbz	r3, 9000b4bc <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000b48e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b490:	2302      	movs	r3, #2
9000b492:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000b496:	f851 0b04 	ldr.w	r0, [r1], #4
9000b49a:	f000 fa39 	bl	9000b910 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000b49e:	6862      	ldr	r2, [r4, #4]
9000b4a0:	4629      	mov	r1, r5
9000b4a2:	6820      	ldr	r0, [r4, #0]
9000b4a4:	f000 fa72 	bl	9000b98c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000b4a8:	4a08      	ldr	r2, [pc, #32]	; (9000b4cc <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000b4aa:	2101      	movs	r1, #1

  return HAL_OK;
9000b4ac:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000b4ae:	6813      	ldr	r3, [r2, #0]
9000b4b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000b4b4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000b4b6:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000b4ba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000b4bc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000b4c0:	f7f9 f93a 	bl	90004738 <HAL_SDRAM_MspInit>
9000b4c4:	e7e3      	b.n	9000b48e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000b4c6:	2001      	movs	r0, #1
}
9000b4c8:	4770      	bx	lr
9000b4ca:	bf00      	nop
9000b4cc:	52004000 	.word	0x52004000

9000b4d0 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000b4d0:	b510      	push	{r4, lr}
9000b4d2:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000b4d4:	f7f9 f9ac 	bl	90004830 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000b4d8:	e9d4 0100 	ldrd	r0, r1, [r4]
9000b4dc:	f000 faa2 	bl	9000ba24 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000b4e0:	2000      	movs	r0, #0
9000b4e2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000b4e6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000b4ea:	bd10      	pop	{r4, pc}

9000b4ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000b4ec:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000b4ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000b4f2:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000b4f4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000b4f6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000b4f8:	d004      	beq.n	9000b504 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000b4fa:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000b4fe:	2e01      	cmp	r6, #1
9000b500:	d001      	beq.n	9000b506 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000b502:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000b504:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b506:	2302      	movs	r3, #2
9000b508:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000b50a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b50c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000b510:	f000 fa9c 	bl	9000ba4c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000b514:	682b      	ldr	r3, [r5, #0]
9000b516:	2b02      	cmp	r3, #2
9000b518:	d003      	beq.n	9000b522 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000b51a:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000b51c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000b520:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000b522:	2305      	movs	r3, #5
  return HAL_OK;
9000b524:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000b526:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000b52a:	bd70      	pop	{r4, r5, r6, pc}

9000b52c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000b52c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000b52e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000b532:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000b534:	2b02      	cmp	r3, #2
9000b536:	b2d8      	uxtb	r0, r3
9000b538:	d005      	beq.n	9000b546 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000b53a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000b53e:	2b01      	cmp	r3, #1
9000b540:	b2dd      	uxtb	r5, r3
9000b542:	d001      	beq.n	9000b548 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000b544:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000b546:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b548:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000b54a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000b54c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000b550:	f000 fa94 	bl	9000ba7c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000b554:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000b556:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000b55a:	bd38      	pop	{r3, r4, r5, pc}

9000b55c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000b55c:	4770      	bx	lr
9000b55e:	bf00      	nop

9000b560 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000b560:	2800      	cmp	r0, #0
9000b562:	f000 80a5 	beq.w	9000b6b0 <HAL_TIM_Base_Init+0x150>
{
9000b566:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000b568:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000b56c:	4604      	mov	r4, r0
9000b56e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b572:	2b00      	cmp	r3, #0
9000b574:	d076      	beq.n	9000b664 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000b576:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000b578:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b57a:	494e      	ldr	r1, [pc, #312]	; (9000b6b4 <HAL_TIM_Base_Init+0x154>)
9000b57c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000b580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b584:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000b588:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b58a:	fab1 f181 	clz	r1, r1
9000b58e:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000b592:	d027      	beq.n	9000b5e4 <HAL_TIM_Base_Init+0x84>
9000b594:	bb31      	cbnz	r1, 9000b5e4 <HAL_TIM_Base_Init+0x84>
9000b596:	4848      	ldr	r0, [pc, #288]	; (9000b6b8 <HAL_TIM_Base_Init+0x158>)
9000b598:	4d48      	ldr	r5, [pc, #288]	; (9000b6bc <HAL_TIM_Base_Init+0x15c>)
9000b59a:	4282      	cmp	r2, r0
9000b59c:	d067      	beq.n	9000b66e <HAL_TIM_Base_Init+0x10e>
9000b59e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000b5a2:	4282      	cmp	r2, r0
9000b5a4:	d063      	beq.n	9000b66e <HAL_TIM_Base_Init+0x10e>
9000b5a6:	1b55      	subs	r5, r2, r5
9000b5a8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000b5ac:	fab5 f585 	clz	r5, r5
9000b5b0:	4282      	cmp	r2, r0
9000b5b2:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000b5b6:	d063      	beq.n	9000b680 <HAL_TIM_Base_Init+0x120>
9000b5b8:	2d00      	cmp	r5, #0
9000b5ba:	d161      	bne.n	9000b680 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000b5bc:	4840      	ldr	r0, [pc, #256]	; (9000b6c0 <HAL_TIM_Base_Init+0x160>)
9000b5be:	4941      	ldr	r1, [pc, #260]	; (9000b6c4 <HAL_TIM_Base_Init+0x164>)
9000b5c0:	428a      	cmp	r2, r1
9000b5c2:	bf18      	it	ne
9000b5c4:	4282      	cmpne	r2, r0
9000b5c6:	d065      	beq.n	9000b694 <HAL_TIM_Base_Init+0x134>
9000b5c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000b5cc:	428a      	cmp	r2, r1
9000b5ce:	d061      	beq.n	9000b694 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000b5d0:	69a0      	ldr	r0, [r4, #24]
9000b5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000b5d6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000b5d8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000b5da:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000b5dc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000b5de:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000b5e0:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000b5e2:	e023      	b.n	9000b62c <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b5e4:	4d35      	ldr	r5, [pc, #212]	; (9000b6bc <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000b5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000b5ea:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b5ec:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000b5ee:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b5f0:	fab5 f585 	clz	r5, r5
9000b5f4:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000b5f6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000b5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000b5fc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000b5fe:	69a0      	ldr	r0, [r4, #24]
9000b600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000b604:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000b606:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000b608:	68e3      	ldr	r3, [r4, #12]
9000b60a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000b60c:	6863      	ldr	r3, [r4, #4]
9000b60e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000b610:	b951      	cbnz	r1, 9000b628 <HAL_TIM_Base_Init+0xc8>
9000b612:	b94d      	cbnz	r5, 9000b628 <HAL_TIM_Base_Init+0xc8>
9000b614:	492a      	ldr	r1, [pc, #168]	; (9000b6c0 <HAL_TIM_Base_Init+0x160>)
9000b616:	4b2b      	ldr	r3, [pc, #172]	; (9000b6c4 <HAL_TIM_Base_Init+0x164>)
9000b618:	429a      	cmp	r2, r3
9000b61a:	bf18      	it	ne
9000b61c:	428a      	cmpne	r2, r1
9000b61e:	d003      	beq.n	9000b628 <HAL_TIM_Base_Init+0xc8>
9000b620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000b624:	429a      	cmp	r2, r3
9000b626:	d101      	bne.n	9000b62c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000b628:	6963      	ldr	r3, [r4, #20]
9000b62a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000b62c:	2301      	movs	r3, #1
  return HAL_OK;
9000b62e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000b630:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000b632:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000b636:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000b63a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000b63e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000b642:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000b646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000b64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000b64e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000b652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000b656:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000b65a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000b65e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000b662:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000b664:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000b668:	f7ff ff78 	bl	9000b55c <HAL_TIM_Base_MspInit>
9000b66c:	e783      	b.n	9000b576 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b66e:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000b670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000b674:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b676:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000b67a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b67c:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000b67e:	e7ba      	b.n	9000b5f6 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000b680:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000b682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000b686:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b688:	480f      	ldr	r0, [pc, #60]	; (9000b6c8 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000b68a:	4282      	cmp	r2, r0
9000b68c:	d0b3      	beq.n	9000b5f6 <HAL_TIM_Base_Init+0x96>
9000b68e:	2d00      	cmp	r5, #0
9000b690:	d1b1      	bne.n	9000b5f6 <HAL_TIM_Base_Init+0x96>
9000b692:	e793      	b.n	9000b5bc <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000b694:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000b696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000b69a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000b69c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000b69e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000b6a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000b6a4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000b6a6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000b6a8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000b6aa:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000b6ac:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000b6ae:	e7b1      	b.n	9000b614 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000b6b0:	2001      	movs	r0, #1
}
9000b6b2:	4770      	bx	lr
9000b6b4:	40010000 	.word	0x40010000
9000b6b8:	40000400 	.word	0x40000400
9000b6bc:	40010400 	.word	0x40010400
9000b6c0:	40014000 	.word	0x40014000
9000b6c4:	40014400 	.word	0x40014400
9000b6c8:	40000c00 	.word	0x40000c00

9000b6cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000b6cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000b6d0:	2b01      	cmp	r3, #1
9000b6d2:	d141      	bne.n	9000b758 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000b6d4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000b6d6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b6d8:	4b24      	ldr	r3, [pc, #144]	; (9000b76c <HAL_TIM_Base_Start_IT+0xa0>)
9000b6da:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000b6de:	bf18      	it	ne
9000b6e0:	429a      	cmpne	r2, r3
{
9000b6e2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b6e4:	bf0c      	ite	eq
9000b6e6:	2301      	moveq	r3, #1
9000b6e8:	2300      	movne	r3, #0
9000b6ea:	4d21      	ldr	r5, [pc, #132]	; (9000b770 <HAL_TIM_Base_Start_IT+0xa4>)
9000b6ec:	4c21      	ldr	r4, [pc, #132]	; (9000b774 <HAL_TIM_Base_Start_IT+0xa8>)
9000b6ee:	42aa      	cmp	r2, r5
9000b6f0:	bf08      	it	eq
9000b6f2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000b6f6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000b6fa:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b6fc:	42a2      	cmp	r2, r4
9000b6fe:	bf08      	it	eq
9000b700:	f043 0301 	orreq.w	r3, r3, #1
9000b704:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000b708:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b70c:	481a      	ldr	r0, [pc, #104]	; (9000b778 <HAL_TIM_Base_Start_IT+0xac>)
9000b70e:	42a2      	cmp	r2, r4
9000b710:	bf08      	it	eq
9000b712:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000b716:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b718:	4282      	cmp	r2, r0
9000b71a:	bf08      	it	eq
9000b71c:	f043 0301 	orreq.w	r3, r3, #1
9000b720:	4916      	ldr	r1, [pc, #88]	; (9000b77c <HAL_TIM_Base_Start_IT+0xb0>)
9000b722:	428a      	cmp	r2, r1
9000b724:	bf08      	it	eq
9000b726:	f043 0301 	orreq.w	r3, r3, #1
9000b72a:	b933      	cbnz	r3, 9000b73a <HAL_TIM_Base_Start_IT+0x6e>
9000b72c:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000b730:	1a10      	subs	r0, r2, r0
9000b732:	fab0 f080 	clz	r0, r0
9000b736:	0940      	lsrs	r0, r0, #5
9000b738:	b198      	cbz	r0, 9000b762 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000b73a:	6891      	ldr	r1, [r2, #8]
9000b73c:	4b10      	ldr	r3, [pc, #64]	; (9000b780 <HAL_TIM_Base_Start_IT+0xb4>)
9000b73e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b740:	2b06      	cmp	r3, #6
9000b742:	d00b      	beq.n	9000b75c <HAL_TIM_Base_Start_IT+0x90>
9000b744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000b748:	d008      	beq.n	9000b75c <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000b74a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000b74c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000b74e:	f043 0301 	orr.w	r3, r3, #1
9000b752:	6013      	str	r3, [r2, #0]
}
9000b754:	bc30      	pop	{r4, r5}
9000b756:	4770      	bx	lr
    return HAL_ERROR;
9000b758:	2001      	movs	r0, #1
}
9000b75a:	4770      	bx	lr
  return HAL_OK;
9000b75c:	2000      	movs	r0, #0
}
9000b75e:	bc30      	pop	{r4, r5}
9000b760:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000b762:	6813      	ldr	r3, [r2, #0]
9000b764:	f043 0301 	orr.w	r3, r3, #1
9000b768:	6013      	str	r3, [r2, #0]
9000b76a:	e7f3      	b.n	9000b754 <HAL_TIM_Base_Start_IT+0x88>
9000b76c:	40010000 	.word	0x40010000
9000b770:	40000400 	.word	0x40000400
9000b774:	40000800 	.word	0x40000800
9000b778:	40010400 	.word	0x40010400
9000b77c:	40001800 	.word	0x40001800
9000b780:	00010007 	.word	0x00010007

9000b784 <HAL_TIM_OC_DelayElapsedCallback>:
9000b784:	4770      	bx	lr
9000b786:	bf00      	nop

9000b788 <HAL_TIM_IC_CaptureCallback>:
9000b788:	4770      	bx	lr
9000b78a:	bf00      	nop

9000b78c <HAL_TIM_PWM_PulseFinishedCallback>:
9000b78c:	4770      	bx	lr
9000b78e:	bf00      	nop

9000b790 <HAL_TIM_TriggerCallback>:
9000b790:	4770      	bx	lr
9000b792:	bf00      	nop

9000b794 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000b794:	6803      	ldr	r3, [r0, #0]
9000b796:	691a      	ldr	r2, [r3, #16]
9000b798:	0791      	lsls	r1, r2, #30
{
9000b79a:	b510      	push	{r4, lr}
9000b79c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000b79e:	d502      	bpl.n	9000b7a6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000b7a0:	68da      	ldr	r2, [r3, #12]
9000b7a2:	0792      	lsls	r2, r2, #30
9000b7a4:	d468      	bmi.n	9000b878 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000b7a6:	691a      	ldr	r2, [r3, #16]
9000b7a8:	0752      	lsls	r2, r2, #29
9000b7aa:	d502      	bpl.n	9000b7b2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000b7ac:	68da      	ldr	r2, [r3, #12]
9000b7ae:	0750      	lsls	r0, r2, #29
9000b7b0:	d44f      	bmi.n	9000b852 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000b7b2:	691a      	ldr	r2, [r3, #16]
9000b7b4:	0711      	lsls	r1, r2, #28
9000b7b6:	d502      	bpl.n	9000b7be <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000b7b8:	68da      	ldr	r2, [r3, #12]
9000b7ba:	0712      	lsls	r2, r2, #28
9000b7bc:	d437      	bmi.n	9000b82e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000b7be:	691a      	ldr	r2, [r3, #16]
9000b7c0:	06d0      	lsls	r0, r2, #27
9000b7c2:	d502      	bpl.n	9000b7ca <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000b7c4:	68da      	ldr	r2, [r3, #12]
9000b7c6:	06d1      	lsls	r1, r2, #27
9000b7c8:	d41e      	bmi.n	9000b808 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000b7ca:	691a      	ldr	r2, [r3, #16]
9000b7cc:	07d2      	lsls	r2, r2, #31
9000b7ce:	d502      	bpl.n	9000b7d6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000b7d0:	68da      	ldr	r2, [r3, #12]
9000b7d2:	07d0      	lsls	r0, r2, #31
9000b7d4:	d469      	bmi.n	9000b8aa <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000b7d6:	691a      	ldr	r2, [r3, #16]
9000b7d8:	0611      	lsls	r1, r2, #24
9000b7da:	d502      	bpl.n	9000b7e2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000b7dc:	68da      	ldr	r2, [r3, #12]
9000b7de:	0612      	lsls	r2, r2, #24
9000b7e0:	d46b      	bmi.n	9000b8ba <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000b7e2:	691a      	ldr	r2, [r3, #16]
9000b7e4:	05d0      	lsls	r0, r2, #23
9000b7e6:	d502      	bpl.n	9000b7ee <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000b7e8:	68da      	ldr	r2, [r3, #12]
9000b7ea:	0611      	lsls	r1, r2, #24
9000b7ec:	d46d      	bmi.n	9000b8ca <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000b7ee:	691a      	ldr	r2, [r3, #16]
9000b7f0:	0652      	lsls	r2, r2, #25
9000b7f2:	d502      	bpl.n	9000b7fa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000b7f4:	68da      	ldr	r2, [r3, #12]
9000b7f6:	0650      	lsls	r0, r2, #25
9000b7f8:	d46f      	bmi.n	9000b8da <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000b7fa:	691a      	ldr	r2, [r3, #16]
9000b7fc:	0691      	lsls	r1, r2, #26
9000b7fe:	d502      	bpl.n	9000b806 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000b800:	68da      	ldr	r2, [r3, #12]
9000b802:	0692      	lsls	r2, r2, #26
9000b804:	d449      	bmi.n	9000b89a <HAL_TIM_IRQHandler+0x106>
}
9000b806:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000b808:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000b80c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000b80e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000b810:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000b812:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000b814:	69db      	ldr	r3, [r3, #28]
9000b816:	f413 7f40 	tst.w	r3, #768	; 0x300
9000b81a:	d16f      	bne.n	9000b8fc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000b81c:	f7ff ffb2 	bl	9000b784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b820:	4620      	mov	r0, r4
9000b822:	f7ff ffb3 	bl	9000b78c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b826:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000b828:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b82a:	7722      	strb	r2, [r4, #28]
9000b82c:	e7cd      	b.n	9000b7ca <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000b82e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000b832:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000b834:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000b836:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000b838:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000b83a:	69db      	ldr	r3, [r3, #28]
9000b83c:	079b      	lsls	r3, r3, #30
9000b83e:	d15a      	bne.n	9000b8f6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000b840:	f7ff ffa0 	bl	9000b784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b844:	4620      	mov	r0, r4
9000b846:	f7ff ffa1 	bl	9000b78c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b84a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000b84c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b84e:	7722      	strb	r2, [r4, #28]
9000b850:	e7b5      	b.n	9000b7be <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000b852:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000b856:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000b858:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000b85a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000b85c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000b85e:	699b      	ldr	r3, [r3, #24]
9000b860:	f413 7f40 	tst.w	r3, #768	; 0x300
9000b864:	d144      	bne.n	9000b8f0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000b866:	f7ff ff8d 	bl	9000b784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b86a:	4620      	mov	r0, r4
9000b86c:	f7ff ff8e 	bl	9000b78c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b870:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000b872:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b874:	7722      	strb	r2, [r4, #28]
9000b876:	e79c      	b.n	9000b7b2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000b878:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000b87c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000b87e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000b880:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000b882:	699b      	ldr	r3, [r3, #24]
9000b884:	0799      	lsls	r1, r3, #30
9000b886:	d130      	bne.n	9000b8ea <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000b888:	f7ff ff7c 	bl	9000b784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b88c:	4620      	mov	r0, r4
9000b88e:	f7ff ff7d 	bl	9000b78c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b892:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000b894:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b896:	7722      	strb	r2, [r4, #28]
9000b898:	e785      	b.n	9000b7a6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000b89a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000b89e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000b8a0:	611a      	str	r2, [r3, #16]
}
9000b8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000b8a6:	f000 b82d 	b.w	9000b904 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000b8aa:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000b8ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000b8b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000b8b2:	f7f8 fda1 	bl	900043f8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000b8b6:	6823      	ldr	r3, [r4, #0]
9000b8b8:	e78d      	b.n	9000b7d6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000b8ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000b8be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000b8c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000b8c2:	f000 f821 	bl	9000b908 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000b8c6:	6823      	ldr	r3, [r4, #0]
9000b8c8:	e78b      	b.n	9000b7e2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000b8ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000b8ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000b8d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000b8d2:	f000 f81b 	bl	9000b90c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000b8d6:	6823      	ldr	r3, [r4, #0]
9000b8d8:	e789      	b.n	9000b7ee <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000b8da:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000b8de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000b8e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000b8e2:	f7ff ff55 	bl	9000b790 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000b8e6:	6823      	ldr	r3, [r4, #0]
9000b8e8:	e787      	b.n	9000b7fa <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000b8ea:	f7ff ff4d 	bl	9000b788 <HAL_TIM_IC_CaptureCallback>
9000b8ee:	e7d0      	b.n	9000b892 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000b8f0:	f7ff ff4a 	bl	9000b788 <HAL_TIM_IC_CaptureCallback>
9000b8f4:	e7bc      	b.n	9000b870 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000b8f6:	f7ff ff47 	bl	9000b788 <HAL_TIM_IC_CaptureCallback>
9000b8fa:	e7a6      	b.n	9000b84a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000b8fc:	f7ff ff44 	bl	9000b788 <HAL_TIM_IC_CaptureCallback>
9000b900:	e791      	b.n	9000b826 <HAL_TIM_IRQHandler+0x92>
9000b902:	bf00      	nop

9000b904 <HAL_TIMEx_CommutCallback>:
9000b904:	4770      	bx	lr
9000b906:	bf00      	nop

9000b908 <HAL_TIMEx_BreakCallback>:
9000b908:	4770      	bx	lr
9000b90a:	bf00      	nop

9000b90c <HAL_TIMEx_Break2Callback>:
9000b90c:	4770      	bx	lr
9000b90e:	bf00      	nop

9000b910 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000b910:	680b      	ldr	r3, [r1, #0]
{
9000b912:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000b914:	b9d3      	cbnz	r3, 9000b94c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b916:	6804      	ldr	r4, [r0, #0]
9000b918:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000b91c:	684a      	ldr	r2, [r1, #4]
9000b91e:	4023      	ands	r3, r4
9000b920:	4313      	orrs	r3, r2
9000b922:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000b926:	4323      	orrs	r3, r4
9000b928:	4313      	orrs	r3, r2
9000b92a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000b92e:	4323      	orrs	r3, r4
9000b930:	4313      	orrs	r3, r2
9000b932:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000b936:	4323      	orrs	r3, r4
9000b938:	4313      	orrs	r3, r2
9000b93a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000b93e:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000b940:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b944:	4313      	orrs	r3, r2
9000b946:	6003      	str	r3, [r0, #0]
}
9000b948:	2000      	movs	r0, #0
9000b94a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b94c:	6802      	ldr	r2, [r0, #0]
9000b94e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000b952:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000b956:	4322      	orrs	r2, r4
9000b958:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000b95a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000b95c:	4b0a      	ldr	r3, [pc, #40]	; (9000b988 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000b95e:	4322      	orrs	r2, r4
9000b960:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000b962:	6842      	ldr	r2, [r0, #4]
9000b964:	4013      	ands	r3, r2
9000b966:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000b96a:	4323      	orrs	r3, r4
9000b96c:	4313      	orrs	r3, r2
9000b96e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000b972:	4323      	orrs	r3, r4
9000b974:	4313      	orrs	r3, r2
9000b976:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000b97a:	4323      	orrs	r3, r4
}
9000b97c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000b980:	4313      	orrs	r3, r2
9000b982:	6043      	str	r3, [r0, #4]
}
9000b984:	2000      	movs	r0, #0
9000b986:	4770      	bx	lr
9000b988:	ffff8000 	.word	0xffff8000

9000b98c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000b98c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000b98e:	bb0a      	cbnz	r2, 9000b9d4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b990:	6883      	ldr	r3, [r0, #8]
9000b992:	e9d1 2400 	ldrd	r2, r4, [r1]
9000b996:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000b99a:	3c01      	subs	r4, #1
9000b99c:	3a01      	subs	r2, #1
9000b99e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000b9a2:	4313      	orrs	r3, r2
9000b9a4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
9000b9a8:	3a01      	subs	r2, #1
9000b9aa:	3c01      	subs	r4, #1
9000b9ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
9000b9b0:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
9000b9b4:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
9000b9b8:	6989      	ldr	r1, [r1, #24]
9000b9ba:	3b01      	subs	r3, #1
9000b9bc:	3c01      	subs	r4, #1
9000b9be:	3901      	subs	r1, #1
9000b9c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
9000b9c4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
9000b9c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000b9cc:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b9ce:	6083      	str	r3, [r0, #8]
}
9000b9d0:	2000      	movs	r0, #0
9000b9d2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b9d4:	6882      	ldr	r2, [r0, #8]
9000b9d6:	68cc      	ldr	r4, [r1, #12]
9000b9d8:	4b11      	ldr	r3, [pc, #68]	; (9000ba20 <FMC_SDRAM_Timing_Init+0x94>)
9000b9da:	3c01      	subs	r4, #1
9000b9dc:	4013      	ands	r3, r2
9000b9de:	694a      	ldr	r2, [r1, #20]
9000b9e0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
9000b9e4:	1e54      	subs	r4, r2, #1
9000b9e6:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000b9ea:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000b9ee:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000b9f0:	68c3      	ldr	r3, [r0, #12]
9000b9f2:	1e6c      	subs	r4, r5, #1
9000b9f4:	3a01      	subs	r2, #1
9000b9f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000b9fa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000b9fe:	690c      	ldr	r4, [r1, #16]
9000ba00:	431a      	orrs	r2, r3
9000ba02:	688b      	ldr	r3, [r1, #8]
9000ba04:	3c01      	subs	r4, #1
9000ba06:	6989      	ldr	r1, [r1, #24]
9000ba08:	3b01      	subs	r3, #1
9000ba0a:	3901      	subs	r1, #1
9000ba0c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
9000ba10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
9000ba14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
9000ba18:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ba1a:	60c3      	str	r3, [r0, #12]
}
9000ba1c:	2000      	movs	r0, #0
9000ba1e:	4770      	bx	lr
9000ba20:	ff0f0fff 	.word	0xff0f0fff

9000ba24 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000ba24:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000ba26:	2200      	movs	r2, #0
{
9000ba28:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000ba2a:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000ba2e:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000ba32:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000ba36:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000ba3a:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000ba3c:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000ba40:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000ba42:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000ba44:	619a      	str	r2, [r3, #24]
}
9000ba46:	bc30      	pop	{r4, r5}
9000ba48:	4770      	bx	lr
9000ba4a:	bf00      	nop

9000ba4c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000ba4c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ba4e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000ba52:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ba54:	6900      	ldr	r0, [r0, #16]
9000ba56:	4323      	orrs	r3, r4
9000ba58:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000ba5c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000ba60:	4c05      	ldr	r4, [pc, #20]	; (9000ba78 <FMC_SDRAM_SendCommand+0x2c>)
9000ba62:	3901      	subs	r1, #1
9000ba64:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000ba66:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ba68:	4323      	orrs	r3, r4
}
9000ba6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000ba6e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000ba72:	6113      	str	r3, [r2, #16]
}
9000ba74:	4770      	bx	lr
9000ba76:	bf00      	nop
9000ba78:	ffc00000 	.word	0xffc00000

9000ba7c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000ba7c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ba7e:	4b05      	ldr	r3, [pc, #20]	; (9000ba94 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000ba80:	2000      	movs	r0, #0
{
9000ba82:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ba84:	6954      	ldr	r4, [r2, #20]
9000ba86:	4023      	ands	r3, r4
}
9000ba88:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000ba8c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000ba90:	6151      	str	r1, [r2, #20]
}
9000ba92:	4770      	bx	lr
9000ba94:	ffffc001 	.word	0xffffc001

9000ba98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000ba98:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000ba9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ba9e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000baa0:	f002 fc8c 	bl	9000e3bc <xTaskGetSchedulerState>
9000baa4:	2801      	cmp	r0, #1
9000baa6:	d100      	bne.n	9000baaa <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000baa8:	bd08      	pop	{r3, pc}
9000baaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000baae:	f000 bcc9 	b.w	9000c444 <xPortSysTickHandler>
9000bab2:	bf00      	nop

9000bab4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000bab4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000bab8:	b92b      	cbnz	r3, 9000bac6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000baba:	4b06      	ldr	r3, [pc, #24]	; (9000bad4 <osKernelInitialize+0x20>)
9000babc:	6818      	ldr	r0, [r3, #0]
9000babe:	b928      	cbnz	r0, 9000bacc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000bac0:	2201      	movs	r2, #1
9000bac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000bac4:	4770      	bx	lr
    stat = osErrorISR;
9000bac6:	f06f 0005 	mvn.w	r0, #5
9000baca:	4770      	bx	lr
    } else {
      stat = osError;
9000bacc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000bad0:	4770      	bx	lr
9000bad2:	bf00      	nop
9000bad4:	2400c304 	.word	0x2400c304

9000bad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000bad8:	b510      	push	{r4, lr}
9000bada:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000bade:	b974      	cbnz	r4, 9000bafe <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000bae0:	4b08      	ldr	r3, [pc, #32]	; (9000bb04 <osKernelStart+0x2c>)
9000bae2:	681a      	ldr	r2, [r3, #0]
9000bae4:	2a01      	cmp	r2, #1
9000bae6:	d107      	bne.n	9000baf8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000bae8:	4907      	ldr	r1, [pc, #28]	; (9000bb08 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000baea:	2202      	movs	r2, #2
9000baec:	77cc      	strb	r4, [r1, #31]
9000baee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000baf0:	f002 f9f4 	bl	9000dedc <vTaskStartScheduler>
      stat = osOK;
9000baf4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000baf6:	bd10      	pop	{r4, pc}
      stat = osError;
9000baf8:	f04f 30ff 	mov.w	r0, #4294967295
}
9000bafc:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000bafe:	f06f 0005 	mvn.w	r0, #5
}
9000bb02:	bd10      	pop	{r4, pc}
9000bb04:	2400c304 	.word	0x2400c304
9000bb08:	e000ed00 	.word	0xe000ed00

9000bb0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000bb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000bb0e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000bb10:	b087      	sub	sp, #28
9000bb12:	4614      	mov	r4, r2
  hTask = NULL;
9000bb14:	9505      	str	r5, [sp, #20]
9000bb16:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000bb1a:	bb4a      	cbnz	r2, 9000bb70 <osThreadNew+0x64>
9000bb1c:	b340      	cbz	r0, 9000bb70 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000bb1e:	b1e4      	cbz	r4, 9000bb5a <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000bb20:	69a6      	ldr	r6, [r4, #24]
9000bb22:	bb4e      	cbnz	r6, 9000bb78 <osThreadNew+0x6c>
9000bb24:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000bb26:	6863      	ldr	r3, [r4, #4]
9000bb28:	07db      	lsls	r3, r3, #31
9000bb2a:	d421      	bmi.n	9000bb70 <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000bb2c:	6963      	ldr	r3, [r4, #20]
9000bb2e:	b33b      	cbz	r3, 9000bb80 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000bb30:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000bb34:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
9000bb36:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000bb38:	b33d      	cbz	r5, 9000bb8a <osThreadNew+0x7e>
9000bb3a:	68e2      	ldr	r2, [r4, #12]
9000bb3c:	2a5f      	cmp	r2, #95	; 0x5f
9000bb3e:	d917      	bls.n	9000bb70 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000bb40:	6924      	ldr	r4, [r4, #16]
9000bb42:	b1ab      	cbz	r3, 9000bb70 <osThreadNew+0x64>
9000bb44:	b1a4      	cbz	r4, 9000bb70 <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000bb46:	460b      	mov	r3, r1
9000bb48:	4662      	mov	r2, ip
9000bb4a:	4639      	mov	r1, r7
9000bb4c:	9600      	str	r6, [sp, #0]
9000bb4e:	e9cd 4501 	strd	r4, r5, [sp, #4]
9000bb52:	f002 f901 	bl	9000dd58 <xTaskCreateStatic>
9000bb56:	4605      	mov	r5, r0
9000bb58:	e00b      	b.n	9000bb72 <osThreadNew+0x66>
9000bb5a:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000bb5c:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000bb5e:	460b      	mov	r3, r1
9000bb60:	4621      	mov	r1, r4
9000bb62:	ac05      	add	r4, sp, #20
9000bb64:	9600      	str	r6, [sp, #0]
9000bb66:	9401      	str	r4, [sp, #4]
9000bb68:	f002 f930 	bl	9000ddcc <xTaskCreate>
9000bb6c:	2801      	cmp	r0, #1
9000bb6e:	d00a      	beq.n	9000bb86 <osThreadNew+0x7a>
        return (NULL);
9000bb70:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000bb72:	4628      	mov	r0, r5
9000bb74:	b007      	add	sp, #28
9000bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000bb78:	1e72      	subs	r2, r6, #1
9000bb7a:	2a37      	cmp	r2, #55	; 0x37
9000bb7c:	d9d3      	bls.n	9000bb26 <osThreadNew+0x1a>
9000bb7e:	e7f8      	b.n	9000bb72 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
9000bb80:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000bb84:	e7d6      	b.n	9000bb34 <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
9000bb86:	9d05      	ldr	r5, [sp, #20]
9000bb88:	e7f3      	b.n	9000bb72 <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000bb8a:	68e3      	ldr	r3, [r4, #12]
9000bb8c:	2b00      	cmp	r3, #0
9000bb8e:	d1f0      	bne.n	9000bb72 <osThreadNew+0x66>
9000bb90:	6923      	ldr	r3, [r4, #16]
9000bb92:	2b00      	cmp	r3, #0
9000bb94:	d1ed      	bne.n	9000bb72 <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000bb96:	fa1f f28c 	uxth.w	r2, ip
9000bb9a:	463c      	mov	r4, r7
9000bb9c:	e7df      	b.n	9000bb5e <osThreadNew+0x52>
9000bb9e:	bf00      	nop

9000bba0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000bba0:	b510      	push	{r4, lr}
9000bba2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000bba6:	b92c      	cbnz	r4, 9000bbb4 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000bba8:	b900      	cbnz	r0, 9000bbac <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000bbaa:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000bbac:	f002 f940 	bl	9000de30 <vTaskDelay>
    stat = osOK;
9000bbb0:	4620      	mov	r0, r4
}
9000bbb2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000bbb4:	f06f 0005 	mvn.w	r0, #5
}
9000bbb8:	bd10      	pop	{r4, pc}
9000bbba:	bf00      	nop

9000bbbc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000bbbc:	b530      	push	{r4, r5, lr}
9000bbbe:	b083      	sub	sp, #12
9000bbc0:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000bbc4:	b99d      	cbnz	r5, 9000bbee <osMutexNew+0x32>
    if (attr != NULL) {
9000bbc6:	4604      	mov	r4, r0
9000bbc8:	b1a0      	cbz	r0, 9000bbf4 <osMutexNew+0x38>
      type = attr->attr_bits;
9000bbca:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000bbcc:	072b      	lsls	r3, r5, #28
9000bbce:	d40e      	bmi.n	9000bbee <osMutexNew+0x32>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000bbd0:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000bbd2:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000bbd6:	68c3      	ldr	r3, [r0, #12]
9000bbd8:	b141      	cbz	r1, 9000bbec <osMutexNew+0x30>
9000bbda:	2b4f      	cmp	r3, #79	; 0x4f
9000bbdc:	d907      	bls.n	9000bbee <osMutexNew+0x32>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000bbde:	b1d5      	cbz	r5, 9000bc16 <osMutexNew+0x5a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000bbe0:	2004      	movs	r0, #4
9000bbe2:	f001 f841 	bl	9000cc68 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000bbe6:	b110      	cbz	r0, 9000bbee <osMutexNew+0x32>
        if (attr != NULL) {
          name = attr->name;
9000bbe8:	6824      	ldr	r4, [r4, #0]
9000bbea:	e009      	b.n	9000bc00 <osMutexNew+0x44>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000bbec:	b1bb      	cbz	r3, 9000bc1e <osMutexNew+0x62>
  hMutex = NULL;
9000bbee:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000bbf0:	b003      	add	sp, #12
9000bbf2:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
9000bbf4:	2001      	movs	r0, #1
9000bbf6:	f001 f8a7 	bl	9000cd48 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000bbfa:	2800      	cmp	r0, #0
9000bbfc:	d0f7      	beq.n	9000bbee <osMutexNew+0x32>
9000bbfe:	4625      	mov	r5, r4
        vQueueAddToRegistry (hMutex, name);
9000bc00:	4621      	mov	r1, r4
9000bc02:	9001      	str	r0, [sp, #4]
9000bc04:	f001 fd6a 	bl	9000d6dc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000bc08:	9801      	ldr	r0, [sp, #4]
9000bc0a:	2d00      	cmp	r5, #0
9000bc0c:	d0f0      	beq.n	9000bbf0 <osMutexNew+0x34>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000bc0e:	f040 0001 	orr.w	r0, r0, #1
}
9000bc12:	b003      	add	sp, #12
9000bc14:	bd30      	pop	{r4, r5, pc}
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000bc16:	2001      	movs	r0, #1
9000bc18:	f001 f826 	bl	9000cc68 <xQueueCreateMutexStatic>
9000bc1c:	e7e3      	b.n	9000bbe6 <osMutexNew+0x2a>
            if (rmtx != 0U) {
9000bc1e:	b91d      	cbnz	r5, 9000bc28 <osMutexNew+0x6c>
              hMutex = xSemaphoreCreateMutex ();
9000bc20:	2001      	movs	r0, #1
9000bc22:	f001 f891 	bl	9000cd48 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000bc26:	e7de      	b.n	9000bbe6 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000bc28:	2004      	movs	r0, #4
9000bc2a:	f001 f88d 	bl	9000cd48 <xQueueCreateMutex>
9000bc2e:	e7da      	b.n	9000bbe6 <osMutexNew+0x2a>

9000bc30 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000bc30:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000bc34:	f000 0301 	and.w	r3, r0, #1
9000bc38:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000bc3c:	b9a8      	cbnz	r0, 9000bc6a <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000bc3e:	b1ba      	cbz	r2, 9000bc70 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000bc40:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000bc42:	b510      	push	{r4, lr}
9000bc44:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000bc46:	b953      	cbnz	r3, 9000bc5e <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000bc48:	f001 fafa 	bl	9000d240 <xQueueSemaphoreTake>
9000bc4c:	2801      	cmp	r0, #1
9000bc4e:	d00a      	beq.n	9000bc66 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000bc50:	2c00      	cmp	r4, #0
9000bc52:	bf14      	ite	ne
9000bc54:	f06f 0001 	mvnne.w	r0, #1
9000bc58:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000bc5c:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000bc5e:	f001 fc77 	bl	9000d550 <xQueueTakeMutexRecursive>
9000bc62:	2801      	cmp	r0, #1
9000bc64:	d1f4      	bne.n	9000bc50 <osMutexAcquire+0x20>
  stat = osOK;
9000bc66:	2000      	movs	r0, #0
}
9000bc68:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000bc6a:	f06f 0005 	mvn.w	r0, #5
9000bc6e:	4770      	bx	lr
    stat = osErrorParameter;
9000bc70:	f06f 0003 	mvn.w	r0, #3
}
9000bc74:	4770      	bx	lr
9000bc76:	bf00      	nop

9000bc78 <osMutexRelease>:
9000bc78:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000bc7c:	b9ba      	cbnz	r2, 9000bcae <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000bc7e:	b510      	push	{r4, lr}
9000bc80:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000bc84:	b1b4      	cbz	r4, 9000bcb4 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000bc86:	f000 0301 	and.w	r3, r0, #1
9000bc8a:	b943      	cbnz	r3, 9000bc9e <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000bc8c:	461a      	mov	r2, r3
9000bc8e:	4619      	mov	r1, r3
9000bc90:	4620      	mov	r0, r4
9000bc92:	f000 fe67 	bl	9000c964 <xQueueGenericSend>
9000bc96:	2801      	cmp	r0, #1
9000bc98:	d106      	bne.n	9000bca8 <osMutexRelease+0x30>
  stat = osOK;
9000bc9a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000bc9c:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000bc9e:	4620      	mov	r0, r4
9000bca0:	f001 f832 	bl	9000cd08 <xQueueGiveMutexRecursive>
9000bca4:	2801      	cmp	r0, #1
9000bca6:	d0f8      	beq.n	9000bc9a <osMutexRelease+0x22>
        stat = osErrorResource;
9000bca8:	f06f 0002 	mvn.w	r0, #2
}
9000bcac:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000bcae:	f06f 0005 	mvn.w	r0, #5
}
9000bcb2:	4770      	bx	lr
    stat = osErrorParameter;
9000bcb4:	f06f 0003 	mvn.w	r0, #3
}
9000bcb8:	bd10      	pop	{r4, pc}
9000bcba:	bf00      	nop

9000bcbc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000bcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
9000bcbe:	b083      	sub	sp, #12
9000bcc0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000bcc4:	b98e      	cbnz	r6, 9000bcea <osSemaphoreNew+0x2e>
9000bcc6:	4605      	mov	r5, r0
9000bcc8:	b178      	cbz	r0, 9000bcea <osSemaphoreNew+0x2e>
9000bcca:	4288      	cmp	r0, r1
9000bccc:	460f      	mov	r7, r1
9000bcce:	d30c      	bcc.n	9000bcea <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000bcd0:	4614      	mov	r4, r2
9000bcd2:	b182      	cbz	r2, 9000bcf6 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000bcd4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000bcd8:	b15a      	cbz	r2, 9000bcf2 <osSemaphoreNew+0x36>
9000bcda:	2b4f      	cmp	r3, #79	; 0x4f
9000bcdc:	d905      	bls.n	9000bcea <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000bcde:	2801      	cmp	r0, #1
9000bce0:	d032      	beq.n	9000bd48 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000bce2:	f000 fd97 	bl	9000c814 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000bce6:	4605      	mov	r5, r0
9000bce8:	b978      	cbnz	r0, 9000bd0a <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000bcea:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000bcec:	4628      	mov	r0, r5
9000bcee:	b003      	add	sp, #12
9000bcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000bcf2:	2b00      	cmp	r3, #0
9000bcf4:	d1f9      	bne.n	9000bcea <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000bcf6:	2d01      	cmp	r5, #1
9000bcf8:	d00f      	beq.n	9000bd1a <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000bcfa:	4628      	mov	r0, r5
9000bcfc:	4639      	mov	r1, r7
9000bcfe:	f000 fdeb 	bl	9000c8d8 <xQueueCreateCountingSemaphore>
9000bd02:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000bd04:	2d00      	cmp	r5, #0
9000bd06:	d0f0      	beq.n	9000bcea <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000bd08:	b104      	cbz	r4, 9000bd0c <osSemaphoreNew+0x50>
          name = attr->name;
9000bd0a:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000bd0c:	4628      	mov	r0, r5
9000bd0e:	4621      	mov	r1, r4
9000bd10:	f001 fce4 	bl	9000d6dc <vQueueAddToRegistry>
}
9000bd14:	4628      	mov	r0, r5
9000bd16:	b003      	add	sp, #12
9000bd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000bd1a:	4628      	mov	r0, r5
9000bd1c:	2203      	movs	r2, #3
9000bd1e:	2100      	movs	r1, #0
9000bd20:	f000 fd36 	bl	9000c790 <xQueueGenericCreate>
9000bd24:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000bd26:	2d00      	cmp	r5, #0
9000bd28:	d0df      	beq.n	9000bcea <osSemaphoreNew+0x2e>
9000bd2a:	2f00      	cmp	r7, #0
9000bd2c:	d0ea      	beq.n	9000bd04 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000bd2e:	2300      	movs	r3, #0
9000bd30:	4628      	mov	r0, r5
9000bd32:	461a      	mov	r2, r3
9000bd34:	4619      	mov	r1, r3
9000bd36:	f000 fe15 	bl	9000c964 <xQueueGenericSend>
9000bd3a:	2801      	cmp	r0, #1
9000bd3c:	d0e4      	beq.n	9000bd08 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000bd3e:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000bd40:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000bd42:	f001 fc85 	bl	9000d650 <vQueueDelete>
      if (hSemaphore != NULL) {
9000bd46:	e7d1      	b.n	9000bcec <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000bd48:	4613      	mov	r3, r2
9000bd4a:	2203      	movs	r2, #3
9000bd4c:	4631      	mov	r1, r6
9000bd4e:	9200      	str	r2, [sp, #0]
9000bd50:	4632      	mov	r2, r6
9000bd52:	f000 fcb1 	bl	9000c6b8 <xQueueGenericCreateStatic>
9000bd56:	4605      	mov	r5, r0
9000bd58:	e7e5      	b.n	9000bd26 <osSemaphoreNew+0x6a>
9000bd5a:	bf00      	nop

9000bd5c <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000bd5c:	b370      	cbz	r0, 9000bdbc <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000bd5e:	b510      	push	{r4, lr}
9000bd60:	460c      	mov	r4, r1
9000bd62:	b082      	sub	sp, #8
9000bd64:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000bd68:	b1c3      	cbz	r3, 9000bd9c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000bd6a:	bb21      	cbnz	r1, 9000bdb6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000bd6c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000bd6e:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000bd70:	f001 fc0e 	bl	9000d590 <xQueueReceiveFromISR>
9000bd74:	2801      	cmp	r0, #1
9000bd76:	d11a      	bne.n	9000bdae <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000bd78:	9b01      	ldr	r3, [sp, #4]
9000bd7a:	b913      	cbnz	r3, 9000bd82 <osSemaphoreAcquire+0x26>
  stat = osOK;
9000bd7c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000bd7e:	b002      	add	sp, #8
9000bd80:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000bd82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000bd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000bd8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000bd8e:	f3bf 8f4f 	dsb	sy
9000bd92:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000bd96:	4620      	mov	r0, r4
}
9000bd98:	b002      	add	sp, #8
9000bd9a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000bd9c:	f001 fa50 	bl	9000d240 <xQueueSemaphoreTake>
9000bda0:	2801      	cmp	r0, #1
9000bda2:	d0eb      	beq.n	9000bd7c <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000bda4:	b11c      	cbz	r4, 9000bdae <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000bda6:	f06f 0001 	mvn.w	r0, #1
}
9000bdaa:	b002      	add	sp, #8
9000bdac:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000bdae:	f06f 0002 	mvn.w	r0, #2
}
9000bdb2:	b002      	add	sp, #8
9000bdb4:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000bdb6:	f06f 0003 	mvn.w	r0, #3
9000bdba:	e7e0      	b.n	9000bd7e <osSemaphoreAcquire+0x22>
9000bdbc:	f06f 0003 	mvn.w	r0, #3
}
9000bdc0:	4770      	bx	lr
9000bdc2:	bf00      	nop

9000bdc4 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000bdc4:	b330      	cbz	r0, 9000be14 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000bdc6:	b510      	push	{r4, lr}
9000bdc8:	b082      	sub	sp, #8
9000bdca:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000bdce:	b1ab      	cbz	r3, 9000bdfc <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000bdd0:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000bdd2:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000bdd4:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000bdd6:	f001 f859 	bl	9000ce8c <xQueueGiveFromISR>
9000bdda:	2801      	cmp	r0, #1
9000bddc:	d117      	bne.n	9000be0e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000bdde:	9b01      	ldr	r3, [sp, #4]
9000bde0:	b193      	cbz	r3, 9000be08 <osSemaphoreRelease+0x44>
9000bde2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000bde6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000bdea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000bdee:	f3bf 8f4f 	dsb	sy
9000bdf2:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000bdf6:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000bdf8:	b002      	add	sp, #8
9000bdfa:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000bdfc:	461a      	mov	r2, r3
9000bdfe:	4619      	mov	r1, r3
9000be00:	f000 fdb0 	bl	9000c964 <xQueueGenericSend>
9000be04:	2801      	cmp	r0, #1
9000be06:	d102      	bne.n	9000be0e <osSemaphoreRelease+0x4a>
  stat = osOK;
9000be08:	2000      	movs	r0, #0
}
9000be0a:	b002      	add	sp, #8
9000be0c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000be0e:	f06f 0002 	mvn.w	r0, #2
9000be12:	e7fa      	b.n	9000be0a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000be14:	f06f 0003 	mvn.w	r0, #3
}
9000be18:	4770      	bx	lr
9000be1a:	bf00      	nop

9000be1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000be1e:	b085      	sub	sp, #20
9000be20:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000be24:	b987      	cbnz	r7, 9000be48 <osMessageQueueNew+0x2c>
9000be26:	4605      	mov	r5, r0
9000be28:	b170      	cbz	r0, 9000be48 <osMessageQueueNew+0x2c>
9000be2a:	b169      	cbz	r1, 9000be48 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000be2c:	4614      	mov	r4, r2
9000be2e:	b172      	cbz	r2, 9000be4e <osMessageQueueNew+0x32>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000be30:	6893      	ldr	r3, [r2, #8]
9000be32:	b1bb      	cbz	r3, 9000be64 <osMessageQueueNew+0x48>
9000be34:	68d2      	ldr	r2, [r2, #12]
9000be36:	2a4f      	cmp	r2, #79	; 0x4f
9000be38:	d906      	bls.n	9000be48 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000be3a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000be3c:	b122      	cbz	r2, 9000be48 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000be3e:	fb01 f505 	mul.w	r5, r1, r5
9000be42:	6966      	ldr	r6, [r4, #20]
9000be44:	42ae      	cmp	r6, r5
9000be46:	d21c      	bcs.n	9000be82 <osMessageQueueNew+0x66>
  hQueue = NULL;
9000be48:	2000      	movs	r0, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000be4a:	b005      	add	sp, #20
9000be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000be4e:	f000 fc9f 	bl	9000c790 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000be52:	2800      	cmp	r0, #0
9000be54:	d0f8      	beq.n	9000be48 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000be56:	4621      	mov	r1, r4
9000be58:	9003      	str	r0, [sp, #12]
9000be5a:	f001 fc3f 	bl	9000d6dc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
9000be5e:	9803      	ldr	r0, [sp, #12]
}
9000be60:	b005      	add	sp, #20
9000be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000be64:	68d3      	ldr	r3, [r2, #12]
9000be66:	2b00      	cmp	r3, #0
9000be68:	d1ee      	bne.n	9000be48 <osMessageQueueNew+0x2c>
9000be6a:	6913      	ldr	r3, [r2, #16]
9000be6c:	2b00      	cmp	r3, #0
9000be6e:	d1eb      	bne.n	9000be48 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000be70:	6952      	ldr	r2, [r2, #20]
9000be72:	2a00      	cmp	r2, #0
9000be74:	d1e8      	bne.n	9000be48 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000be76:	f000 fc8b 	bl	9000c790 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000be7a:	2800      	cmp	r0, #0
9000be7c:	d0e4      	beq.n	9000be48 <osMessageQueueNew+0x2c>
        name = attr->name;
9000be7e:	6824      	ldr	r4, [r4, #0]
9000be80:	e7e9      	b.n	9000be56 <osMessageQueueNew+0x3a>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000be82:	9700      	str	r7, [sp, #0]
9000be84:	f000 fc18 	bl	9000c6b8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000be88:	2800      	cmp	r0, #0
9000be8a:	d1f8      	bne.n	9000be7e <osMessageQueueNew+0x62>
9000be8c:	e7dc      	b.n	9000be48 <osMessageQueueNew+0x2c>
9000be8e:	bf00      	nop

9000be90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000be90:	b530      	push	{r4, r5, lr}
9000be92:	461c      	mov	r4, r3
9000be94:	b083      	sub	sp, #12
9000be96:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000be9a:	b30b      	cbz	r3, 9000bee0 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000be9c:	3c00      	subs	r4, #0
9000be9e:	bf18      	it	ne
9000bea0:	2401      	movne	r4, #1
9000bea2:	2900      	cmp	r1, #0
9000bea4:	bf08      	it	eq
9000bea6:	f044 0401 	orreq.w	r4, r4, #1
9000beaa:	bb7c      	cbnz	r4, 9000bf0c <osMessageQueuePut+0x7c>
9000beac:	fab0 f480 	clz	r4, r0
9000beb0:	0964      	lsrs	r4, r4, #5
9000beb2:	b358      	cbz	r0, 9000bf0c <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000beb4:	4623      	mov	r3, r4
9000beb6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000beb8:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000beba:	f000 ff7d 	bl	9000cdb8 <xQueueGenericSendFromISR>
9000bebe:	2801      	cmp	r0, #1
9000bec0:	d120      	bne.n	9000bf04 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000bec2:	9b01      	ldr	r3, [sp, #4]
9000bec4:	b1db      	cbz	r3, 9000befe <osMessageQueuePut+0x6e>
9000bec6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000beca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000bece:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000bed2:	f3bf 8f4f 	dsb	sy
9000bed6:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000beda:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000bedc:	b003      	add	sp, #12
9000bede:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000bee0:	b1a0      	cbz	r0, 9000bf0c <osMessageQueuePut+0x7c>
9000bee2:	fab1 f381 	clz	r3, r1
9000bee6:	095b      	lsrs	r3, r3, #5
9000bee8:	b181      	cbz	r1, 9000bf0c <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000beea:	4622      	mov	r2, r4
9000beec:	f000 fd3a 	bl	9000c964 <xQueueGenericSend>
9000bef0:	2801      	cmp	r0, #1
9000bef2:	d004      	beq.n	9000befe <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000bef4:	b134      	cbz	r4, 9000bf04 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000bef6:	f06f 0001 	mvn.w	r0, #1
}
9000befa:	b003      	add	sp, #12
9000befc:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000befe:	2000      	movs	r0, #0
}
9000bf00:	b003      	add	sp, #12
9000bf02:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000bf04:	f06f 0002 	mvn.w	r0, #2
}
9000bf08:	b003      	add	sp, #12
9000bf0a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000bf0c:	f06f 0003 	mvn.w	r0, #3
9000bf10:	e7e4      	b.n	9000bedc <osMessageQueuePut+0x4c>
9000bf12:	bf00      	nop

9000bf14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000bf14:	b530      	push	{r4, r5, lr}
9000bf16:	461c      	mov	r4, r3
9000bf18:	b083      	sub	sp, #12
9000bf1a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000bf1e:	b303      	cbz	r3, 9000bf62 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000bf20:	3c00      	subs	r4, #0
9000bf22:	bf18      	it	ne
9000bf24:	2401      	movne	r4, #1
9000bf26:	2900      	cmp	r1, #0
9000bf28:	bf08      	it	eq
9000bf2a:	f044 0401 	orreq.w	r4, r4, #1
9000bf2e:	bb5c      	cbnz	r4, 9000bf88 <osMessageQueueGet+0x74>
9000bf30:	fab0 f480 	clz	r4, r0
9000bf34:	0964      	lsrs	r4, r4, #5
9000bf36:	b338      	cbz	r0, 9000bf88 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000bf38:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000bf3a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000bf3c:	f001 fb28 	bl	9000d590 <xQueueReceiveFromISR>
9000bf40:	2801      	cmp	r0, #1
9000bf42:	d11d      	bne.n	9000bf80 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000bf44:	9b01      	ldr	r3, [sp, #4]
9000bf46:	b1c3      	cbz	r3, 9000bf7a <osMessageQueueGet+0x66>
9000bf48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000bf4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000bf50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000bf54:	f3bf 8f4f 	dsb	sy
9000bf58:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000bf5c:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000bf5e:	b003      	add	sp, #12
9000bf60:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000bf62:	b188      	cbz	r0, 9000bf88 <osMessageQueueGet+0x74>
9000bf64:	b181      	cbz	r1, 9000bf88 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000bf66:	4622      	mov	r2, r4
9000bf68:	f000 ffe8 	bl	9000cf3c <xQueueReceive>
9000bf6c:	2801      	cmp	r0, #1
9000bf6e:	d004      	beq.n	9000bf7a <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000bf70:	b134      	cbz	r4, 9000bf80 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000bf72:	f06f 0001 	mvn.w	r0, #1
}
9000bf76:	b003      	add	sp, #12
9000bf78:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000bf7a:	2000      	movs	r0, #0
}
9000bf7c:	b003      	add	sp, #12
9000bf7e:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000bf80:	f06f 0002 	mvn.w	r0, #2
}
9000bf84:	b003      	add	sp, #12
9000bf86:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000bf88:	f06f 0003 	mvn.w	r0, #3
9000bf8c:	e7e7      	b.n	9000bf5e <osMessageQueueGet+0x4a>
9000bf8e:	bf00      	nop

9000bf90 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000bf90:	4b04      	ldr	r3, [pc, #16]	; (9000bfa4 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000bf92:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000bf94:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000bf96:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000bf98:	4c03      	ldr	r4, [pc, #12]	; (9000bfa8 <vApplicationGetIdleTaskMemory+0x18>)
9000bf9a:	600c      	str	r4, [r1, #0]
}
9000bf9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000bfa0:	6013      	str	r3, [r2, #0]
}
9000bfa2:	4770      	bx	lr
9000bfa4:	2400c2a4 	.word	0x2400c2a4
9000bfa8:	2400c0a4 	.word	0x2400c0a4

9000bfac <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000bfac:	4b05      	ldr	r3, [pc, #20]	; (9000bfc4 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000bfae:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000bfb0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000bfb2:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000bfb6:	4c04      	ldr	r4, [pc, #16]	; (9000bfc8 <vApplicationGetTimerTaskMemory+0x1c>)
9000bfb8:	600c      	str	r4, [r1, #0]
}
9000bfba:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000bfbe:	6013      	str	r3, [r2, #0]
}
9000bfc0:	4770      	bx	lr
9000bfc2:	bf00      	nop
9000bfc4:	2400c708 	.word	0x2400c708
9000bfc8:	2400c308 	.word	0x2400c308

9000bfcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000bfd0:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000bfd2:	f002 f81f 	bl	9000e014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000bfd6:	4a52      	ldr	r2, [pc, #328]	; (9000c120 <pvPortMalloc+0x154>)
9000bfd8:	6816      	ldr	r6, [r2, #0]
9000bfda:	2e00      	cmp	r6, #0
9000bfdc:	d06f      	beq.n	9000c0be <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000bfde:	4b51      	ldr	r3, [pc, #324]	; (9000c124 <pvPortMalloc+0x158>)
9000bfe0:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000bfe2:	423d      	tst	r5, r7
9000bfe4:	d12e      	bne.n	9000c044 <pvPortMalloc+0x78>
9000bfe6:	b36d      	cbz	r5, 9000c044 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000bfe8:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000bfec:	076d      	lsls	r5, r5, #29
9000bfee:	d002      	beq.n	9000bff6 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000bff0:	f024 0407 	bic.w	r4, r4, #7
9000bff4:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000bff6:	b32c      	cbz	r4, 9000c044 <pvPortMalloc+0x78>
9000bff8:	f8df c140 	ldr.w	ip, [pc, #320]	; 9000c13c <pvPortMalloc+0x170>
9000bffc:	f8dc 5000 	ldr.w	r5, [ip]
9000c000:	42a5      	cmp	r5, r4
9000c002:	d31f      	bcc.n	9000c044 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000c004:	4848      	ldr	r0, [pc, #288]	; (9000c128 <pvPortMalloc+0x15c>)
9000c006:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000c008:	e003      	b.n	9000c012 <pvPortMalloc+0x46>
9000c00a:	681a      	ldr	r2, [r3, #0]
9000c00c:	b122      	cbz	r2, 9000c018 <pvPortMalloc+0x4c>
9000c00e:	4618      	mov	r0, r3
9000c010:	4613      	mov	r3, r2
9000c012:	6859      	ldr	r1, [r3, #4]
9000c014:	42a1      	cmp	r1, r4
9000c016:	d3f8      	bcc.n	9000c00a <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000c018:	42b3      	cmp	r3, r6
9000c01a:	d013      	beq.n	9000c044 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000c01c:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000c01e:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000c020:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000c024:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000c026:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000c02a:	d929      	bls.n	9000c080 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000c02c:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000c02e:	0748      	lsls	r0, r1, #29
9000c030:	d00f      	beq.n	9000c052 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000c032:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c036:	f383 8811 	msr	BASEPRI, r3
9000c03a:	f3bf 8f6f 	isb	sy
9000c03e:	f3bf 8f4f 	dsb	sy
9000c042:	e7fe      	b.n	9000c042 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000c044:	f04f 0800 	mov.w	r8, #0
9000c048:	f001 ffec 	bl	9000e024 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000c04c:	4640      	mov	r0, r8
9000c04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000c052:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c054:	4a34      	ldr	r2, [pc, #208]	; (9000c128 <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
9000c056:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c058:	4614      	mov	r4, r2
9000c05a:	6812      	ldr	r2, [r2, #0]
9000c05c:	4291      	cmp	r1, r2
9000c05e:	d8fb      	bhi.n	9000c058 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000c060:	6860      	ldr	r0, [r4, #4]
9000c062:	eb04 0e00 	add.w	lr, r4, r0
9000c066:	4571      	cmp	r1, lr
9000c068:	d04a      	beq.n	9000c100 <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c06a:	f8d1 e004 	ldr.w	lr, [r1, #4]
9000c06e:	eb01 000e 	add.w	r0, r1, lr
9000c072:	4282      	cmp	r2, r0
9000c074:	d04b      	beq.n	9000c10e <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000c076:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000c078:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000c07a:	bf18      	it	ne
9000c07c:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000c07e:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000c080:	4a2a      	ldr	r2, [pc, #168]	; (9000c12c <pvPortMalloc+0x160>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000c082:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000c084:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000c086:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000c088:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000c08c:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000c08e:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000c092:	bf38      	it	cc
9000c094:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000c096:	4a26      	ldr	r2, [pc, #152]	; (9000c130 <pvPortMalloc+0x164>)
					pxBlock->pxNextFreeBlock = NULL;
9000c098:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000c09c:	6813      	ldr	r3, [r2, #0]
9000c09e:	3301      	adds	r3, #1
9000c0a0:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000c0a2:	f001 ffbf 	bl	9000e024 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000c0a6:	f018 0f07 	tst.w	r8, #7
9000c0aa:	d0cf      	beq.n	9000c04c <pvPortMalloc+0x80>
9000c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c0b0:	f383 8811 	msr	BASEPRI, r3
9000c0b4:	f3bf 8f6f 	isb	sy
9000c0b8:	f3bf 8f4f 	dsb	sy
9000c0bc:	e7fe      	b.n	9000c0bc <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000c0be:	4b1d      	ldr	r3, [pc, #116]	; (9000c134 <pvPortMalloc+0x168>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000c0c0:	075e      	lsls	r6, r3, #29
9000c0c2:	d117      	bne.n	9000c0f4 <pvPortMalloc+0x128>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
9000c0c4:	4e1c      	ldr	r6, [pc, #112]	; (9000c138 <pvPortMalloc+0x16c>)
9000c0c6:	4618      	mov	r0, r3
	uxAddress -= xHeapStructSize;
9000c0c8:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000c0ca:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000c0ce:	4916      	ldr	r1, [pc, #88]	; (9000c128 <pvPortMalloc+0x15c>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000c0d0:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000c0d4:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000c0d6:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000c0d8:	4a14      	ldr	r2, [pc, #80]	; (9000c12c <pvPortMalloc+0x160>)
9000c0da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000c0dc:	4a17      	ldr	r2, [pc, #92]	; (9000c13c <pvPortMalloc+0x170>)
9000c0de:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000c0e0:	4a10      	ldr	r2, [pc, #64]	; (9000c124 <pvPortMalloc+0x158>)
9000c0e2:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000c0e4:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000c0e6:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
9000c0ea:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000c0ee:	e9c0 6300 	strd	r6, r3, [r0]
}
9000c0f2:	e776      	b.n	9000bfe2 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000c0f4:	3307      	adds	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000c0f6:	4e10      	ldr	r6, [pc, #64]	; (9000c138 <pvPortMalloc+0x16c>)
9000c0f8:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000c0fc:	4618      	mov	r0, r3
9000c0fe:	e7e3      	b.n	9000c0c8 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c100:	6849      	ldr	r1, [r1, #4]
9000c102:	eb00 0e01 	add.w	lr, r0, r1
9000c106:	4621      	mov	r1, r4
9000c108:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
9000c10c:	e7af      	b.n	9000c06e <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000c10e:	42b2      	cmp	r2, r6
9000c110:	d0b1      	beq.n	9000c076 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c112:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c114:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c116:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c118:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c11a:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c11c:	e7ac      	b.n	9000c078 <pvPortMalloc+0xac>
9000c11e:	bf00      	nop
9000c120:	2400c768 	.word	0x2400c768
9000c124:	24024e0c 	.word	0x24024e0c
9000c128:	24024e20 	.word	0x24024e20
9000c12c:	24024e14 	.word	0x24024e14
9000c130:	24024e18 	.word	0x24024e18
9000c134:	2400c76c 	.word	0x2400c76c
9000c138:	24024e0c 	.word	0x24024e0c
9000c13c:	24024e10 	.word	0x24024e10

9000c140 <vPortFree>:
	if( pv != NULL )
9000c140:	b1d0      	cbz	r0, 9000c178 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000c142:	4a2b      	ldr	r2, [pc, #172]	; (9000c1f0 <vPortFree+0xb0>)
9000c144:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000c148:	6812      	ldr	r2, [r2, #0]
9000c14a:	4213      	tst	r3, r2
9000c14c:	d00b      	beq.n	9000c166 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000c14e:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000c152:	b191      	cbz	r1, 9000c17a <vPortFree+0x3a>
9000c154:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c158:	f383 8811 	msr	BASEPRI, r3
9000c15c:	f3bf 8f6f 	isb	sy
9000c160:	f3bf 8f4f 	dsb	sy
9000c164:	e7fe      	b.n	9000c164 <vPortFree+0x24>
9000c166:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c16a:	f383 8811 	msr	BASEPRI, r3
9000c16e:	f3bf 8f6f 	isb	sy
9000c172:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000c176:	e7fe      	b.n	9000c176 <vPortFree+0x36>
9000c178:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000c17a:	ea23 0302 	bic.w	r3, r3, r2
{
9000c17e:	b530      	push	{r4, r5, lr}
9000c180:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000c182:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000c186:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000c18a:	4d1a      	ldr	r5, [pc, #104]	; (9000c1f4 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000c18c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000c18e:	f001 ff41 	bl	9000e014 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000c192:	9801      	ldr	r0, [sp, #4]
9000c194:	682a      	ldr	r2, [r5, #0]
9000c196:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c19a:	4b17      	ldr	r3, [pc, #92]	; (9000c1f8 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000c19c:	440a      	add	r2, r1
9000c19e:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000c1a0:	461a      	mov	r2, r3
9000c1a2:	681b      	ldr	r3, [r3, #0]
9000c1a4:	429c      	cmp	r4, r3
9000c1a6:	d8fb      	bhi.n	9000c1a0 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000c1a8:	6850      	ldr	r0, [r2, #4]
9000c1aa:	eb02 0c00 	add.w	ip, r2, r0
9000c1ae:	4564      	cmp	r4, ip
9000c1b0:	d019      	beq.n	9000c1e6 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000c1b2:	1860      	adds	r0, r4, r1
9000c1b4:	4283      	cmp	r3, r0
9000c1b6:	d00c      	beq.n	9000c1d2 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000c1b8:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000c1ba:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000c1bc:	bf18      	it	ne
9000c1be:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000c1c0:	4a0e      	ldr	r2, [pc, #56]	; (9000c1fc <vPortFree+0xbc>)
9000c1c2:	6813      	ldr	r3, [r2, #0]
9000c1c4:	3301      	adds	r3, #1
9000c1c6:	6013      	str	r3, [r2, #0]
}
9000c1c8:	b003      	add	sp, #12
9000c1ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000c1ce:	f001 bf29 	b.w	9000e024 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000c1d2:	480b      	ldr	r0, [pc, #44]	; (9000c200 <vPortFree+0xc0>)
9000c1d4:	6800      	ldr	r0, [r0, #0]
9000c1d6:	4283      	cmp	r3, r0
9000c1d8:	d0ee      	beq.n	9000c1b8 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c1da:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000c1de:	4401      	add	r1, r0
9000c1e0:	e9c4 3100 	strd	r3, r1, [r4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000c1e4:	e7e9      	b.n	9000c1ba <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000c1e6:	4401      	add	r1, r0
9000c1e8:	4614      	mov	r4, r2
9000c1ea:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
9000c1ec:	e7e1      	b.n	9000c1b2 <vPortFree+0x72>
9000c1ee:	bf00      	nop
9000c1f0:	24024e0c 	.word	0x24024e0c
9000c1f4:	24024e10 	.word	0x24024e10
9000c1f8:	24024e20 	.word	0x24024e20
9000c1fc:	24024e1c 	.word	0x24024e1c
9000c200:	2400c768 	.word	0x2400c768

9000c204 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000c204:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000c208:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000c20c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000c20e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000c210:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000c212:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000c214:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000c218:	4770      	bx	lr
9000c21a:	bf00      	nop

9000c21c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000c21c:	2300      	movs	r3, #0
9000c21e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000c220:	4770      	bx	lr
9000c222:	bf00      	nop

9000c224 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000c224:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000c226:	6802      	ldr	r2, [r0, #0]
{
9000c228:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000c22a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000c22c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000c22e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000c230:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000c232:	689c      	ldr	r4, [r3, #8]
9000c234:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000c236:	6099      	str	r1, [r3, #8]
}
9000c238:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000c23c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000c23e:	6002      	str	r2, [r0, #0]
}
9000c240:	4770      	bx	lr
9000c242:	bf00      	nop

9000c244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000c244:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000c246:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000c248:	1c6b      	adds	r3, r5, #1
9000c24a:	d010      	beq.n	9000c26e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000c24c:	f100 0308 	add.w	r3, r0, #8
9000c250:	461c      	mov	r4, r3
9000c252:	685b      	ldr	r3, [r3, #4]
9000c254:	681a      	ldr	r2, [r3, #0]
9000c256:	42aa      	cmp	r2, r5
9000c258:	d9fa      	bls.n	9000c250 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000c25a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000c25c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000c25e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000c260:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000c262:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000c264:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000c266:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000c268:	6002      	str	r2, [r0, #0]
}
9000c26a:	bc30      	pop	{r4, r5}
9000c26c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000c26e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000c270:	6863      	ldr	r3, [r4, #4]
9000c272:	e7f2      	b.n	9000c25a <vListInsert+0x16>

9000c274 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000c274:	6903      	ldr	r3, [r0, #16]
{
9000c276:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000c278:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000c27a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000c27e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000c280:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000c284:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000c286:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000c288:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000c28c:	bf08      	it	eq
9000c28e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000c290:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000c292:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000c294:	3a01      	subs	r2, #1
9000c296:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000c298:	6818      	ldr	r0, [r3, #0]
}
9000c29a:	4770      	bx	lr

9000c29c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000c29c:	4808      	ldr	r0, [pc, #32]	; (9000c2c0 <prvPortStartFirstTask+0x24>)
9000c29e:	6800      	ldr	r0, [r0, #0]
9000c2a0:	6800      	ldr	r0, [r0, #0]
9000c2a2:	f380 8808 	msr	MSP, r0
9000c2a6:	f04f 0000 	mov.w	r0, #0
9000c2aa:	f380 8814 	msr	CONTROL, r0
9000c2ae:	b662      	cpsie	i
9000c2b0:	b661      	cpsie	f
9000c2b2:	f3bf 8f4f 	dsb	sy
9000c2b6:	f3bf 8f6f 	isb	sy
9000c2ba:	df00      	svc	0
9000c2bc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000c2be:	0000      	.short	0x0000
9000c2c0:	e000ed08 	.word	0xe000ed08

9000c2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000c2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000c2d4 <vPortEnableVFP+0x10>
9000c2c8:	6801      	ldr	r1, [r0, #0]
9000c2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000c2ce:	6001      	str	r1, [r0, #0]
9000c2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000c2d2:	0000      	.short	0x0000
9000c2d4:	e000ed88 	.word	0xe000ed88

9000c2d8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000c2d8:	4b0e      	ldr	r3, [pc, #56]	; (9000c314 <prvTaskExitError+0x3c>)
{
9000c2da:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000c2dc:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000c2de:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000c2e0:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000c2e2:	3301      	adds	r3, #1
9000c2e4:	d008      	beq.n	9000c2f8 <prvTaskExitError+0x20>
9000c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c2ea:	f383 8811 	msr	BASEPRI, r3
9000c2ee:	f3bf 8f6f 	isb	sy
9000c2f2:	f3bf 8f4f 	dsb	sy
9000c2f6:	e7fe      	b.n	9000c2f6 <prvTaskExitError+0x1e>
9000c2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c2fc:	f383 8811 	msr	BASEPRI, r3
9000c300:	f3bf 8f6f 	isb	sy
9000c304:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000c308:	9b01      	ldr	r3, [sp, #4]
9000c30a:	2b00      	cmp	r3, #0
9000c30c:	d0fc      	beq.n	9000c308 <prvTaskExitError+0x30>
}
9000c30e:	b002      	add	sp, #8
9000c310:	4770      	bx	lr
9000c312:	bf00      	nop
9000c314:	24000064 	.word	0x24000064

9000c318 <pxPortInitialiseStack>:
{
9000c318:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000c31a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000c31e:	4809      	ldr	r0, [pc, #36]	; (9000c344 <pxPortInitialiseStack+0x2c>)
{
9000c320:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000c322:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000c326:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000c32a:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000c32e:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000c332:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000c336:	f06f 0102 	mvn.w	r1, #2
}
9000c33a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000c33e:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000c342:	4770      	bx	lr
9000c344:	9000c2d9 	.word	0x9000c2d9
	...

9000c350 <SVC_Handler>:
	__asm volatile (
9000c350:	4b07      	ldr	r3, [pc, #28]	; (9000c370 <pxCurrentTCBConst2>)
9000c352:	6819      	ldr	r1, [r3, #0]
9000c354:	6808      	ldr	r0, [r1, #0]
9000c356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c35a:	f380 8809 	msr	PSP, r0
9000c35e:	f3bf 8f6f 	isb	sy
9000c362:	f04f 0000 	mov.w	r0, #0
9000c366:	f380 8811 	msr	BASEPRI, r0
9000c36a:	4770      	bx	lr
9000c36c:	f3af 8000 	nop.w

9000c370 <pxCurrentTCBConst2>:
9000c370:	24024e70 	.word	0x24024e70

9000c374 <vPortEnterCritical>:
9000c374:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c378:	f383 8811 	msr	BASEPRI, r3
9000c37c:	f3bf 8f6f 	isb	sy
9000c380:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000c384:	4a0b      	ldr	r2, [pc, #44]	; (9000c3b4 <vPortEnterCritical+0x40>)
9000c386:	6813      	ldr	r3, [r2, #0]
9000c388:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000c38a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000c38c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000c38e:	d000      	beq.n	9000c392 <vPortEnterCritical+0x1e>
}
9000c390:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000c392:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c396:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000c39a:	b2db      	uxtb	r3, r3
9000c39c:	2b00      	cmp	r3, #0
9000c39e:	d0f7      	beq.n	9000c390 <vPortEnterCritical+0x1c>
9000c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c3a4:	f383 8811 	msr	BASEPRI, r3
9000c3a8:	f3bf 8f6f 	isb	sy
9000c3ac:	f3bf 8f4f 	dsb	sy
9000c3b0:	e7fe      	b.n	9000c3b0 <vPortEnterCritical+0x3c>
9000c3b2:	bf00      	nop
9000c3b4:	24000064 	.word	0x24000064

9000c3b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000c3b8:	4a08      	ldr	r2, [pc, #32]	; (9000c3dc <vPortExitCritical+0x24>)
9000c3ba:	6813      	ldr	r3, [r2, #0]
9000c3bc:	b943      	cbnz	r3, 9000c3d0 <vPortExitCritical+0x18>
9000c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c3c2:	f383 8811 	msr	BASEPRI, r3
9000c3c6:	f3bf 8f6f 	isb	sy
9000c3ca:	f3bf 8f4f 	dsb	sy
9000c3ce:	e7fe      	b.n	9000c3ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000c3d0:	3b01      	subs	r3, #1
9000c3d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000c3d4:	b90b      	cbnz	r3, 9000c3da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000c3d6:	f383 8811 	msr	BASEPRI, r3
}
9000c3da:	4770      	bx	lr
9000c3dc:	24000064 	.word	0x24000064

9000c3e0 <PendSV_Handler>:
	__asm volatile
9000c3e0:	f3ef 8009 	mrs	r0, PSP
9000c3e4:	f3bf 8f6f 	isb	sy
9000c3e8:	4b15      	ldr	r3, [pc, #84]	; (9000c440 <pxCurrentTCBConst>)
9000c3ea:	681a      	ldr	r2, [r3, #0]
9000c3ec:	f01e 0f10 	tst.w	lr, #16
9000c3f0:	bf08      	it	eq
9000c3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000c3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c3fa:	6010      	str	r0, [r2, #0]
9000c3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
9000c400:	f04f 0050 	mov.w	r0, #80	; 0x50
9000c404:	f380 8811 	msr	BASEPRI, r0
9000c408:	f3bf 8f4f 	dsb	sy
9000c40c:	f3bf 8f6f 	isb	sy
9000c410:	f001 fe44 	bl	9000e09c <vTaskSwitchContext>
9000c414:	f04f 0000 	mov.w	r0, #0
9000c418:	f380 8811 	msr	BASEPRI, r0
9000c41c:	bc09      	pop	{r0, r3}
9000c41e:	6819      	ldr	r1, [r3, #0]
9000c420:	6808      	ldr	r0, [r1, #0]
9000c422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c426:	f01e 0f10 	tst.w	lr, #16
9000c42a:	bf08      	it	eq
9000c42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000c430:	f380 8809 	msr	PSP, r0
9000c434:	f3bf 8f6f 	isb	sy
9000c438:	4770      	bx	lr
9000c43a:	bf00      	nop
9000c43c:	f3af 8000 	nop.w

9000c440 <pxCurrentTCBConst>:
9000c440:	24024e70 	.word	0x24024e70

9000c444 <xPortSysTickHandler>:
{
9000c444:	b508      	push	{r3, lr}
	__asm volatile
9000c446:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c44a:	f383 8811 	msr	BASEPRI, r3
9000c44e:	f3bf 8f6f 	isb	sy
9000c452:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000c456:	f001 fdfb 	bl	9000e050 <xTaskIncrementTick>
9000c45a:	b128      	cbz	r0, 9000c468 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000c45c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000c464:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000c468:	2300      	movs	r3, #0
9000c46a:	f383 8811 	msr	BASEPRI, r3
}
9000c46e:	bd08      	pop	{r3, pc}

9000c470 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000c470:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000c474:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c476:	4b06      	ldr	r3, [pc, #24]	; (9000c490 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000c478:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c47a:	4806      	ldr	r0, [pc, #24]	; (9000c494 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000c47c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000c47e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000c480:	681b      	ldr	r3, [r3, #0]
9000c482:	fba0 0303 	umull	r0, r3, r0, r3
9000c486:	099b      	lsrs	r3, r3, #6
9000c488:	3b01      	subs	r3, #1
9000c48a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000c48c:	6111      	str	r1, [r2, #16]
}
9000c48e:	4770      	bx	lr
9000c490:	24000054 	.word	0x24000054
9000c494:	10624dd3 	.word	0x10624dd3

9000c498 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000c498:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c49c:	4a48      	ldr	r2, [pc, #288]	; (9000c5c0 <xPortStartScheduler+0x128>)
9000c49e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000c4a2:	4291      	cmp	r1, r2
9000c4a4:	d041      	beq.n	9000c52a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000c4a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000c4aa:	4b46      	ldr	r3, [pc, #280]	; (9000c5c4 <xPortStartScheduler+0x12c>)
9000c4ac:	429a      	cmp	r2, r3
9000c4ae:	d033      	beq.n	9000c518 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000c4b0:	4b45      	ldr	r3, [pc, #276]	; (9000c5c8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000c4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000c4b6:	4845      	ldr	r0, [pc, #276]	; (9000c5cc <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c4b8:	4945      	ldr	r1, [pc, #276]	; (9000c5d0 <xPortStartScheduler+0x138>)
{
9000c4ba:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000c4bc:	781a      	ldrb	r2, [r3, #0]
{
9000c4be:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000c4c0:	b2d2      	uxtb	r2, r2
9000c4c2:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000c4c4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000c4c6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000c4ca:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000c4cc:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000c4ce:	b2db      	uxtb	r3, r3
9000c4d0:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c4d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c4d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c4dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c4e0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000c4e2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c4e4:	d50f      	bpl.n	9000c506 <xPortStartScheduler+0x6e>
9000c4e6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000c4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000c4ec:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c4ee:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000c4f0:	005b      	lsls	r3, r3, #1
9000c4f2:	b2db      	uxtb	r3, r3
9000c4f4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000c4f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000c4fc:	061b      	lsls	r3, r3, #24
9000c4fe:	d4f3      	bmi.n	9000c4e8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000c500:	2903      	cmp	r1, #3
9000c502:	d01b      	beq.n	9000c53c <xPortStartScheduler+0xa4>
9000c504:	6001      	str	r1, [r0, #0]
	__asm volatile
9000c506:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c50a:	f383 8811 	msr	BASEPRI, r3
9000c50e:	f3bf 8f6f 	isb	sy
9000c512:	f3bf 8f4f 	dsb	sy
9000c516:	e7fe      	b.n	9000c516 <xPortStartScheduler+0x7e>
9000c518:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c51c:	f383 8811 	msr	BASEPRI, r3
9000c520:	f3bf 8f6f 	isb	sy
9000c524:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000c528:	e7fe      	b.n	9000c528 <xPortStartScheduler+0x90>
9000c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c52e:	f383 8811 	msr	BASEPRI, r3
9000c532:	f3bf 8f6f 	isb	sy
9000c536:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000c53a:	e7fe      	b.n	9000c53a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000c53c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000c53e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000c542:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000c546:	4a20      	ldr	r2, [pc, #128]	; (9000c5c8 <xPortStartScheduler+0x130>)
9000c548:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000c54a:	4e22      	ldr	r6, [pc, #136]	; (9000c5d4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000c54c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
9000c54e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000c550:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000c552:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
9000c556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000c55a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000c55e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
9000c562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000c566:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000c56a:	f7ff ff81 	bl	9000c470 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000c56e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
9000c570:	f7ff fea8 	bl	9000c2c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000c574:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
9000c578:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000c57c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
9000c580:	f7ff fe8c 	bl	9000c29c <prvPortStartFirstTask>
	vTaskSwitchContext();
9000c584:	f001 fd8a 	bl	9000e09c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000c588:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000c58a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000c58c:	3301      	adds	r3, #1
9000c58e:	d008      	beq.n	9000c5a2 <xPortStartScheduler+0x10a>
9000c590:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c594:	f383 8811 	msr	BASEPRI, r3
9000c598:	f3bf 8f6f 	isb	sy
9000c59c:	f3bf 8f4f 	dsb	sy
9000c5a0:	e7fe      	b.n	9000c5a0 <xPortStartScheduler+0x108>
9000c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c5a6:	f383 8811 	msr	BASEPRI, r3
9000c5aa:	f3bf 8f6f 	isb	sy
9000c5ae:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000c5b2:	9b03      	ldr	r3, [sp, #12]
9000c5b4:	2b00      	cmp	r3, #0
9000c5b6:	d0fc      	beq.n	9000c5b2 <xPortStartScheduler+0x11a>
}
9000c5b8:	2000      	movs	r0, #0
9000c5ba:	b004      	add	sp, #16
9000c5bc:	bd70      	pop	{r4, r5, r6, pc}
9000c5be:	bf00      	nop
9000c5c0:	410fc271 	.word	0x410fc271
9000c5c4:	410fc270 	.word	0x410fc270
9000c5c8:	e000e400 	.word	0xe000e400
9000c5cc:	24024e2c 	.word	0x24024e2c
9000c5d0:	24024e28 	.word	0x24024e28
9000c5d4:	24000064 	.word	0x24000064

9000c5d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000c5d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000c5dc:	2b0f      	cmp	r3, #15
9000c5de:	d90e      	bls.n	9000c5fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000c5e0:	4911      	ldr	r1, [pc, #68]	; (9000c628 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000c5e2:	4a12      	ldr	r2, [pc, #72]	; (9000c62c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000c5e4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000c5e6:	7812      	ldrb	r2, [r2, #0]
9000c5e8:	429a      	cmp	r2, r3
9000c5ea:	d908      	bls.n	9000c5fe <vPortValidateInterruptPriority+0x26>
9000c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c5f0:	f383 8811 	msr	BASEPRI, r3
9000c5f4:	f3bf 8f6f 	isb	sy
9000c5f8:	f3bf 8f4f 	dsb	sy
9000c5fc:	e7fe      	b.n	9000c5fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000c5fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c602:	4a0b      	ldr	r2, [pc, #44]	; (9000c630 <vPortValidateInterruptPriority+0x58>)
9000c604:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000c608:	6812      	ldr	r2, [r2, #0]
9000c60a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000c60e:	4293      	cmp	r3, r2
9000c610:	d908      	bls.n	9000c624 <vPortValidateInterruptPriority+0x4c>
9000c612:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c616:	f383 8811 	msr	BASEPRI, r3
9000c61a:	f3bf 8f6f 	isb	sy
9000c61e:	f3bf 8f4f 	dsb	sy
9000c622:	e7fe      	b.n	9000c622 <vPortValidateInterruptPriority+0x4a>
	}
9000c624:	4770      	bx	lr
9000c626:	bf00      	nop
9000c628:	e000e3f0 	.word	0xe000e3f0
9000c62c:	24024e28 	.word	0x24024e28
9000c630:	24024e2c 	.word	0x24024e2c

9000c634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000c634:	b570      	push	{r4, r5, r6, lr}
9000c636:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000c638:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000c63a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000c63c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000c63e:	b92a      	cbnz	r2, 9000c64c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000c640:	6805      	ldr	r5, [r0, #0]
9000c642:	b365      	cbz	r5, 9000c69e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c644:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000c646:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c648:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000c64a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000c64c:	b97d      	cbnz	r5, 9000c66e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000c64e:	6840      	ldr	r0, [r0, #4]
9000c650:	f014 fe68 	bl	90021324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000c654:	6863      	ldr	r3, [r4, #4]
9000c656:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000c658:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000c65a:	68a2      	ldr	r2, [r4, #8]
9000c65c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000c65e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000c660:	d319      	bcc.n	9000c696 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000c662:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c664:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000c666:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000c668:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c66a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000c66c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000c66e:	68c0      	ldr	r0, [r0, #12]
9000c670:	f014 fe58 	bl	90021324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000c674:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000c676:	68e3      	ldr	r3, [r4, #12]
9000c678:	4251      	negs	r1, r2
9000c67a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000c67c:	6822      	ldr	r2, [r4, #0]
9000c67e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000c680:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000c682:	d202      	bcs.n	9000c68a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000c684:	68a3      	ldr	r3, [r4, #8]
9000c686:	440b      	add	r3, r1
9000c688:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000c68a:	2d02      	cmp	r5, #2
9000c68c:	d00d      	beq.n	9000c6aa <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c68e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000c690:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c692:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000c694:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c696:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000c698:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c69a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000c69c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000c69e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000c6a0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000c6a2:	f001 fee1 	bl	9000e468 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000c6a6:	60a5      	str	r5, [r4, #8]
9000c6a8:	e7ce      	b.n	9000c648 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000c6aa:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000c6ac:	f04f 0000 	mov.w	r0, #0
9000c6b0:	bf38      	it	cc
9000c6b2:	2601      	movcc	r6, #1
9000c6b4:	e7c8      	b.n	9000c648 <prvCopyDataToQueue+0x14>
9000c6b6:	bf00      	nop

9000c6b8 <xQueueGenericCreateStatic>:
	{
9000c6b8:	b530      	push	{r4, r5, lr}
9000c6ba:	b083      	sub	sp, #12
9000c6bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000c6c0:	b940      	cbnz	r0, 9000c6d4 <xQueueGenericCreateStatic+0x1c>
9000c6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c6c6:	f383 8811 	msr	BASEPRI, r3
9000c6ca:	f3bf 8f6f 	isb	sy
9000c6ce:	f3bf 8f4f 	dsb	sy
9000c6d2:	e7fe      	b.n	9000c6d2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000c6d4:	461d      	mov	r5, r3
9000c6d6:	b153      	cbz	r3, 9000c6ee <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000c6d8:	b30a      	cbz	r2, 9000c71e <xQueueGenericCreateStatic+0x66>
9000c6da:	b989      	cbnz	r1, 9000c700 <xQueueGenericCreateStatic+0x48>
9000c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c6e0:	f383 8811 	msr	BASEPRI, r3
9000c6e4:	f3bf 8f6f 	isb	sy
9000c6e8:	f3bf 8f4f 	dsb	sy
9000c6ec:	e7fe      	b.n	9000c6ec <xQueueGenericCreateStatic+0x34>
9000c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c6f2:	f383 8811 	msr	BASEPRI, r3
9000c6f6:	f3bf 8f6f 	isb	sy
9000c6fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000c6fe:	e7fe      	b.n	9000c6fe <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000c700:	b16a      	cbz	r2, 9000c71e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000c702:	2350      	movs	r3, #80	; 0x50
9000c704:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000c706:	9b01      	ldr	r3, [sp, #4]
9000c708:	2b50      	cmp	r3, #80	; 0x50
9000c70a:	d013      	beq.n	9000c734 <xQueueGenericCreateStatic+0x7c>
9000c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c710:	f383 8811 	msr	BASEPRI, r3
9000c714:	f3bf 8f6f 	isb	sy
9000c718:	f3bf 8f4f 	dsb	sy
9000c71c:	e7fe      	b.n	9000c71c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000c71e:	2900      	cmp	r1, #0
9000c720:	d0ef      	beq.n	9000c702 <xQueueGenericCreateStatic+0x4a>
9000c722:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c726:	f383 8811 	msr	BASEPRI, r3
9000c72a:	f3bf 8f6f 	isb	sy
9000c72e:	f3bf 8f4f 	dsb	sy
9000c732:	e7fe      	b.n	9000c732 <xQueueGenericCreateStatic+0x7a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000c734:	2900      	cmp	r1, #0
9000c736:	bf08      	it	eq
9000c738:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000c73a:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000c73c:	6429      	str	r1, [r5, #64]	; 0x40
9000c73e:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000c740:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000c742:	2201      	movs	r2, #1
9000c744:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000c748:	f7ff fe14 	bl	9000c374 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c74c:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000c74e:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000c750:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000c752:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c754:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000c758:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c75c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c75e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c760:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c762:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000c764:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c766:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c76a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000c76c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000c770:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c774:	f7ff fd46 	bl	9000c204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000c778:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000c77c:	f7ff fd42 	bl	9000c204 <vListInitialise>
	taskEXIT_CRITICAL();
9000c780:	f7ff fe1a 	bl	9000c3b8 <vPortExitCritical>
	}
9000c784:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000c786:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000c78a:	b003      	add	sp, #12
9000c78c:	bd30      	pop	{r4, r5, pc}
9000c78e:	bf00      	nop

9000c790 <xQueueGenericCreate>:
	{
9000c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000c792:	b940      	cbnz	r0, 9000c7a6 <xQueueGenericCreate+0x16>
9000c794:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c798:	f383 8811 	msr	BASEPRI, r3
9000c79c:	f3bf 8f6f 	isb	sy
9000c7a0:	f3bf 8f4f 	dsb	sy
9000c7a4:	e7fe      	b.n	9000c7a4 <xQueueGenericCreate+0x14>
9000c7a6:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000c7a8:	fb01 f000 	mul.w	r0, r1, r0
9000c7ac:	460e      	mov	r6, r1
9000c7ae:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000c7b0:	3050      	adds	r0, #80	; 0x50
9000c7b2:	f7ff fc0b 	bl	9000bfcc <pvPortMalloc>
		if( pxNewQueue != NULL )
9000c7b6:	4604      	mov	r4, r0
9000c7b8:	b340      	cbz	r0, 9000c80c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000c7ba:	2300      	movs	r3, #0
9000c7bc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000c7c0:	b336      	cbz	r6, 9000c810 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000c7c6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000c7c8:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000c7cc:	f7ff fdd2 	bl	9000c374 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7d0:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c7d2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000c7d6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7d8:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000c7dc:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7e0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7e2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7e4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7e6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000c7e8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000c7ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c7ec:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000c7ee:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000c7f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000c7f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c7f8:	f7ff fd04 	bl	9000c204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000c7fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000c800:	f7ff fd00 	bl	9000c204 <vListInitialise>
	taskEXIT_CRITICAL();
9000c804:	f7ff fdd8 	bl	9000c3b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000c808:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000c80c:	4620      	mov	r0, r4
9000c80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c810:	4603      	mov	r3, r0
9000c812:	e7d8      	b.n	9000c7c6 <xQueueGenericCreate+0x36>

9000c814 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000c814:	b940      	cbnz	r0, 9000c828 <xQueueCreateCountingSemaphoreStatic+0x14>
9000c816:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c81a:	f383 8811 	msr	BASEPRI, r3
9000c81e:	f3bf 8f6f 	isb	sy
9000c822:	f3bf 8f4f 	dsb	sy
9000c826:	e7fe      	b.n	9000c826 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000c828:	4288      	cmp	r0, r1
9000c82a:	d208      	bcs.n	9000c83e <xQueueCreateCountingSemaphoreStatic+0x2a>
9000c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c830:	f383 8811 	msr	BASEPRI, r3
9000c834:	f3bf 8f6f 	isb	sy
9000c838:	f3bf 8f4f 	dsb	sy
9000c83c:	e7fe      	b.n	9000c83c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000c83e:	b530      	push	{r4, r5, lr}
9000c840:	4615      	mov	r5, r2
9000c842:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000c844:	2a00      	cmp	r2, #0
9000c846:	d03d      	beq.n	9000c8c4 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000c848:	2350      	movs	r3, #80	; 0x50
9000c84a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000c84c:	9b03      	ldr	r3, [sp, #12]
9000c84e:	2b50      	cmp	r3, #80	; 0x50
9000c850:	d008      	beq.n	9000c864 <xQueueCreateCountingSemaphoreStatic+0x50>
9000c852:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c856:	f383 8811 	msr	BASEPRI, r3
9000c85a:	f3bf 8f6f 	isb	sy
9000c85e:	f3bf 8f4f 	dsb	sy
9000c862:	e7fe      	b.n	9000c862 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000c864:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000c866:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000c868:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000c86a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000c86c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000c870:	6414      	str	r4, [r2, #64]	; 0x40
9000c872:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000c874:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000c876:	f7ff fd7d 	bl	9000c374 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c87a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000c87c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000c87e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c880:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000c884:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c888:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c88c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c88e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c890:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000c892:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c894:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c898:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000c89c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000c8a0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c8a4:	f7ff fcae 	bl	9000c204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000c8a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000c8ac:	f7ff fcaa 	bl	9000c204 <vListInitialise>
	taskEXIT_CRITICAL();
9000c8b0:	f7ff fd82 	bl	9000c3b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000c8b4:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000c8b6:	9901      	ldr	r1, [sp, #4]
	}
9000c8b8:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000c8ba:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000c8be:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000c8c0:	b005      	add	sp, #20
9000c8c2:	bd30      	pop	{r4, r5, pc}
9000c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c8c8:	f383 8811 	msr	BASEPRI, r3
9000c8cc:	f3bf 8f6f 	isb	sy
9000c8d0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000c8d4:	e7fe      	b.n	9000c8d4 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000c8d6:	bf00      	nop

9000c8d8 <xQueueCreateCountingSemaphore>:
	{
9000c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000c8da:	b940      	cbnz	r0, 9000c8ee <xQueueCreateCountingSemaphore+0x16>
9000c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c8e0:	f383 8811 	msr	BASEPRI, r3
9000c8e4:	f3bf 8f6f 	isb	sy
9000c8e8:	f3bf 8f4f 	dsb	sy
9000c8ec:	e7fe      	b.n	9000c8ec <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000c8ee:	4288      	cmp	r0, r1
9000c8f0:	4604      	mov	r4, r0
9000c8f2:	460e      	mov	r6, r1
9000c8f4:	d208      	bcs.n	9000c908 <xQueueCreateCountingSemaphore+0x30>
9000c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c8fa:	f383 8811 	msr	BASEPRI, r3
9000c8fe:	f3bf 8f6f 	isb	sy
9000c902:	f3bf 8f4f 	dsb	sy
9000c906:	e7fe      	b.n	9000c906 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000c908:	2050      	movs	r0, #80	; 0x50
9000c90a:	f7ff fb5f 	bl	9000bfcc <pvPortMalloc>
		if( pxNewQueue != NULL )
9000c90e:	4605      	mov	r5, r0
9000c910:	b330      	cbz	r0, 9000c960 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000c912:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000c914:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000c916:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000c918:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000c91c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000c91e:	f7ff fd29 	bl	9000c374 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c922:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000c924:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c926:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000c92a:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c92c:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000c930:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c934:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c936:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c938:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c93a:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000c93c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000c93e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000c940:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000c944:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000c948:	f7ff fc5c 	bl	9000c204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000c94c:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000c950:	f7ff fc58 	bl	9000c204 <vListInitialise>
	taskEXIT_CRITICAL();
9000c954:	f7ff fd30 	bl	9000c3b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000c958:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000c95a:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000c95c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000c960:	4628      	mov	r0, r5
9000c962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000c964 <xQueueGenericSend>:
{
9000c964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c968:	b084      	sub	sp, #16
9000c96a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000c96c:	2800      	cmp	r0, #0
9000c96e:	f000 8103 	beq.w	9000cb78 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000c972:	4688      	mov	r8, r1
9000c974:	4604      	mov	r4, r0
9000c976:	461f      	mov	r7, r3
9000c978:	2900      	cmp	r1, #0
9000c97a:	f000 8097 	beq.w	9000caac <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000c97e:	2f02      	cmp	r7, #2
9000c980:	d10b      	bne.n	9000c99a <xQueueGenericSend+0x36>
9000c982:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000c984:	2b01      	cmp	r3, #1
9000c986:	d008      	beq.n	9000c99a <xQueueGenericSend+0x36>
9000c988:	f04f 0350 	mov.w	r3, #80	; 0x50
9000c98c:	f383 8811 	msr	BASEPRI, r3
9000c990:	f3bf 8f6f 	isb	sy
9000c994:	f3bf 8f4f 	dsb	sy
9000c998:	e7fe      	b.n	9000c998 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000c99a:	f001 fd0f 	bl	9000e3bc <xTaskGetSchedulerState>
9000c99e:	2800      	cmp	r0, #0
9000c9a0:	f000 80f3 	beq.w	9000cb8a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000c9a4:	f1a7 0902 	sub.w	r9, r7, #2
9000c9a8:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000c9aa:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000c9ae:	fab9 f989 	clz	r9, r9
9000c9b2:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000c9b6:	f7ff fcdd 	bl	9000c374 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000c9ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000c9bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000c9be:	429a      	cmp	r2, r3
9000c9c0:	f0c0 80f0 	bcc.w	9000cba4 <xQueueGenericSend+0x240>
9000c9c4:	f1b9 0f00 	cmp.w	r9, #0
9000c9c8:	f040 80ec 	bne.w	9000cba4 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000c9cc:	9b01      	ldr	r3, [sp, #4]
9000c9ce:	2b00      	cmp	r3, #0
9000c9d0:	f000 8101 	beq.w	9000cbd6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000c9d4:	2d00      	cmp	r5, #0
9000c9d6:	f000 80cb 	beq.w	9000cb70 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000c9da:	f7ff fced 	bl	9000c3b8 <vPortExitCritical>
		vTaskSuspendAll();
9000c9de:	f001 fb19 	bl	9000e014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000c9e2:	f7ff fcc7 	bl	9000c374 <vPortEnterCritical>
9000c9e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000c9ea:	2bff      	cmp	r3, #255	; 0xff
9000c9ec:	d102      	bne.n	9000c9f4 <xQueueGenericSend+0x90>
9000c9ee:	2300      	movs	r3, #0
9000c9f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000c9f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000c9f8:	2bff      	cmp	r3, #255	; 0xff
9000c9fa:	d102      	bne.n	9000ca02 <xQueueGenericSend+0x9e>
9000c9fc:	2300      	movs	r3, #0
9000c9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ca02:	f7ff fcd9 	bl	9000c3b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000ca06:	a901      	add	r1, sp, #4
9000ca08:	a802      	add	r0, sp, #8
9000ca0a:	f001 fc83 	bl	9000e314 <xTaskCheckForTimeOut>
9000ca0e:	2800      	cmp	r0, #0
9000ca10:	f040 80e5 	bne.w	9000cbde <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000ca14:	f7ff fcae 	bl	9000c374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000ca18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ca1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ca1c:	429a      	cmp	r2, r3
9000ca1e:	d052      	beq.n	9000cac6 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000ca20:	f7ff fcca 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ca24:	f7ff fca6 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ca28:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000ca2c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ca2e:	2d00      	cmp	r5, #0
9000ca30:	dc04      	bgt.n	9000ca3c <xQueueGenericSend+0xd8>
9000ca32:	e011      	b.n	9000ca58 <xQueueGenericSend+0xf4>
			--cTxLock;
9000ca34:	1e6a      	subs	r2, r5, #1
9000ca36:	b2d3      	uxtb	r3, r2
9000ca38:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ca3a:	b16b      	cbz	r3, 9000ca58 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ca3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ca3e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ca40:	b153      	cbz	r3, 9000ca58 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ca42:	f001 fc11 	bl	9000e268 <xTaskRemoveFromEventList>
9000ca46:	2800      	cmp	r0, #0
9000ca48:	d0f4      	beq.n	9000ca34 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000ca4a:	f001 fcab 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000ca4e:	1e6a      	subs	r2, r5, #1
9000ca50:	b2d3      	uxtb	r3, r2
9000ca52:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ca54:	2b00      	cmp	r3, #0
9000ca56:	d1f1      	bne.n	9000ca3c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000ca58:	23ff      	movs	r3, #255	; 0xff
9000ca5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ca5e:	f7ff fcab 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ca62:	f7ff fc87 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ca66:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000ca6a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ca6c:	2d00      	cmp	r5, #0
9000ca6e:	dd14      	ble.n	9000ca9a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ca70:	f104 0a10 	add.w	sl, r4, #16
9000ca74:	e003      	b.n	9000ca7e <xQueueGenericSend+0x11a>
				--cRxLock;
9000ca76:	1e6a      	subs	r2, r5, #1
9000ca78:	b2d3      	uxtb	r3, r2
9000ca7a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ca7c:	b16b      	cbz	r3, 9000ca9a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ca7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ca80:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ca82:	b153      	cbz	r3, 9000ca9a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ca84:	f001 fbf0 	bl	9000e268 <xTaskRemoveFromEventList>
9000ca88:	2800      	cmp	r0, #0
9000ca8a:	d0f4      	beq.n	9000ca76 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000ca8c:	f001 fc8a 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000ca90:	1e6a      	subs	r2, r5, #1
9000ca92:	b2d3      	uxtb	r3, r2
9000ca94:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ca96:	2b00      	cmp	r3, #0
9000ca98:	d1f1      	bne.n	9000ca7e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000ca9a:	23ff      	movs	r3, #255	; 0xff
9000ca9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000caa0:	f7ff fc8a 	bl	9000c3b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000caa4:	f001 fabe 	bl	9000e024 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000caa8:	2501      	movs	r5, #1
9000caaa:	e784      	b.n	9000c9b6 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000caac:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000caae:	2b00      	cmp	r3, #0
9000cab0:	f43f af65 	beq.w	9000c97e <xQueueGenericSend+0x1a>
9000cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cab8:	f383 8811 	msr	BASEPRI, r3
9000cabc:	f3bf 8f6f 	isb	sy
9000cac0:	f3bf 8f4f 	dsb	sy
9000cac4:	e7fe      	b.n	9000cac4 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000cac6:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000caca:	f7ff fc75 	bl	9000c3b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000cace:	9901      	ldr	r1, [sp, #4]
9000cad0:	4650      	mov	r0, sl
9000cad2:	f001 fb3b 	bl	9000e14c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000cad6:	f7ff fc4d 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000cada:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000cade:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cae0:	2d00      	cmp	r5, #0
9000cae2:	dc04      	bgt.n	9000caee <xQueueGenericSend+0x18a>
9000cae4:	e011      	b.n	9000cb0a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000cae6:	1e6b      	subs	r3, r5, #1
9000cae8:	b2da      	uxtb	r2, r3
9000caea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000caec:	b16a      	cbz	r2, 9000cb0a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000caee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000caf0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000caf2:	b153      	cbz	r3, 9000cb0a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000caf4:	f001 fbb8 	bl	9000e268 <xTaskRemoveFromEventList>
9000caf8:	2800      	cmp	r0, #0
9000cafa:	d0f4      	beq.n	9000cae6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000cafc:	f001 fc52 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000cb00:	1e6b      	subs	r3, r5, #1
9000cb02:	b2da      	uxtb	r2, r3
9000cb04:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cb06:	2a00      	cmp	r2, #0
9000cb08:	d1f1      	bne.n	9000caee <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000cb0a:	23ff      	movs	r3, #255	; 0xff
9000cb0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000cb10:	f7ff fc52 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cb14:	f7ff fc2e 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000cb18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000cb1c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cb1e:	2d00      	cmp	r5, #0
9000cb20:	dc04      	bgt.n	9000cb2c <xQueueGenericSend+0x1c8>
9000cb22:	e011      	b.n	9000cb48 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000cb24:	1e6b      	subs	r3, r5, #1
9000cb26:	b2da      	uxtb	r2, r3
9000cb28:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cb2a:	b16a      	cbz	r2, 9000cb48 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cb2c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cb2e:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cb30:	b153      	cbz	r3, 9000cb48 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cb32:	f001 fb99 	bl	9000e268 <xTaskRemoveFromEventList>
9000cb36:	2800      	cmp	r0, #0
9000cb38:	d0f4      	beq.n	9000cb24 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000cb3a:	f001 fc33 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000cb3e:	1e6b      	subs	r3, r5, #1
9000cb40:	b2da      	uxtb	r2, r3
9000cb42:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cb44:	2a00      	cmp	r2, #0
9000cb46:	d1f1      	bne.n	9000cb2c <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000cb48:	23ff      	movs	r3, #255	; 0xff
9000cb4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000cb4e:	f7ff fc33 	bl	9000c3b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000cb52:	f001 fa67 	bl	9000e024 <xTaskResumeAll>
9000cb56:	2800      	cmp	r0, #0
9000cb58:	d1a6      	bne.n	9000caa8 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000cb5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cb62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000cb66:	f3bf 8f4f 	dsb	sy
9000cb6a:	f3bf 8f6f 	isb	sy
9000cb6e:	e79b      	b.n	9000caa8 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000cb70:	a802      	add	r0, sp, #8
9000cb72:	f001 fbc3 	bl	9000e2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000cb76:	e730      	b.n	9000c9da <xQueueGenericSend+0x76>
9000cb78:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cb7c:	f383 8811 	msr	BASEPRI, r3
9000cb80:	f3bf 8f6f 	isb	sy
9000cb84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000cb88:	e7fe      	b.n	9000cb88 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000cb8a:	9b01      	ldr	r3, [sp, #4]
9000cb8c:	2b00      	cmp	r3, #0
9000cb8e:	f43f af09 	beq.w	9000c9a4 <xQueueGenericSend+0x40>
9000cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cb96:	f383 8811 	msr	BASEPRI, r3
9000cb9a:	f3bf 8f6f 	isb	sy
9000cb9e:	f3bf 8f4f 	dsb	sy
9000cba2:	e7fe      	b.n	9000cba2 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000cba4:	463a      	mov	r2, r7
9000cba6:	4641      	mov	r1, r8
9000cba8:	4620      	mov	r0, r4
9000cbaa:	f7ff fd43 	bl	9000c634 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000cbb0:	2b00      	cmp	r3, #0
9000cbb2:	d152      	bne.n	9000cc5a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000cbb4:	b148      	cbz	r0, 9000cbca <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000cbb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cbbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000cbc2:	f3bf 8f4f 	dsb	sy
9000cbc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000cbca:	f7ff fbf5 	bl	9000c3b8 <vPortExitCritical>
				return pdPASS;
9000cbce:	2001      	movs	r0, #1
}
9000cbd0:	b004      	add	sp, #16
9000cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000cbd6:	f7ff fbef 	bl	9000c3b8 <vPortExitCritical>
					return errQUEUE_FULL;
9000cbda:	4648      	mov	r0, r9
9000cbdc:	e7f8      	b.n	9000cbd0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000cbde:	f7ff fbc9 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000cbe2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000cbe6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cbe8:	2d00      	cmp	r5, #0
9000cbea:	dd10      	ble.n	9000cc0e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cbec:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000cbf0:	e003      	b.n	9000cbfa <xQueueGenericSend+0x296>
			--cTxLock;
9000cbf2:	1e6b      	subs	r3, r5, #1
9000cbf4:	b2da      	uxtb	r2, r3
9000cbf6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cbf8:	b14a      	cbz	r2, 9000cc0e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cbfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cbfc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cbfe:	b133      	cbz	r3, 9000cc0e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cc00:	f001 fb32 	bl	9000e268 <xTaskRemoveFromEventList>
9000cc04:	2800      	cmp	r0, #0
9000cc06:	d0f4      	beq.n	9000cbf2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000cc08:	f001 fbcc 	bl	9000e3a4 <vTaskMissedYield>
9000cc0c:	e7f1      	b.n	9000cbf2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000cc0e:	23ff      	movs	r3, #255	; 0xff
9000cc10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000cc14:	f7ff fbd0 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cc18:	f7ff fbac 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000cc1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000cc20:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cc22:	2d00      	cmp	r5, #0
9000cc24:	dd10      	ble.n	9000cc48 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cc26:	f104 0610 	add.w	r6, r4, #16
9000cc2a:	e003      	b.n	9000cc34 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000cc2c:	1e6b      	subs	r3, r5, #1
9000cc2e:	b2da      	uxtb	r2, r3
9000cc30:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000cc32:	b14a      	cbz	r2, 9000cc48 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cc34:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cc36:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000cc38:	b133      	cbz	r3, 9000cc48 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000cc3a:	f001 fb15 	bl	9000e268 <xTaskRemoveFromEventList>
9000cc3e:	2800      	cmp	r0, #0
9000cc40:	d0f4      	beq.n	9000cc2c <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000cc42:	f001 fbaf 	bl	9000e3a4 <vTaskMissedYield>
9000cc46:	e7f1      	b.n	9000cc2c <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000cc48:	23ff      	movs	r3, #255	; 0xff
9000cc4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000cc4e:	f7ff fbb3 	bl	9000c3b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000cc52:	f001 f9e7 	bl	9000e024 <xTaskResumeAll>
			return errQUEUE_FULL;
9000cc56:	2000      	movs	r0, #0
9000cc58:	e7ba      	b.n	9000cbd0 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cc5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000cc5e:	f001 fb03 	bl	9000e268 <xTaskRemoveFromEventList>
9000cc62:	2800      	cmp	r0, #0
9000cc64:	d0b1      	beq.n	9000cbca <xQueueGenericSend+0x266>
9000cc66:	e7a6      	b.n	9000cbb6 <xQueueGenericSend+0x252>

9000cc68 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000cc68:	b179      	cbz	r1, 9000cc8a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000cc6a:	2350      	movs	r3, #80	; 0x50
	{
9000cc6c:	b570      	push	{r4, r5, r6, lr}
9000cc6e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000cc70:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000cc72:	9b01      	ldr	r3, [sp, #4]
9000cc74:	2b50      	cmp	r3, #80	; 0x50
9000cc76:	d011      	beq.n	9000cc9c <xQueueCreateMutexStatic+0x34>
9000cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cc7c:	f383 8811 	msr	BASEPRI, r3
9000cc80:	f3bf 8f6f 	isb	sy
9000cc84:	f3bf 8f4f 	dsb	sy
9000cc88:	e7fe      	b.n	9000cc88 <xQueueCreateMutexStatic+0x20>
9000cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cc8e:	f383 8811 	msr	BASEPRI, r3
9000cc92:	f3bf 8f6f 	isb	sy
9000cc96:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000cc9a:	e7fe      	b.n	9000cc9a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000cc9c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000cc9e:	2301      	movs	r3, #1
9000cca0:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000cca2:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000cca4:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000cca8:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000ccaa:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000ccac:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000ccb0:	f7ff fb60 	bl	9000c374 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ccb4:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000ccb6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000ccb8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000ccba:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000ccbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000ccc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ccc4:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000ccc8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cccc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ccce:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ccd0:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ccd2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ccd6:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ccda:	f7ff fa93 	bl	9000c204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000ccde:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000cce2:	f7ff fa8f 	bl	9000c204 <vListInitialise>
	taskEXIT_CRITICAL();
9000cce6:	f7ff fb67 	bl	9000c3b8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000ccea:	4633      	mov	r3, r6
9000ccec:	4632      	mov	r2, r6
9000ccee:	4631      	mov	r1, r6
9000ccf0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000ccf2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000ccf6:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000ccf8:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000ccfa:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000ccfc:	f7ff fe32 	bl	9000c964 <xQueueGenericSend>
	}
9000cd00:	4620      	mov	r0, r4
9000cd02:	b002      	add	sp, #8
9000cd04:	bd70      	pop	{r4, r5, r6, pc}
9000cd06:	bf00      	nop

9000cd08 <xQueueGiveMutexRecursive>:
	{
9000cd08:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000cd0a:	b138      	cbz	r0, 9000cd1c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000cd0c:	6885      	ldr	r5, [r0, #8]
9000cd0e:	4604      	mov	r4, r0
9000cd10:	f001 fb4e 	bl	9000e3b0 <xTaskGetCurrentTaskHandle>
9000cd14:	4285      	cmp	r5, r0
9000cd16:	d00a      	beq.n	9000cd2e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000cd18:	2000      	movs	r0, #0
	}
9000cd1a:	bd38      	pop	{r3, r4, r5, pc}
9000cd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cd20:	f383 8811 	msr	BASEPRI, r3
9000cd24:	f3bf 8f6f 	isb	sy
9000cd28:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000cd2c:	e7fe      	b.n	9000cd2c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000cd2e:	68e3      	ldr	r3, [r4, #12]
9000cd30:	3b01      	subs	r3, #1
9000cd32:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000cd34:	b10b      	cbz	r3, 9000cd3a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000cd36:	2001      	movs	r0, #1
	}
9000cd38:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000cd3a:	461a      	mov	r2, r3
9000cd3c:	4619      	mov	r1, r3
9000cd3e:	4620      	mov	r0, r4
9000cd40:	f7ff fe10 	bl	9000c964 <xQueueGenericSend>
			xReturn = pdPASS;
9000cd44:	2001      	movs	r0, #1
	}
9000cd46:	bd38      	pop	{r3, r4, r5, pc}

9000cd48 <xQueueCreateMutex>:
	{
9000cd48:	b570      	push	{r4, r5, r6, lr}
9000cd4a:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000cd4c:	2050      	movs	r0, #80	; 0x50
9000cd4e:	f7ff f93d 	bl	9000bfcc <pvPortMalloc>
		if( pxNewQueue != NULL )
9000cd52:	4604      	mov	r4, r0
9000cd54:	b370      	cbz	r0, 9000cdb4 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000cd56:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000cd58:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000cd5a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000cd5c:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000cd60:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000cd64:	f7ff fb06 	bl	9000c374 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd68:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000cd6a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cd6c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000cd70:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd72:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000cd76:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd7a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd7c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd7e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000cd80:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000cd82:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000cd86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000cd8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000cd8e:	f7ff fa39 	bl	9000c204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000cd92:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000cd96:	f7ff fa35 	bl	9000c204 <vListInitialise>
	taskEXIT_CRITICAL();
9000cd9a:	f7ff fb0d 	bl	9000c3b8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000cd9e:	4633      	mov	r3, r6
9000cda0:	4632      	mov	r2, r6
9000cda2:	4631      	mov	r1, r6
9000cda4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000cda6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000cdaa:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000cdac:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000cdae:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000cdb0:	f7ff fdd8 	bl	9000c964 <xQueueGenericSend>
	}
9000cdb4:	4620      	mov	r0, r4
9000cdb6:	bd70      	pop	{r4, r5, r6, pc}

9000cdb8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000cdb8:	2800      	cmp	r0, #0
9000cdba:	d04e      	beq.n	9000ce5a <xQueueGenericSendFromISR+0xa2>
{
9000cdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cdc0:	460e      	mov	r6, r1
9000cdc2:	4604      	mov	r4, r0
9000cdc4:	4617      	mov	r7, r2
9000cdc6:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000cdc8:	b339      	cbz	r1, 9000ce1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000cdca:	2d02      	cmp	r5, #2
9000cdcc:	d10b      	bne.n	9000cde6 <xQueueGenericSendFromISR+0x2e>
9000cdce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000cdd0:	2b01      	cmp	r3, #1
9000cdd2:	d008      	beq.n	9000cde6 <xQueueGenericSendFromISR+0x2e>
9000cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cdd8:	f383 8811 	msr	BASEPRI, r3
9000cddc:	f3bf 8f6f 	isb	sy
9000cde0:	f3bf 8f4f 	dsb	sy
9000cde4:	e7fe      	b.n	9000cde4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000cde6:	f7ff fbf7 	bl	9000c5d8 <vPortValidateInterruptPriority>
	__asm volatile
9000cdea:	f3ef 8811 	mrs	r8, BASEPRI
9000cdee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cdf2:	f383 8811 	msr	BASEPRI, r3
9000cdf6:	f3bf 8f6f 	isb	sy
9000cdfa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000cdfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ce00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ce02:	429a      	cmp	r2, r3
9000ce04:	d315      	bcc.n	9000ce32 <xQueueGenericSendFromISR+0x7a>
9000ce06:	f1a5 0002 	sub.w	r0, r5, #2
9000ce0a:	fab0 f080 	clz	r0, r0
9000ce0e:	0940      	lsrs	r0, r0, #5
9000ce10:	b978      	cbnz	r0, 9000ce32 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000ce12:	f388 8811 	msr	BASEPRI, r8
}
9000ce16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ce1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ce1c:	2b00      	cmp	r3, #0
9000ce1e:	d0d4      	beq.n	9000cdca <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ce24:	f383 8811 	msr	BASEPRI, r3
9000ce28:	f3bf 8f6f 	isb	sy
9000ce2c:	f3bf 8f4f 	dsb	sy
9000ce30:	e7fe      	b.n	9000ce30 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ce32:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000ce34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ce38:	4631      	mov	r1, r6
9000ce3a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000ce3c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ce3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ce40:	f7ff fbf8 	bl	9000c634 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000ce44:	1c6b      	adds	r3, r5, #1
9000ce46:	d011      	beq.n	9000ce6c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ce48:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000ce4a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ce4c:	b25b      	sxtb	r3, r3
9000ce4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000ce52:	f388 8811 	msr	BASEPRI, r8
}
9000ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ce5e:	f383 8811 	msr	BASEPRI, r3
9000ce62:	f3bf 8f6f 	isb	sy
9000ce66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000ce6a:	e7fe      	b.n	9000ce6a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ce6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ce6e:	b90b      	cbnz	r3, 9000ce74 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000ce70:	2001      	movs	r0, #1
9000ce72:	e7ce      	b.n	9000ce12 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ce74:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000ce78:	f001 f9f6 	bl	9000e268 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000ce7c:	2800      	cmp	r0, #0
9000ce7e:	d0f7      	beq.n	9000ce70 <xQueueGenericSendFromISR+0xb8>
9000ce80:	2f00      	cmp	r7, #0
9000ce82:	d0f5      	beq.n	9000ce70 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000ce84:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000ce86:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000ce88:	603b      	str	r3, [r7, #0]
9000ce8a:	e7c2      	b.n	9000ce12 <xQueueGenericSendFromISR+0x5a>

9000ce8c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000ce8c:	b360      	cbz	r0, 9000cee8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000ce8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000ce90:	b570      	push	{r4, r5, r6, lr}
9000ce92:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000ce94:	b143      	cbz	r3, 9000cea8 <xQueueGiveFromISR+0x1c>
9000ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ce9a:	f383 8811 	msr	BASEPRI, r3
9000ce9e:	f3bf 8f6f 	isb	sy
9000cea2:	f3bf 8f4f 	dsb	sy
9000cea6:	e7fe      	b.n	9000cea6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000cea8:	6803      	ldr	r3, [r0, #0]
9000ceaa:	460d      	mov	r5, r1
9000ceac:	b32b      	cbz	r3, 9000cefa <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000ceae:	f7ff fb93 	bl	9000c5d8 <vPortValidateInterruptPriority>
	__asm volatile
9000ceb2:	f3ef 8611 	mrs	r6, BASEPRI
9000ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ceba:	f383 8811 	msr	BASEPRI, r3
9000cebe:	f3bf 8f6f 	isb	sy
9000cec2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000cec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000cec8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000ceca:	429a      	cmp	r2, r3
9000cecc:	d921      	bls.n	9000cf12 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000cece:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000ced2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000ced4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000ced6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000ced8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000ceda:	d01e      	beq.n	9000cf1a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000cedc:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000cede:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000cee0:	b25b      	sxtb	r3, r3
9000cee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000cee6:	e015      	b.n	9000cf14 <xQueueGiveFromISR+0x88>
	__asm volatile
9000cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ceec:	f383 8811 	msr	BASEPRI, r3
9000cef0:	f3bf 8f6f 	isb	sy
9000cef4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000cef8:	e7fe      	b.n	9000cef8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000cefa:	6883      	ldr	r3, [r0, #8]
9000cefc:	2b00      	cmp	r3, #0
9000cefe:	d0d6      	beq.n	9000ceae <xQueueGiveFromISR+0x22>
9000cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cf04:	f383 8811 	msr	BASEPRI, r3
9000cf08:	f3bf 8f6f 	isb	sy
9000cf0c:	f3bf 8f4f 	dsb	sy
9000cf10:	e7fe      	b.n	9000cf10 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000cf12:	2000      	movs	r0, #0
	__asm volatile
9000cf14:	f386 8811 	msr	BASEPRI, r6
}
9000cf18:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000cf1c:	b90b      	cbnz	r3, 9000cf22 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000cf1e:	2001      	movs	r0, #1
9000cf20:	e7f8      	b.n	9000cf14 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cf22:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000cf26:	f001 f99f 	bl	9000e268 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000cf2a:	2d00      	cmp	r5, #0
9000cf2c:	d0f7      	beq.n	9000cf1e <xQueueGiveFromISR+0x92>
9000cf2e:	2800      	cmp	r0, #0
9000cf30:	d0f5      	beq.n	9000cf1e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000cf32:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000cf34:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000cf36:	602b      	str	r3, [r5, #0]
9000cf38:	e7ec      	b.n	9000cf14 <xQueueGiveFromISR+0x88>
9000cf3a:	bf00      	nop

9000cf3c <xQueueReceive>:
{
9000cf3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000cf40:	b085      	sub	sp, #20
9000cf42:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000cf44:	2800      	cmp	r0, #0
9000cf46:	f000 815f 	beq.w	9000d208 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000cf4a:	460f      	mov	r7, r1
9000cf4c:	4604      	mov	r4, r0
9000cf4e:	2900      	cmp	r1, #0
9000cf50:	f000 8094 	beq.w	9000d07c <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000cf54:	f001 fa32 	bl	9000e3bc <xTaskGetSchedulerState>
9000cf58:	2800      	cmp	r0, #0
9000cf5a:	f000 809c 	beq.w	9000d096 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
9000cf5e:	f7ff fa09 	bl	9000c374 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000cf62:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000cf64:	2d00      	cmp	r5, #0
9000cf66:	d172      	bne.n	9000d04e <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
9000cf68:	9b01      	ldr	r3, [sp, #4]
9000cf6a:	2b00      	cmp	r3, #0
9000cf6c:	f000 80f1 	beq.w	9000d152 <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
9000cf70:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cf72:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000cf76:	a802      	add	r0, sp, #8
9000cf78:	f001 f9c0 	bl	9000e2fc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000cf7c:	f7ff fa1c 	bl	9000c3b8 <vPortExitCritical>
		vTaskSuspendAll();
9000cf80:	f001 f848 	bl	9000e014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000cf84:	f7ff f9f6 	bl	9000c374 <vPortEnterCritical>
9000cf88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000cf8c:	2bff      	cmp	r3, #255	; 0xff
9000cf8e:	d101      	bne.n	9000cf94 <xQueueReceive+0x58>
9000cf90:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000cf94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000cf98:	2bff      	cmp	r3, #255	; 0xff
9000cf9a:	d101      	bne.n	9000cfa0 <xQueueReceive+0x64>
9000cf9c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000cfa0:	f7ff fa0a 	bl	9000c3b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000cfa4:	a901      	add	r1, sp, #4
9000cfa6:	a802      	add	r0, sp, #8
9000cfa8:	f001 f9b4 	bl	9000e314 <xTaskCheckForTimeOut>
9000cfac:	2800      	cmp	r0, #0
9000cfae:	d17f      	bne.n	9000d0b0 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
9000cfb0:	f7ff f9e0 	bl	9000c374 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000cfb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000cfb6:	2b00      	cmp	r3, #0
9000cfb8:	f000 80d1 	beq.w	9000d15e <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
9000cfbc:	f7ff f9fc 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cfc0:	f7ff f9d8 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000cfc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000cfc8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cfca:	2d00      	cmp	r5, #0
9000cfcc:	dc04      	bgt.n	9000cfd8 <xQueueReceive+0x9c>
9000cfce:	e011      	b.n	9000cff4 <xQueueReceive+0xb8>
			--cTxLock;
9000cfd0:	1e6b      	subs	r3, r5, #1
9000cfd2:	b2da      	uxtb	r2, r3
9000cfd4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cfd6:	b16a      	cbz	r2, 9000cff4 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cfd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cfda:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000cfdc:	b153      	cbz	r3, 9000cff4 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000cfde:	f001 f943 	bl	9000e268 <xTaskRemoveFromEventList>
9000cfe2:	2800      	cmp	r0, #0
9000cfe4:	d0f4      	beq.n	9000cfd0 <xQueueReceive+0x94>
						vTaskMissedYield();
9000cfe6:	f001 f9dd 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000cfea:	1e6b      	subs	r3, r5, #1
9000cfec:	b2da      	uxtb	r2, r3
9000cfee:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000cff0:	2a00      	cmp	r2, #0
9000cff2:	d1f1      	bne.n	9000cfd8 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000cff4:	23ff      	movs	r3, #255	; 0xff
9000cff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000cffa:	f7ff f9dd 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000cffe:	f7ff f9b9 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d002:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d006:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d008:	2d00      	cmp	r5, #0
9000d00a:	dd14      	ble.n	9000d036 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d00c:	f104 0910 	add.w	r9, r4, #16
9000d010:	e003      	b.n	9000d01a <xQueueReceive+0xde>
				--cRxLock;
9000d012:	1e6b      	subs	r3, r5, #1
9000d014:	b2da      	uxtb	r2, r3
9000d016:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d018:	b16a      	cbz	r2, 9000d036 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d01a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d01c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d01e:	b153      	cbz	r3, 9000d036 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d020:	f001 f922 	bl	9000e268 <xTaskRemoveFromEventList>
9000d024:	2800      	cmp	r0, #0
9000d026:	d0f4      	beq.n	9000d012 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000d028:	f001 f9bc 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000d02c:	1e6b      	subs	r3, r5, #1
9000d02e:	b2da      	uxtb	r2, r3
9000d030:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d032:	2a00      	cmp	r2, #0
9000d034:	d1f1      	bne.n	9000d01a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000d036:	23ff      	movs	r3, #255	; 0xff
9000d038:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d03c:	f7ff f9bc 	bl	9000c3b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000d040:	f000 fff0 	bl	9000e024 <xTaskResumeAll>
		taskENTER_CRITICAL();
9000d044:	f7ff f996 	bl	9000c374 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d048:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d04a:	2d00      	cmp	r5, #0
9000d04c:	d07d      	beq.n	9000d14a <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000d04e:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d050:	b152      	cbz	r2, 9000d068 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d052:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d054:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d056:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d058:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d05a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d05c:	d301      	bcc.n	9000d062 <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000d05e:	6821      	ldr	r1, [r4, #0]
9000d060:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000d062:	4638      	mov	r0, r7
9000d064:	f014 f95e 	bl	90021324 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000d068:	3d01      	subs	r5, #1
9000d06a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d06c:	6923      	ldr	r3, [r4, #16]
9000d06e:	2b00      	cmp	r3, #0
9000d070:	f040 80d3 	bne.w	9000d21a <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
9000d074:	f7ff f9a0 	bl	9000c3b8 <vPortExitCritical>
				return pdPASS;
9000d078:	2001      	movs	r0, #1
9000d07a:	e06d      	b.n	9000d158 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d07c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000d07e:	2b00      	cmp	r3, #0
9000d080:	f43f af68 	beq.w	9000cf54 <xQueueReceive+0x18>
	__asm volatile
9000d084:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d088:	f383 8811 	msr	BASEPRI, r3
9000d08c:	f3bf 8f6f 	isb	sy
9000d090:	f3bf 8f4f 	dsb	sy
9000d094:	e7fe      	b.n	9000d094 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d096:	9b01      	ldr	r3, [sp, #4]
9000d098:	2b00      	cmp	r3, #0
9000d09a:	f43f af60 	beq.w	9000cf5e <xQueueReceive+0x22>
9000d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d0a2:	f383 8811 	msr	BASEPRI, r3
9000d0a6:	f3bf 8f6f 	isb	sy
9000d0aa:	f3bf 8f4f 	dsb	sy
9000d0ae:	e7fe      	b.n	9000d0ae <xQueueReceive+0x172>
	taskENTER_CRITICAL();
9000d0b0:	f7ff f960 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d0b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d0b8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d0ba:	2d00      	cmp	r5, #0
9000d0bc:	dc04      	bgt.n	9000d0c8 <xQueueReceive+0x18c>
9000d0be:	e011      	b.n	9000d0e4 <xQueueReceive+0x1a8>
			--cTxLock;
9000d0c0:	1e6b      	subs	r3, r5, #1
9000d0c2:	b2da      	uxtb	r2, r3
9000d0c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d0c6:	b16a      	cbz	r2, 9000d0e4 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d0ca:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d0cc:	b153      	cbz	r3, 9000d0e4 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d0ce:	f001 f8cb 	bl	9000e268 <xTaskRemoveFromEventList>
9000d0d2:	2800      	cmp	r0, #0
9000d0d4:	d0f4      	beq.n	9000d0c0 <xQueueReceive+0x184>
						vTaskMissedYield();
9000d0d6:	f001 f965 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000d0da:	1e6b      	subs	r3, r5, #1
9000d0dc:	b2da      	uxtb	r2, r3
9000d0de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d0e0:	2a00      	cmp	r2, #0
9000d0e2:	d1f1      	bne.n	9000d0c8 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
9000d0e4:	23ff      	movs	r3, #255	; 0xff
9000d0e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d0ea:	f7ff f965 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d0ee:	f7ff f941 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d0f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d0f6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d0f8:	2d00      	cmp	r5, #0
9000d0fa:	dd14      	ble.n	9000d126 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d0fc:	f104 0910 	add.w	r9, r4, #16
9000d100:	e003      	b.n	9000d10a <xQueueReceive+0x1ce>
				--cRxLock;
9000d102:	1e6b      	subs	r3, r5, #1
9000d104:	b2da      	uxtb	r2, r3
9000d106:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d108:	b16a      	cbz	r2, 9000d126 <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d10a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d10c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d10e:	b153      	cbz	r3, 9000d126 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d110:	f001 f8aa 	bl	9000e268 <xTaskRemoveFromEventList>
9000d114:	2800      	cmp	r0, #0
9000d116:	d0f4      	beq.n	9000d102 <xQueueReceive+0x1c6>
					vTaskMissedYield();
9000d118:	f001 f944 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000d11c:	1e6b      	subs	r3, r5, #1
9000d11e:	b2da      	uxtb	r2, r3
9000d120:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d122:	2a00      	cmp	r2, #0
9000d124:	d1f1      	bne.n	9000d10a <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
9000d126:	23ff      	movs	r3, #255	; 0xff
9000d128:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d12c:	f7ff f944 	bl	9000c3b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000d130:	f000 ff78 	bl	9000e024 <xTaskResumeAll>
	taskENTER_CRITICAL();
9000d134:	f7ff f91e 	bl	9000c374 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d138:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d13a:	b153      	cbz	r3, 9000d152 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
9000d13c:	f7ff f93c 	bl	9000c3b8 <vPortExitCritical>
		taskENTER_CRITICAL();
9000d140:	f7ff f918 	bl	9000c374 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d144:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d146:	2d00      	cmp	r5, #0
9000d148:	d181      	bne.n	9000d04e <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d14a:	9b01      	ldr	r3, [sp, #4]
9000d14c:	2b00      	cmp	r3, #0
9000d14e:	f47f af15 	bne.w	9000cf7c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000d152:	f7ff f931 	bl	9000c3b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000d156:	2000      	movs	r0, #0
}
9000d158:	b005      	add	sp, #20
9000d15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000d15e:	f7ff f92b 	bl	9000c3b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000d162:	9901      	ldr	r1, [sp, #4]
9000d164:	4630      	mov	r0, r6
9000d166:	f000 fff1 	bl	9000e14c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000d16a:	f7ff f903 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d16e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d172:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d174:	2d00      	cmp	r5, #0
9000d176:	dc04      	bgt.n	9000d182 <xQueueReceive+0x246>
9000d178:	e011      	b.n	9000d19e <xQueueReceive+0x262>
			--cTxLock;
9000d17a:	1e6b      	subs	r3, r5, #1
9000d17c:	b2da      	uxtb	r2, r3
9000d17e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d180:	b16a      	cbz	r2, 9000d19e <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d182:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d184:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d186:	b153      	cbz	r3, 9000d19e <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d188:	f001 f86e 	bl	9000e268 <xTaskRemoveFromEventList>
9000d18c:	2800      	cmp	r0, #0
9000d18e:	d0f4      	beq.n	9000d17a <xQueueReceive+0x23e>
						vTaskMissedYield();
9000d190:	f001 f908 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000d194:	1e6b      	subs	r3, r5, #1
9000d196:	b2da      	uxtb	r2, r3
9000d198:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d19a:	2a00      	cmp	r2, #0
9000d19c:	d1f1      	bne.n	9000d182 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
9000d19e:	23ff      	movs	r3, #255	; 0xff
9000d1a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d1a4:	f7ff f908 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d1a8:	f7ff f8e4 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d1ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d1b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d1b2:	2d00      	cmp	r5, #0
9000d1b4:	dd14      	ble.n	9000d1e0 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d1b6:	f104 0910 	add.w	r9, r4, #16
9000d1ba:	e003      	b.n	9000d1c4 <xQueueReceive+0x288>
				--cRxLock;
9000d1bc:	1e6b      	subs	r3, r5, #1
9000d1be:	b2da      	uxtb	r2, r3
9000d1c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d1c2:	b16a      	cbz	r2, 9000d1e0 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d1c4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d1c6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d1c8:	b153      	cbz	r3, 9000d1e0 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d1ca:	f001 f84d 	bl	9000e268 <xTaskRemoveFromEventList>
9000d1ce:	2800      	cmp	r0, #0
9000d1d0:	d0f4      	beq.n	9000d1bc <xQueueReceive+0x280>
					vTaskMissedYield();
9000d1d2:	f001 f8e7 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000d1d6:	1e6b      	subs	r3, r5, #1
9000d1d8:	b2da      	uxtb	r2, r3
9000d1da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d1dc:	2a00      	cmp	r2, #0
9000d1de:	d1f1      	bne.n	9000d1c4 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
9000d1e0:	23ff      	movs	r3, #255	; 0xff
9000d1e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d1e6:	f7ff f8e7 	bl	9000c3b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000d1ea:	f000 ff1b 	bl	9000e024 <xTaskResumeAll>
9000d1ee:	2800      	cmp	r0, #0
9000d1f0:	d1a6      	bne.n	9000d140 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
9000d1f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d1fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d1fe:	f3bf 8f4f 	dsb	sy
9000d202:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000d206:	e79b      	b.n	9000d140 <xQueueReceive+0x204>
9000d208:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d20c:	f383 8811 	msr	BASEPRI, r3
9000d210:	f3bf 8f6f 	isb	sy
9000d214:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000d218:	e7fe      	b.n	9000d218 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d21a:	f104 0010 	add.w	r0, r4, #16
9000d21e:	f001 f823 	bl	9000e268 <xTaskRemoveFromEventList>
9000d222:	2800      	cmp	r0, #0
9000d224:	f43f af26 	beq.w	9000d074 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
9000d228:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d230:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d234:	f3bf 8f4f 	dsb	sy
9000d238:	f3bf 8f6f 	isb	sy
9000d23c:	e71a      	b.n	9000d074 <xQueueReceive+0x138>
9000d23e:	bf00      	nop

9000d240 <xQueueSemaphoreTake>:
{
9000d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d244:	b084      	sub	sp, #16
9000d246:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000d248:	2800      	cmp	r0, #0
9000d24a:	d05c      	beq.n	9000d306 <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000d24c:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000d24e:	4604      	mov	r4, r0
9000d250:	b147      	cbz	r7, 9000d264 <xQueueSemaphoreTake+0x24>
9000d252:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d256:	f383 8811 	msr	BASEPRI, r3
9000d25a:	f3bf 8f6f 	isb	sy
9000d25e:	f3bf 8f4f 	dsb	sy
9000d262:	e7fe      	b.n	9000d262 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d264:	f001 f8aa 	bl	9000e3bc <xTaskGetSchedulerState>
9000d268:	4605      	mov	r5, r0
9000d26a:	2800      	cmp	r0, #0
9000d26c:	d054      	beq.n	9000d318 <xQueueSemaphoreTake+0xd8>
9000d26e:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d270:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000d274:	f7ff f87e 	bl	9000c374 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000d278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000d27a:	2b00      	cmp	r3, #0
9000d27c:	f040 8149 	bne.w	9000d512 <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d280:	9b01      	ldr	r3, [sp, #4]
9000d282:	2b00      	cmp	r3, #0
9000d284:	f000 813a 	beq.w	9000d4fc <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000d288:	2d00      	cmp	r5, #0
9000d28a:	f000 809d 	beq.w	9000d3c8 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000d28e:	f7ff f893 	bl	9000c3b8 <vPortExitCritical>
		vTaskSuspendAll();
9000d292:	f000 febf 	bl	9000e014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000d296:	f7ff f86d 	bl	9000c374 <vPortEnterCritical>
9000d29a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d29e:	2bff      	cmp	r3, #255	; 0xff
9000d2a0:	d102      	bne.n	9000d2a8 <xQueueSemaphoreTake+0x68>
9000d2a2:	2300      	movs	r3, #0
9000d2a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000d2a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d2ac:	2bff      	cmp	r3, #255	; 0xff
9000d2ae:	d102      	bne.n	9000d2b6 <xQueueSemaphoreTake+0x76>
9000d2b0:	2300      	movs	r3, #0
9000d2b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000d2b6:	f7ff f87f 	bl	9000c3b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000d2ba:	a901      	add	r1, sp, #4
9000d2bc:	a802      	add	r0, sp, #8
9000d2be:	f001 f829 	bl	9000e314 <xTaskCheckForTimeOut>
9000d2c2:	2800      	cmp	r0, #0
9000d2c4:	d135      	bne.n	9000d332 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000d2c6:	f7ff f855 	bl	9000c374 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d2ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d2cc:	2b00      	cmp	r3, #0
9000d2ce:	f000 80a4 	beq.w	9000d41a <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000d2d2:	f7ff f871 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d2d6:	f7ff f84d 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d2da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d2de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d2e0:	2d00      	cmp	r5, #0
9000d2e2:	dc05      	bgt.n	9000d2f0 <xQueueSemaphoreTake+0xb0>
9000d2e4:	e074      	b.n	9000d3d0 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000d2e6:	1e6b      	subs	r3, r5, #1
9000d2e8:	b2da      	uxtb	r2, r3
9000d2ea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d2ec:	2a00      	cmp	r2, #0
9000d2ee:	d06f      	beq.n	9000d3d0 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d2f2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d2f4:	2b00      	cmp	r3, #0
9000d2f6:	d06b      	beq.n	9000d3d0 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d2f8:	f000 ffb6 	bl	9000e268 <xTaskRemoveFromEventList>
9000d2fc:	2800      	cmp	r0, #0
9000d2fe:	d0f2      	beq.n	9000d2e6 <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000d300:	f001 f850 	bl	9000e3a4 <vTaskMissedYield>
9000d304:	e7ef      	b.n	9000d2e6 <xQueueSemaphoreTake+0xa6>
9000d306:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d30a:	f383 8811 	msr	BASEPRI, r3
9000d30e:	f3bf 8f6f 	isb	sy
9000d312:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000d316:	e7fe      	b.n	9000d316 <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d318:	9b01      	ldr	r3, [sp, #4]
9000d31a:	2b00      	cmp	r3, #0
9000d31c:	f000 80d4 	beq.w	9000d4c8 <xQueueSemaphoreTake+0x288>
9000d320:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d324:	f383 8811 	msr	BASEPRI, r3
9000d328:	f3bf 8f6f 	isb	sy
9000d32c:	f3bf 8f4f 	dsb	sy
9000d330:	e7fe      	b.n	9000d330 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000d332:	f7ff f81f 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d336:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d33a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d33c:	2d00      	cmp	r5, #0
9000d33e:	dc04      	bgt.n	9000d34a <xQueueSemaphoreTake+0x10a>
9000d340:	e011      	b.n	9000d366 <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000d342:	1e6b      	subs	r3, r5, #1
9000d344:	b2da      	uxtb	r2, r3
9000d346:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d348:	b16a      	cbz	r2, 9000d366 <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d34a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d34c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d34e:	b153      	cbz	r3, 9000d366 <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d350:	f000 ff8a 	bl	9000e268 <xTaskRemoveFromEventList>
9000d354:	2800      	cmp	r0, #0
9000d356:	d0f4      	beq.n	9000d342 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000d358:	f001 f824 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000d35c:	1e6b      	subs	r3, r5, #1
9000d35e:	b2da      	uxtb	r2, r3
9000d360:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d362:	2a00      	cmp	r2, #0
9000d364:	d1f1      	bne.n	9000d34a <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000d366:	23ff      	movs	r3, #255	; 0xff
9000d368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d36c:	f7ff f824 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d370:	f7ff f800 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d374:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d378:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d37a:	2d00      	cmp	r5, #0
9000d37c:	dd14      	ble.n	9000d3a8 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d37e:	f104 0810 	add.w	r8, r4, #16
9000d382:	e003      	b.n	9000d38c <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000d384:	1e6b      	subs	r3, r5, #1
9000d386:	b2da      	uxtb	r2, r3
9000d388:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d38a:	b16a      	cbz	r2, 9000d3a8 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d38c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d38e:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d390:	b153      	cbz	r3, 9000d3a8 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d392:	f000 ff69 	bl	9000e268 <xTaskRemoveFromEventList>
9000d396:	2800      	cmp	r0, #0
9000d398:	d0f4      	beq.n	9000d384 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000d39a:	f001 f803 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000d39e:	1e6b      	subs	r3, r5, #1
9000d3a0:	b2da      	uxtb	r2, r3
9000d3a2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d3a4:	2a00      	cmp	r2, #0
9000d3a6:	d1f1      	bne.n	9000d38c <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000d3a8:	23ff      	movs	r3, #255	; 0xff
9000d3aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d3ae:	f7ff f803 	bl	9000c3b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000d3b2:	f000 fe37 	bl	9000e024 <xTaskResumeAll>
	taskENTER_CRITICAL();
9000d3b6:	f7fe ffdd 	bl	9000c374 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000d3ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d3bc:	2b00      	cmp	r3, #0
9000d3be:	d07c      	beq.n	9000d4ba <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000d3c0:	f7fe fffa 	bl	9000c3b8 <vPortExitCritical>
	return xReturn;
9000d3c4:	2501      	movs	r5, #1
9000d3c6:	e755      	b.n	9000d274 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000d3c8:	a802      	add	r0, sp, #8
9000d3ca:	f000 ff97 	bl	9000e2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000d3ce:	e75e      	b.n	9000d28e <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000d3d0:	23ff      	movs	r3, #255	; 0xff
9000d3d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d3d6:	f7fe ffef 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d3da:	f7fe ffcb 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d3de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d3e2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d3e4:	2d00      	cmp	r5, #0
9000d3e6:	dd10      	ble.n	9000d40a <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d3e8:	f104 0810 	add.w	r8, r4, #16
9000d3ec:	e003      	b.n	9000d3f6 <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000d3ee:	1e6b      	subs	r3, r5, #1
9000d3f0:	b2da      	uxtb	r2, r3
9000d3f2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d3f4:	b14a      	cbz	r2, 9000d40a <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d3f6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d3f8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d3fa:	b133      	cbz	r3, 9000d40a <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d3fc:	f000 ff34 	bl	9000e268 <xTaskRemoveFromEventList>
9000d400:	2800      	cmp	r0, #0
9000d402:	d0f4      	beq.n	9000d3ee <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000d404:	f000 ffce 	bl	9000e3a4 <vTaskMissedYield>
9000d408:	e7f1      	b.n	9000d3ee <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000d40a:	23ff      	movs	r3, #255	; 0xff
9000d40c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d410:	f7fe ffd2 	bl	9000c3b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000d414:	f000 fe06 	bl	9000e024 <xTaskResumeAll>
9000d418:	e7d4      	b.n	9000d3c4 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000d41a:	f7fe ffcd 	bl	9000c3b8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d41e:	6823      	ldr	r3, [r4, #0]
9000d420:	2b00      	cmp	r3, #0
9000d422:	d062      	beq.n	9000d4ea <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000d424:	9901      	ldr	r1, [sp, #4]
9000d426:	4630      	mov	r0, r6
9000d428:	f000 fe90 	bl	9000e14c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000d42c:	f7fe ffa2 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d430:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d434:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d436:	2d00      	cmp	r5, #0
9000d438:	dc04      	bgt.n	9000d444 <xQueueSemaphoreTake+0x204>
9000d43a:	e00d      	b.n	9000d458 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000d43c:	1e6b      	subs	r3, r5, #1
9000d43e:	b2da      	uxtb	r2, r3
9000d440:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d442:	b14a      	cbz	r2, 9000d458 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d444:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d446:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d448:	b133      	cbz	r3, 9000d458 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d44a:	f000 ff0d 	bl	9000e268 <xTaskRemoveFromEventList>
9000d44e:	2800      	cmp	r0, #0
9000d450:	d0f4      	beq.n	9000d43c <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000d452:	f000 ffa7 	bl	9000e3a4 <vTaskMissedYield>
9000d456:	e7f1      	b.n	9000d43c <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000d458:	23ff      	movs	r3, #255	; 0xff
9000d45a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d45e:	f7fe ffab 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d462:	f7fe ff87 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d466:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d46a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d46c:	2d00      	cmp	r5, #0
9000d46e:	dd10      	ble.n	9000d492 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d470:	f104 0810 	add.w	r8, r4, #16
9000d474:	e003      	b.n	9000d47e <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000d476:	1e6b      	subs	r3, r5, #1
9000d478:	b2da      	uxtb	r2, r3
9000d47a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d47c:	b14a      	cbz	r2, 9000d492 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d47e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d480:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d482:	b133      	cbz	r3, 9000d492 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d484:	f000 fef0 	bl	9000e268 <xTaskRemoveFromEventList>
9000d488:	2800      	cmp	r0, #0
9000d48a:	d0f4      	beq.n	9000d476 <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000d48c:	f000 ff8a 	bl	9000e3a4 <vTaskMissedYield>
9000d490:	e7f1      	b.n	9000d476 <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000d492:	23ff      	movs	r3, #255	; 0xff
9000d494:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d498:	f7fe ff8e 	bl	9000c3b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000d49c:	f000 fdc2 	bl	9000e024 <xTaskResumeAll>
9000d4a0:	2800      	cmp	r0, #0
9000d4a2:	d18f      	bne.n	9000d3c4 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000d4a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d4ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d4b0:	f3bf 8f4f 	dsb	sy
9000d4b4:	f3bf 8f6f 	isb	sy
9000d4b8:	e784      	b.n	9000d3c4 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000d4ba:	f7fe ff7d 	bl	9000c3b8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000d4be:	b92f      	cbnz	r7, 9000d4cc <xQueueSemaphoreTake+0x28c>
}
9000d4c0:	4638      	mov	r0, r7
9000d4c2:	b004      	add	sp, #16
9000d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000d4c8:	4607      	mov	r7, r0
9000d4ca:	e6d1      	b.n	9000d270 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000d4cc:	f7fe ff52 	bl	9000c374 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000d4d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000d4d2:	b119      	cbz	r1, 9000d4dc <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000d4d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000d4d6:	6819      	ldr	r1, [r3, #0]
9000d4d8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000d4dc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000d4de:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000d4e0:	f001 f808 	bl	9000e4f4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000d4e4:	f7fe ff68 	bl	9000c3b8 <vPortExitCritical>
9000d4e8:	e7ea      	b.n	9000d4c0 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000d4ea:	f7fe ff43 	bl	9000c374 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000d4ee:	68a0      	ldr	r0, [r4, #8]
9000d4f0:	f000 ff74 	bl	9000e3dc <xTaskPriorityInherit>
9000d4f4:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000d4f6:	f7fe ff5f 	bl	9000c3b8 <vPortExitCritical>
9000d4fa:	e793      	b.n	9000d424 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000d4fc:	2f00      	cmp	r7, #0
9000d4fe:	d0f1      	beq.n	9000d4e4 <xQueueSemaphoreTake+0x2a4>
9000d500:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d504:	f383 8811 	msr	BASEPRI, r3
9000d508:	f3bf 8f6f 	isb	sy
9000d50c:	f3bf 8f4f 	dsb	sy
9000d510:	e7fe      	b.n	9000d510 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000d512:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d514:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000d516:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d518:	b12a      	cbz	r2, 9000d526 <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d51a:	6923      	ldr	r3, [r4, #16]
9000d51c:	b93b      	cbnz	r3, 9000d52e <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000d51e:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000d520:	f7fe ff4a 	bl	9000c3b8 <vPortExitCritical>
				return pdPASS;
9000d524:	e7cc      	b.n	9000d4c0 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000d526:	f001 f839 	bl	9000e59c <pvTaskIncrementMutexHeldCount>
9000d52a:	60a0      	str	r0, [r4, #8]
9000d52c:	e7f5      	b.n	9000d51a <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d52e:	f104 0010 	add.w	r0, r4, #16
9000d532:	f000 fe99 	bl	9000e268 <xTaskRemoveFromEventList>
9000d536:	2800      	cmp	r0, #0
9000d538:	d0f1      	beq.n	9000d51e <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000d53a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d542:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d546:	f3bf 8f4f 	dsb	sy
9000d54a:	f3bf 8f6f 	isb	sy
9000d54e:	e7e6      	b.n	9000d51e <xQueueSemaphoreTake+0x2de>

9000d550 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000d550:	b1a8      	cbz	r0, 9000d57e <xQueueTakeMutexRecursive+0x2e>
	{
9000d552:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000d554:	6886      	ldr	r6, [r0, #8]
9000d556:	4604      	mov	r4, r0
9000d558:	460d      	mov	r5, r1
9000d55a:	f000 ff29 	bl	9000e3b0 <xTaskGetCurrentTaskHandle>
9000d55e:	4286      	cmp	r6, r0
9000d560:	d008      	beq.n	9000d574 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000d562:	4629      	mov	r1, r5
9000d564:	4620      	mov	r0, r4
9000d566:	f7ff fe6b 	bl	9000d240 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000d56a:	b110      	cbz	r0, 9000d572 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000d56c:	68e3      	ldr	r3, [r4, #12]
9000d56e:	3301      	adds	r3, #1
9000d570:	60e3      	str	r3, [r4, #12]
	}
9000d572:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000d574:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000d576:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000d578:	4403      	add	r3, r0
9000d57a:	60e3      	str	r3, [r4, #12]
	}
9000d57c:	bd70      	pop	{r4, r5, r6, pc}
9000d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d582:	f383 8811 	msr	BASEPRI, r3
9000d586:	f3bf 8f6f 	isb	sy
9000d58a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000d58e:	e7fe      	b.n	9000d58e <xQueueTakeMutexRecursive+0x3e>

9000d590 <xQueueReceiveFromISR>:
{
9000d590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000d594:	b310      	cbz	r0, 9000d5dc <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d596:	460e      	mov	r6, r1
9000d598:	4604      	mov	r4, r0
9000d59a:	4617      	mov	r7, r2
9000d59c:	b191      	cbz	r1, 9000d5c4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000d59e:	f7ff f81b 	bl	9000c5d8 <vPortValidateInterruptPriority>
	__asm volatile
9000d5a2:	f3ef 8911 	mrs	r9, BASEPRI
9000d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d5aa:	f383 8811 	msr	BASEPRI, r3
9000d5ae:	f3bf 8f6f 	isb	sy
9000d5b2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d5b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d5b8:	b9cd      	cbnz	r5, 9000d5ee <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000d5ba:	4628      	mov	r0, r5
	__asm volatile
9000d5bc:	f389 8811 	msr	BASEPRI, r9
}
9000d5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d5c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000d5c6:	2b00      	cmp	r3, #0
9000d5c8:	d0e9      	beq.n	9000d59e <xQueueReceiveFromISR+0xe>
	__asm volatile
9000d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d5ce:	f383 8811 	msr	BASEPRI, r3
9000d5d2:	f3bf 8f6f 	isb	sy
9000d5d6:	f3bf 8f4f 	dsb	sy
9000d5da:	e7fe      	b.n	9000d5da <xQueueReceiveFromISR+0x4a>
9000d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d5e0:	f383 8811 	msr	BASEPRI, r3
9000d5e4:	f3bf 8f6f 	isb	sy
9000d5e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d5ec:	e7fe      	b.n	9000d5ec <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000d5ee:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000d5f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000d5f4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000d5f8:	b142      	cbz	r2, 9000d60c <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d5fa:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d5fc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d5fe:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d600:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d602:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000d604:	d215      	bcs.n	9000d632 <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000d606:	4630      	mov	r0, r6
9000d608:	f013 fe8c 	bl	90021324 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000d60c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000d60e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000d612:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000d614:	d009      	beq.n	9000d62a <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000d616:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000d61a:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000d61c:	b25b      	sxtb	r3, r3
9000d61e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000d622:	f389 8811 	msr	BASEPRI, r9
}
9000d626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d62a:	6923      	ldr	r3, [r4, #16]
9000d62c:	b923      	cbnz	r3, 9000d638 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000d62e:	2001      	movs	r0, #1
9000d630:	e7c4      	b.n	9000d5bc <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000d632:	6821      	ldr	r1, [r4, #0]
9000d634:	60e1      	str	r1, [r4, #12]
9000d636:	e7e6      	b.n	9000d606 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d638:	f104 0010 	add.w	r0, r4, #16
9000d63c:	f000 fe14 	bl	9000e268 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000d640:	2f00      	cmp	r7, #0
9000d642:	d0f4      	beq.n	9000d62e <xQueueReceiveFromISR+0x9e>
9000d644:	2800      	cmp	r0, #0
9000d646:	d0f2      	beq.n	9000d62e <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000d648:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000d64a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000d64c:	603b      	str	r3, [r7, #0]
9000d64e:	e7b5      	b.n	9000d5bc <xQueueReceiveFromISR+0x2c>

9000d650 <vQueueDelete>:
	configASSERT( pxQueue );
9000d650:	b1e0      	cbz	r0, 9000d68c <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000d652:	4b21      	ldr	r3, [pc, #132]	; (9000d6d8 <vQueueDelete+0x88>)
9000d654:	685a      	ldr	r2, [r3, #4]
9000d656:	4290      	cmp	r0, r2
9000d658:	d02b      	beq.n	9000d6b2 <vQueueDelete+0x62>
9000d65a:	68da      	ldr	r2, [r3, #12]
9000d65c:	4290      	cmp	r0, r2
9000d65e:	d02a      	beq.n	9000d6b6 <vQueueDelete+0x66>
9000d660:	695a      	ldr	r2, [r3, #20]
9000d662:	4290      	cmp	r0, r2
9000d664:	d029      	beq.n	9000d6ba <vQueueDelete+0x6a>
9000d666:	69da      	ldr	r2, [r3, #28]
9000d668:	4290      	cmp	r0, r2
9000d66a:	d028      	beq.n	9000d6be <vQueueDelete+0x6e>
9000d66c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000d66e:	4290      	cmp	r0, r2
9000d670:	d027      	beq.n	9000d6c2 <vQueueDelete+0x72>
9000d672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000d674:	4290      	cmp	r0, r2
9000d676:	d014      	beq.n	9000d6a2 <vQueueDelete+0x52>
9000d678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000d67a:	4290      	cmp	r0, r2
9000d67c:	d023      	beq.n	9000d6c6 <vQueueDelete+0x76>
9000d67e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000d680:	4290      	cmp	r0, r2
9000d682:	d022      	beq.n	9000d6ca <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000d684:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000d688:	b14b      	cbz	r3, 9000d69e <vQueueDelete+0x4e>
}
9000d68a:	4770      	bx	lr
	__asm volatile
9000d68c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d690:	f383 8811 	msr	BASEPRI, r3
9000d694:	f3bf 8f6f 	isb	sy
9000d698:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000d69c:	e7fe      	b.n	9000d69c <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000d69e:	f7fe bd4f 	b.w	9000c140 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000d6a2:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000d6a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000d6a8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000d6d0 <vQueueDelete+0x80>
9000d6ac:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000d6b0:	e7e8      	b.n	9000d684 <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000d6b2:	2200      	movs	r2, #0
9000d6b4:	e7f6      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6b6:	2201      	movs	r2, #1
9000d6b8:	e7f4      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6ba:	2202      	movs	r2, #2
9000d6bc:	e7f2      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6be:	2203      	movs	r2, #3
9000d6c0:	e7f0      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6c2:	2204      	movs	r2, #4
9000d6c4:	e7ee      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6c6:	2206      	movs	r2, #6
9000d6c8:	e7ec      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6ca:	2207      	movs	r2, #7
9000d6cc:	e7ea      	b.n	9000d6a4 <vQueueDelete+0x54>
9000d6ce:	bf00      	nop
	...
9000d6d8:	24024e30 	.word	0x24024e30

9000d6dc <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000d6dc:	4b12      	ldr	r3, [pc, #72]	; (9000d728 <vQueueAddToRegistry+0x4c>)
9000d6de:	681a      	ldr	r2, [r3, #0]
9000d6e0:	b17a      	cbz	r2, 9000d702 <vQueueAddToRegistry+0x26>
9000d6e2:	689a      	ldr	r2, [r3, #8]
9000d6e4:	b162      	cbz	r2, 9000d700 <vQueueAddToRegistry+0x24>
9000d6e6:	691a      	ldr	r2, [r3, #16]
9000d6e8:	b192      	cbz	r2, 9000d710 <vQueueAddToRegistry+0x34>
9000d6ea:	699a      	ldr	r2, [r3, #24]
9000d6ec:	b192      	cbz	r2, 9000d714 <vQueueAddToRegistry+0x38>
9000d6ee:	6a1a      	ldr	r2, [r3, #32]
9000d6f0:	b192      	cbz	r2, 9000d718 <vQueueAddToRegistry+0x3c>
9000d6f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000d6f4:	b192      	cbz	r2, 9000d71c <vQueueAddToRegistry+0x40>
9000d6f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000d6f8:	b192      	cbz	r2, 9000d720 <vQueueAddToRegistry+0x44>
9000d6fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000d6fc:	b192      	cbz	r2, 9000d724 <vQueueAddToRegistry+0x48>
	}
9000d6fe:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000d700:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000d702:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000d706:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000d70a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000d70e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000d710:	2202      	movs	r2, #2
9000d712:	e7f6      	b.n	9000d702 <vQueueAddToRegistry+0x26>
9000d714:	2203      	movs	r2, #3
9000d716:	e7f4      	b.n	9000d702 <vQueueAddToRegistry+0x26>
9000d718:	2204      	movs	r2, #4
9000d71a:	e7f2      	b.n	9000d702 <vQueueAddToRegistry+0x26>
9000d71c:	2205      	movs	r2, #5
9000d71e:	e7f0      	b.n	9000d702 <vQueueAddToRegistry+0x26>
9000d720:	2206      	movs	r2, #6
9000d722:	e7ee      	b.n	9000d702 <vQueueAddToRegistry+0x26>
9000d724:	2207      	movs	r2, #7
9000d726:	e7ec      	b.n	9000d702 <vQueueAddToRegistry+0x26>
9000d728:	24024e30 	.word	0x24024e30

9000d72c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000d72c:	b570      	push	{r4, r5, r6, lr}
9000d72e:	4605      	mov	r5, r0
9000d730:	460e      	mov	r6, r1
9000d732:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000d734:	f7fe fe1e 	bl	9000c374 <vPortEnterCritical>
9000d738:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000d73c:	2bff      	cmp	r3, #255	; 0xff
9000d73e:	d102      	bne.n	9000d746 <vQueueWaitForMessageRestricted+0x1a>
9000d740:	2300      	movs	r3, #0
9000d742:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000d746:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000d74a:	2bff      	cmp	r3, #255	; 0xff
9000d74c:	d102      	bne.n	9000d754 <vQueueWaitForMessageRestricted+0x28>
9000d74e:	2300      	movs	r3, #0
9000d750:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000d754:	f7fe fe30 	bl	9000c3b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000d758:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000d75a:	2b00      	cmp	r3, #0
9000d75c:	d043      	beq.n	9000d7e6 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000d75e:	f7fe fe09 	bl	9000c374 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d762:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000d766:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d768:	2c00      	cmp	r4, #0
9000d76a:	dd14      	ble.n	9000d796 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d76c:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000d770:	e003      	b.n	9000d77a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000d772:	1e63      	subs	r3, r4, #1
9000d774:	b2da      	uxtb	r2, r3
9000d776:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d778:	b16a      	cbz	r2, 9000d796 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d77a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d77c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d77e:	b153      	cbz	r3, 9000d796 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d780:	f000 fd72 	bl	9000e268 <xTaskRemoveFromEventList>
9000d784:	2800      	cmp	r0, #0
9000d786:	d0f4      	beq.n	9000d772 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000d788:	f000 fe0c 	bl	9000e3a4 <vTaskMissedYield>
			--cTxLock;
9000d78c:	1e63      	subs	r3, r4, #1
9000d78e:	b2da      	uxtb	r2, r3
9000d790:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d792:	2a00      	cmp	r2, #0
9000d794:	d1f1      	bne.n	9000d77a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000d796:	23ff      	movs	r3, #255	; 0xff
9000d798:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d79c:	f7fe fe0c 	bl	9000c3b8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d7a0:	f7fe fde8 	bl	9000c374 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d7a4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000d7a8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d7aa:	2c00      	cmp	r4, #0
9000d7ac:	dd14      	ble.n	9000d7d8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d7ae:	f105 0610 	add.w	r6, r5, #16
9000d7b2:	e003      	b.n	9000d7bc <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000d7b4:	1e63      	subs	r3, r4, #1
9000d7b6:	b2da      	uxtb	r2, r3
9000d7b8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d7ba:	b16a      	cbz	r2, 9000d7d8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d7bc:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d7be:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d7c0:	b153      	cbz	r3, 9000d7d8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d7c2:	f000 fd51 	bl	9000e268 <xTaskRemoveFromEventList>
9000d7c6:	2800      	cmp	r0, #0
9000d7c8:	d0f4      	beq.n	9000d7b4 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000d7ca:	f000 fdeb 	bl	9000e3a4 <vTaskMissedYield>
				--cRxLock;
9000d7ce:	1e63      	subs	r3, r4, #1
9000d7d0:	b2da      	uxtb	r2, r3
9000d7d2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d7d4:	2a00      	cmp	r2, #0
9000d7d6:	d1f1      	bne.n	9000d7bc <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000d7d8:	23ff      	movs	r3, #255	; 0xff
9000d7da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000d7de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000d7e2:	f7fe bde9 	b.w	9000c3b8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000d7e6:	4622      	mov	r2, r4
9000d7e8:	4631      	mov	r1, r6
9000d7ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000d7ee:	f000 fcf1 	bl	9000e1d4 <vTaskPlaceOnEventListRestricted>
9000d7f2:	e7b4      	b.n	9000d75e <vQueueWaitForMessageRestricted+0x32>

9000d7f4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000d7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000d7f8:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000d7fa:	f7fe fdbb 	bl	9000c374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000d7fe:	4a34      	ldr	r2, [pc, #208]	; (9000d8d0 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000d800:	4e34      	ldr	r6, [pc, #208]	; (9000d8d4 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000d802:	6813      	ldr	r3, [r2, #0]
9000d804:	3301      	adds	r3, #1
9000d806:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000d808:	6833      	ldr	r3, [r6, #0]
9000d80a:	2b00      	cmp	r3, #0
9000d80c:	d032      	beq.n	9000d874 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000d80e:	4c32      	ldr	r4, [pc, #200]	; (9000d8d8 <prvAddNewTaskToReadyList+0xe4>)
9000d810:	6823      	ldr	r3, [r4, #0]
9000d812:	b33b      	cbz	r3, 9000d864 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000d814:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000d816:	4f31      	ldr	r7, [pc, #196]	; (9000d8dc <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
9000d818:	4a31      	ldr	r2, [pc, #196]	; (9000d8e0 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
9000d81a:	4932      	ldr	r1, [pc, #200]	; (9000d8e4 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000d81c:	6813      	ldr	r3, [r2, #0]
9000d81e:	3301      	adds	r3, #1
9000d820:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000d822:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000d824:	680b      	ldr	r3, [r1, #0]
9000d826:	4283      	cmp	r3, r0
9000d828:	d200      	bcs.n	9000d82c <prvAddNewTaskToReadyList+0x38>
9000d82a:	6008      	str	r0, [r1, #0]
9000d82c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000d830:	1d29      	adds	r1, r5, #4
9000d832:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000d836:	f7fe fcf5 	bl	9000c224 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000d83a:	f7fe fdbd 	bl	9000c3b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000d83e:	6823      	ldr	r3, [r4, #0]
9000d840:	b173      	cbz	r3, 9000d860 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000d842:	6832      	ldr	r2, [r6, #0]
9000d844:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d846:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000d848:	429a      	cmp	r2, r3
9000d84a:	d209      	bcs.n	9000d860 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000d84c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d854:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d858:	f3bf 8f4f 	dsb	sy
9000d85c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000d860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000d864:	6833      	ldr	r3, [r6, #0]
9000d866:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d86a:	4f1c      	ldr	r7, [pc, #112]	; (9000d8dc <prvAddNewTaskToReadyList+0xe8>)
9000d86c:	4283      	cmp	r3, r0
9000d86e:	d8d3      	bhi.n	9000d818 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000d870:	6035      	str	r5, [r6, #0]
9000d872:	e7d1      	b.n	9000d818 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000d874:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000d876:	6813      	ldr	r3, [r2, #0]
9000d878:	2b01      	cmp	r3, #1
9000d87a:	d003      	beq.n	9000d884 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
9000d87c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000d87e:	4f17      	ldr	r7, [pc, #92]	; (9000d8dc <prvAddNewTaskToReadyList+0xe8>)
9000d880:	4c15      	ldr	r4, [pc, #84]	; (9000d8d8 <prvAddNewTaskToReadyList+0xe4>)
9000d882:	e7c9      	b.n	9000d818 <prvAddNewTaskToReadyList+0x24>
9000d884:	4f15      	ldr	r7, [pc, #84]	; (9000d8dc <prvAddNewTaskToReadyList+0xe8>)
9000d886:	463c      	mov	r4, r7
9000d888:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000d88c:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000d88e:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000d890:	f7fe fcb8 	bl	9000c204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000d894:	45a0      	cmp	r8, r4
9000d896:	d1f9      	bne.n	9000d88c <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000d898:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000d8fc <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000d89c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000d900 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000d8a0:	4648      	mov	r0, r9
9000d8a2:	4c0d      	ldr	r4, [pc, #52]	; (9000d8d8 <prvAddNewTaskToReadyList+0xe4>)
9000d8a4:	f7fe fcae 	bl	9000c204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000d8a8:	4640      	mov	r0, r8
9000d8aa:	f7fe fcab 	bl	9000c204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000d8ae:	480e      	ldr	r0, [pc, #56]	; (9000d8e8 <prvAddNewTaskToReadyList+0xf4>)
9000d8b0:	f7fe fca8 	bl	9000c204 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000d8b4:	480d      	ldr	r0, [pc, #52]	; (9000d8ec <prvAddNewTaskToReadyList+0xf8>)
9000d8b6:	f7fe fca5 	bl	9000c204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000d8ba:	480d      	ldr	r0, [pc, #52]	; (9000d8f0 <prvAddNewTaskToReadyList+0xfc>)
9000d8bc:	f7fe fca2 	bl	9000c204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000d8c0:	4b0c      	ldr	r3, [pc, #48]	; (9000d8f4 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000d8c2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000d8c4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000d8c8:	4b0b      	ldr	r3, [pc, #44]	; (9000d8f8 <prvAddNewTaskToReadyList+0x104>)
9000d8ca:	f8c3 8000 	str.w	r8, [r3]
}
9000d8ce:	e7a3      	b.n	9000d818 <prvAddNewTaskToReadyList+0x24>
9000d8d0:	240252dc 	.word	0x240252dc
9000d8d4:	24024e70 	.word	0x24024e70
9000d8d8:	24025338 	.word	0x24025338
9000d8dc:	24024e7c 	.word	0x24024e7c
9000d8e0:	240252e8 	.word	0x240252e8
9000d8e4:	240252ec 	.word	0x240252ec
9000d8e8:	24025324 	.word	0x24025324
9000d8ec:	24025350 	.word	0x24025350
9000d8f0:	2402533c 	.word	0x2402533c
9000d8f4:	24024e74 	.word	0x24024e74
9000d8f8:	24024e78 	.word	0x24024e78
9000d8fc:	240252f0 	.word	0x240252f0
9000d900:	24025304 	.word	0x24025304

9000d904 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9000d904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d908:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000d90a:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9000d90e:	4606      	mov	r6, r0
9000d910:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000d912:	464a      	mov	r2, r9
9000d914:	21a5      	movs	r1, #165	; 0xa5
9000d916:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9000d918:	461f      	mov	r7, r3
9000d91a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000d91e:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000d922:	f013 fd0d 	bl	90021340 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000d926:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000d928:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000d92a:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
9000d92e:	2d00      	cmp	r5, #0
9000d930:	d07f      	beq.n	9000da32 <prvInitialiseNewTask.constprop.0+0x12e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d932:	782b      	ldrb	r3, [r5, #0]
9000d934:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000d938:	782b      	ldrb	r3, [r5, #0]
9000d93a:	2b00      	cmp	r3, #0
9000d93c:	d04d      	beq.n	9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d93e:	786b      	ldrb	r3, [r5, #1]
9000d940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000d944:	786b      	ldrb	r3, [r5, #1]
9000d946:	2b00      	cmp	r3, #0
9000d948:	d047      	beq.n	9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d94a:	78ab      	ldrb	r3, [r5, #2]
9000d94c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000d950:	78ab      	ldrb	r3, [r5, #2]
9000d952:	2b00      	cmp	r3, #0
9000d954:	d041      	beq.n	9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d956:	78eb      	ldrb	r3, [r5, #3]
9000d958:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000d95c:	78eb      	ldrb	r3, [r5, #3]
9000d95e:	2b00      	cmp	r3, #0
9000d960:	d03b      	beq.n	9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d962:	792b      	ldrb	r3, [r5, #4]
9000d964:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000d968:	792b      	ldrb	r3, [r5, #4]
9000d96a:	2b00      	cmp	r3, #0
9000d96c:	d035      	beq.n	9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d96e:	796b      	ldrb	r3, [r5, #5]
9000d970:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000d974:	796b      	ldrb	r3, [r5, #5]
9000d976:	2b00      	cmp	r3, #0
9000d978:	d02f      	beq.n	9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d97a:	79ab      	ldrb	r3, [r5, #6]
9000d97c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000d980:	79ab      	ldrb	r3, [r5, #6]
9000d982:	b353      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d984:	79eb      	ldrb	r3, [r5, #7]
9000d986:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000d98a:	79eb      	ldrb	r3, [r5, #7]
9000d98c:	b32b      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d98e:	7a2b      	ldrb	r3, [r5, #8]
9000d990:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000d994:	7a2b      	ldrb	r3, [r5, #8]
9000d996:	b303      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d998:	7a6b      	ldrb	r3, [r5, #9]
9000d99a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000d99e:	7a6b      	ldrb	r3, [r5, #9]
9000d9a0:	b1db      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d9a2:	7aab      	ldrb	r3, [r5, #10]
9000d9a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000d9a8:	7aab      	ldrb	r3, [r5, #10]
9000d9aa:	b1b3      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d9ac:	7aeb      	ldrb	r3, [r5, #11]
9000d9ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000d9b2:	7aeb      	ldrb	r3, [r5, #11]
9000d9b4:	b18b      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d9b6:	7b2b      	ldrb	r3, [r5, #12]
9000d9b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000d9bc:	7b2b      	ldrb	r3, [r5, #12]
9000d9be:	b163      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d9c0:	7b6b      	ldrb	r3, [r5, #13]
9000d9c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000d9c6:	7b6b      	ldrb	r3, [r5, #13]
9000d9c8:	b13b      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d9ca:	7bab      	ldrb	r3, [r5, #14]
9000d9cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000d9d0:	7bab      	ldrb	r3, [r5, #14]
9000d9d2:	b113      	cbz	r3, 9000d9da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000d9d4:	7beb      	ldrb	r3, [r5, #15]
9000d9d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000d9da:	2300      	movs	r3, #0
9000d9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000d9e0:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000d9e2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000d9e6:	1d20      	adds	r0, r4, #4
9000d9e8:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000d9ea:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
9000d9ee:	bf28      	it	cs
9000d9f0:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000d9f2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000d9f4:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000d9f6:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000d9fa:	f7fe fc0f 	bl	9000c21c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000d9fe:	f104 0018 	add.w	r0, r4, #24
9000da02:	f7fe fc0b 	bl	9000c21c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
9000da06:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000da0a:	463a      	mov	r2, r7
9000da0c:	4631      	mov	r1, r6
9000da0e:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000da10:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000da12:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000da14:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000da16:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000da1a:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000da1e:	f7fe fc7b 	bl	9000c318 <pxPortInitialiseStack>
9000da22:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000da24:	f1b8 0f00 	cmp.w	r8, #0
9000da28:	d001      	beq.n	9000da2e <prvInitialiseNewTask.constprop.0+0x12a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000da2a:	f8c8 4000 	str.w	r4, [r8]
}
9000da2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000da32:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000da36:	e7d3      	b.n	9000d9e0 <prvInitialiseNewTask.constprop.0+0xdc>

9000da38 <prvIdleTask>:
{
9000da38:	b580      	push	{r7, lr}
9000da3a:	4c22      	ldr	r4, [pc, #136]	; (9000dac4 <prvIdleTask+0x8c>)
				taskYIELD();
9000da3c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000da40:	4e21      	ldr	r6, [pc, #132]	; (9000dac8 <prvIdleTask+0x90>)
9000da42:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000da46:	4d21      	ldr	r5, [pc, #132]	; (9000dacc <prvIdleTask+0x94>)
9000da48:	4f21      	ldr	r7, [pc, #132]	; (9000dad0 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000da4a:	6823      	ldr	r3, [r4, #0]
9000da4c:	b353      	cbz	r3, 9000daa4 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000da4e:	f7fe fc91 	bl	9000c374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000da52:	68f3      	ldr	r3, [r6, #12]
9000da54:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000da58:	f10a 0004 	add.w	r0, sl, #4
9000da5c:	f7fe fc0a 	bl	9000c274 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000da60:	682b      	ldr	r3, [r5, #0]
9000da62:	3b01      	subs	r3, #1
9000da64:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000da66:	6823      	ldr	r3, [r4, #0]
9000da68:	3b01      	subs	r3, #1
9000da6a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000da6c:	f7fe fca4 	bl	9000c3b8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000da70:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000da74:	b163      	cbz	r3, 9000da90 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000da76:	2b01      	cmp	r3, #1
9000da78:	d020      	beq.n	9000dabc <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000da7a:	2b02      	cmp	r3, #2
9000da7c:	d0e5      	beq.n	9000da4a <prvIdleTask+0x12>
9000da7e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da82:	f383 8811 	msr	BASEPRI, r3
9000da86:	f3bf 8f6f 	isb	sy
9000da8a:	f3bf 8f4f 	dsb	sy
9000da8e:	e7fe      	b.n	9000da8e <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000da90:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000da94:	f7fe fb54 	bl	9000c140 <vPortFree>
				vPortFree( pxTCB );
9000da98:	4650      	mov	r0, sl
9000da9a:	f7fe fb51 	bl	9000c140 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000da9e:	6823      	ldr	r3, [r4, #0]
9000daa0:	2b00      	cmp	r3, #0
9000daa2:	d1d4      	bne.n	9000da4e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000daa4:	683b      	ldr	r3, [r7, #0]
9000daa6:	2b01      	cmp	r3, #1
9000daa8:	d905      	bls.n	9000dab6 <prvIdleTask+0x7e>
				taskYIELD();
9000daaa:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000daae:	f3bf 8f4f 	dsb	sy
9000dab2:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000dab6:	f7f6 f9a7 	bl	90003e08 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000daba:	e7c6      	b.n	9000da4a <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000dabc:	4650      	mov	r0, sl
9000dabe:	f7fe fb3f 	bl	9000c140 <vPortFree>
9000dac2:	e7c2      	b.n	9000da4a <prvIdleTask+0x12>
9000dac4:	240252e0 	.word	0x240252e0
9000dac8:	24025350 	.word	0x24025350
9000dacc:	240252dc 	.word	0x240252dc
9000dad0:	24024e7c 	.word	0x24024e7c

9000dad4 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000dad4:	4b4a      	ldr	r3, [pc, #296]	; (9000dc00 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000dad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000dada:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000dadc:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000dade:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000dae0:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000dae2:	2e00      	cmp	r6, #0
9000dae4:	d040      	beq.n	9000db68 <xTaskIncrementTick.part.0+0x94>
9000dae6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000dc14 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000daea:	f8db 3000 	ldr.w	r3, [fp]
9000daee:	429e      	cmp	r6, r3
9000daf0:	d347      	bcc.n	9000db82 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000daf2:	4f44      	ldr	r7, [pc, #272]	; (9000dc04 <xTaskIncrementTick.part.0+0x130>)
9000daf4:	683b      	ldr	r3, [r7, #0]
9000daf6:	681d      	ldr	r5, [r3, #0]
9000daf8:	2d00      	cmp	r5, #0
9000dafa:	d077      	beq.n	9000dbec <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000dafc:	2500      	movs	r5, #0
9000dafe:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000dc18 <xTaskIncrementTick.part.0+0x144>
9000db02:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000dc1c <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000db06:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000dc20 <xTaskIncrementTick.part.0+0x14c>
9000db0a:	e022      	b.n	9000db52 <xTaskIncrementTick.part.0+0x7e>
9000db0c:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000db0e:	f7fe fbb1 	bl	9000c274 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000db12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000db14:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000db18:	9901      	ldr	r1, [sp, #4]
9000db1a:	b113      	cbz	r3, 9000db22 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000db1c:	f7fe fbaa 	bl	9000c274 <uxListRemove>
9000db20:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000db22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000db24:	f8d8 2000 	ldr.w	r2, [r8]
9000db28:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000db2c:	4293      	cmp	r3, r2
9000db2e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000db32:	d901      	bls.n	9000db38 <xTaskIncrementTick.part.0+0x64>
9000db34:	f8c8 3000 	str.w	r3, [r8]
9000db38:	f7fe fb74 	bl	9000c224 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000db3c:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000db40:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000db42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000db44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000db46:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000db48:	4291      	cmp	r1, r2
9000db4a:	bf28      	it	cs
9000db4c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000db4e:	2b00      	cmp	r3, #0
9000db50:	d050      	beq.n	9000dbf4 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000db52:	683b      	ldr	r3, [r7, #0]
9000db54:	68db      	ldr	r3, [r3, #12]
9000db56:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000db58:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000db5a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000db5c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000db5e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000db60:	d2d4      	bcs.n	9000db0c <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000db62:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000db66:	e011      	b.n	9000db8c <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000db68:	4b26      	ldr	r3, [pc, #152]	; (9000dc04 <xTaskIncrementTick.part.0+0x130>)
9000db6a:	681a      	ldr	r2, [r3, #0]
9000db6c:	6812      	ldr	r2, [r2, #0]
9000db6e:	b30a      	cbz	r2, 9000dbb4 <xTaskIncrementTick.part.0+0xe0>
9000db70:	f04f 0350 	mov.w	r3, #80	; 0x50
9000db74:	f383 8811 	msr	BASEPRI, r3
9000db78:	f3bf 8f6f 	isb	sy
9000db7c:	f3bf 8f4f 	dsb	sy
9000db80:	e7fe      	b.n	9000db80 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000db82:	2500      	movs	r5, #0
9000db84:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000dc18 <xTaskIncrementTick.part.0+0x144>
9000db88:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000dc1c <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000db8c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000db90:	491d      	ldr	r1, [pc, #116]	; (9000dc08 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000db92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000db94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000db98:	009b      	lsls	r3, r3, #2
9000db9a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000db9e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000dba0:	2a02      	cmp	r2, #2
9000dba2:	bf28      	it	cs
9000dba4:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000dba6:	2b00      	cmp	r3, #0
}
9000dba8:	bf0c      	ite	eq
9000dbaa:	4628      	moveq	r0, r5
9000dbac:	2001      	movne	r0, #1
9000dbae:	b003      	add	sp, #12
9000dbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000dbb4:	4a15      	ldr	r2, [pc, #84]	; (9000dc0c <xTaskIncrementTick.part.0+0x138>)
9000dbb6:	6818      	ldr	r0, [r3, #0]
9000dbb8:	6811      	ldr	r1, [r2, #0]
9000dbba:	6019      	str	r1, [r3, #0]
9000dbbc:	4914      	ldr	r1, [pc, #80]	; (9000dc10 <xTaskIncrementTick.part.0+0x13c>)
9000dbbe:	6010      	str	r0, [r2, #0]
9000dbc0:	680a      	ldr	r2, [r1, #0]
9000dbc2:	3201      	adds	r2, #1
9000dbc4:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000dbc6:	681a      	ldr	r2, [r3, #0]
9000dbc8:	6812      	ldr	r2, [r2, #0]
9000dbca:	b932      	cbnz	r2, 9000dbda <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000dbcc:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000dc14 <xTaskIncrementTick.part.0+0x140>
9000dbd0:	f04f 33ff 	mov.w	r3, #4294967295
9000dbd4:	f8cb 3000 	str.w	r3, [fp]
9000dbd8:	e787      	b.n	9000daea <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000dbda:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000dbdc:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000dc14 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000dbe0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000dbe2:	68db      	ldr	r3, [r3, #12]
9000dbe4:	685b      	ldr	r3, [r3, #4]
9000dbe6:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000dbea:	e77e      	b.n	9000daea <xTaskIncrementTick.part.0+0x16>
9000dbec:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000dc18 <xTaskIncrementTick.part.0+0x144>
9000dbf0:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000dc1c <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000dbf4:	f04f 33ff 	mov.w	r3, #4294967295
9000dbf8:	f8cb 3000 	str.w	r3, [fp]
					break;
9000dbfc:	e7c6      	b.n	9000db8c <xTaskIncrementTick.part.0+0xb8>
9000dbfe:	bf00      	nop
9000dc00:	24025364 	.word	0x24025364
9000dc04:	24024e74 	.word	0x24024e74
9000dc08:	24025368 	.word	0x24025368
9000dc0c:	24024e78 	.word	0x24024e78
9000dc10:	2402531c 	.word	0x2402531c
9000dc14:	24025318 	.word	0x24025318
9000dc18:	24024e7c 	.word	0x24024e7c
9000dc1c:	24024e70 	.word	0x24024e70
9000dc20:	240252ec 	.word	0x240252ec

9000dc24 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000dc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000dc28:	4d41      	ldr	r5, [pc, #260]	; (9000dd30 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000dc2a:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000dc2c:	f7fe fba2 	bl	9000c374 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000dc30:	682b      	ldr	r3, [r5, #0]
9000dc32:	3b01      	subs	r3, #1
9000dc34:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000dc36:	682b      	ldr	r3, [r5, #0]
9000dc38:	2b00      	cmp	r3, #0
9000dc3a:	d161      	bne.n	9000dd00 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000dc3c:	4b3d      	ldr	r3, [pc, #244]	; (9000dd34 <xTaskResumeAll.part.0+0x110>)
9000dc3e:	681b      	ldr	r3, [r3, #0]
9000dc40:	2b00      	cmp	r3, #0
9000dc42:	d05d      	beq.n	9000dd00 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000dc44:	4e3c      	ldr	r6, [pc, #240]	; (9000dd38 <xTaskResumeAll.part.0+0x114>)
9000dc46:	6833      	ldr	r3, [r6, #0]
9000dc48:	2b00      	cmp	r3, #0
9000dc4a:	d06e      	beq.n	9000dd2a <xTaskResumeAll.part.0+0x106>
9000dc4c:	4f3b      	ldr	r7, [pc, #236]	; (9000dd3c <xTaskResumeAll.part.0+0x118>)
9000dc4e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000dd4c <xTaskResumeAll.part.0+0x128>
9000dc52:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000dd50 <xTaskResumeAll.part.0+0x12c>
9000dc56:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000dd54 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000dc5a:	68f3      	ldr	r3, [r6, #12]
9000dc5c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000dc5e:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000dc62:	f104 0018 	add.w	r0, r4, #24
9000dc66:	f7fe fb05 	bl	9000c274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000dc6a:	4658      	mov	r0, fp
9000dc6c:	f7fe fb02 	bl	9000c274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000dc70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000dc72:	683a      	ldr	r2, [r7, #0]
9000dc74:	4659      	mov	r1, fp
9000dc76:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000dc7a:	4293      	cmp	r3, r2
9000dc7c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000dc80:	d900      	bls.n	9000dc84 <xTaskResumeAll.part.0+0x60>
9000dc82:	603b      	str	r3, [r7, #0]
9000dc84:	f7fe face 	bl	9000c224 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000dc88:	f8d8 3000 	ldr.w	r3, [r8]
9000dc8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000dc90:	429a      	cmp	r2, r3
9000dc92:	d33d      	bcc.n	9000dd10 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000dc94:	2301      	movs	r3, #1
9000dc96:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000dc9a:	6833      	ldr	r3, [r6, #0]
9000dc9c:	2b00      	cmp	r3, #0
9000dc9e:	d1dc      	bne.n	9000dc5a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000dca0:	4b27      	ldr	r3, [pc, #156]	; (9000dd40 <xTaskResumeAll.part.0+0x11c>)
9000dca2:	681a      	ldr	r2, [r3, #0]
9000dca4:	6812      	ldr	r2, [r2, #0]
9000dca6:	2a00      	cmp	r2, #0
9000dca8:	d03a      	beq.n	9000dd20 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000dcaa:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000dcac:	4b25      	ldr	r3, [pc, #148]	; (9000dd44 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000dcae:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000dcb0:	68d2      	ldr	r2, [r2, #12]
9000dcb2:	6852      	ldr	r2, [r2, #4]
9000dcb4:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000dcb6:	4e24      	ldr	r6, [pc, #144]	; (9000dd48 <xTaskResumeAll.part.0+0x124>)
9000dcb8:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000dcba:	b194      	cbz	r4, 9000dce2 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000dcbc:	2701      	movs	r7, #1
9000dcbe:	e006      	b.n	9000dcce <xTaskResumeAll.part.0+0xaa>
9000dcc0:	f7ff ff08 	bl	9000dad4 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000dcc4:	b108      	cbz	r0, 9000dcca <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000dcc6:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000dcca:	3c01      	subs	r4, #1
9000dccc:	d008      	beq.n	9000dce0 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000dcce:	682b      	ldr	r3, [r5, #0]
9000dcd0:	2b00      	cmp	r3, #0
9000dcd2:	d0f5      	beq.n	9000dcc0 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000dcd4:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000dcd6:	3c01      	subs	r4, #1
		++xPendedTicks;
9000dcd8:	f103 0301 	add.w	r3, r3, #1
9000dcdc:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000dcde:	d1f6      	bne.n	9000dcce <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000dce0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000dce2:	f8da 3000 	ldr.w	r3, [sl]
9000dce6:	b15b      	cbz	r3, 9000dd00 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000dce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000dcf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000dcf4:	f3bf 8f4f 	dsb	sy
9000dcf8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000dcfc:	2001      	movs	r0, #1
9000dcfe:	e000      	b.n	9000dd02 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000dd00:	2000      	movs	r0, #0
9000dd02:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000dd04:	f7fe fb58 	bl	9000c3b8 <vPortExitCritical>
}
9000dd08:	9801      	ldr	r0, [sp, #4]
9000dd0a:	b003      	add	sp, #12
9000dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000dd10:	6833      	ldr	r3, [r6, #0]
9000dd12:	2b00      	cmp	r3, #0
9000dd14:	d1a1      	bne.n	9000dc5a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000dd16:	4b0a      	ldr	r3, [pc, #40]	; (9000dd40 <xTaskResumeAll.part.0+0x11c>)
9000dd18:	681a      	ldr	r2, [r3, #0]
9000dd1a:	6812      	ldr	r2, [r2, #0]
9000dd1c:	2a00      	cmp	r2, #0
9000dd1e:	d1c4      	bne.n	9000dcaa <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000dd20:	4b08      	ldr	r3, [pc, #32]	; (9000dd44 <xTaskResumeAll.part.0+0x120>)
9000dd22:	f04f 32ff 	mov.w	r2, #4294967295
9000dd26:	601a      	str	r2, [r3, #0]
9000dd28:	e7c5      	b.n	9000dcb6 <xTaskResumeAll.part.0+0x92>
9000dd2a:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000dd54 <xTaskResumeAll.part.0+0x130>
9000dd2e:	e7c2      	b.n	9000dcb6 <xTaskResumeAll.part.0+0x92>
9000dd30:	240252e4 	.word	0x240252e4
9000dd34:	240252dc 	.word	0x240252dc
9000dd38:	24025324 	.word	0x24025324
9000dd3c:	240252ec 	.word	0x240252ec
9000dd40:	24024e74 	.word	0x24024e74
9000dd44:	24025318 	.word	0x24025318
9000dd48:	24025320 	.word	0x24025320
9000dd4c:	24024e7c 	.word	0x24024e7c
9000dd50:	24024e70 	.word	0x24024e70
9000dd54:	24025368 	.word	0x24025368

9000dd58 <xTaskCreateStatic>:
	{
9000dd58:	b530      	push	{r4, r5, lr}
9000dd5a:	b087      	sub	sp, #28
9000dd5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
9000dd5e:	b1c4      	cbz	r4, 9000dd92 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
9000dd60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000dd62:	b16d      	cbz	r5, 9000dd80 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
9000dd64:	2560      	movs	r5, #96	; 0x60
9000dd66:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
9000dd68:	9d05      	ldr	r5, [sp, #20]
9000dd6a:	2d60      	cmp	r5, #96	; 0x60
9000dd6c:	d01a      	beq.n	9000dda4 <xTaskCreateStatic+0x4c>
9000dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd72:	f383 8811 	msr	BASEPRI, r3
9000dd76:	f3bf 8f6f 	isb	sy
9000dd7a:	f3bf 8f4f 	dsb	sy
9000dd7e:	e7fe      	b.n	9000dd7e <xTaskCreateStatic+0x26>
9000dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd84:	f383 8811 	msr	BASEPRI, r3
9000dd88:	f3bf 8f6f 	isb	sy
9000dd8c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000dd90:	e7fe      	b.n	9000dd90 <xTaskCreateStatic+0x38>
9000dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd96:	f383 8811 	msr	BASEPRI, r3
9000dd9a:	f3bf 8f6f 	isb	sy
9000dd9e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000dda2:	e7fe      	b.n	9000dda2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000dda4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000dda6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000dda8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000ddaa:	9502      	str	r5, [sp, #8]
9000ddac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9000ddae:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000ddb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000ddb2:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000ddb6:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000ddb8:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000ddba:	9401      	str	r4, [sp, #4]
9000ddbc:	f7ff fda2 	bl	9000d904 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
9000ddc0:	980c      	ldr	r0, [sp, #48]	; 0x30
9000ddc2:	f7ff fd17 	bl	9000d7f4 <prvAddNewTaskToReadyList>
	}
9000ddc6:	9804      	ldr	r0, [sp, #16]
9000ddc8:	b007      	add	sp, #28
9000ddca:	bd30      	pop	{r4, r5, pc}

9000ddcc <xTaskCreate>:
	{
9000ddcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000ddd0:	4607      	mov	r7, r0
9000ddd2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000ddd4:	0090      	lsls	r0, r2, #2
	{
9000ddd6:	4615      	mov	r5, r2
9000ddd8:	4688      	mov	r8, r1
9000ddda:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000dddc:	f7fe f8f6 	bl	9000bfcc <pvPortMalloc>
			if( pxStack != NULL )
9000dde0:	b1d8      	cbz	r0, 9000de1a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000dde2:	4604      	mov	r4, r0
9000dde4:	2060      	movs	r0, #96	; 0x60
9000dde6:	f7fe f8f1 	bl	9000bfcc <pvPortMalloc>
				if( pxNewTCB != NULL )
9000ddea:	4606      	mov	r6, r0
9000ddec:	b1d0      	cbz	r0, 9000de24 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
9000ddee:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000ddf0:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
9000ddf2:	464b      	mov	r3, r9
9000ddf4:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000ddf6:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
9000ddfa:	4641      	mov	r1, r8
9000ddfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9000ddfe:	4638      	mov	r0, r7
9000de00:	9602      	str	r6, [sp, #8]
9000de02:	9401      	str	r4, [sp, #4]
9000de04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9000de06:	9400      	str	r4, [sp, #0]
9000de08:	f7ff fd7c 	bl	9000d904 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
9000de0c:	4630      	mov	r0, r6
9000de0e:	f7ff fcf1 	bl	9000d7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000de12:	2001      	movs	r0, #1
	}
9000de14:	b005      	add	sp, #20
9000de16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000de1a:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000de1e:	b005      	add	sp, #20
9000de20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
9000de24:	4620      	mov	r0, r4
9000de26:	f7fe f98b 	bl	9000c140 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000de2a:	f04f 30ff 	mov.w	r0, #4294967295
9000de2e:	e7f1      	b.n	9000de14 <xTaskCreate+0x48>

9000de30 <vTaskDelay>:
	{
9000de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000de32:	b950      	cbnz	r0, 9000de4a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000de34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000de38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000de3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000de40:	f3bf 8f4f 	dsb	sy
9000de44:	f3bf 8f6f 	isb	sy
	}
9000de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000de4a:	4d1e      	ldr	r5, [pc, #120]	; (9000dec4 <vTaskDelay+0x94>)
9000de4c:	682b      	ldr	r3, [r5, #0]
9000de4e:	b143      	cbz	r3, 9000de62 <vTaskDelay+0x32>
9000de50:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de54:	f383 8811 	msr	BASEPRI, r3
9000de58:	f3bf 8f6f 	isb	sy
9000de5c:	f3bf 8f4f 	dsb	sy
9000de60:	e7fe      	b.n	9000de60 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000de62:	682b      	ldr	r3, [r5, #0]
9000de64:	4604      	mov	r4, r0
9000de66:	3301      	adds	r3, #1
9000de68:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000de6a:	4b17      	ldr	r3, [pc, #92]	; (9000dec8 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000de6c:	4e17      	ldr	r6, [pc, #92]	; (9000decc <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000de6e:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000de70:	6830      	ldr	r0, [r6, #0]
9000de72:	3004      	adds	r0, #4
9000de74:	f7fe f9fe 	bl	9000c274 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000de78:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000de7a:	6833      	ldr	r3, [r6, #0]
9000de7c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000de7e:	d315      	bcc.n	9000deac <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000de80:	4b13      	ldr	r3, [pc, #76]	; (9000ded0 <vTaskDelay+0xa0>)
9000de82:	6818      	ldr	r0, [r3, #0]
9000de84:	6831      	ldr	r1, [r6, #0]
9000de86:	3104      	adds	r1, #4
9000de88:	f7fe f9dc 	bl	9000c244 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000de8c:	682b      	ldr	r3, [r5, #0]
9000de8e:	b943      	cbnz	r3, 9000dea2 <vTaskDelay+0x72>
9000de90:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de94:	f383 8811 	msr	BASEPRI, r3
9000de98:	f3bf 8f6f 	isb	sy
9000de9c:	f3bf 8f4f 	dsb	sy
9000dea0:	e7fe      	b.n	9000dea0 <vTaskDelay+0x70>
9000dea2:	f7ff febf 	bl	9000dc24 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000dea6:	2800      	cmp	r0, #0
9000dea8:	d0c4      	beq.n	9000de34 <vTaskDelay+0x4>
	}
9000deaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000deac:	4b09      	ldr	r3, [pc, #36]	; (9000ded4 <vTaskDelay+0xa4>)
9000deae:	6818      	ldr	r0, [r3, #0]
9000deb0:	6831      	ldr	r1, [r6, #0]
9000deb2:	3104      	adds	r1, #4
9000deb4:	f7fe f9c6 	bl	9000c244 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000deb8:	4b07      	ldr	r3, [pc, #28]	; (9000ded8 <vTaskDelay+0xa8>)
9000deba:	681a      	ldr	r2, [r3, #0]
9000debc:	4294      	cmp	r4, r2
9000debe:	d2e5      	bcs.n	9000de8c <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000dec0:	601c      	str	r4, [r3, #0]
9000dec2:	e7e3      	b.n	9000de8c <vTaskDelay+0x5c>
9000dec4:	240252e4 	.word	0x240252e4
9000dec8:	24025364 	.word	0x24025364
9000decc:	24024e70 	.word	0x24024e70
9000ded0:	24024e78 	.word	0x24024e78
9000ded4:	24024e74 	.word	0x24024e74
9000ded8:	24025318 	.word	0x24025318

9000dedc <vTaskStartScheduler>:
{
9000dedc:	b570      	push	{r4, r5, r6, lr}
9000dede:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000dee0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000dee2:	4668      	mov	r0, sp
9000dee4:	aa02      	add	r2, sp, #8
9000dee6:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000dee8:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000deec:	f7fe f850 	bl	9000bf90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000def0:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000def2:	b1c8      	cbz	r0, 9000df28 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000def4:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
9000def6:	b175      	cbz	r5, 9000df16 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000def8:	2260      	movs	r2, #96	; 0x60
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000defa:	9e02      	ldr	r6, [sp, #8]
			volatile size_t xSize = sizeof( StaticTask_t );
9000defc:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000defe:	9a03      	ldr	r2, [sp, #12]
9000df00:	2a60      	cmp	r2, #96	; 0x60
9000df02:	d01a      	beq.n	9000df3a <vTaskStartScheduler+0x5e>
9000df04:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df08:	f383 8811 	msr	BASEPRI, r3
9000df0c:	f3bf 8f6f 	isb	sy
9000df10:	f3bf 8f4f 	dsb	sy
9000df14:	e7fe      	b.n	9000df14 <vTaskStartScheduler+0x38>
9000df16:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df1a:	f383 8811 	msr	BASEPRI, r3
9000df1e:	f3bf 8f6f 	isb	sy
9000df22:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000df26:	e7fe      	b.n	9000df26 <vTaskStartScheduler+0x4a>
9000df28:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df2c:	f383 8811 	msr	BASEPRI, r3
9000df30:	f3bf 8f6f 	isb	sy
9000df34:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000df38:	e7fe      	b.n	9000df38 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000df3a:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000df3c:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000df3e:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000df40:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000df42:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000df44:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000df48:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000df4a:	f013 f9f9 	bl	90021340 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000df4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
9000df50:	1f33      	subs	r3, r6, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000df52:	492a      	ldr	r1, [pc, #168]	; (9000dffc <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000df54:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000df56:	18d6      	adds	r6, r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000df58:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
9000df5c:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000df5e:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000df62:	f026 0607 	bic.w	r6, r6, #7
	pxNewTCB->uxPriority = uxPriority;
9000df66:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000df68:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000df6c:	f7fe f956 	bl	9000c21c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000df70:	f105 0018 	add.w	r0, r5, #24
9000df74:	f7fe f952 	bl	9000c21c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000df78:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000df7a:	4622      	mov	r2, r4
9000df7c:	4920      	ldr	r1, [pc, #128]	; (9000e000 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000df7e:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000df80:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000df82:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000df84:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000df86:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000df88:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000df8a:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000df8e:	f7fe f9c3 	bl	9000c318 <pxPortInitialiseStack>
9000df92:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000df94:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000df96:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000df98:	f7ff fc2c 	bl	9000d7f4 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000df9c:	f000 fca2 	bl	9000e8e4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000dfa0:	2801      	cmp	r0, #1
9000dfa2:	d00c      	beq.n	9000dfbe <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000dfa4:	3001      	adds	r0, #1
9000dfa6:	d001      	beq.n	9000dfac <vTaskStartScheduler+0xd0>
}
9000dfa8:	b004      	add	sp, #16
9000dfaa:	bd70      	pop	{r4, r5, r6, pc}
9000dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfb0:	f383 8811 	msr	BASEPRI, r3
9000dfb4:	f3bf 8f6f 	isb	sy
9000dfb8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000dfbc:	e7fe      	b.n	9000dfbc <vTaskStartScheduler+0xe0>
9000dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfc2:	f383 8811 	msr	BASEPRI, r3
9000dfc6:	f3bf 8f6f 	isb	sy
9000dfca:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000dfce:	4b0d      	ldr	r3, [pc, #52]	; (9000e004 <vTaskStartScheduler+0x128>)
9000dfd0:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000dfd4:	490c      	ldr	r1, [pc, #48]	; (9000e008 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000dfd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000dfd8:	4b0c      	ldr	r3, [pc, #48]	; (9000e00c <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000dfda:	4a0d      	ldr	r2, [pc, #52]	; (9000e010 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000dfdc:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000dfde:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000dfe0:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000dfe2:	b143      	cbz	r3, 9000dff6 <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000dfe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000dfe6:	b10b      	cbz	r3, 9000dfec <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000dfe8:	2000      	movs	r0, #0
9000dfea:	4798      	blx	r3
}
9000dfec:	b004      	add	sp, #16
9000dfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000dff2:	f7fe ba51 	b.w	9000c498 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000dff6:	6813      	ldr	r3, [r2, #0]
9000dff8:	e7f4      	b.n	9000dfe4 <vTaskStartScheduler+0x108>
9000dffa:	bf00      	nop
9000dffc:	454c4449 	.word	0x454c4449
9000e000:	9000da39 	.word	0x9000da39
9000e004:	24025318 	.word	0x24025318
9000e008:	24025338 	.word	0x24025338
9000e00c:	24025364 	.word	0x24025364
9000e010:	24024e70 	.word	0x24024e70

9000e014 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000e014:	4a02      	ldr	r2, [pc, #8]	; (9000e020 <vTaskSuspendAll+0xc>)
9000e016:	6813      	ldr	r3, [r2, #0]
9000e018:	3301      	adds	r3, #1
9000e01a:	6013      	str	r3, [r2, #0]
}
9000e01c:	4770      	bx	lr
9000e01e:	bf00      	nop
9000e020:	240252e4 	.word	0x240252e4

9000e024 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000e024:	4b06      	ldr	r3, [pc, #24]	; (9000e040 <xTaskResumeAll+0x1c>)
9000e026:	681b      	ldr	r3, [r3, #0]
9000e028:	b943      	cbnz	r3, 9000e03c <xTaskResumeAll+0x18>
9000e02a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e02e:	f383 8811 	msr	BASEPRI, r3
9000e032:	f3bf 8f6f 	isb	sy
9000e036:	f3bf 8f4f 	dsb	sy
9000e03a:	e7fe      	b.n	9000e03a <xTaskResumeAll+0x16>
9000e03c:	f7ff bdf2 	b.w	9000dc24 <xTaskResumeAll.part.0>
9000e040:	240252e4 	.word	0x240252e4

9000e044 <xTaskGetTickCount>:
		xTicks = xTickCount;
9000e044:	4b01      	ldr	r3, [pc, #4]	; (9000e04c <xTaskGetTickCount+0x8>)
9000e046:	6818      	ldr	r0, [r3, #0]
}
9000e048:	4770      	bx	lr
9000e04a:	bf00      	nop
9000e04c:	24025364 	.word	0x24025364

9000e050 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e050:	4b05      	ldr	r3, [pc, #20]	; (9000e068 <xTaskIncrementTick+0x18>)
9000e052:	681b      	ldr	r3, [r3, #0]
9000e054:	b90b      	cbnz	r3, 9000e05a <xTaskIncrementTick+0xa>
9000e056:	f7ff bd3d 	b.w	9000dad4 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000e05a:	4a04      	ldr	r2, [pc, #16]	; (9000e06c <xTaskIncrementTick+0x1c>)
}
9000e05c:	2000      	movs	r0, #0
		++xPendedTicks;
9000e05e:	6813      	ldr	r3, [r2, #0]
9000e060:	3301      	adds	r3, #1
9000e062:	6013      	str	r3, [r2, #0]
}
9000e064:	4770      	bx	lr
9000e066:	bf00      	nop
9000e068:	240252e4 	.word	0x240252e4
9000e06c:	24025320 	.word	0x24025320

9000e070 <vTaskSetApplicationTaskTag>:
	{
9000e070:	b538      	push	{r3, r4, r5, lr}
9000e072:	460d      	mov	r5, r1
		if( xTask == NULL )
9000e074:	b138      	cbz	r0, 9000e086 <vTaskSetApplicationTaskTag+0x16>
9000e076:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000e078:	f7fe f97c 	bl	9000c374 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000e07c:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000e07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000e082:	f7fe b999 	b.w	9000c3b8 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000e086:	4b04      	ldr	r3, [pc, #16]	; (9000e098 <vTaskSetApplicationTaskTag+0x28>)
9000e088:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000e08a:	f7fe f973 	bl	9000c374 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000e08e:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000e090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000e094:	f7fe b990 	b.w	9000c3b8 <vPortExitCritical>
9000e098:	24024e70 	.word	0x24024e70

9000e09c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000e09c:	4b26      	ldr	r3, [pc, #152]	; (9000e138 <vTaskSwitchContext+0x9c>)
9000e09e:	681b      	ldr	r3, [r3, #0]
9000e0a0:	b11b      	cbz	r3, 9000e0aa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000e0a2:	4b26      	ldr	r3, [pc, #152]	; (9000e13c <vTaskSwitchContext+0xa0>)
9000e0a4:	2201      	movs	r2, #1
9000e0a6:	601a      	str	r2, [r3, #0]
9000e0a8:	4770      	bx	lr
{
9000e0aa:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000e0ac:	4a23      	ldr	r2, [pc, #140]	; (9000e13c <vTaskSwitchContext+0xa0>)
		traceTASK_SWITCHED_OUT();
9000e0ae:	4c24      	ldr	r4, [pc, #144]	; (9000e140 <vTaskSwitchContext+0xa4>)
		xYieldPending = pdFALSE;
9000e0b0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000e0b2:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000e0b4:	2b00      	cmp	r3, #0
9000e0b6:	d034      	beq.n	9000e122 <vTaskSwitchContext+0x86>
		if( xTCB->pxTaskTag != NULL )
9000e0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e0ba:	b10b      	cbz	r3, 9000e0c0 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e0bc:	2001      	movs	r0, #1
9000e0be:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e0c0:	4d20      	ldr	r5, [pc, #128]	; (9000e144 <vTaskSwitchContext+0xa8>)
9000e0c2:	4921      	ldr	r1, [pc, #132]	; (9000e148 <vTaskSwitchContext+0xac>)
9000e0c4:	682b      	ldr	r3, [r5, #0]
9000e0c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000e0ca:	0098      	lsls	r0, r3, #2
9000e0cc:	0092      	lsls	r2, r2, #2
9000e0ce:	588a      	ldr	r2, [r1, r2]
9000e0d0:	b942      	cbnz	r2, 9000e0e4 <vTaskSwitchContext+0x48>
9000e0d2:	b1eb      	cbz	r3, 9000e110 <vTaskSwitchContext+0x74>
9000e0d4:	3b01      	subs	r3, #1
9000e0d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000e0da:	0098      	lsls	r0, r3, #2
9000e0dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000e0e0:	2a00      	cmp	r2, #0
9000e0e2:	d0f6      	beq.n	9000e0d2 <vTaskSwitchContext+0x36>
9000e0e4:	18c2      	adds	r2, r0, r3
9000e0e6:	eb01 0082 	add.w	r0, r1, r2, lsl #2
9000e0ea:	6841      	ldr	r1, [r0, #4]
9000e0ec:	4602      	mov	r2, r0
9000e0ee:	6849      	ldr	r1, [r1, #4]
9000e0f0:	3208      	adds	r2, #8
9000e0f2:	4291      	cmp	r1, r2
9000e0f4:	6041      	str	r1, [r0, #4]
9000e0f6:	d01b      	beq.n	9000e130 <vTaskSwitchContext+0x94>
9000e0f8:	68ca      	ldr	r2, [r1, #12]
9000e0fa:	6022      	str	r2, [r4, #0]
9000e0fc:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000e0fe:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000e100:	b1a3      	cbz	r3, 9000e12c <vTaskSwitchContext+0x90>
		if( xTCB->pxTaskTag != NULL )
9000e102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e104:	b11b      	cbz	r3, 9000e10e <vTaskSwitchContext+0x72>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e106:	2000      	movs	r0, #0
}
9000e108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000e10c:	4718      	bx	r3
}
9000e10e:	bd70      	pop	{r4, r5, r6, pc}
9000e110:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e114:	f383 8811 	msr	BASEPRI, r3
9000e118:	f3bf 8f6f 	isb	sy
9000e11c:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e120:	e7fe      	b.n	9000e120 <vTaskSwitchContext+0x84>
			xTCB = pxCurrentTCB;
9000e122:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000e124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000e126:	2b00      	cmp	r3, #0
9000e128:	d1c8      	bne.n	9000e0bc <vTaskSwitchContext+0x20>
9000e12a:	e7c9      	b.n	9000e0c0 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000e12c:	6823      	ldr	r3, [r4, #0]
9000e12e:	e7e8      	b.n	9000e102 <vTaskSwitchContext+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e130:	6849      	ldr	r1, [r1, #4]
9000e132:	6041      	str	r1, [r0, #4]
9000e134:	e7e0      	b.n	9000e0f8 <vTaskSwitchContext+0x5c>
9000e136:	bf00      	nop
9000e138:	240252e4 	.word	0x240252e4
9000e13c:	24025368 	.word	0x24025368
9000e140:	24024e70 	.word	0x24024e70
9000e144:	240252ec 	.word	0x240252ec
9000e148:	24024e7c 	.word	0x24024e7c

9000e14c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000e14c:	b1f0      	cbz	r0, 9000e18c <vTaskPlaceOnEventList+0x40>
{
9000e14e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000e150:	4d1a      	ldr	r5, [pc, #104]	; (9000e1bc <vTaskPlaceOnEventList+0x70>)
9000e152:	460c      	mov	r4, r1
9000e154:	6829      	ldr	r1, [r5, #0]
9000e156:	3118      	adds	r1, #24
9000e158:	f7fe f874 	bl	9000c244 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000e15c:	4b18      	ldr	r3, [pc, #96]	; (9000e1c0 <vTaskPlaceOnEventList+0x74>)
9000e15e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e160:	6828      	ldr	r0, [r5, #0]
9000e162:	3004      	adds	r0, #4
9000e164:	f7fe f886 	bl	9000c274 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000e168:	1c63      	adds	r3, r4, #1
9000e16a:	d020      	beq.n	9000e1ae <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000e16c:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000e16e:	682b      	ldr	r3, [r5, #0]
9000e170:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000e172:	d214      	bcs.n	9000e19e <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e174:	4b13      	ldr	r3, [pc, #76]	; (9000e1c4 <vTaskPlaceOnEventList+0x78>)
9000e176:	6818      	ldr	r0, [r3, #0]
9000e178:	6829      	ldr	r1, [r5, #0]
9000e17a:	3104      	adds	r1, #4
9000e17c:	f7fe f862 	bl	9000c244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000e180:	4b11      	ldr	r3, [pc, #68]	; (9000e1c8 <vTaskPlaceOnEventList+0x7c>)
9000e182:	681a      	ldr	r2, [r3, #0]
9000e184:	4294      	cmp	r4, r2
9000e186:	d200      	bcs.n	9000e18a <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000e188:	601c      	str	r4, [r3, #0]
}
9000e18a:	bd70      	pop	{r4, r5, r6, pc}
9000e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e190:	f383 8811 	msr	BASEPRI, r3
9000e194:	f3bf 8f6f 	isb	sy
9000e198:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000e19c:	e7fe      	b.n	9000e19c <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e19e:	4b0b      	ldr	r3, [pc, #44]	; (9000e1cc <vTaskPlaceOnEventList+0x80>)
9000e1a0:	6818      	ldr	r0, [r3, #0]
9000e1a2:	6829      	ldr	r1, [r5, #0]
}
9000e1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e1a8:	3104      	adds	r1, #4
9000e1aa:	f7fe b84b 	b.w	9000c244 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e1ae:	6829      	ldr	r1, [r5, #0]
9000e1b0:	4807      	ldr	r0, [pc, #28]	; (9000e1d0 <vTaskPlaceOnEventList+0x84>)
9000e1b2:	3104      	adds	r1, #4
}
9000e1b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e1b8:	f7fe b834 	b.w	9000c224 <vListInsertEnd>
9000e1bc:	24024e70 	.word	0x24024e70
9000e1c0:	24025364 	.word	0x24025364
9000e1c4:	24024e74 	.word	0x24024e74
9000e1c8:	24025318 	.word	0x24025318
9000e1cc:	24024e78 	.word	0x24024e78
9000e1d0:	2402533c 	.word	0x2402533c

9000e1d4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000e1d4:	b358      	cbz	r0, 9000e22e <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000e1d6:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000e1d8:	4e1d      	ldr	r6, [pc, #116]	; (9000e250 <vTaskPlaceOnEventListRestricted+0x7c>)
9000e1da:	460c      	mov	r4, r1
9000e1dc:	4615      	mov	r5, r2
9000e1de:	6831      	ldr	r1, [r6, #0]
9000e1e0:	3118      	adds	r1, #24
9000e1e2:	f7fe f81f 	bl	9000c224 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000e1e6:	b165      	cbz	r5, 9000e202 <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000e1e8:	4b1a      	ldr	r3, [pc, #104]	; (9000e254 <vTaskPlaceOnEventListRestricted+0x80>)
9000e1ea:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e1ec:	6830      	ldr	r0, [r6, #0]
9000e1ee:	3004      	adds	r0, #4
9000e1f0:	f7fe f840 	bl	9000c274 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e1f4:	6831      	ldr	r1, [r6, #0]
9000e1f6:	4818      	ldr	r0, [pc, #96]	; (9000e258 <vTaskPlaceOnEventListRestricted+0x84>)
9000e1f8:	3104      	adds	r1, #4
	}
9000e1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e1fe:	f7fe b811 	b.w	9000c224 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000e202:	4b14      	ldr	r3, [pc, #80]	; (9000e254 <vTaskPlaceOnEventListRestricted+0x80>)
9000e204:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e206:	6830      	ldr	r0, [r6, #0]
9000e208:	3004      	adds	r0, #4
9000e20a:	f7fe f833 	bl	9000c274 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000e20e:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000e210:	6833      	ldr	r3, [r6, #0]
9000e212:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000e214:	d214      	bcs.n	9000e240 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e216:	4b11      	ldr	r3, [pc, #68]	; (9000e25c <vTaskPlaceOnEventListRestricted+0x88>)
9000e218:	6818      	ldr	r0, [r3, #0]
9000e21a:	6831      	ldr	r1, [r6, #0]
9000e21c:	3104      	adds	r1, #4
9000e21e:	f7fe f811 	bl	9000c244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000e222:	4b0f      	ldr	r3, [pc, #60]	; (9000e260 <vTaskPlaceOnEventListRestricted+0x8c>)
9000e224:	681a      	ldr	r2, [r3, #0]
9000e226:	4294      	cmp	r4, r2
9000e228:	d200      	bcs.n	9000e22c <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000e22a:	601c      	str	r4, [r3, #0]
	}
9000e22c:	bd70      	pop	{r4, r5, r6, pc}
9000e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e232:	f383 8811 	msr	BASEPRI, r3
9000e236:	f3bf 8f6f 	isb	sy
9000e23a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000e23e:	e7fe      	b.n	9000e23e <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e240:	4b08      	ldr	r3, [pc, #32]	; (9000e264 <vTaskPlaceOnEventListRestricted+0x90>)
9000e242:	6818      	ldr	r0, [r3, #0]
9000e244:	6831      	ldr	r1, [r6, #0]
	}
9000e246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000e24a:	3104      	adds	r1, #4
9000e24c:	f7fd bffa 	b.w	9000c244 <vListInsert>
9000e250:	24024e70 	.word	0x24024e70
9000e254:	24025364 	.word	0x24025364
9000e258:	2402533c 	.word	0x2402533c
9000e25c:	24024e74 	.word	0x24024e74
9000e260:	24025318 	.word	0x24025318
9000e264:	24024e78 	.word	0x24024e78

9000e268 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e268:	68c3      	ldr	r3, [r0, #12]
{
9000e26a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e26c:	68dc      	ldr	r4, [r3, #12]
{
9000e26e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9000e270:	b35c      	cbz	r4, 9000e2ca <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000e272:	f104 0518 	add.w	r5, r4, #24
9000e276:	4628      	mov	r0, r5
9000e278:	f7fd fffc 	bl	9000c274 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e27c:	4b19      	ldr	r3, [pc, #100]	; (9000e2e4 <xTaskRemoveFromEventList+0x7c>)
9000e27e:	681b      	ldr	r3, [r3, #0]
9000e280:	b17b      	cbz	r3, 9000e2a2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000e282:	4629      	mov	r1, r5
9000e284:	4818      	ldr	r0, [pc, #96]	; (9000e2e8 <xTaskRemoveFromEventList+0x80>)
9000e286:	f7fd ffcd 	bl	9000c224 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000e28a:	4b18      	ldr	r3, [pc, #96]	; (9000e2ec <xTaskRemoveFromEventList+0x84>)
9000e28c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000e28e:	681b      	ldr	r3, [r3, #0]
9000e290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e292:	429a      	cmp	r2, r3
9000e294:	d922      	bls.n	9000e2dc <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9000e296:	2301      	movs	r3, #1
9000e298:	4a15      	ldr	r2, [pc, #84]	; (9000e2f0 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9000e29a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000e29c:	6013      	str	r3, [r2, #0]
}
9000e29e:	b003      	add	sp, #12
9000e2a0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000e2a2:	1d21      	adds	r1, r4, #4
9000e2a4:	4608      	mov	r0, r1
9000e2a6:	9101      	str	r1, [sp, #4]
9000e2a8:	f7fd ffe4 	bl	9000c274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000e2ac:	4a11      	ldr	r2, [pc, #68]	; (9000e2f4 <xTaskRemoveFromEventList+0x8c>)
9000e2ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000e2b0:	6810      	ldr	r0, [r2, #0]
9000e2b2:	9901      	ldr	r1, [sp, #4]
9000e2b4:	4283      	cmp	r3, r0
9000e2b6:	d900      	bls.n	9000e2ba <xTaskRemoveFromEventList+0x52>
9000e2b8:	6013      	str	r3, [r2, #0]
9000e2ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000e2be:	480e      	ldr	r0, [pc, #56]	; (9000e2f8 <xTaskRemoveFromEventList+0x90>)
9000e2c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
9000e2c4:	f7fd ffae 	bl	9000c224 <vListInsertEnd>
9000e2c8:	e7df      	b.n	9000e28a <xTaskRemoveFromEventList+0x22>
9000e2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e2ce:	f383 8811 	msr	BASEPRI, r3
9000e2d2:	f3bf 8f6f 	isb	sy
9000e2d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000e2da:	e7fe      	b.n	9000e2da <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
9000e2dc:	2000      	movs	r0, #0
}
9000e2de:	b003      	add	sp, #12
9000e2e0:	bd30      	pop	{r4, r5, pc}
9000e2e2:	bf00      	nop
9000e2e4:	240252e4 	.word	0x240252e4
9000e2e8:	24025324 	.word	0x24025324
9000e2ec:	24024e70 	.word	0x24024e70
9000e2f0:	24025368 	.word	0x24025368
9000e2f4:	240252ec 	.word	0x240252ec
9000e2f8:	24024e7c 	.word	0x24024e7c

9000e2fc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000e2fc:	4a03      	ldr	r2, [pc, #12]	; (9000e30c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e2fe:	4b04      	ldr	r3, [pc, #16]	; (9000e310 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000e300:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e302:	681b      	ldr	r3, [r3, #0]
9000e304:	e9c0 2300 	strd	r2, r3, [r0]
}
9000e308:	4770      	bx	lr
9000e30a:	bf00      	nop
9000e30c:	2402531c 	.word	0x2402531c
9000e310:	24025364 	.word	0x24025364

9000e314 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9000e314:	b328      	cbz	r0, 9000e362 <xTaskCheckForTimeOut+0x4e>
{
9000e316:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e318:	460d      	mov	r5, r1
9000e31a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
9000e31c:	b1c1      	cbz	r1, 9000e350 <xTaskCheckForTimeOut+0x3c>
9000e31e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000e320:	f7fe f828 	bl	9000c374 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000e324:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000e326:	4a1d      	ldr	r2, [pc, #116]	; (9000e39c <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
9000e328:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000e32a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000e32c:	d030      	beq.n	9000e390 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000e32e:	f8df c070 	ldr.w	ip, [pc, #112]	; 9000e3a0 <xTaskCheckForTimeOut+0x8c>
9000e332:	6826      	ldr	r6, [r4, #0]
9000e334:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000e338:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000e33a:	42be      	cmp	r6, r7
9000e33c:	d01a      	beq.n	9000e374 <xTaskCheckForTimeOut+0x60>
9000e33e:	4288      	cmp	r0, r1
9000e340:	d818      	bhi.n	9000e374 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9000e342:	2001      	movs	r0, #1
9000e344:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000e346:	f7fe f837 	bl	9000c3b8 <vPortExitCritical>
}
9000e34a:	9801      	ldr	r0, [sp, #4]
9000e34c:	b003      	add	sp, #12
9000e34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000e350:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e354:	f383 8811 	msr	BASEPRI, r3
9000e358:	f3bf 8f6f 	isb	sy
9000e35c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000e360:	e7fe      	b.n	9000e360 <xTaskCheckForTimeOut+0x4c>
9000e362:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e366:	f383 8811 	msr	BASEPRI, r3
9000e36a:	f3bf 8f6f 	isb	sy
9000e36e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000e372:	e7fe      	b.n	9000e372 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000e374:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000e378:	4573      	cmp	r3, lr
9000e37a:	d90b      	bls.n	9000e394 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
9000e37c:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000e37e:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e382:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000e384:	4403      	add	r3, r0
			xReturn = pdFALSE;
9000e386:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
9000e388:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000e38a:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9000e38e:	e7d9      	b.n	9000e344 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9000e390:	2000      	movs	r0, #0
9000e392:	e7d7      	b.n	9000e344 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
9000e394:	2300      	movs	r3, #0
			xReturn = pdTRUE;
9000e396:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
9000e398:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000e39a:	e7d3      	b.n	9000e344 <xTaskCheckForTimeOut+0x30>
9000e39c:	24025364 	.word	0x24025364
9000e3a0:	2402531c 	.word	0x2402531c

9000e3a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000e3a4:	4b01      	ldr	r3, [pc, #4]	; (9000e3ac <vTaskMissedYield+0x8>)
9000e3a6:	2201      	movs	r2, #1
9000e3a8:	601a      	str	r2, [r3, #0]
}
9000e3aa:	4770      	bx	lr
9000e3ac:	24025368 	.word	0x24025368

9000e3b0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000e3b0:	4b01      	ldr	r3, [pc, #4]	; (9000e3b8 <xTaskGetCurrentTaskHandle+0x8>)
9000e3b2:	6818      	ldr	r0, [r3, #0]
	}
9000e3b4:	4770      	bx	lr
9000e3b6:	bf00      	nop
9000e3b8:	24024e70 	.word	0x24024e70

9000e3bc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000e3bc:	4b05      	ldr	r3, [pc, #20]	; (9000e3d4 <xTaskGetSchedulerState+0x18>)
9000e3be:	681b      	ldr	r3, [r3, #0]
9000e3c0:	b133      	cbz	r3, 9000e3d0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e3c2:	4b05      	ldr	r3, [pc, #20]	; (9000e3d8 <xTaskGetSchedulerState+0x1c>)
9000e3c4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
9000e3c6:	2b00      	cmp	r3, #0
9000e3c8:	bf0c      	ite	eq
9000e3ca:	2002      	moveq	r0, #2
9000e3cc:	2000      	movne	r0, #0
9000e3ce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000e3d0:	2001      	movs	r0, #1
	}
9000e3d2:	4770      	bx	lr
9000e3d4:	24025338 	.word	0x24025338
9000e3d8:	240252e4 	.word	0x240252e4

9000e3dc <xTaskPriorityInherit>:
	{
9000e3dc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9000e3de:	4604      	mov	r4, r0
	{
9000e3e0:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9000e3e2:	b1c8      	cbz	r0, 9000e418 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000e3e4:	4d1d      	ldr	r5, [pc, #116]	; (9000e45c <xTaskPriorityInherit+0x80>)
9000e3e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000e3e8:	682a      	ldr	r2, [r5, #0]
9000e3ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000e3ec:	4293      	cmp	r3, r2
9000e3ee:	d215      	bcs.n	9000e41c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000e3f0:	6982      	ldr	r2, [r0, #24]
9000e3f2:	2a00      	cmp	r2, #0
9000e3f4:	db04      	blt.n	9000e400 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e3f6:	682a      	ldr	r2, [r5, #0]
9000e3f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000e3fa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9000e3fe:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000e400:	4e17      	ldr	r6, [pc, #92]	; (9000e460 <xTaskPriorityInherit+0x84>)
9000e402:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000e406:	6962      	ldr	r2, [r4, #20]
9000e408:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000e40c:	429a      	cmp	r2, r3
9000e40e:	d00e      	beq.n	9000e42e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e410:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9000e412:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e416:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
9000e418:	b002      	add	sp, #8
9000e41a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000e41c:	682b      	ldr	r3, [r5, #0]
9000e41e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000e420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e422:	4298      	cmp	r0, r3
9000e424:	bf2c      	ite	cs
9000e426:	2000      	movcs	r0, #0
9000e428:	2001      	movcc	r0, #1
	}
9000e42a:	b002      	add	sp, #8
9000e42c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e42e:	1d21      	adds	r1, r4, #4
9000e430:	4608      	mov	r0, r1
9000e432:	9101      	str	r1, [sp, #4]
9000e434:	f7fd ff1e 	bl	9000c274 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e438:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000e43a:	4b0a      	ldr	r3, [pc, #40]	; (9000e464 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e43c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000e43e:	681a      	ldr	r2, [r3, #0]
9000e440:	9901      	ldr	r1, [sp, #4]
9000e442:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000e444:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000e446:	d900      	bls.n	9000e44a <xTaskPriorityInherit+0x6e>
9000e448:	6018      	str	r0, [r3, #0]
9000e44a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e44e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000e452:	f7fd fee7 	bl	9000c224 <vListInsertEnd>
				xReturn = pdTRUE;
9000e456:	2001      	movs	r0, #1
9000e458:	e7de      	b.n	9000e418 <xTaskPriorityInherit+0x3c>
9000e45a:	bf00      	nop
9000e45c:	24024e70 	.word	0x24024e70
9000e460:	24024e7c 	.word	0x24024e7c
9000e464:	240252ec 	.word	0x240252ec

9000e468 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000e468:	b318      	cbz	r0, 9000e4b2 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
9000e46a:	4b1f      	ldr	r3, [pc, #124]	; (9000e4e8 <xTaskPriorityDisinherit+0x80>)
	{
9000e46c:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000e46e:	681c      	ldr	r4, [r3, #0]
	{
9000e470:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9000e472:	4284      	cmp	r4, r0
9000e474:	d008      	beq.n	9000e488 <xTaskPriorityDisinherit+0x20>
9000e476:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e47a:	f383 8811 	msr	BASEPRI, r3
9000e47e:	f3bf 8f6f 	isb	sy
9000e482:	f3bf 8f4f 	dsb	sy
9000e486:	e7fe      	b.n	9000e486 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
9000e488:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000e48a:	b14b      	cbz	r3, 9000e4a0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000e48c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000e48e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000e490:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9000e492:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000e494:	4291      	cmp	r1, r2
9000e496:	d000      	beq.n	9000e49a <xTaskPriorityDisinherit+0x32>
9000e498:	b16b      	cbz	r3, 9000e4b6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
9000e49a:	2000      	movs	r0, #0
	}
9000e49c:	b002      	add	sp, #8
9000e49e:	bd10      	pop	{r4, pc}
9000e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e4a4:	f383 8811 	msr	BASEPRI, r3
9000e4a8:	f3bf 8f6f 	isb	sy
9000e4ac:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000e4b0:	e7fe      	b.n	9000e4b0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9000e4b2:	2000      	movs	r0, #0
	}
9000e4b4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e4b6:	1d21      	adds	r1, r4, #4
9000e4b8:	4608      	mov	r0, r1
9000e4ba:	9101      	str	r1, [sp, #4]
9000e4bc:	f7fd feda 	bl	9000c274 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000e4c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9000e4c2:	4b0a      	ldr	r3, [pc, #40]	; (9000e4ec <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e4c4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
9000e4c8:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000e4ca:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e4cc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000e4ce:	681a      	ldr	r2, [r3, #0]
9000e4d0:	4290      	cmp	r0, r2
9000e4d2:	d900      	bls.n	9000e4d6 <xTaskPriorityDisinherit+0x6e>
9000e4d4:	6018      	str	r0, [r3, #0]
9000e4d6:	4b06      	ldr	r3, [pc, #24]	; (9000e4f0 <xTaskPriorityDisinherit+0x88>)
9000e4d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e4dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000e4e0:	f7fd fea0 	bl	9000c224 <vListInsertEnd>
					xReturn = pdTRUE;
9000e4e4:	2001      	movs	r0, #1
		return xReturn;
9000e4e6:	e7d9      	b.n	9000e49c <xTaskPriorityDisinherit+0x34>
9000e4e8:	24024e70 	.word	0x24024e70
9000e4ec:	240252ec 	.word	0x240252ec
9000e4f0:	24024e7c 	.word	0x24024e7c

9000e4f4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000e4f4:	2800      	cmp	r0, #0
9000e4f6:	d040      	beq.n	9000e57a <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
9000e4f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
9000e4fa:	b530      	push	{r4, r5, lr}
9000e4fc:	4604      	mov	r4, r0
9000e4fe:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9000e500:	b153      	cbz	r3, 9000e518 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000e502:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000e504:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000e506:	4281      	cmp	r1, r0
9000e508:	bf38      	it	cc
9000e50a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000e50c:	2b01      	cmp	r3, #1
9000e50e:	d101      	bne.n	9000e514 <vTaskPriorityDisinheritAfterTimeout+0x20>
9000e510:	428a      	cmp	r2, r1
9000e512:	d10a      	bne.n	9000e52a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9000e514:	b003      	add	sp, #12
9000e516:	bd30      	pop	{r4, r5, pc}
9000e518:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e51c:	f383 8811 	msr	BASEPRI, r3
9000e520:	f3bf 8f6f 	isb	sy
9000e524:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000e528:	e7fe      	b.n	9000e528 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
9000e52a:	4b19      	ldr	r3, [pc, #100]	; (9000e590 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000e52c:	681b      	ldr	r3, [r3, #0]
9000e52e:	42a3      	cmp	r3, r4
9000e530:	d024      	beq.n	9000e57c <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000e532:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000e534:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000e536:	2b00      	cmp	r3, #0
9000e538:	db02      	blt.n	9000e540 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e53a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9000e53e:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000e540:	4d14      	ldr	r5, [pc, #80]	; (9000e594 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000e542:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000e546:	6961      	ldr	r1, [r4, #20]
9000e548:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000e54c:	4299      	cmp	r1, r3
9000e54e:	d1e1      	bne.n	9000e514 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000e550:	1d21      	adds	r1, r4, #4
9000e552:	4608      	mov	r0, r1
9000e554:	9101      	str	r1, [sp, #4]
9000e556:	f7fd fe8d 	bl	9000c274 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000e55a:	4b0f      	ldr	r3, [pc, #60]	; (9000e598 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
9000e55c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000e55e:	681a      	ldr	r2, [r3, #0]
9000e560:	9901      	ldr	r1, [sp, #4]
9000e562:	4290      	cmp	r0, r2
9000e564:	d900      	bls.n	9000e568 <vTaskPriorityDisinheritAfterTimeout+0x74>
9000e566:	6018      	str	r0, [r3, #0]
9000e568:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e56c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000e570:	b003      	add	sp, #12
9000e572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000e576:	f7fd be55 	b.w	9000c224 <vListInsertEnd>
9000e57a:	4770      	bx	lr
9000e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e580:	f383 8811 	msr	BASEPRI, r3
9000e584:	f3bf 8f6f 	isb	sy
9000e588:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000e58c:	e7fe      	b.n	9000e58c <vTaskPriorityDisinheritAfterTimeout+0x98>
9000e58e:	bf00      	nop
9000e590:	24024e70 	.word	0x24024e70
9000e594:	24024e7c 	.word	0x24024e7c
9000e598:	240252ec 	.word	0x240252ec

9000e59c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000e59c:	4b04      	ldr	r3, [pc, #16]	; (9000e5b0 <pvTaskIncrementMutexHeldCount+0x14>)
9000e59e:	681a      	ldr	r2, [r3, #0]
9000e5a0:	b11a      	cbz	r2, 9000e5aa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000e5a2:	6819      	ldr	r1, [r3, #0]
9000e5a4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000e5a6:	3201      	adds	r2, #1
9000e5a8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
9000e5aa:	6818      	ldr	r0, [r3, #0]
	}
9000e5ac:	4770      	bx	lr
9000e5ae:	bf00      	nop
9000e5b0:	24024e70 	.word	0x24024e70

9000e5b4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000e5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000e5b8:	4e22      	ldr	r6, [pc, #136]	; (9000e644 <prvSwitchTimerLists+0x90>)
9000e5ba:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
9000e5bc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9000e64c <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9000e5c0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000e5c4:	e00d      	b.n	9000e5e2 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000e5c6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e5c8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000e5ca:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000e5cc:	1d25      	adds	r5, r4, #4
9000e5ce:	4628      	mov	r0, r5
9000e5d0:	f7fd fe50 	bl	9000c274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000e5d4:	6a23      	ldr	r3, [r4, #32]
9000e5d6:	4620      	mov	r0, r4
9000e5d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000e5da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9000e5de:	075b      	lsls	r3, r3, #29
9000e5e0:	d40a      	bmi.n	9000e5f8 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000e5e2:	6833      	ldr	r3, [r6, #0]
9000e5e4:	681a      	ldr	r2, [r3, #0]
9000e5e6:	2a00      	cmp	r2, #0
9000e5e8:	d1ed      	bne.n	9000e5c6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
9000e5ea:	4a17      	ldr	r2, [pc, #92]	; (9000e648 <prvSwitchTimerLists+0x94>)
9000e5ec:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000e5ee:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9000e5f0:	6031      	str	r1, [r6, #0]
}
9000e5f2:	b005      	add	sp, #20
9000e5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000e5f8:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000e5fa:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000e5fc:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9000e5fe:	429f      	cmp	r7, r3
9000e600:	d205      	bcs.n	9000e60e <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000e602:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000e604:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000e606:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000e608:	f7fd fe1c 	bl	9000c244 <vListInsert>
9000e60c:	e7e9      	b.n	9000e5e2 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9000e60e:	f8d9 3000 	ldr.w	r3, [r9]
9000e612:	b16b      	cbz	r3, 9000e630 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000e614:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000e616:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000e61a:	f7ff fecf 	bl	9000e3bc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000e61e:	2300      	movs	r3, #0
9000e620:	4669      	mov	r1, sp
9000e622:	f8d9 0000 	ldr.w	r0, [r9]
9000e626:	461a      	mov	r2, r3
9000e628:	f7fe f99c 	bl	9000c964 <xQueueGenericSend>
				configASSERT( xResult );
9000e62c:	2800      	cmp	r0, #0
9000e62e:	d1d8      	bne.n	9000e5e2 <prvSwitchTimerLists+0x2e>
9000e630:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e634:	f383 8811 	msr	BASEPRI, r3
9000e638:	f3bf 8f6f 	isb	sy
9000e63c:	f3bf 8f4f 	dsb	sy
9000e640:	e7fe      	b.n	9000e640 <prvSwitchTimerLists+0x8c>
9000e642:	bf00      	nop
9000e644:	2402536c 	.word	0x2402536c
9000e648:	24025370 	.word	0x24025370
9000e64c:	24025490 	.word	0x24025490

9000e650 <prvTimerTask>:
{
9000e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000e654:	4e9f      	ldr	r6, [pc, #636]	; (9000e8d4 <prvTimerTask+0x284>)
9000e656:	b089      	sub	sp, #36	; 0x24
9000e658:	4d9f      	ldr	r5, [pc, #636]	; (9000e8d8 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
9000e65a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000e65e:	4c9f      	ldr	r4, [pc, #636]	; (9000e8dc <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000e660:	6833      	ldr	r3, [r6, #0]
9000e662:	681f      	ldr	r7, [r3, #0]
9000e664:	2f00      	cmp	r7, #0
9000e666:	f000 80b2 	beq.w	9000e7ce <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000e66a:	68db      	ldr	r3, [r3, #12]
9000e66c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9000e66e:	f7ff fcd1 	bl	9000e014 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000e672:	f7ff fce7 	bl	9000e044 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000e676:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000e678:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000e67a:	4290      	cmp	r0, r2
9000e67c:	f0c0 80af 	bcc.w	9000e7de <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000e680:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9000e682:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000e684:	f200 80d0 	bhi.w	9000e828 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
9000e688:	f7ff fccc 	bl	9000e024 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e68c:	6832      	ldr	r2, [r6, #0]
9000e68e:	68d2      	ldr	r2, [r2, #12]
9000e690:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000e694:	f10b 0804 	add.w	r8, fp, #4
9000e698:	4640      	mov	r0, r8
9000e69a:	f7fd fdeb 	bl	9000c274 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000e69e:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9000e6a2:	0741      	lsls	r1, r0, #29
9000e6a4:	f100 80d0 	bmi.w	9000e848 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000e6a8:	f020 0001 	bic.w	r0, r0, #1
9000e6ac:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000e6b0:	f8db 3020 	ldr.w	r3, [fp, #32]
9000e6b4:	4658      	mov	r0, fp
9000e6b6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000e6b8:	2200      	movs	r2, #0
9000e6ba:	4669      	mov	r1, sp
9000e6bc:	6820      	ldr	r0, [r4, #0]
9000e6be:	f7fe fc3d 	bl	9000cf3c <xQueueReceive>
9000e6c2:	2800      	cmp	r0, #0
9000e6c4:	d0cc      	beq.n	9000e660 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000e6c6:	9b00      	ldr	r3, [sp, #0]
9000e6c8:	2b00      	cmp	r3, #0
9000e6ca:	db77      	blt.n	9000e7bc <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000e6cc:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000e6ce:	697b      	ldr	r3, [r7, #20]
9000e6d0:	b113      	cbz	r3, 9000e6d8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000e6d2:	1d38      	adds	r0, r7, #4
9000e6d4:	f7fd fdce 	bl	9000c274 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
9000e6d8:	f7ff fcb4 	bl	9000e044 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000e6dc:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000e6de:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9000e6e0:	4298      	cmp	r0, r3
9000e6e2:	f0c0 8083 	bcc.w	9000e7ec <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
9000e6e6:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
9000e6e8:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
9000e6ec:	2b09      	cmp	r3, #9
9000e6ee:	d8e3      	bhi.n	9000e6b8 <prvTimerTask+0x68>
9000e6f0:	e8df f003 	tbb	[pc, r3]
9000e6f4:	54050505 	.word	0x54050505
9000e6f8:	05055b3e 	.word	0x05055b3e
9000e6fc:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000e6fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000e702:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000e704:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000e708:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000e70a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000e70e:	9b01      	ldr	r3, [sp, #4]
9000e710:	1899      	adds	r1, r3, r2
9000e712:	bf2c      	ite	cs
9000e714:	2001      	movcs	r0, #1
9000e716:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
9000e718:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000e71a:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000e71c:	f200 8086 	bhi.w	9000e82c <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e720:	eba8 0303 	sub.w	r3, r8, r3
9000e724:	429a      	cmp	r2, r3
9000e726:	f200 80c0 	bhi.w	9000e8aa <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000e72a:	6a3b      	ldr	r3, [r7, #32]
9000e72c:	4638      	mov	r0, r7
9000e72e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000e730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000e734:	075b      	lsls	r3, r3, #29
9000e736:	d5bf      	bpl.n	9000e6b8 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
9000e738:	6823      	ldr	r3, [r4, #0]
9000e73a:	b183      	cbz	r3, 9000e75e <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
9000e73c:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000e73e:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000e740:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
9000e742:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000e744:	9a01      	ldr	r2, [sp, #4]
9000e746:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000e748:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000e74a:	f7ff fe37 	bl	9000e3bc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000e74e:	2300      	movs	r3, #0
9000e750:	a904      	add	r1, sp, #16
9000e752:	6820      	ldr	r0, [r4, #0]
9000e754:	461a      	mov	r2, r3
9000e756:	f7fe f905 	bl	9000c964 <xQueueGenericSend>
							configASSERT( xResult );
9000e75a:	2800      	cmp	r0, #0
9000e75c:	d1ac      	bne.n	9000e6b8 <prvTimerTask+0x68>
9000e75e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e762:	f383 8811 	msr	BASEPRI, r3
9000e766:	f3bf 8f6f 	isb	sy
9000e76a:	f3bf 8f4f 	dsb	sy
9000e76e:	e7fe      	b.n	9000e76e <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000e770:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000e774:	f043 0301 	orr.w	r3, r3, #1
9000e778:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000e77c:	9b01      	ldr	r3, [sp, #4]
9000e77e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000e780:	2b00      	cmp	r3, #0
9000e782:	f000 809e 	beq.w	9000e8c2 <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9000e786:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000e788:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000e78a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
9000e78c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000e78e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000e790:	d856      	bhi.n	9000e840 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000e792:	4b53      	ldr	r3, [pc, #332]	; (9000e8e0 <prvTimerTask+0x290>)
9000e794:	6818      	ldr	r0, [r3, #0]
9000e796:	f7fd fd55 	bl	9000c244 <vListInsert>
	return xProcessTimerNow;
9000e79a:	e78d      	b.n	9000e6b8 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000e79c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000e7a0:	f023 0301 	bic.w	r3, r3, #1
9000e7a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
9000e7a8:	e786      	b.n	9000e6b8 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000e7aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000e7ae:	079a      	lsls	r2, r3, #30
9000e7b0:	d572      	bpl.n	9000e898 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000e7b2:	f023 0301 	bic.w	r3, r3, #1
9000e7b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
9000e7ba:	e77d      	b.n	9000e6b8 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000e7bc:	9b01      	ldr	r3, [sp, #4]
9000e7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
9000e7c2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000e7c4:	9b00      	ldr	r3, [sp, #0]
9000e7c6:	2b00      	cmp	r3, #0
9000e7c8:	f6ff af76 	blt.w	9000e6b8 <prvTimerTask+0x68>
9000e7cc:	e77e      	b.n	9000e6cc <prvTimerTask+0x7c>
	vTaskSuspendAll();
9000e7ce:	f7ff fc21 	bl	9000e014 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000e7d2:	f7ff fc37 	bl	9000e044 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000e7d6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000e7d8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000e7da:	4282      	cmp	r2, r0
9000e7dc:	d909      	bls.n	9000e7f2 <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9000e7de:	f7ff fee9 	bl	9000e5b4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9000e7e2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
9000e7e6:	f7ff fc1d 	bl	9000e024 <xTaskResumeAll>
9000e7ea:	e765      	b.n	9000e6b8 <prvTimerTask+0x68>
		prvSwitchTimerLists();
9000e7ec:	f7ff fee2 	bl	9000e5b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9000e7f0:	e779      	b.n	9000e6e6 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000e7f2:	4b3b      	ldr	r3, [pc, #236]	; (9000e8e0 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
9000e7f4:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000e7f8:	681a      	ldr	r2, [r3, #0]
9000e7fa:	6812      	ldr	r2, [r2, #0]
9000e7fc:	fab2 f282 	clz	r2, r2
9000e800:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9000e802:	eba7 010a 	sub.w	r1, r7, sl
9000e806:	6820      	ldr	r0, [r4, #0]
9000e808:	f7fe ff90 	bl	9000d72c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000e80c:	f7ff fc0a 	bl	9000e024 <xTaskResumeAll>
9000e810:	2800      	cmp	r0, #0
9000e812:	f47f af51 	bne.w	9000e6b8 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
9000e816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
9000e81a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9000e81e:	f3bf 8f4f 	dsb	sy
9000e822:	f3bf 8f6f 	isb	sy
9000e826:	e747      	b.n	9000e6b8 <prvTimerTask+0x68>
9000e828:	2200      	movs	r2, #0
9000e82a:	e7ea      	b.n	9000e802 <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9000e82c:	4543      	cmp	r3, r8
9000e82e:	d902      	bls.n	9000e836 <prvTimerTask+0x1e6>
9000e830:	2800      	cmp	r0, #0
9000e832:	f43f af7a 	beq.w	9000e72a <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000e836:	1d39      	adds	r1, r7, #4
9000e838:	6830      	ldr	r0, [r6, #0]
9000e83a:	f7fd fd03 	bl	9000c244 <vListInsert>
	return xProcessTimerNow;
9000e83e:	e73b      	b.n	9000e6b8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000e840:	6830      	ldr	r0, [r6, #0]
9000e842:	f7fd fcff 	bl	9000c244 <vListInsert>
9000e846:	e737      	b.n	9000e6b8 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000e848:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000e84c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000e850:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9000e852:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000e854:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
9000e858:	d322      	bcc.n	9000e8a0 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e85a:	ebaa 0307 	sub.w	r3, sl, r7
9000e85e:	429a      	cmp	r2, r3
9000e860:	d829      	bhi.n	9000e8b6 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
9000e862:	6823      	ldr	r3, [r4, #0]
9000e864:	b17b      	cbz	r3, 9000e886 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
9000e866:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000e868:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000e86a:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
9000e86e:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000e870:	f7ff fda4 	bl	9000e3bc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000e874:	2300      	movs	r3, #0
9000e876:	a904      	add	r1, sp, #16
9000e878:	6820      	ldr	r0, [r4, #0]
9000e87a:	461a      	mov	r2, r3
9000e87c:	f7fe f872 	bl	9000c964 <xQueueGenericSend>
			configASSERT( xResult );
9000e880:	2800      	cmp	r0, #0
9000e882:	f47f af15 	bne.w	9000e6b0 <prvTimerTask+0x60>
9000e886:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e88a:	f383 8811 	msr	BASEPRI, r3
9000e88e:	f3bf 8f6f 	isb	sy
9000e892:	f3bf 8f4f 	dsb	sy
9000e896:	e7fe      	b.n	9000e896 <prvTimerTask+0x246>
							vPortFree( pxTimer );
9000e898:	4638      	mov	r0, r7
9000e89a:	f7fd fc51 	bl	9000c140 <vPortFree>
9000e89e:	e70b      	b.n	9000e6b8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000e8a0:	4641      	mov	r1, r8
9000e8a2:	6830      	ldr	r0, [r6, #0]
9000e8a4:	f7fd fcce 	bl	9000c244 <vListInsert>
	return xProcessTimerNow;
9000e8a8:	e702      	b.n	9000e6b0 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000e8aa:	4b0d      	ldr	r3, [pc, #52]	; (9000e8e0 <prvTimerTask+0x290>)
9000e8ac:	1d39      	adds	r1, r7, #4
9000e8ae:	6818      	ldr	r0, [r3, #0]
9000e8b0:	f7fd fcc8 	bl	9000c244 <vListInsert>
	return xProcessTimerNow;
9000e8b4:	e700      	b.n	9000e6b8 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000e8b6:	4b0a      	ldr	r3, [pc, #40]	; (9000e8e0 <prvTimerTask+0x290>)
9000e8b8:	4641      	mov	r1, r8
9000e8ba:	6818      	ldr	r0, [r3, #0]
9000e8bc:	f7fd fcc2 	bl	9000c244 <vListInsert>
	return xProcessTimerNow;
9000e8c0:	e6f6      	b.n	9000e6b0 <prvTimerTask+0x60>
9000e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e8c6:	f383 8811 	msr	BASEPRI, r3
9000e8ca:	f3bf 8f6f 	isb	sy
9000e8ce:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000e8d2:	e7fe      	b.n	9000e8d2 <prvTimerTask+0x282>
9000e8d4:	2402536c 	.word	0x2402536c
9000e8d8:	2402543c 	.word	0x2402543c
9000e8dc:	24025490 	.word	0x24025490
9000e8e0:	24025370 	.word	0x24025370

9000e8e4 <xTimerCreateTimerTask>:
{
9000e8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
9000e8e6:	4c23      	ldr	r4, [pc, #140]	; (9000e974 <xTimerCreateTimerTask+0x90>)
{
9000e8e8:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
9000e8ea:	f7fd fd43 	bl	9000c374 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9000e8ee:	6825      	ldr	r5, [r4, #0]
9000e8f0:	b335      	cbz	r5, 9000e940 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000e8f2:	f7fd fd61 	bl	9000c3b8 <vPortExitCritical>
	if( xTimerQueue != NULL )
9000e8f6:	6823      	ldr	r3, [r4, #0]
9000e8f8:	b1cb      	cbz	r3, 9000e92e <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000e8fa:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000e8fc:	aa07      	add	r2, sp, #28
9000e8fe:	a906      	add	r1, sp, #24
9000e900:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000e902:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000e904:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000e908:	f7fd fb50 	bl	9000bfac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000e90c:	4623      	mov	r3, r4
9000e90e:	9a07      	ldr	r2, [sp, #28]
9000e910:	9500      	str	r5, [sp, #0]
9000e912:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
9000e916:	e9cd 1001 	strd	r1, r0, [sp, #4]
9000e91a:	4917      	ldr	r1, [pc, #92]	; (9000e978 <xTimerCreateTimerTask+0x94>)
9000e91c:	4817      	ldr	r0, [pc, #92]	; (9000e97c <xTimerCreateTimerTask+0x98>)
9000e91e:	f7ff fa1b 	bl	9000dd58 <xTaskCreateStatic>
9000e922:	4b17      	ldr	r3, [pc, #92]	; (9000e980 <xTimerCreateTimerTask+0x9c>)
9000e924:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
9000e926:	b110      	cbz	r0, 9000e92e <xTimerCreateTimerTask+0x4a>
}
9000e928:	2001      	movs	r0, #1
9000e92a:	b009      	add	sp, #36	; 0x24
9000e92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e932:	f383 8811 	msr	BASEPRI, r3
9000e936:	f3bf 8f6f 	isb	sy
9000e93a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9000e93e:	e7fe      	b.n	9000e93e <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9000e940:	4f10      	ldr	r7, [pc, #64]	; (9000e984 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9000e942:	4e11      	ldr	r6, [pc, #68]	; (9000e988 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
9000e944:	4638      	mov	r0, r7
9000e946:	f7fd fc5d 	bl	9000c204 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9000e94a:	4630      	mov	r0, r6
9000e94c:	f7fd fc5a 	bl	9000c204 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9000e950:	4a0e      	ldr	r2, [pc, #56]	; (9000e98c <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000e952:	9500      	str	r5, [sp, #0]
9000e954:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
9000e956:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000e958:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
9000e95a:	4a0d      	ldr	r2, [pc, #52]	; (9000e990 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000e95c:	4b0d      	ldr	r3, [pc, #52]	; (9000e994 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9000e95e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000e960:	4a0d      	ldr	r2, [pc, #52]	; (9000e998 <xTimerCreateTimerTask+0xb4>)
9000e962:	f7fd fea9 	bl	9000c6b8 <xQueueGenericCreateStatic>
9000e966:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
9000e968:	2800      	cmp	r0, #0
9000e96a:	d0c2      	beq.n	9000e8f2 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9000e96c:	490b      	ldr	r1, [pc, #44]	; (9000e99c <xTimerCreateTimerTask+0xb8>)
9000e96e:	f7fe feb5 	bl	9000d6dc <vQueueAddToRegistry>
9000e972:	e7be      	b.n	9000e8f2 <xTimerCreateTimerTask+0xe>
9000e974:	24025490 	.word	0x24025490
9000e978:	90024afc 	.word	0x90024afc
9000e97c:	9000e651 	.word	0x9000e651
9000e980:	24025494 	.word	0x24025494
9000e984:	24025414 	.word	0x24025414
9000e988:	24025428 	.word	0x24025428
9000e98c:	2402536c 	.word	0x2402536c
9000e990:	24025370 	.word	0x24025370
9000e994:	24025440 	.word	0x24025440
9000e998:	24025374 	.word	0x24025374
9000e99c:	90024af4 	.word	0x90024af4

9000e9a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000e9a4:	4c82      	ldr	r4, [pc, #520]	; (9000ebb0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
9000e9a6:	b091      	sub	sp, #68	; 0x44
9000e9a8:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000e9aa:	fba4 0303 	umull	r0, r3, r4, r3
{  
9000e9ae:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000e9b0:	0a19      	lsrs	r1, r3, #8
{  
9000e9b2:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000e9b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000e9b8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9000e9bc:	4293      	cmp	r3, r2
9000e9be:	930f      	str	r3, [sp, #60]	; 0x3c
9000e9c0:	f240 80f1 	bls.w	9000eba6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000e9c4:	4b7b      	ldr	r3, [pc, #492]	; (9000ebb4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
9000e9c6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 9000ebc4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000e9ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000e9cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000e9ce:	691b      	ldr	r3, [r3, #16]
9000e9d0:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 9000ebc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
9000e9d4:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000e9d6:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000e9d8:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000e9da:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000e9dc:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000e9de:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
9000e9e0:	f04f 0e02 	mov.w	lr, #2
9000e9e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000e9e6:	f502 7080 	add.w	r0, r2, #256	; 0x100
9000e9ea:	9204      	str	r2, [sp, #16]
9000e9ec:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000e9ee:	3101      	adds	r1, #1
9000e9f0:	9006      	str	r0, [sp, #24]
9000e9f2:	980e      	ldr	r0, [sp, #56]	; 0x38
9000e9f4:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000e9f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000e9f8:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000e9fc:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ea00:	fb01 f202 	mul.w	r2, r1, r2
9000ea04:	005b      	lsls	r3, r3, #1
9000ea06:	eb03 1302 	add.w	r3, r3, r2, lsl #4
9000ea0a:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9000ea0c:	e009      	b.n	9000ea22 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ea0e:	9b05      	ldr	r3, [sp, #20]
9000ea10:	9a01      	ldr	r2, [sp, #4]
9000ea12:	4293      	cmp	r3, r2
9000ea14:	d80f      	bhi.n	9000ea36 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
9000ea16:	f1be 0f10 	cmp.w	lr, #16
9000ea1a:	f000 80bb 	beq.w	9000eb94 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9000ea1e:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
9000ea22:	f1be 0f0a 	cmp.w	lr, #10
9000ea26:	d1f2      	bne.n	9000ea0e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
9000ea28:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ea2a:	9a01      	ldr	r2, [sp, #4]
9000ea2c:	3380      	adds	r3, #128	; 0x80
9000ea2e:	9304      	str	r3, [sp, #16]
9000ea30:	9b05      	ldr	r3, [sp, #20]
9000ea32:	4293      	cmp	r3, r2
9000ea34:	d9f3      	bls.n	9000ea1e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
9000ea36:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000ea38:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
9000ea3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000ea3c:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9000ea3e:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000ea40:	990a      	ldr	r1, [sp, #40]	; 0x28
9000ea42:	9a04      	ldr	r2, [sp, #16]
9000ea44:	1859      	adds	r1, r3, r1
9000ea46:	f103 0c10 	add.w	ip, r3, #16
9000ea4a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9000ea4e:	3330      	adds	r3, #48	; 0x30
9000ea50:	4696      	mov	lr, r2
9000ea52:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
9000ea54:	9307      	str	r3, [sp, #28]
9000ea56:	9b03      	ldr	r3, [sp, #12]
9000ea58:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
9000ea5c:	4674      	mov	r4, lr
    currentMCU++;
9000ea5e:	9e02      	ldr	r6, [sp, #8]
9000ea60:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ea62:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
9000ea66:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ea68:	4b53      	ldr	r3, [pc, #332]	; (9000ebb8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
9000ea6a:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ea6c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000ea70:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ea72:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
          for(j=0; j < 8; j+=2)
9000ea76:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ea78:	4b50      	ldr	r3, [pc, #320]	; (9000ebbc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
9000ea7a:	f814 ac02 	ldrb.w	sl, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ea7e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ea82:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ea86:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ea88:	4403      	add	r3, r0
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ea8a:	484d      	ldr	r0, [pc, #308]	; (9000ebc0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ea8c:	eb09 4323 	add.w	r3, r9, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ea90:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ea94:	eb01 020a 	add.w	r2, r1, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ea98:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ea9a:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
9000ea9e:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eaa2:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eaa4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eaa8:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eaac:	ea4f 0292 	mov.w	r2, r2, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eab0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eab4:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000eab8:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
9000eabc:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
9000eac0:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000eac4:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eac8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eacc:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ead0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ead2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ead6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eada:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000eade:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eae2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eae6:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000eaea:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000eaee:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000eaf2:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
9000eaf6:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eafa:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eafe:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000eb02:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb04:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eb08:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb0c:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000eb10:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eb14:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb18:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000eb1c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000eb20:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
9000eb24:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
9000eb28:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb2a:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eb2c:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000eb2e:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb30:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eb34:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb38:	ea4f 0393 	mov.w	r3, r3, lsr #2
9000eb3c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eb40:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eb44:	ea4f 1343 	mov.w	r3, r3, lsl #5
9000eb48:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
9000eb4c:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
9000eb50:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
9000eb54:	d185      	bne.n	9000ea62 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000eb56:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
9000eb58:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
9000eb5c:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000eb60:	3310      	adds	r3, #16
9000eb62:	9302      	str	r3, [sp, #8]
            pChrom++;
9000eb64:	9b03      	ldr	r3, [sp, #12]
9000eb66:	3304      	adds	r3, #4
9000eb68:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
9000eb6a:	9b07      	ldr	r3, [sp, #28]
9000eb6c:	4563      	cmp	r3, ip
9000eb6e:	f47f af72 	bne.w	9000ea56 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
9000eb72:	9b06      	ldr	r3, [sp, #24]
9000eb74:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9000eb78:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000eb7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
9000eb7c:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
9000eb80:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
9000eb82:	9b04      	ldr	r3, [sp, #16]
9000eb84:	f103 0310 	add.w	r3, r3, #16
9000eb88:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000eb8a:	9b01      	ldr	r3, [sp, #4]
9000eb8c:	4413      	add	r3, r2
9000eb8e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9000eb90:	f47f af45 	bne.w	9000ea1e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000eb94:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000eb96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000eb98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
9000eb9c:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000eb9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9000eba0:	4293      	cmp	r3, r2
9000eba2:	f47f af1c 	bne.w	9000e9de <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
9000eba6:	ee17 0a90 	vmov	r0, s15
9000ebaa:	b011      	add	sp, #68	; 0x44
9000ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000ebb0:	aaaaaaab 	.word	0xaaaaaaab
9000ebb4:	24026498 	.word	0x24026498
9000ebb8:	24025898 	.word	0x24025898
9000ebbc:	24025498 	.word	0x24025498
9000ebc0:	24026098 	.word	0x24026098
9000ebc4:	24025c98 	.word	0x24025c98
9000ebc8:	90024b04 	.word	0x90024b04

9000ebcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000ebcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000ebd0:	0a1c      	lsrs	r4, r3, #8
{  
9000ebd2:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000ebd4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000ebd8:	ee07 4a90 	vmov	s15, r4
{  
9000ebdc:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000ebde:	429a      	cmp	r2, r3
{  
9000ebe0:	9007      	str	r0, [sp, #28]
9000ebe2:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
9000ebe4:	930b      	str	r3, [sp, #44]	; 0x2c
9000ebe6:	f080 814a 	bcs.w	9000ee7e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000ebea:	4ba7      	ldr	r3, [pc, #668]	; (9000ee88 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
9000ebec:	4da7      	ldr	r5, [pc, #668]	; (9000ee8c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
9000ebee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000ebf0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9000ee90 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
9000ebf4:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ebf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ebf8:	691b      	ldr	r3, [r3, #16]
9000ebfa:	f8df a298 	ldr.w	sl, [pc, #664]	; 9000ee94 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
9000ebfe:	f8df b298 	ldr.w	fp, [pc, #664]	; 9000ee98 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
9000ec02:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9000ee9c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ec06:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ec08:	9301      	str	r3, [sp, #4]
9000ec0a:	e008      	b.n	9000ec1e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000ec0c:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9000ec0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000ec10:	f503 7380 	add.w	r3, r3, #256	; 0x100
9000ec14:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9000ec16:	9b08      	ldr	r3, [sp, #32]
9000ec18:	4293      	cmp	r3, r2
9000ec1a:	f000 8130 	beq.w	9000ee7e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000ec1e:	9a07      	ldr	r2, [sp, #28]
9000ec20:	9908      	ldr	r1, [sp, #32]
9000ec22:	f102 0080 	add.w	r0, r2, #128	; 0x80
9000ec26:	010b      	lsls	r3, r1, #4
9000ec28:	3101      	adds	r1, #1
    currentMCU++;
9000ec2a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000ec2e:	980a      	ldr	r0, [sp, #40]	; 0x28
9000ec30:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ec32:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000ec34:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000ec38:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ec3c:	fb01 f202 	mul.w	r2, r1, r2
9000ec40:	005b      	lsls	r3, r3, #1
9000ec42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000ec46:	9300      	str	r3, [sp, #0]
    currentMCU++;
9000ec48:	2308      	movs	r3, #8
9000ec4a:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ec4c:	e9dd 2300 	ldrd	r2, r3, [sp]
9000ec50:	4293      	cmp	r3, r2
9000ec52:	d9db      	bls.n	9000ec0c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
9000ec54:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000ec56:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
9000ec58:	9a03      	ldr	r2, [sp, #12]
9000ec5a:	f102 0140 	add.w	r1, r2, #64	; 0x40
9000ec5e:	9a02      	ldr	r2, [sp, #8]
9000ec60:	f103 0020 	add.w	r0, r3, #32
9000ec64:	3204      	adds	r2, #4
9000ec66:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ec68:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
9000ec6c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ec6e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
9000ec72:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ec74:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
9000ec78:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
9000ec7a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ec7e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ec82:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ec84:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000ec88:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ec8c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ec8e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ec90:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ec94:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ec98:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ec9c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eca0:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eca2:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000eca6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000ecaa:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000ecae:	08e4      	lsrs	r4, r4, #3
9000ecb0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000ecb4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000ecb8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ecbc:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
9000ecc0:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000ecc4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ecc6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ecc8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ecca:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ecce:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000ecd2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ecd6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ecd8:	08c0      	lsrs	r0, r0, #3
9000ecda:	08a4      	lsrs	r4, r4, #2
9000ecdc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000ece0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000ece4:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ece8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ecec:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ecf0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000ecf4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ecf8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ecfc:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ecfe:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000ed02:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ed06:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ed08:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed0a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed0e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed12:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ed16:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed1a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed1c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed20:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000ed24:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000ed28:	08e4      	lsrs	r4, r4, #3
9000ed2a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000ed2e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000ed32:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ed36:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
9000ed3a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000ed3e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed40:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed42:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed44:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed48:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000ed4c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed50:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed52:	08c0      	lsrs	r0, r0, #3
9000ed54:	08a4      	lsrs	r4, r4, #2
9000ed56:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000ed5a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000ed5e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ed62:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ed66:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000ed6a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ed6e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ed72:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ed76:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed7a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ed7c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ed80:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ed82:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed84:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed88:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed8c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ed90:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed94:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ed96:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ed9a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000ed9e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000eda2:	08e4      	lsrs	r4, r4, #3
9000eda4:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000eda8:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000edac:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000edb0:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
9000edb4:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000edb8:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000edba:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000edbc:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000edbe:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000edc2:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000edc6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000edca:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000edcc:	08c0      	lsrs	r0, r0, #3
9000edce:	08a4      	lsrs	r4, r4, #2
9000edd0:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000edd4:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000edd8:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000eddc:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ede0:	f892 403b 	ldrb.w	r4, [r2, #59]	; 0x3b
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ede4:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ede8:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000edec:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000edf0:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000edf4:	4446      	add	r6, r8
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000edf6:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000edf8:	4460      	add	r0, ip
            ycomp = (int32_t)(*(pLum +j));
9000edfa:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000edfe:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ee02:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ee06:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000ee0a:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ee0e:	4484      	add	ip, r0
9000ee10:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ee14:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ee18:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000ee1c:	08e4      	lsrs	r4, r4, #3
9000ee1e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000ee22:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000ee26:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ee2a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000ee2e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000ee32:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ee34:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ee36:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ee38:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ee3c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000ee40:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ee44:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ee46:	08c0      	lsrs	r0, r0, #3
9000ee48:	08a4      	lsrs	r4, r4, #2
9000ee4a:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000ee4e:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000ee52:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
9000ee56:	9804      	ldr	r0, [sp, #16]
9000ee58:	4283      	cmp	r3, r0
9000ee5a:	f47f af05 	bne.w	9000ec68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9000ee5e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000ee60:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
9000ee62:	3308      	adds	r3, #8
9000ee64:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
9000ee66:	9b03      	ldr	r3, [sp, #12]
9000ee68:	3308      	adds	r3, #8
9000ee6a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000ee6c:	9b00      	ldr	r3, [sp, #0]
9000ee6e:	4413      	add	r3, r2
9000ee70:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
9000ee72:	9b05      	ldr	r3, [sp, #20]
9000ee74:	3b01      	subs	r3, #1
9000ee76:	9305      	str	r3, [sp, #20]
9000ee78:	f47f aee8 	bne.w	9000ec4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
9000ee7c:	e6c6      	b.n	9000ec0c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9000ee7e:	ee17 0a90 	vmov	r0, s15
9000ee82:	b00d      	add	sp, #52	; 0x34
9000ee84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000ee88:	24026498 	.word	0x24026498
9000ee8c:	24025498 	.word	0x24025498
9000ee90:	24026098 	.word	0x24026098
9000ee94:	24025c98 	.word	0x24025c98
9000ee98:	24025898 	.word	0x24025898
9000ee9c:	90024b04 	.word	0x90024b04

9000eea0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000eea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000eea4:	4cb6      	ldr	r4, [pc, #728]	; (9000f180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
9000eea6:	b089      	sub	sp, #36	; 0x24
9000eea8:	e9cd 0204 	strd	r0, r2, [sp, #16]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000eeac:	fba4 0303 	umull	r0, r3, r4, r3
{  
9000eeb0:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000eeb2:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000eeb4:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000eeb8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9000eebc:	429a      	cmp	r2, r3
9000eebe:	9306      	str	r3, [sp, #24]
9000eec0:	f080 8158 	bcs.w	9000f174 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000eec4:	4baf      	ldr	r3, [pc, #700]	; (9000f184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000eec6:	4cb0      	ldr	r4, [pc, #704]	; (9000f188 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000eec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000eeca:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 9000f190 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000eece:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000eed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000eed2:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000eed4:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 9000f194 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000eed8:	48ac      	ldr	r0, [pc, #688]	; (9000f18c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
9000eeda:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 9000f198 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000eede:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000eee0:	9300      	str	r3, [sp, #0]
9000eee2:	e007      	b.n	9000eef4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
9000eee4:	9b04      	ldr	r3, [sp, #16]
9000eee6:	33c0      	adds	r3, #192	; 0xc0
9000eee8:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000eeea:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
9000eeee:	4293      	cmp	r3, r2
9000eef0:	f000 8140 	beq.w	9000f174 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000eef4:	9e05      	ldr	r6, [sp, #20]
9000eef6:	9f07      	ldr	r7, [sp, #28]
9000eef8:	00f5      	lsls	r5, r6, #3
9000eefa:	3601      	adds	r6, #1
9000eefc:	9904      	ldr	r1, [sp, #16]
9000eefe:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ef00:	9e03      	ldr	r6, [sp, #12]
9000ef02:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000ef06:	fbb5 f2f7 	udiv	r2, r5, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000ef0a:	fb07 5512 	mls	r5, r7, r2, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000ef0e:	fb06 f202 	mul.w	r2, r6, r2
9000ef12:	006d      	lsls	r5, r5, #1
9000ef14:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    currentMCU++;   
9000ef18:	2508      	movs	r5, #8
9000ef1a:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000ef1c:	9d00      	ldr	r5, [sp, #0]
9000ef1e:	4295      	cmp	r5, r2
9000ef20:	d9e0      	bls.n	9000eee4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ef22:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
9000ef26:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ef28:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
9000ef2c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9000ef2e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef32:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef36:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
9000ef3a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ef3c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef40:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef44:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ef46:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef48:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef4a:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ef4e:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000ef52:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef56:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ef58:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000ef5c:	08ed      	lsrs	r5, r5, #3
9000ef5e:	08bf      	lsrs	r7, r7, #2
9000ef60:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
9000ef64:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ef66:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ef6a:	52ae      	strh	r6, [r5, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ef6c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ef70:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
9000ef74:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef78:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef7c:	4425      	add	r5, r4
9000ef7e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ef82:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef86:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef8a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ef8c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ef8e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef90:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ef94:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000ef98:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ef9c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ef9e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000efa2:	08ed      	lsrs	r5, r5, #3
9000efa4:	08bf      	lsrs	r7, r7, #2
9000efa6:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000efaa:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efac:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
9000efb0:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
9000efb2:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000efb4:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000efb8:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000efbc:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efbe:	4427      	add	r7, r4
9000efc0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000efc4:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000efc6:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efca:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000efcc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000efd0:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efd4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000efd8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000efdc:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000efde:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000efe2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000efe4:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000efe8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000efec:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000eff0:	08ff      	lsrs	r7, r7, #3
9000eff2:	08b6      	lsrs	r6, r6, #2
9000eff4:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000eff8:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000effc:	f8a5 9004 	strh.w	r9, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f000:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f004:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
9000f008:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f00c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f010:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000f014:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f016:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f01a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f01e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f020:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f022:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f024:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f028:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f02c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f030:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f034:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000f038:	08ff      	lsrs	r7, r7, #3
9000f03a:	08b6      	lsrs	r6, r6, #2
9000f03c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000f040:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f044:	f8a5 9006 	strh.w	r9, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f048:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f04c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
9000f050:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f054:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f058:	4427      	add	r7, r4
9000f05a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f05e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f062:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f066:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f068:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f06a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f06c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f070:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f074:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f078:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f07c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000f080:	08ff      	lsrs	r7, r7, #3
9000f082:	08b6      	lsrs	r6, r6, #2
9000f084:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000f088:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f08c:	f8a5 9008 	strh.w	r9, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f090:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000f094:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f098:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000f09c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f09e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f0a2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f0a6:	44b9      	add	r9, r7
9000f0a8:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f0ac:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f0b0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f0b4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f0b8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f0ba:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f0bc:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f0c0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000f0c4:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000f0c8:	08ff      	lsrs	r7, r7, #3
9000f0ca:	08b6      	lsrs	r6, r6, #2
9000f0cc:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000f0d0:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f0d4:	f8a5 900a 	strh.w	r9, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f0d8:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f0dc:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
9000f0e0:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f0e4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f0e8:	4427      	add	r7, r4
9000f0ea:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f0ee:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f0f2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f0f6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f0f8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f0fa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f0fc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f100:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f104:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f108:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f10c:	08ff      	lsrs	r7, r7, #3
9000f10e:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000f112:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000f116:	08b6      	lsrs	r6, r6, #2
9000f118:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f11c:	f8a5 900c 	strh.w	r9, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f120:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f124:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
9000f128:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f12c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000f130:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f132:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f136:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f13a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f13e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000f140:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f142:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f144:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f148:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000f14c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f150:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f154:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000f158:	08ff      	lsrs	r7, r7, #3
9000f15a:	08b6      	lsrs	r6, r6, #2
9000f15c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000f160:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000f164:	f8a5 900e 	strh.w	r9, [r5, #14]
    for(i= 0; i <  8; i++)
9000f168:	9d01      	ldr	r5, [sp, #4]
9000f16a:	3d01      	subs	r5, #1
9000f16c:	9501      	str	r5, [sp, #4]
9000f16e:	f47f aed5 	bne.w	9000ef1c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000f172:	e6b7      	b.n	9000eee4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9000f174:	ee17 0a90 	vmov	r0, s15
9000f178:	b009      	add	sp, #36	; 0x24
9000f17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f17e:	bf00      	nop
9000f180:	aaaaaaab 	.word	0xaaaaaaab
9000f184:	24026498 	.word	0x24026498
9000f188:	90024b04 	.word	0x90024b04
9000f18c:	24025c98 	.word	0x24025c98
9000f190:	24026098 	.word	0x24026098
9000f194:	24025498 	.word	0x24025498
9000f198:	24025898 	.word	0x24025898

9000f19c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
9000f1a0:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000f1a4:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000f1a6:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000f1a8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000f1ac:	f080 8088 	bcs.w	9000f2c0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f1b0:	4b45      	ldr	r3, [pc, #276]	; (9000f2c8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f1b2:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f1b6:	691e      	ldr	r6, [r3, #16]
9000f1b8:	e003      	b.n	9000f1c2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000f1ba:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9000f1bc:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
9000f1c0:	d07e      	beq.n	9000f2c0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f1c2:	00d5      	lsls	r5, r2, #3
    currentMCU++;
9000f1c4:	4604      	mov	r4, r0
9000f1c6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f1ca:	3201      	adds	r2, #1
9000f1cc:	fbb5 f7f9 	udiv	r7, r5, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000f1d0:	fb09 5317 	mls	r3, r9, r7, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f1d4:	fb08 f707 	mul.w	r7, r8, r7
9000f1d8:	005b      	lsls	r3, r3, #1
9000f1da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f1de:	429e      	cmp	r6, r3
9000f1e0:	d9eb      	bls.n	9000f1ba <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
9000f1e2:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
9000f1e6:	18cd      	adds	r5, r1, r3
          pLum++;
9000f1e8:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9000f1ea:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f1ee:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f1f2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f1f6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f1fa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f1fe:	ea47 070c 	orr.w	r7, r7, ip
9000f202:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
9000f204:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
9000f206:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f20a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f20e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f212:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f216:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f21a:	ea47 070c 	orr.w	r7, r7, ip
9000f21e:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
9000f220:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f224:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f228:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f22c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f230:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f234:	ea47 070c 	orr.w	r7, r7, ip
9000f238:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9000f23a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f23e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f242:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f246:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f24a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f24e:	ea47 070c 	orr.w	r7, r7, ip
9000f252:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9000f254:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f258:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f25c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f260:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f264:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f268:	ea47 070c 	orr.w	r7, r7, ip
9000f26c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000f26e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f272:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f276:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f27a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f27e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f282:	ea47 070c 	orr.w	r7, r7, ip
9000f286:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
9000f288:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f28c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f290:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f294:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f298:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f29c:	ea47 070c 	orr.w	r7, r7, ip
9000f2a0:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000f2a2:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9000f2a6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000f2aa:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000f2ae:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000f2b2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000f2b6:	ea47 070c 	orr.w	r7, r7, ip
9000f2ba:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000f2bc:	d18f      	bne.n	9000f1de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000f2be:	e77c      	b.n	9000f1ba <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
9000f2c0:	ee17 0a90 	vmov	r0, s15
9000f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f2c8:	24026498 	.word	0x24026498

9000f2cc <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
9000f2d0:	0a1c      	lsrs	r4, r3, #8
{  
9000f2d2:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f2d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
9000f2d8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000f2dc:	429a      	cmp	r2, r3
9000f2de:	9301      	str	r3, [sp, #4]
9000f2e0:	f080 8128 	bcs.w	9000f534 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f2e4:	4b96      	ldr	r3, [pc, #600]	; (9000f540 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f2e6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9000f544 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f2ea:	691f      	ldr	r7, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f2ec:	e9d3 a909 	ldrd	sl, r9, [r3, #36]	; 0x24
9000f2f0:	e006      	b.n	9000f300 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x34>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
9000f2f2:	9a00      	ldr	r2, [sp, #0]
9000f2f4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9000f2f8:	9b01      	ldr	r3, [sp, #4]
9000f2fa:	429a      	cmp	r2, r3
9000f2fc:	f000 811a 	beq.w	9000f534 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f300:	00d3      	lsls	r3, r2, #3
    currentMCU++;
9000f302:	f04f 0808 	mov.w	r8, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000f306:	3201      	adds	r2, #1
9000f308:	fbb3 f4fa 	udiv	r4, r3, sl
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000f30c:	fb0a 3514 	mls	r5, sl, r4, r3
    currentMCU++;
9000f310:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f312:	fb09 f404 	mul.w	r4, r9, r4
9000f316:	006d      	lsls	r5, r5, #1
    currentMCU++;
9000f318:	9200      	str	r2, [sp, #0]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f31a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f31e:	42af      	cmp	r7, r5
9000f320:	d9e7      	bls.n	9000f2f2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
            color_k = (int32_t)(*(pChrom + 192));
9000f322:	f893 b0c0 	ldrb.w	fp, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
9000f326:	194e      	adds	r6, r1, r5
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f328:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9000f32c:	f1b8 0801 	subs.w	r8, r8, #1
            pChrom++;
9000f330:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f334:	fb1e fe0b 	smulbb	lr, lr, fp
9000f338:	fbac 4e0e 	umull	r4, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f33c:	f813 4c08 	ldrb.w	r4, [r3, #-8]
9000f340:	fb14 f40b 	smulbb	r4, r4, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f344:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f348:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f34c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f350:	ea4f 2494 	mov.w	r4, r4, lsr #10
9000f354:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f358:	f893 e078 	ldrb.w	lr, [r3, #120]	; 0x78
9000f35c:	fb1e fb0b 	smulbb	fp, lr, fp
9000f360:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f364:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f368:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f36a:	534c      	strh	r4, [r1, r5]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000f36c:	444d      	add	r5, r9
            color_k = (int32_t)(*(pChrom + 192));
9000f36e:	f893 b0b9 	ldrb.w	fp, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f372:	f893 e039 	ldrb.w	lr, [r3, #57]	; 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f376:	f813 4c07 	ldrb.w	r4, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f37a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f37e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f382:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f386:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f38a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f38e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f392:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f396:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f39a:	f893 e079 	ldrb.w	lr, [r3, #121]	; 0x79
9000f39e:	fb1e fb0b 	smulbb	fp, lr, fp
9000f3a2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f3a6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f3aa:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f3ac:	8074      	strh	r4, [r6, #2]
            color_k = (int32_t)(*(pChrom + 192));
9000f3ae:	f893 b0ba 	ldrb.w	fp, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f3b2:	f893 e03a 	ldrb.w	lr, [r3, #58]	; 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f3b6:	f813 4c06 	ldrb.w	r4, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f3ba:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f3be:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f3c2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f3c6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f3ca:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f3ce:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f3d2:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f3d6:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f3da:	f893 e07a 	ldrb.w	lr, [r3, #122]	; 0x7a
9000f3de:	fb1e fb0b 	smulbb	fp, lr, fp
9000f3e2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f3e6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f3ea:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f3ec:	80b4      	strh	r4, [r6, #4]
            color_k = (int32_t)(*(pChrom + 192));
9000f3ee:	f893 b0bb 	ldrb.w	fp, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f3f2:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f3f6:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f3fa:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f3fe:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f402:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f406:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f40a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f40e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f412:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f416:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f41a:	f893 e07b 	ldrb.w	lr, [r3, #123]	; 0x7b
9000f41e:	fb1e fb0b 	smulbb	fp, lr, fp
9000f422:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f426:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f42a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f42c:	80f4      	strh	r4, [r6, #6]
            color_k = (int32_t)(*(pChrom + 192));
9000f42e:	f893 b0bc 	ldrb.w	fp, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f432:	f893 e03c 	ldrb.w	lr, [r3, #60]	; 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f436:	f813 4c04 	ldrb.w	r4, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f43a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f43e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f442:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f446:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f44a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f44e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f452:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f456:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f45a:	f893 e07c 	ldrb.w	lr, [r3, #124]	; 0x7c
9000f45e:	fb1e fb0b 	smulbb	fp, lr, fp
9000f462:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f466:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f46a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f46c:	8134      	strh	r4, [r6, #8]
            color_k = (int32_t)(*(pChrom + 192));
9000f46e:	f893 b0bd 	ldrb.w	fp, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f472:	f893 e03d 	ldrb.w	lr, [r3, #61]	; 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f476:	f813 4c03 	ldrb.w	r4, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f47a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f47e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f482:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f486:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f48a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f48e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f492:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f496:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f49a:	f893 e07d 	ldrb.w	lr, [r3, #125]	; 0x7d
9000f49e:	fb1e fb0b 	smulbb	fp, lr, fp
9000f4a2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f4a6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f4aa:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f4ac:	8174      	strh	r4, [r6, #10]
            color_k = (int32_t)(*(pChrom + 192));
9000f4ae:	f893 b0be 	ldrb.w	fp, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f4b2:	f813 ec02 	ldrb.w	lr, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f4b6:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f4ba:	fb1e fe0b 	smulbb	lr, lr, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f4be:	fb14 f40b 	smulbb	r4, r4, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f4c2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f4c6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f4ca:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f4ce:	ea4f 2454 	mov.w	r4, r4, lsr #9
9000f4d2:	ea4f 1444 	mov.w	r4, r4, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f4d6:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f4da:	f893 e07e 	ldrb.w	lr, [r3, #126]	; 0x7e
9000f4de:	fb1e fb0b 	smulbb	fp, lr, fp
9000f4e2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f4e6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f4ea:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f4ec:	81b4      	strh	r4, [r6, #12]
            color_k = (int32_t)(*(pChrom + 192));
9000f4ee:	f893 b0bf 	ldrb.w	fp, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f4f2:	f893 e03f 	ldrb.w	lr, [r3, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f4f6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f4fa:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f4fe:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000f502:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000f506:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f50a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f50e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f512:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000f516:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000f51a:	f893 e07f 	ldrb.w	lr, [r3, #127]	; 0x7f
9000f51e:	fb1e fb0b 	smulbb	fp, lr, fp
9000f522:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000f526:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000f52a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
9000f52c:	81f4      	strh	r4, [r6, #14]
    for(i= 0; i <  8; i++)
9000f52e:	f47f aef6 	bne.w	9000f31e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x52>
9000f532:	e6de      	b.n	9000f2f2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
  }
  return numberMCU;
}
9000f534:	ee17 0a90 	vmov	r0, s15
9000f538:	b003      	add	sp, #12
9000f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f53e:	bf00      	nop
9000f540:	24026498 	.word	0x24026498
9000f544:	80808081 	.word	0x80808081

9000f548 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
9000f548:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9000f54a:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000f54e:	68c5      	ldr	r5, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000f550:	6804      	ldr	r4, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000f552:	fb06 f005 	mul.w	r0, r6, r5
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000f556:	4b31      	ldr	r3, [pc, #196]	; (9000f61c <JPEG_GetDecodeColorConvertFunc+0xd4>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9000f558:	2c10      	cmp	r4, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000f55a:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000f55e:	609d      	str	r5, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000f560:	601c      	str	r4, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000f562:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9000f564:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000f566:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9000f568:	d02b      	beq.n	9000f5c2 <JPEG_GetDecodeColorConvertFunc+0x7a>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000f56a:	b9fc      	cbnz	r4, 9000f5ac <JPEG_GetDecodeColorConvertFunc+0x64>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000f56c:	482c      	ldr	r0, [pc, #176]	; (9000f620 <JPEG_GetDecodeColorConvertFunc+0xd8>)
9000f56e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
9000f570:	f015 0007 	ands.w	r0, r5, #7
9000f574:	d121      	bne.n	9000f5ba <JPEG_GetDecodeColorConvertFunc+0x72>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000f576:	4607      	mov	r7, r0
9000f578:	6158      	str	r0, [r3, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
    }
    JPEG_ConvertorParams.H_factor = 8;
9000f57a:	2108      	movs	r1, #8
9000f57c:	460c      	mov	r4, r1
    JPEG_ConvertorParams.V_factor  = 8;
9000f57e:	e9c3 1107 	strd	r1, r1, [r3, #28]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000f582:	442f      	add	r7, r5
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000f584:	fbb5 f4f4 	udiv	r4, r5, r4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000f588:	006d      	lsls	r5, r5, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000f58a:	625f      	str	r7, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9000f58c:	629d      	str	r5, [r3, #40]	; 0x28
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000f58e:	b100      	cbz	r0, 9000f592 <JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
9000f590:	3401      	adds	r4, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000f592:	fbb6 f0f1 	udiv	r0, r6, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000f596:	fb01 6110 	mls	r1, r1, r0, r6
9000f59a:	b101      	cbz	r1, 9000f59e <JPEG_GetDecodeColorConvertFunc+0x56>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
9000f59c:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000f59e:	fb00 f404 	mul.w	r4, r0, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000f5a2:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000f5a4:	62dc      	str	r4, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
9000f5a6:	6014      	str	r4, [r2, #0]
}
9000f5a8:	bcf0      	pop	{r4, r5, r6, r7}
9000f5aa:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
9000f5ac:	2c30      	cmp	r4, #48	; 0x30
9000f5ae:	d112      	bne.n	9000f5d6 <JPEG_GetDecodeColorConvertFunc+0x8e>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000f5b0:	481c      	ldr	r0, [pc, #112]	; (9000f624 <JPEG_GetDecodeColorConvertFunc+0xdc>)
9000f5b2:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
9000f5b4:	f015 0007 	ands.w	r0, r5, #7
9000f5b8:	d0dd      	beq.n	9000f576 <JPEG_GetDecodeColorConvertFunc+0x2e>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
9000f5ba:	f1c0 0708 	rsb	r7, r0, #8
9000f5be:	615f      	str	r7, [r3, #20]
9000f5c0:	e7db      	b.n	9000f57a <JPEG_GetDecodeColorConvertFunc+0x32>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000f5c2:	2f01      	cmp	r7, #1
9000f5c4:	d017      	beq.n	9000f5f6 <JPEG_GetDecodeColorConvertFunc+0xae>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000f5c6:	2f02      	cmp	r7, #2
9000f5c8:	d008      	beq.n	9000f5dc <JPEG_GetDecodeColorConvertFunc+0x94>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
9000f5ca:	4817      	ldr	r0, [pc, #92]	; (9000f628 <JPEG_GetDecodeColorConvertFunc+0xe0>)
9000f5cc:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000f5ce:	f015 0007 	ands.w	r0, r5, #7
9000f5d2:	d1f2      	bne.n	9000f5ba <JPEG_GetDecodeColorConvertFunc+0x72>
9000f5d4:	e7cf      	b.n	9000f576 <JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
9000f5d6:	2001      	movs	r0, #1
}
9000f5d8:	bcf0      	pop	{r4, r5, r6, r7}
9000f5da:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000f5dc:	4813      	ldr	r0, [pc, #76]	; (9000f62c <JPEG_GetDecodeColorConvertFunc+0xe4>)
9000f5de:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000f5e0:	f015 000f 	ands.w	r0, r5, #15
9000f5e4:	d116      	bne.n	9000f614 <JPEG_GetDecodeColorConvertFunc+0xcc>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9000f5e6:	4607      	mov	r7, r0
9000f5e8:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
9000f5ea:	f04f 0c10 	mov.w	ip, #16
9000f5ee:	2108      	movs	r1, #8
9000f5f0:	e9c3 c107 	strd	ip, r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
9000f5f4:	e7c5      	b.n	9000f582 <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
9000f5f6:	480e      	ldr	r0, [pc, #56]	; (9000f630 <JPEG_GetDecodeColorConvertFunc+0xe8>)
9000f5f8:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000f5fa:	f015 000f 	ands.w	r0, r5, #15
9000f5fe:	d105      	bne.n	9000f60c <JPEG_GetDecodeColorConvertFunc+0xc4>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9000f600:	4607      	mov	r7, r0
9000f602:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
9000f604:	2110      	movs	r1, #16
      JPEG_ConvertorParams.V_factor  = 16;
9000f606:	e9c3 1107 	strd	r1, r1, [r3, #28]
9000f60a:	e7ba      	b.n	9000f582 <JPEG_GetDecodeColorConvertFunc+0x3a>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9000f60c:	f1c0 0710 	rsb	r7, r0, #16
9000f610:	615f      	str	r7, [r3, #20]
9000f612:	e7f7      	b.n	9000f604 <JPEG_GetDecodeColorConvertFunc+0xbc>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9000f614:	f1c0 0710 	rsb	r7, r0, #16
9000f618:	615f      	str	r7, [r3, #20]
9000f61a:	e7e6      	b.n	9000f5ea <JPEG_GetDecodeColorConvertFunc+0xa2>
9000f61c:	24026498 	.word	0x24026498
9000f620:	9000f19d 	.word	0x9000f19d
9000f624:	9000f2cd 	.word	0x9000f2cd
9000f628:	9000eea1 	.word	0x9000eea1
9000f62c:	9000ebcd 	.word	0x9000ebcd
9000f630:	9000e9a1 	.word	0x9000e9a1

9000f634 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
9000f634:	8880      	ldrh	r0, [r0, #4]
9000f636:	4770      	bx	lr

9000f638 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
9000f638:	b570      	push	{r4, r5, r6, lr}
9000f63a:	6803      	ldr	r3, [r0, #0]
9000f63c:	460c      	mov	r4, r1
9000f63e:	2100      	movs	r1, #0
9000f640:	4605      	mov	r5, r0
9000f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f644:	4798      	blx	r3
9000f646:	4606      	mov	r6, r0
9000f648:	682b      	ldr	r3, [r5, #0]
9000f64a:	4628      	mov	r0, r5
9000f64c:	1ba4      	subs	r4, r4, r6
9000f64e:	6a1b      	ldr	r3, [r3, #32]
9000f650:	b2a4      	uxth	r4, r4
9000f652:	4798      	blx	r3
9000f654:	fbb4 f0f0 	udiv	r0, r4, r0
9000f658:	bd70      	pop	{r4, r5, r6, pc}

9000f65a <_ZN8touchgfx17AbstractPartition5clearEv>:
9000f65a:	2300      	movs	r3, #0
9000f65c:	8083      	strh	r3, [r0, #4]
9000f65e:	4770      	bx	lr

9000f660 <_ZN8touchgfx17AbstractPartition8allocateEt>:
9000f660:	b510      	push	{r4, lr}
9000f662:	6803      	ldr	r3, [r0, #0]
9000f664:	4604      	mov	r4, r0
9000f666:	8881      	ldrh	r1, [r0, #4]
9000f668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f66a:	4798      	blx	r3
9000f66c:	88a3      	ldrh	r3, [r4, #4]
9000f66e:	3301      	adds	r3, #1
9000f670:	80a3      	strh	r3, [r4, #4]
9000f672:	bd10      	pop	{r4, pc}

9000f674 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
9000f674:	6803      	ldr	r3, [r0, #0]
9000f676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f678:	4718      	bx	r3

9000f67a <_ZN8touchgfx17AbstractPartitionD1Ev>:
9000f67a:	4770      	bx	lr

9000f67c <_ZN8touchgfx17AbstractPartitionC1Ev>:
9000f67c:	4a02      	ldr	r2, [pc, #8]	; (9000f688 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
9000f67e:	6002      	str	r2, [r0, #0]
9000f680:	2200      	movs	r2, #0
9000f682:	8082      	strh	r2, [r0, #4]
9000f684:	4770      	bx	lr
9000f686:	bf00      	nop
9000f688:	90024e0c 	.word	0x90024e0c

9000f68c <_ZN8touchgfx9Container13getFirstChildEv>:
9000f68c:	6a80      	ldr	r0, [r0, #40]	; 0x28
9000f68e:	4770      	bx	lr

9000f690 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
9000f690:	b570      	push	{r4, r5, r6, lr}
9000f692:	6803      	ldr	r3, [r0, #0]
9000f694:	4604      	mov	r4, r0
9000f696:	4615      	mov	r5, r2
9000f698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000f69a:	4798      	blx	r3
9000f69c:	6823      	ldr	r3, [r4, #0]
9000f69e:	4629      	mov	r1, r5
9000f6a0:	4620      	mov	r0, r4
9000f6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000f6a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9000f6a8:	4718      	bx	r3

9000f6aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
9000f6aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000f6ac:	2000      	movs	r0, #0
9000f6ae:	b12b      	cbz	r3, 9000f6bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9000f6b0:	b920      	cbnz	r0, 9000f6bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9000f6b2:	1a5a      	subs	r2, r3, r1
9000f6b4:	699b      	ldr	r3, [r3, #24]
9000f6b6:	4250      	negs	r0, r2
9000f6b8:	4150      	adcs	r0, r2
9000f6ba:	e7f8      	b.n	9000f6ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
9000f6bc:	4770      	bx	lr

9000f6be <_ZN8touchgfx9Container3addERNS_8DrawableE>:
9000f6be:	2300      	movs	r3, #0
9000f6c0:	6148      	str	r0, [r1, #20]
9000f6c2:	618b      	str	r3, [r1, #24]
9000f6c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000f6c6:	b913      	cbnz	r3, 9000f6ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
9000f6c8:	6281      	str	r1, [r0, #40]	; 0x28
9000f6ca:	4770      	bx	lr
9000f6cc:	4613      	mov	r3, r2
9000f6ce:	699a      	ldr	r2, [r3, #24]
9000f6d0:	2a00      	cmp	r2, #0
9000f6d2:	d1fb      	bne.n	9000f6cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
9000f6d4:	6199      	str	r1, [r3, #24]
9000f6d6:	4770      	bx	lr

9000f6d8 <_ZN8touchgfx9Container9removeAllEv>:
9000f6d8:	2200      	movs	r2, #0
9000f6da:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000f6dc:	b123      	cbz	r3, 9000f6e8 <_ZN8touchgfx9Container9removeAllEv+0x10>
9000f6de:	6999      	ldr	r1, [r3, #24]
9000f6e0:	6281      	str	r1, [r0, #40]	; 0x28
9000f6e2:	e9c3 2205 	strd	r2, r2, [r3, #20]
9000f6e6:	e7f8      	b.n	9000f6da <_ZN8touchgfx9Container9removeAllEv+0x2>
9000f6e8:	4770      	bx	lr

9000f6ea <_ZN8touchgfx9Container6unlinkEv>:
9000f6ea:	2300      	movs	r3, #0
9000f6ec:	6283      	str	r3, [r0, #40]	; 0x28
9000f6ee:	4770      	bx	lr

9000f6f0 <_ZNK8touchgfx9Container12getSolidRectEv>:
9000f6f0:	2200      	movs	r2, #0
9000f6f2:	8002      	strh	r2, [r0, #0]
9000f6f4:	8042      	strh	r2, [r0, #2]
9000f6f6:	8082      	strh	r2, [r0, #4]
9000f6f8:	80c2      	strh	r2, [r0, #6]
9000f6fa:	4770      	bx	lr

9000f6fc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
9000f6fc:	b570      	push	{r4, r5, r6, lr}
9000f6fe:	460d      	mov	r5, r1
9000f700:	4616      	mov	r6, r2
9000f702:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000f704:	b13c      	cbz	r4, 9000f716 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
9000f706:	6823      	ldr	r3, [r4, #0]
9000f708:	4620      	mov	r0, r4
9000f70a:	4632      	mov	r2, r6
9000f70c:	4629      	mov	r1, r5
9000f70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000f710:	4798      	blx	r3
9000f712:	69a4      	ldr	r4, [r4, #24]
9000f714:	e7f6      	b.n	9000f704 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
9000f716:	bd70      	pop	{r4, r5, r6, pc}

9000f718 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
9000f718:	b538      	push	{r3, r4, r5, lr}
9000f71a:	460d      	mov	r5, r1
9000f71c:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000f71e:	b134      	cbz	r4, 9000f72e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9000f720:	682b      	ldr	r3, [r5, #0]
9000f722:	4621      	mov	r1, r4
9000f724:	4628      	mov	r0, r5
9000f726:	689b      	ldr	r3, [r3, #8]
9000f728:	4798      	blx	r3
9000f72a:	69a4      	ldr	r4, [r4, #24]
9000f72c:	e7f7      	b.n	9000f71e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9000f72e:	bd38      	pop	{r3, r4, r5, pc}

9000f730 <_ZN8touchgfx9ContainerD1Ev>:
9000f730:	4770      	bx	lr

9000f732 <_ZN8touchgfx9ContainerD0Ev>:
9000f732:	b510      	push	{r4, lr}
9000f734:	4604      	mov	r4, r0
9000f736:	212c      	movs	r1, #44	; 0x2c
9000f738:	f011 fd43 	bl	900211c2 <_ZdlPvj>
9000f73c:	4620      	mov	r0, r4
9000f73e:	bd10      	pop	{r4, pc}

9000f740 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9000f740:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000f742:	b19b      	cbz	r3, 9000f76c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9000f744:	428b      	cmp	r3, r1
9000f746:	d109      	bne.n	9000f75c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
9000f748:	699a      	ldr	r2, [r3, #24]
9000f74a:	2100      	movs	r1, #0
9000f74c:	6159      	str	r1, [r3, #20]
9000f74e:	6282      	str	r2, [r0, #40]	; 0x28
9000f750:	b902      	cbnz	r2, 9000f754 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
9000f752:	4770      	bx	lr
9000f754:	6199      	str	r1, [r3, #24]
9000f756:	4770      	bx	lr
9000f758:	4613      	mov	r3, r2
9000f75a:	b13a      	cbz	r2, 9000f76c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9000f75c:	699a      	ldr	r2, [r3, #24]
9000f75e:	428a      	cmp	r2, r1
9000f760:	d1fa      	bne.n	9000f758 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
9000f762:	698a      	ldr	r2, [r1, #24]
9000f764:	619a      	str	r2, [r3, #24]
9000f766:	2300      	movs	r3, #0
9000f768:	e9c1 3305 	strd	r3, r3, [r1, #20]
9000f76c:	4770      	bx	lr

9000f76e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
9000f76e:	b410      	push	{r4}
9000f770:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000f772:	4604      	mov	r4, r0
9000f774:	b92b      	cbnz	r3, 9000f782 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
9000f776:	6803      	ldr	r3, [r0, #0]
9000f778:	4611      	mov	r1, r2
9000f77a:	f85d 4b04 	ldr.w	r4, [sp], #4
9000f77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000f780:	4718      	bx	r3
9000f782:	b941      	cbnz	r1, 9000f796 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
9000f784:	6193      	str	r3, [r2, #24]
9000f786:	6282      	str	r2, [r0, #40]	; 0x28
9000f788:	6154      	str	r4, [r2, #20]
9000f78a:	f85d 4b04 	ldr.w	r4, [sp], #4
9000f78e:	4770      	bx	lr
9000f790:	4603      	mov	r3, r0
9000f792:	2800      	cmp	r0, #0
9000f794:	d0f9      	beq.n	9000f78a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
9000f796:	4299      	cmp	r1, r3
9000f798:	6998      	ldr	r0, [r3, #24]
9000f79a:	d1f9      	bne.n	9000f790 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
9000f79c:	6190      	str	r0, [r2, #24]
9000f79e:	618a      	str	r2, [r1, #24]
9000f7a0:	e7f2      	b.n	9000f788 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

9000f7a2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
9000f7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f7a6:	461f      	mov	r7, r3
9000f7a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9000f7ac:	460d      	mov	r5, r1
9000f7ae:	4616      	mov	r6, r2
9000f7b0:	b103      	cbz	r3, 9000f7b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
9000f7b2:	6038      	str	r0, [r7, #0]
9000f7b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000f7b6:	b314      	cbz	r4, 9000f7fe <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
9000f7b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9000f7bc:	b1eb      	cbz	r3, 9000f7fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000f7be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9000f7c2:	428d      	cmp	r5, r1
9000f7c4:	db19      	blt.n	9000f7fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000f7c6:	b289      	uxth	r1, r1
9000f7c8:	8923      	ldrh	r3, [r4, #8]
9000f7ca:	440b      	add	r3, r1
9000f7cc:	b21b      	sxth	r3, r3
9000f7ce:	429d      	cmp	r5, r3
9000f7d0:	da13      	bge.n	9000f7fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000f7d2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9000f7d6:	4296      	cmp	r6, r2
9000f7d8:	db0f      	blt.n	9000f7fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000f7da:	b292      	uxth	r2, r2
9000f7dc:	8963      	ldrh	r3, [r4, #10]
9000f7de:	4413      	add	r3, r2
9000f7e0:	b21b      	sxth	r3, r3
9000f7e2:	429e      	cmp	r6, r3
9000f7e4:	da09      	bge.n	9000f7fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9000f7e6:	6823      	ldr	r3, [r4, #0]
9000f7e8:	1ab2      	subs	r2, r6, r2
9000f7ea:	1a69      	subs	r1, r5, r1
9000f7ec:	4620      	mov	r0, r4
9000f7ee:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
9000f7f2:	b212      	sxth	r2, r2
9000f7f4:	463b      	mov	r3, r7
9000f7f6:	b209      	sxth	r1, r1
9000f7f8:	47c0      	blx	r8
9000f7fa:	69a4      	ldr	r4, [r4, #24]
9000f7fc:	e7db      	b.n	9000f7b6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9000f7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

9000f804 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
9000f804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f808:	4c6d      	ldr	r4, [pc, #436]	; (9000f9c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
9000f80a:	b0a1      	sub	sp, #132	; 0x84
9000f80c:	4606      	mov	r6, r0
9000f80e:	6824      	ldr	r4, [r4, #0]
9000f810:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9000f812:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
9000f816:	2400      	movs	r4, #0
9000f818:	9303      	str	r3, [sp, #12]
9000f81a:	802c      	strh	r4, [r5, #0]
9000f81c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9000f81e:	802c      	strh	r4, [r5, #0]
9000f820:	601c      	str	r4, [r3, #0]
9000f822:	e9cd 1201 	strd	r1, r2, [sp, #4]
9000f826:	f7ff ffbc 	bl	9000f7a2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9000f82a:	f1b9 0f03 	cmp.w	r9, #3
9000f82e:	f340 80c1 	ble.w	9000f9b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9000f832:	4631      	mov	r1, r6
9000f834:	a80c      	add	r0, sp, #48	; 0x30
9000f836:	f004 fb11 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9000f83a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9000f83e:	9306      	str	r3, [sp, #24]
9000f840:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9000f844:	9307      	str	r3, [sp, #28]
9000f846:	9b03      	ldr	r3, [sp, #12]
9000f848:	f8d3 a000 	ldr.w	sl, [r3]
9000f84c:	f1ba 0f00 	cmp.w	sl, #0
9000f850:	f000 80b3 	beq.w	9000f9ba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
9000f854:	4651      	mov	r1, sl
9000f856:	a810      	add	r0, sp, #64	; 0x40
9000f858:	f004 fb00 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9000f85c:	2002      	movs	r0, #2
9000f85e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
9000f862:	9b01      	ldr	r3, [sp, #4]
9000f864:	9a06      	ldr	r2, [sp, #24]
9000f866:	fb91 f1f0 	sdiv	r1, r1, r0
9000f86a:	189d      	adds	r5, r3, r2
9000f86c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
9000f870:	9a07      	ldr	r2, [sp, #28]
9000f872:	4419      	add	r1, r3
9000f874:	9b02      	ldr	r3, [sp, #8]
9000f876:	4413      	add	r3, r2
9000f878:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
9000f87c:	1a6d      	subs	r5, r5, r1
9000f87e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
9000f882:	fb92 f2f0 	sdiv	r2, r2, r0
9000f886:	440a      	add	r2, r1
9000f888:	1a9b      	subs	r3, r3, r2
9000f88a:	435b      	muls	r3, r3
9000f88c:	fb05 3505 	mla	r5, r5, r5, r3
9000f890:	4f4c      	ldr	r7, [pc, #304]	; (9000f9c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9000f892:	ac10      	add	r4, sp, #64	; 0x40
9000f894:	f1b9 0f0c 	cmp.w	r9, #12
9000f898:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000f89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000f89c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000f89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000f8a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000f8a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000f8a4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
9000f8a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
9000f8ac:	f04f 0303 	mov.w	r3, #3
9000f8b0:	bfd8      	it	le
9000f8b2:	f109 32ff 	addle.w	r2, r9, #4294967295
9000f8b6:	f04f 0400 	mov.w	r4, #0
9000f8ba:	f8cd 9000 	str.w	r9, [sp]
9000f8be:	bfcc      	ite	gt
9000f8c0:	4698      	movgt	r8, r3
9000f8c2:	fb92 f8f3 	sdivle	r8, r2, r3
9000f8c6:	1c63      	adds	r3, r4, #1
9000f8c8:	aa10      	add	r2, sp, #64	; 0x40
9000f8ca:	f004 0401 	and.w	r4, r4, #1
9000f8ce:	f04f 0b00 	mov.w	fp, #0
9000f8d2:	9308      	str	r3, [sp, #32]
9000f8d4:	9b00      	ldr	r3, [sp, #0]
9000f8d6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
9000f8da:	fb93 f3f8 	sdiv	r3, r3, r8
9000f8de:	3404      	adds	r4, #4
9000f8e0:	b29b      	uxth	r3, r3
9000f8e2:	9304      	str	r3, [sp, #16]
9000f8e4:	9a04      	ldr	r2, [sp, #16]
9000f8e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
9000f8ea:	fb13 f302 	smulbb	r3, r3, r2
9000f8ee:	9a01      	ldr	r2, [sp, #4]
9000f8f0:	b29b      	uxth	r3, r3
9000f8f2:	1899      	adds	r1, r3, r2
9000f8f4:	9305      	str	r3, [sp, #20]
9000f8f6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
9000f8fa:	b209      	sxth	r1, r1
9000f8fc:	4299      	cmp	r1, r3
9000f8fe:	db4d      	blt.n	9000f99c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000f900:	8932      	ldrh	r2, [r6, #8]
9000f902:	4413      	add	r3, r2
9000f904:	b21b      	sxth	r3, r3
9000f906:	4299      	cmp	r1, r3
9000f908:	da48      	bge.n	9000f99c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000f90a:	9b04      	ldr	r3, [sp, #16]
9000f90c:	6827      	ldr	r7, [r4, #0]
9000f90e:	fb17 f703 	smulbb	r7, r7, r3
9000f912:	9b02      	ldr	r3, [sp, #8]
9000f914:	b2bf      	uxth	r7, r7
9000f916:	18fa      	adds	r2, r7, r3
9000f918:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
9000f91c:	b212      	sxth	r2, r2
9000f91e:	429a      	cmp	r2, r3
9000f920:	db3c      	blt.n	9000f99c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000f922:	8970      	ldrh	r0, [r6, #10]
9000f924:	4403      	add	r3, r0
9000f926:	b21b      	sxth	r3, r3
9000f928:	429a      	cmp	r2, r3
9000f92a:	da37      	bge.n	9000f99c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000f92c:	2300      	movs	r3, #0
9000f92e:	4630      	mov	r0, r6
9000f930:	930b      	str	r3, [sp, #44]	; 0x2c
9000f932:	ab0b      	add	r3, sp, #44	; 0x2c
9000f934:	f7ff ff35 	bl	9000f7a2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9000f938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9000f93a:	b37a      	cbz	r2, 9000f99c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000f93c:	4552      	cmp	r2, sl
9000f93e:	d02d      	beq.n	9000f99c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9000f940:	4611      	mov	r1, r2
9000f942:	a80e      	add	r0, sp, #56	; 0x38
9000f944:	9209      	str	r2, [sp, #36]	; 0x24
9000f946:	f004 fa89 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9000f94a:	f04f 0e02 	mov.w	lr, #2
9000f94e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
9000f952:	9a06      	ldr	r2, [sp, #24]
9000f954:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
9000f958:	9b01      	ldr	r3, [sp, #4]
9000f95a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
9000f95e:	4413      	add	r3, r2
9000f960:	9a07      	ldr	r2, [sp, #28]
9000f962:	fb91 f1fe 	sdiv	r1, r1, lr
9000f966:	fb9c fcfe 	sdiv	ip, ip, lr
9000f96a:	4401      	add	r1, r0
9000f96c:	1a58      	subs	r0, r3, r1
9000f96e:	9b02      	ldr	r3, [sp, #8]
9000f970:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
9000f974:	4413      	add	r3, r2
9000f976:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000f978:	448c      	add	ip, r1
9000f97a:	eba3 030c 	sub.w	r3, r3, ip
9000f97e:	435b      	muls	r3, r3
9000f980:	fb00 3300 	mla	r3, r0, r0, r3
9000f984:	42ab      	cmp	r3, r5
9000f986:	d208      	bcs.n	9000f99a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
9000f988:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000f98a:	461d      	mov	r5, r3
9000f98c:	9803      	ldr	r0, [sp, #12]
9000f98e:	6001      	str	r1, [r0, #0]
9000f990:	992a      	ldr	r1, [sp, #168]	; 0xa8
9000f992:	9805      	ldr	r0, [sp, #20]
9000f994:	8008      	strh	r0, [r1, #0]
9000f996:	992b      	ldr	r1, [sp, #172]	; 0xac
9000f998:	800f      	strh	r7, [r1, #0]
9000f99a:	4692      	mov	sl, r2
9000f99c:	f10b 0b01 	add.w	fp, fp, #1
9000f9a0:	3408      	adds	r4, #8
9000f9a2:	f1bb 0f04 	cmp.w	fp, #4
9000f9a6:	d19d      	bne.n	9000f8e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
9000f9a8:	9b00      	ldr	r3, [sp, #0]
9000f9aa:	9c08      	ldr	r4, [sp, #32]
9000f9ac:	444b      	add	r3, r9
9000f9ae:	4544      	cmp	r4, r8
9000f9b0:	9300      	str	r3, [sp, #0]
9000f9b2:	d188      	bne.n	9000f8c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
9000f9b4:	b021      	add	sp, #132	; 0x84
9000f9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000f9ba:	f04f 35ff 	mov.w	r5, #4294967295
9000f9be:	e767      	b.n	9000f890 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
9000f9c0:	240264e4 	.word	0x240264e4
9000f9c4:	900223c0 	.word	0x900223c0

9000f9c8 <_ZN8touchgfx4RectaNERKS0_>:
9000f9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000f9cc:	f9b1 7000 	ldrsh.w	r7, [r1]
9000f9d0:	888c      	ldrh	r4, [r1, #4]
9000f9d2:	f9b0 9000 	ldrsh.w	r9, [r0]
9000f9d6:	443c      	add	r4, r7
9000f9d8:	b2a4      	uxth	r4, r4
9000f9da:	fa0f f884 	sxth.w	r8, r4
9000f9de:	45c1      	cmp	r9, r8
9000f9e0:	da2f      	bge.n	9000fa42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000f9e2:	8882      	ldrh	r2, [r0, #4]
9000f9e4:	444a      	add	r2, r9
9000f9e6:	b292      	uxth	r2, r2
9000f9e8:	fa0f fe82 	sxth.w	lr, r2
9000f9ec:	4577      	cmp	r7, lr
9000f9ee:	da28      	bge.n	9000fa42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000f9f0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
9000f9f4:	88cb      	ldrh	r3, [r1, #6]
9000f9f6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
9000f9fa:	442b      	add	r3, r5
9000f9fc:	b21b      	sxth	r3, r3
9000f9fe:	429e      	cmp	r6, r3
9000fa00:	da1f      	bge.n	9000fa42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000fa02:	88c3      	ldrh	r3, [r0, #6]
9000fa04:	4433      	add	r3, r6
9000fa06:	b29b      	uxth	r3, r3
9000fa08:	fa0f fc83 	sxth.w	ip, r3
9000fa0c:	4565      	cmp	r5, ip
9000fa0e:	da18      	bge.n	9000fa42 <_ZN8touchgfx4RectaNERKS0_+0x7a>
9000fa10:	454f      	cmp	r7, r9
9000fa12:	bfb8      	it	lt
9000fa14:	464f      	movlt	r7, r9
9000fa16:	42b5      	cmp	r5, r6
9000fa18:	bfb8      	it	lt
9000fa1a:	4635      	movlt	r5, r6
9000fa1c:	45f0      	cmp	r8, lr
9000fa1e:	bfd8      	it	le
9000fa20:	4622      	movle	r2, r4
9000fa22:	1bd2      	subs	r2, r2, r7
9000fa24:	8082      	strh	r2, [r0, #4]
9000fa26:	884a      	ldrh	r2, [r1, #2]
9000fa28:	88c9      	ldrh	r1, [r1, #6]
9000fa2a:	8007      	strh	r7, [r0, #0]
9000fa2c:	440a      	add	r2, r1
9000fa2e:	8045      	strh	r5, [r0, #2]
9000fa30:	b292      	uxth	r2, r2
9000fa32:	b211      	sxth	r1, r2
9000fa34:	458c      	cmp	ip, r1
9000fa36:	bfa8      	it	ge
9000fa38:	4613      	movge	r3, r2
9000fa3a:	1b5b      	subs	r3, r3, r5
9000fa3c:	80c3      	strh	r3, [r0, #6]
9000fa3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000fa42:	2300      	movs	r3, #0
9000fa44:	8003      	strh	r3, [r0, #0]
9000fa46:	8043      	strh	r3, [r0, #2]
9000fa48:	8083      	strh	r3, [r0, #4]
9000fa4a:	80c3      	strh	r3, [r0, #6]
9000fa4c:	e7f7      	b.n	9000fa3e <_ZN8touchgfx4RectaNERKS0_+0x76>

9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>:
9000fa4e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9000fa52:	2b00      	cmp	r3, #0
9000fa54:	dd06      	ble.n	9000fa64 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
9000fa56:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
9000fa5a:	2800      	cmp	r0, #0
9000fa5c:	bfcc      	ite	gt
9000fa5e:	2000      	movgt	r0, #0
9000fa60:	2001      	movle	r0, #1
9000fa62:	4770      	bx	lr
9000fa64:	2001      	movs	r0, #1
9000fa66:	4770      	bx	lr

9000fa68 <_ZNK8touchgfx9Container16getContainedAreaEv>:
9000fa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000fa6c:	2300      	movs	r3, #0
9000fa6e:	4604      	mov	r4, r0
9000fa70:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9000fa72:	8003      	strh	r3, [r0, #0]
9000fa74:	8043      	strh	r3, [r0, #2]
9000fa76:	8083      	strh	r3, [r0, #4]
9000fa78:	80c3      	strh	r3, [r0, #6]
9000fa7a:	2d00      	cmp	r5, #0
9000fa7c:	d040      	beq.n	9000fb00 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
9000fa7e:	1d28      	adds	r0, r5, #4
9000fa80:	f7ff ffe5 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
9000fa84:	b988      	cbnz	r0, 9000faaa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9000fa86:	4620      	mov	r0, r4
9000fa88:	f7ff ffe1 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
9000fa8c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
9000fa90:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9000fa94:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
9000fa98:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
9000fa9c:	b138      	cbz	r0, 9000faae <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
9000fa9e:	8022      	strh	r2, [r4, #0]
9000faa0:	8063      	strh	r3, [r4, #2]
9000faa2:	f8a4 e004 	strh.w	lr, [r4, #4]
9000faa6:	f8a4 c006 	strh.w	ip, [r4, #6]
9000faaa:	69ad      	ldr	r5, [r5, #24]
9000faac:	e7e5      	b.n	9000fa7a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
9000faae:	f9b4 0000 	ldrsh.w	r0, [r4]
9000fab2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9000fab6:	4290      	cmp	r0, r2
9000fab8:	4607      	mov	r7, r0
9000faba:	f8b4 8004 	ldrh.w	r8, [r4, #4]
9000fabe:	460e      	mov	r6, r1
9000fac0:	bfa8      	it	ge
9000fac2:	4617      	movge	r7, r2
9000fac4:	4299      	cmp	r1, r3
9000fac6:	4472      	add	r2, lr
9000fac8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
9000facc:	bfa8      	it	ge
9000face:	461e      	movge	r6, r3
9000fad0:	4440      	add	r0, r8
9000fad2:	4471      	add	r1, lr
9000fad4:	4463      	add	r3, ip
9000fad6:	b200      	sxth	r0, r0
9000fad8:	8027      	strh	r7, [r4, #0]
9000fada:	b212      	sxth	r2, r2
9000fadc:	8066      	strh	r6, [r4, #2]
9000fade:	b209      	sxth	r1, r1
9000fae0:	b21b      	sxth	r3, r3
9000fae2:	4290      	cmp	r0, r2
9000fae4:	bfac      	ite	ge
9000fae6:	ebc7 0200 	rsbge	r2, r7, r0
9000faea:	ebc7 0202 	rsblt	r2, r7, r2
9000faee:	4299      	cmp	r1, r3
9000faf0:	bfac      	ite	ge
9000faf2:	ebc6 0301 	rsbge	r3, r6, r1
9000faf6:	ebc6 0303 	rsblt	r3, r6, r3
9000fafa:	80a2      	strh	r2, [r4, #4]
9000fafc:	80e3      	strh	r3, [r4, #6]
9000fafe:	e7d4      	b.n	9000faaa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9000fb00:	4620      	mov	r0, r4
9000fb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000fb06 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
9000fb06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
9000fb0a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9000fb0e:	b383      	cbz	r3, 9000fb72 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9000fb10:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000fb12:	b374      	cbz	r4, 9000fb72 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9000fb14:	f9b1 5000 	ldrsh.w	r5, [r1]
9000fb18:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
9000fb1c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
9000fb20:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
9000fb24:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9000fb28:	b303      	cbz	r3, 9000fb6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
9000fb2a:	4668      	mov	r0, sp
9000fb2c:	1d21      	adds	r1, r4, #4
9000fb2e:	f8ad 5000 	strh.w	r5, [sp]
9000fb32:	f8ad 6002 	strh.w	r6, [sp, #2]
9000fb36:	f8ad 7004 	strh.w	r7, [sp, #4]
9000fb3a:	f8ad 8006 	strh.w	r8, [sp, #6]
9000fb3e:	f7ff ff43 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
9000fb42:	4668      	mov	r0, sp
9000fb44:	f7ff ff83 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
9000fb48:	b980      	cbnz	r0, 9000fb6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
9000fb4a:	f8bd 3000 	ldrh.w	r3, [sp]
9000fb4e:	4669      	mov	r1, sp
9000fb50:	88a2      	ldrh	r2, [r4, #4]
9000fb52:	4620      	mov	r0, r4
9000fb54:	1a9b      	subs	r3, r3, r2
9000fb56:	88e2      	ldrh	r2, [r4, #6]
9000fb58:	f8ad 3000 	strh.w	r3, [sp]
9000fb5c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9000fb60:	1a9b      	subs	r3, r3, r2
9000fb62:	f8ad 3002 	strh.w	r3, [sp, #2]
9000fb66:	6823      	ldr	r3, [r4, #0]
9000fb68:	689b      	ldr	r3, [r3, #8]
9000fb6a:	4798      	blx	r3
9000fb6c:	69a4      	ldr	r4, [r4, #24]
9000fb6e:	2c00      	cmp	r4, #0
9000fb70:	d1d8      	bne.n	9000fb24 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
9000fb72:	b002      	add	sp, #8
9000fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000fb78 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
9000fb78:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000fb7a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9000fb7e:	460d      	mov	r5, r1
9000fb80:	4616      	mov	r6, r2
9000fb82:	b323      	cbz	r3, 9000fbce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
9000fb84:	6a84      	ldr	r4, [r0, #40]	; 0x28
9000fb86:	b314      	cbz	r4, 9000fbce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
9000fb88:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9000fb8c:	b1eb      	cbz	r3, 9000fbca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9000fb8e:	6828      	ldr	r0, [r5, #0]
9000fb90:	466b      	mov	r3, sp
9000fb92:	6869      	ldr	r1, [r5, #4]
9000fb94:	c303      	stmia	r3!, {r0, r1}
9000fb96:	4668      	mov	r0, sp
9000fb98:	1d21      	adds	r1, r4, #4
9000fb9a:	f7ff ff15 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
9000fb9e:	4668      	mov	r0, sp
9000fba0:	f7ff ff55 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
9000fba4:	b988      	cbnz	r0, 9000fbca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9000fba6:	f8bd 3000 	ldrh.w	r3, [sp]
9000fbaa:	4669      	mov	r1, sp
9000fbac:	88a2      	ldrh	r2, [r4, #4]
9000fbae:	4620      	mov	r0, r4
9000fbb0:	1a9b      	subs	r3, r3, r2
9000fbb2:	88e2      	ldrh	r2, [r4, #6]
9000fbb4:	f8ad 3000 	strh.w	r3, [sp]
9000fbb8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9000fbbc:	1a9b      	subs	r3, r3, r2
9000fbbe:	4632      	mov	r2, r6
9000fbc0:	f8ad 3002 	strh.w	r3, [sp, #2]
9000fbc4:	6823      	ldr	r3, [r4, #0]
9000fbc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000fbc8:	4798      	blx	r3
9000fbca:	69a4      	ldr	r4, [r4, #24]
9000fbcc:	e7db      	b.n	9000fb86 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
9000fbce:	b002      	add	sp, #8
9000fbd0:	bd70      	pop	{r4, r5, r6, pc}

9000fbd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
9000fbd2:	6803      	ldr	r3, [r0, #0]
9000fbd4:	b513      	push	{r0, r1, r4, lr}
9000fbd6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
9000fbda:	2300      	movs	r3, #0
9000fbdc:	e9cd 3300 	strd	r3, r3, [sp]
9000fbe0:	466b      	mov	r3, sp
9000fbe2:	47a0      	blx	r4
9000fbe4:	b002      	add	sp, #8
9000fbe6:	bd10      	pop	{r4, pc}

9000fbe8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
9000fbe8:	2301      	movs	r3, #1
9000fbea:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
9000fbee:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9000fbf2:	4770      	bx	lr

9000fbf4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
9000fbf4:	2301      	movs	r3, #1
9000fbf6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
9000fbfa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9000fbfe:	4770      	bx	lr

9000fc00 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
9000fc00:	6843      	ldr	r3, [r0, #4]
9000fc02:	2201      	movs	r2, #1
9000fc04:	725a      	strb	r2, [r3, #9]
9000fc06:	6840      	ldr	r0, [r0, #4]
9000fc08:	6803      	ldr	r3, [r0, #0]
9000fc0a:	691b      	ldr	r3, [r3, #16]
9000fc0c:	4718      	bx	r3

9000fc0e <_ZN8touchgfx3HAL8flushDMAEv>:
9000fc0e:	6840      	ldr	r0, [r0, #4]
9000fc10:	6803      	ldr	r3, [r0, #0]
9000fc12:	689b      	ldr	r3, [r3, #8]
9000fc14:	4718      	bx	r3

9000fc16 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
9000fc16:	b530      	push	{r4, r5, lr}
9000fc18:	b08b      	sub	sp, #44	; 0x2c
9000fc1a:	6804      	ldr	r4, [r0, #0]
9000fc1c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9000fc20:	9509      	str	r5, [sp, #36]	; 0x24
9000fc22:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
9000fc26:	9508      	str	r5, [sp, #32]
9000fc28:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
9000fc2c:	9507      	str	r5, [sp, #28]
9000fc2e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
9000fc32:	9506      	str	r5, [sp, #24]
9000fc34:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
9000fc38:	9505      	str	r5, [sp, #20]
9000fc3a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
9000fc3e:	9504      	str	r5, [sp, #16]
9000fc40:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
9000fc44:	9503      	str	r5, [sp, #12]
9000fc46:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
9000fc4a:	9502      	str	r5, [sp, #8]
9000fc4c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
9000fc50:	e9cd 3500 	strd	r3, r5, [sp]
9000fc54:	4613      	mov	r3, r2
9000fc56:	6be4      	ldr	r4, [r4, #60]	; 0x3c
9000fc58:	2200      	movs	r2, #0
9000fc5a:	47a0      	blx	r4
9000fc5c:	b00b      	add	sp, #44	; 0x2c
9000fc5e:	bd30      	pop	{r4, r5, pc}

9000fc60 <_ZN8touchgfx3HAL10beginFrameEv>:
9000fc60:	4b04      	ldr	r3, [pc, #16]	; (9000fc74 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
9000fc62:	781b      	ldrb	r3, [r3, #0]
9000fc64:	b123      	cbz	r3, 9000fc70 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
9000fc66:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
9000fc6a:	f080 0001 	eor.w	r0, r0, #1
9000fc6e:	4770      	bx	lr
9000fc70:	2001      	movs	r0, #1
9000fc72:	4770      	bx	lr
9000fc74:	240264e2 	.word	0x240264e2

9000fc78 <_ZN8touchgfx3HAL8endFrameEv>:
9000fc78:	b510      	push	{r4, lr}
9000fc7a:	4604      	mov	r4, r0
9000fc7c:	6840      	ldr	r0, [r0, #4]
9000fc7e:	6803      	ldr	r3, [r0, #0]
9000fc80:	689b      	ldr	r3, [r3, #8]
9000fc82:	4798      	blx	r3
9000fc84:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
9000fc88:	b113      	cbz	r3, 9000fc90 <_ZN8touchgfx3HAL8endFrameEv+0x18>
9000fc8a:	2301      	movs	r3, #1
9000fc8c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
9000fc90:	bd10      	pop	{r4, pc}

9000fc92 <_ZN8touchgfx3HAL10initializeEv>:
9000fc92:	b510      	push	{r4, lr}
9000fc94:	4604      	mov	r4, r0
9000fc96:	f7f1 fe59 	bl	9000194c <_ZN8touchgfx10OSWrappers10initializeEv>
9000fc9a:	f7f0 fc31 	bl	90000500 <_ZN8touchgfx4GPIO4initEv>
9000fc9e:	6860      	ldr	r0, [r4, #4]
9000fca0:	6803      	ldr	r3, [r0, #0]
9000fca2:	68db      	ldr	r3, [r3, #12]
9000fca4:	4798      	blx	r3
9000fca6:	68e0      	ldr	r0, [r4, #12]
9000fca8:	6803      	ldr	r3, [r0, #0]
9000fcaa:	689b      	ldr	r3, [r3, #8]
9000fcac:	4798      	blx	r3
9000fcae:	6823      	ldr	r3, [r4, #0]
9000fcb0:	4620      	mov	r0, r4
9000fcb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000fcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000fcb8:	4718      	bx	r3
	...

9000fcbc <_ZN8touchgfx3HAL4tickEv>:
9000fcbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
9000fcbe:	6803      	ldr	r3, [r0, #0]
9000fcc0:	4604      	mov	r4, r0
9000fcc2:	4d5b      	ldr	r5, [pc, #364]	; (9000fe30 <_ZN8touchgfx3HAL4tickEv+0x174>)
9000fcc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000fcc8:	4798      	blx	r3
9000fcca:	2800      	cmp	r0, #0
9000fccc:	f000 8095 	beq.w	9000fdfa <_ZN8touchgfx3HAL4tickEv+0x13e>
9000fcd0:	2001      	movs	r0, #1
9000fcd2:	2600      	movs	r6, #0
9000fcd4:	f7f0 fc3e 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
9000fcd8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
9000fcdc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
9000fce0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9000fce4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
9000fce8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
9000fcec:	b133      	cbz	r3, 9000fcfc <_ZN8touchgfx3HAL4tickEv+0x40>
9000fcee:	6823      	ldr	r3, [r4, #0]
9000fcf0:	4620      	mov	r0, r4
9000fcf2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
9000fcf6:	4798      	blx	r3
9000fcf8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
9000fcfc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
9000fd00:	2601      	movs	r6, #1
9000fd02:	6862      	ldr	r2, [r4, #4]
9000fd04:	f083 0301 	eor.w	r3, r3, #1
9000fd08:	702e      	strb	r6, [r5, #0]
9000fd0a:	7253      	strb	r3, [r2, #9]
9000fd0c:	f002 ffc6 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
9000fd10:	6803      	ldr	r3, [r0, #0]
9000fd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000fd14:	4798      	blx	r3
9000fd16:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
9000fd1a:	b90b      	cbnz	r3, 9000fd20 <_ZN8touchgfx3HAL4tickEv+0x64>
9000fd1c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
9000fd20:	f002 ffbc 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
9000fd24:	6803      	ldr	r3, [r0, #0]
9000fd26:	695b      	ldr	r3, [r3, #20]
9000fd28:	4798      	blx	r3
9000fd2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000fd2c:	6803      	ldr	r3, [r0, #0]
9000fd2e:	691b      	ldr	r3, [r3, #16]
9000fd30:	4798      	blx	r3
9000fd32:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
9000fd36:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
9000fd3a:	3b01      	subs	r3, #1
9000fd3c:	b2db      	uxtb	r3, r3
9000fd3e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9000fd42:	b10a      	cbz	r2, 9000fd48 <_ZN8touchgfx3HAL4tickEv+0x8c>
9000fd44:	2b00      	cmp	r3, #0
9000fd46:	d1eb      	bne.n	9000fd20 <_ZN8touchgfx3HAL4tickEv+0x64>
9000fd48:	4a3a      	ldr	r2, [pc, #232]	; (9000fe34 <_ZN8touchgfx3HAL4tickEv+0x178>)
9000fd4a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
9000fd4e:	7813      	ldrb	r3, [r2, #0]
9000fd50:	3301      	adds	r3, #1
9000fd52:	b25b      	sxtb	r3, r3
9000fd54:	4299      	cmp	r1, r3
9000fd56:	7013      	strb	r3, [r2, #0]
9000fd58:	dc10      	bgt.n	9000fd7c <_ZN8touchgfx3HAL4tickEv+0xc0>
9000fd5a:	2300      	movs	r3, #0
9000fd5c:	68e0      	ldr	r0, [r4, #12]
9000fd5e:	a902      	add	r1, sp, #8
9000fd60:	7013      	strb	r3, [r2, #0]
9000fd62:	aa03      	add	r2, sp, #12
9000fd64:	6803      	ldr	r3, [r0, #0]
9000fd66:	68db      	ldr	r3, [r3, #12]
9000fd68:	4798      	blx	r3
9000fd6a:	6823      	ldr	r3, [r4, #0]
9000fd6c:	2800      	cmp	r0, #0
9000fd6e:	d050      	beq.n	9000fe12 <_ZN8touchgfx3HAL4tickEv+0x156>
9000fd70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
9000fd74:	4620      	mov	r0, r4
9000fd76:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
9000fd7a:	4798      	blx	r3
9000fd7c:	2300      	movs	r3, #0
9000fd7e:	6960      	ldr	r0, [r4, #20]
9000fd80:	f88d 3007 	strb.w	r3, [sp, #7]
9000fd84:	b158      	cbz	r0, 9000fd9e <_ZN8touchgfx3HAL4tickEv+0xe2>
9000fd86:	6803      	ldr	r3, [r0, #0]
9000fd88:	f10d 0107 	add.w	r1, sp, #7
9000fd8c:	68db      	ldr	r3, [r3, #12]
9000fd8e:	4798      	blx	r3
9000fd90:	b128      	cbz	r0, 9000fd9e <_ZN8touchgfx3HAL4tickEv+0xe2>
9000fd92:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000fd94:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000fd98:	6803      	ldr	r3, [r0, #0]
9000fd9a:	68db      	ldr	r3, [r3, #12]
9000fd9c:	4798      	blx	r3
9000fd9e:	f104 001c 	add.w	r0, r4, #28
9000fda2:	f011 f959 	bl	90021058 <_ZN8touchgfx8Gestures4tickEv>
9000fda6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
9000fdaa:	b30b      	cbz	r3, 9000fdf0 <_ZN8touchgfx3HAL4tickEv+0x134>
9000fdac:	6920      	ldr	r0, [r4, #16]
9000fdae:	6803      	ldr	r3, [r0, #0]
9000fdb0:	691b      	ldr	r3, [r3, #16]
9000fdb2:	4798      	blx	r3
9000fdb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
9000fdb6:	4606      	mov	r6, r0
9000fdb8:	b903      	cbnz	r3, 9000fdbc <_ZN8touchgfx3HAL4tickEv+0x100>
9000fdba:	6720      	str	r0, [r4, #112]	; 0x70
9000fdbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
9000fdbe:	4a1e      	ldr	r2, [pc, #120]	; (9000fe38 <_ZN8touchgfx3HAL4tickEv+0x17c>)
9000fdc0:	1af3      	subs	r3, r6, r3
9000fdc2:	4293      	cmp	r3, r2
9000fdc4:	d914      	bls.n	9000fdf0 <_ZN8touchgfx3HAL4tickEv+0x134>
9000fdc6:	6920      	ldr	r0, [r4, #16]
9000fdc8:	6803      	ldr	r3, [r0, #0]
9000fdca:	699b      	ldr	r3, [r3, #24]
9000fdcc:	4798      	blx	r3
9000fdce:	6f23      	ldr	r3, [r4, #112]	; 0x70
9000fdd0:	2264      	movs	r2, #100	; 0x64
9000fdd2:	1af3      	subs	r3, r6, r3
9000fdd4:	fbb3 f3f2 	udiv	r3, r3, r2
9000fdd8:	fbb0 f0f3 	udiv	r0, r0, r3
9000fddc:	2800      	cmp	r0, #0
9000fdde:	dc1d      	bgt.n	9000fe1c <_ZN8touchgfx3HAL4tickEv+0x160>
9000fde0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
9000fde4:	6920      	ldr	r0, [r4, #16]
9000fde6:	2100      	movs	r1, #0
9000fde8:	6803      	ldr	r3, [r0, #0]
9000fdea:	69db      	ldr	r3, [r3, #28]
9000fdec:	4798      	blx	r3
9000fdee:	6726      	str	r6, [r4, #112]	; 0x70
9000fdf0:	f002 ff54 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
9000fdf4:	6803      	ldr	r3, [r0, #0]
9000fdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000fdf8:	4798      	blx	r3
9000fdfa:	6823      	ldr	r3, [r4, #0]
9000fdfc:	4620      	mov	r0, r4
9000fdfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9000fe02:	4798      	blx	r3
9000fe04:	2001      	movs	r0, #1
9000fe06:	f7f0 fbd9 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
9000fe0a:	2300      	movs	r3, #0
9000fe0c:	702b      	strb	r3, [r5, #0]
9000fe0e:	b004      	add	sp, #16
9000fe10:	bd70      	pop	{r4, r5, r6, pc}
9000fe12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
9000fe16:	4620      	mov	r0, r4
9000fe18:	4798      	blx	r3
9000fe1a:	e7af      	b.n	9000fd7c <_ZN8touchgfx3HAL4tickEv+0xc0>
9000fe1c:	2863      	cmp	r0, #99	; 0x63
9000fe1e:	bfcb      	itete	gt
9000fe20:	2300      	movgt	r3, #0
9000fe22:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
9000fe26:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
9000fe2a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
9000fe2e:	e7d9      	b.n	9000fde4 <_ZN8touchgfx3HAL4tickEv+0x128>
9000fe30:	240264e8 	.word	0x240264e8
9000fe34:	240264e9 	.word	0x240264e9
9000fe38:	05f5e100 	.word	0x05f5e100

9000fe3c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
9000fe3c:	f7f1 bdb8 	b.w	900019b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9000fe40 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
9000fe40:	6581      	str	r1, [r0, #88]	; 0x58
9000fe42:	301c      	adds	r0, #28
9000fe44:	f011 b906 	b.w	90021054 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

9000fe48 <_ZN8touchgfx3HAL5touchEll>:
9000fe48:	b530      	push	{r4, r5, lr}
9000fe4a:	b087      	sub	sp, #28
9000fe4c:	4604      	mov	r4, r0
9000fe4e:	a804      	add	r0, sp, #16
9000fe50:	e9cd 1204 	strd	r1, r2, [sp, #16]
9000fe54:	f002 fd20 	bl	90012898 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
9000fe58:	9b04      	ldr	r3, [sp, #16]
9000fe5a:	a906      	add	r1, sp, #24
9000fe5c:	a803      	add	r0, sp, #12
9000fe5e:	f8ad 300c 	strh.w	r3, [sp, #12]
9000fe62:	9b05      	ldr	r3, [sp, #20]
9000fe64:	f821 3d0a 	strh.w	r3, [r1, #-10]!
9000fe68:	f002 fd68 	bl	9001293c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
9000fe6c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
9000fe70:	f104 001c 	add.w	r0, r4, #28
9000fe74:	f8bd 200c 	ldrh.w	r2, [sp, #12]
9000fe78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
9000fe7c:	b189      	cbz	r1, 9000fea2 <_ZN8touchgfx3HAL5touchEll+0x5a>
9000fe7e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
9000fe82:	9300      	str	r3, [sp, #0]
9000fe84:	4613      	mov	r3, r2
9000fe86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9000fe8a:	462a      	mov	r2, r5
9000fe8c:	f011 f8f2 	bl	90021074 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
9000fe90:	b128      	cbz	r0, 9000fe9e <_ZN8touchgfx3HAL5touchEll+0x56>
9000fe92:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9000fe96:	65e3      	str	r3, [r4, #92]	; 0x5c
9000fe98:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
9000fe9c:	6623      	str	r3, [r4, #96]	; 0x60
9000fe9e:	b007      	add	sp, #28
9000fea0:	bd30      	pop	{r4, r5, pc}
9000fea2:	f011 f927 	bl	900210f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9000fea6:	2301      	movs	r3, #1
9000fea8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
9000feac:	e7f1      	b.n	9000fe92 <_ZN8touchgfx3HAL5touchEll+0x4a>

9000feae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
9000feae:	b510      	push	{r4, lr}
9000feb0:	2b00      	cmp	r3, #0
9000feb2:	d046      	beq.n	9000ff42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9000feb4:	ea81 0002 	eor.w	r0, r1, r2
9000feb8:	07c4      	lsls	r4, r0, #31
9000feba:	d508      	bpl.n	9000fece <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
9000febc:	440b      	add	r3, r1
9000febe:	3a01      	subs	r2, #1
9000fec0:	428b      	cmp	r3, r1
9000fec2:	d93e      	bls.n	9000ff42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9000fec4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
9000fec8:	f801 0b01 	strb.w	r0, [r1], #1
9000fecc:	e7f8      	b.n	9000fec0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
9000fece:	07d0      	lsls	r0, r2, #31
9000fed0:	bf42      	ittt	mi
9000fed2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
9000fed6:	f103 33ff 	addmi.w	r3, r3, #4294967295
9000feda:	f801 0b01 	strbmi.w	r0, [r1], #1
9000fede:	2b01      	cmp	r3, #1
9000fee0:	d911      	bls.n	9000ff06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9000fee2:	ea81 0402 	eor.w	r4, r1, r2
9000fee6:	4610      	mov	r0, r2
9000fee8:	07a4      	lsls	r4, r4, #30
9000feea:	d022      	beq.n	9000ff32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
9000feec:	f023 0401 	bic.w	r4, r3, #1
9000fef0:	440c      	add	r4, r1
9000fef2:	428c      	cmp	r4, r1
9000fef4:	4602      	mov	r2, r0
9000fef6:	d904      	bls.n	9000ff02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
9000fef8:	8812      	ldrh	r2, [r2, #0]
9000fefa:	3002      	adds	r0, #2
9000fefc:	f821 2b02 	strh.w	r2, [r1], #2
9000ff00:	e7f7      	b.n	9000fef2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9000ff02:	f003 0301 	and.w	r3, r3, #1
9000ff06:	f023 0003 	bic.w	r0, r3, #3
9000ff0a:	4408      	add	r0, r1
9000ff0c:	4288      	cmp	r0, r1
9000ff0e:	4614      	mov	r4, r2
9000ff10:	d904      	bls.n	9000ff1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
9000ff12:	6824      	ldr	r4, [r4, #0]
9000ff14:	3204      	adds	r2, #4
9000ff16:	f841 4b04 	str.w	r4, [r1], #4
9000ff1a:	e7f7      	b.n	9000ff0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
9000ff1c:	f003 0303 	and.w	r3, r3, #3
9000ff20:	3a01      	subs	r2, #1
9000ff22:	440b      	add	r3, r1
9000ff24:	428b      	cmp	r3, r1
9000ff26:	d90c      	bls.n	9000ff42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9000ff28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
9000ff2c:	f801 0b01 	strb.w	r0, [r1], #1
9000ff30:	e7f8      	b.n	9000ff24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
9000ff32:	0790      	lsls	r0, r2, #30
9000ff34:	d0e7      	beq.n	9000ff06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9000ff36:	f832 0b02 	ldrh.w	r0, [r2], #2
9000ff3a:	3b02      	subs	r3, #2
9000ff3c:	f821 0b02 	strh.w	r0, [r1], #2
9000ff40:	e7e1      	b.n	9000ff06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9000ff42:	2001      	movs	r0, #1
9000ff44:	bd10      	pop	{r4, pc}

9000ff46 <_ZN8touchgfx3HAL7noTouchEv>:
9000ff46:	b510      	push	{r4, lr}
9000ff48:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
9000ff4c:	4604      	mov	r4, r0
9000ff4e:	b153      	cbz	r3, 9000ff66 <_ZN8touchgfx3HAL7noTouchEv+0x20>
9000ff50:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
9000ff54:	2101      	movs	r1, #1
9000ff56:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
9000ff5a:	301c      	adds	r0, #28
9000ff5c:	f011 f8ca 	bl	900210f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9000ff60:	2300      	movs	r3, #0
9000ff62:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
9000ff66:	bd10      	pop	{r4, pc}

9000ff68 <_ZN8touchgfx8Drawable5setXYEss>:
9000ff68:	b570      	push	{r4, r5, r6, lr}
9000ff6a:	6803      	ldr	r3, [r0, #0]
9000ff6c:	4604      	mov	r4, r0
9000ff6e:	4615      	mov	r5, r2
9000ff70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ff72:	4798      	blx	r3
9000ff74:	6823      	ldr	r3, [r4, #0]
9000ff76:	4629      	mov	r1, r5
9000ff78:	4620      	mov	r0, r4
9000ff7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ff7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9000ff80:	4718      	bx	r3
	...

9000ff84 <_ZN8touchgfx3HAL3lcdEv>:
9000ff84:	4b04      	ldr	r3, [pc, #16]	; (9000ff98 <_ZN8touchgfx3HAL3lcdEv+0x14>)
9000ff86:	681b      	ldr	r3, [r3, #0]
9000ff88:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9000ff8c:	b10a      	cbz	r2, 9000ff92 <_ZN8touchgfx3HAL3lcdEv+0xe>
9000ff8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000ff90:	b900      	cbnz	r0, 9000ff94 <_ZN8touchgfx3HAL3lcdEv+0x10>
9000ff92:	6898      	ldr	r0, [r3, #8]
9000ff94:	4770      	bx	lr
9000ff96:	bf00      	nop
9000ff98:	240264e4 	.word	0x240264e4

9000ff9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
9000ff9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000ffa0:	b085      	sub	sp, #20
9000ffa2:	4604      	mov	r4, r0
9000ffa4:	2000      	movs	r0, #0
9000ffa6:	4699      	mov	r9, r3
9000ffa8:	ad04      	add	r5, sp, #16
9000ffaa:	460f      	mov	r7, r1
9000ffac:	4690      	mov	r8, r2
9000ffae:	f845 0d04 	str.w	r0, [r5, #-4]!
9000ffb2:	69a0      	ldr	r0, [r4, #24]
9000ffb4:	6806      	ldr	r6, [r0, #0]
9000ffb6:	9501      	str	r5, [sp, #4]
9000ffb8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
9000ffbc:	9500      	str	r5, [sp, #0]
9000ffbe:	6835      	ldr	r5, [r6, #0]
9000ffc0:	47a8      	blx	r5
9000ffc2:	4d10      	ldr	r5, [pc, #64]	; (90010004 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
9000ffc4:	4606      	mov	r6, r0
9000ffc6:	f8a5 9000 	strh.w	r9, [r5]
9000ffca:	f7ff ffdb 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
9000ffce:	6803      	ldr	r3, [r0, #0]
9000ffd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ffd2:	4798      	blx	r3
9000ffd4:	b128      	cbz	r0, 9000ffe2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
9000ffd6:	2801      	cmp	r0, #1
9000ffd8:	d00b      	beq.n	9000fff2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
9000ffda:	4630      	mov	r0, r6
9000ffdc:	b005      	add	sp, #20
9000ffde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000ffe2:	882b      	ldrh	r3, [r5, #0]
9000ffe4:	fb08 7203 	mla	r2, r8, r3, r7
9000ffe8:	9b03      	ldr	r3, [sp, #12]
9000ffea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
9000ffee:	63e3      	str	r3, [r4, #60]	; 0x3c
9000fff0:	e7f3      	b.n	9000ffda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
9000fff2:	882a      	ldrh	r2, [r5, #0]
9000fff4:	9b03      	ldr	r3, [sp, #12]
9000fff6:	fb08 7202 	mla	r2, r8, r2, r7
9000fffa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9000fffe:	1a9a      	subs	r2, r3, r2
90010000:	63e2      	str	r2, [r4, #60]	; 0x3c
90010002:	e7ea      	b.n	9000ffda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90010004:	240264de 	.word	0x240264de

90010008 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90010008:	b5f0      	push	{r4, r5, r6, r7, lr}
9001000a:	b08b      	sub	sp, #44	; 0x2c
9001000c:	4617      	mov	r7, r2
9001000e:	4604      	mov	r4, r0
90010010:	460e      	mov	r6, r1
90010012:	461d      	mov	r5, r3
90010014:	f7ff ffb6 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
90010018:	6803      	ldr	r3, [r0, #0]
9001001a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001001c:	4798      	blx	r3
9001001e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90010022:	9007      	str	r0, [sp, #28]
90010024:	4631      	mov	r1, r6
90010026:	6822      	ldr	r2, [r4, #0]
90010028:	e9cd 0308 	strd	r0, r3, [sp, #32]
9001002c:	4b0c      	ldr	r3, [pc, #48]	; (90010060 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
9001002e:	4620      	mov	r0, r4
90010030:	881b      	ldrh	r3, [r3, #0]
90010032:	9306      	str	r3, [sp, #24]
90010034:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90010038:	9305      	str	r3, [sp, #20]
9001003a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
9001003e:	9304      	str	r3, [sp, #16]
90010040:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010044:	9303      	str	r3, [sp, #12]
90010046:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001004a:	9302      	str	r3, [sp, #8]
9001004c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90010050:	e9cd 5300 	strd	r5, r3, [sp]
90010054:	463b      	mov	r3, r7
90010056:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90010058:	2200      	movs	r2, #0
9001005a:	47a8      	blx	r5
9001005c:	b00b      	add	sp, #44	; 0x2c
9001005e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010060:	240264de 	.word	0x240264de

90010064 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90010064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010068:	4698      	mov	r8, r3
9001006a:	6803      	ldr	r3, [r0, #0]
9001006c:	b08b      	sub	sp, #44	; 0x2c
9001006e:	4617      	mov	r7, r2
90010070:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
90010072:	460e      	mov	r6, r1
90010074:	4b13      	ldr	r3, [pc, #76]	; (900100c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90010076:	4604      	mov	r4, r0
90010078:	f8b3 9000 	ldrh.w	r9, [r3]
9001007c:	f7ff ff82 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
90010080:	6803      	ldr	r3, [r0, #0]
90010082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010084:	4798      	blx	r3
90010086:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
9001008a:	2200      	movs	r2, #0
9001008c:	4631      	mov	r1, r6
9001008e:	e9cd 0308 	strd	r0, r3, [sp, #32]
90010092:	2302      	movs	r3, #2
90010094:	4620      	mov	r0, r4
90010096:	e9cd 9306 	strd	r9, r3, [sp, #24]
9001009a:	2301      	movs	r3, #1
9001009c:	9305      	str	r3, [sp, #20]
9001009e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
900100a2:	9304      	str	r3, [sp, #16]
900100a4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900100a8:	9303      	str	r3, [sp, #12]
900100aa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900100ae:	9302      	str	r3, [sp, #8]
900100b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900100b4:	e9cd 8300 	strd	r8, r3, [sp]
900100b8:	463b      	mov	r3, r7
900100ba:	47a8      	blx	r5
900100bc:	b00b      	add	sp, #44	; 0x2c
900100be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900100c2:	bf00      	nop
900100c4:	240264de 	.word	0x240264de

900100c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
900100c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900100cc:	4698      	mov	r8, r3
900100ce:	6803      	ldr	r3, [r0, #0]
900100d0:	b087      	sub	sp, #28
900100d2:	460e      	mov	r6, r1
900100d4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
900100d6:	4617      	mov	r7, r2
900100d8:	4b0f      	ldr	r3, [pc, #60]	; (90010118 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
900100da:	4604      	mov	r4, r0
900100dc:	f8b3 9000 	ldrh.w	r9, [r3]
900100e0:	f7ff ff50 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
900100e4:	6803      	ldr	r3, [r0, #0]
900100e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900100e8:	4798      	blx	r3
900100ea:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
900100ee:	463a      	mov	r2, r7
900100f0:	4631      	mov	r1, r6
900100f2:	f8cd 900c 	str.w	r9, [sp, #12]
900100f6:	e9cd 0304 	strd	r0, r3, [sp, #16]
900100fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900100fe:	4620      	mov	r0, r4
90010100:	9302      	str	r3, [sp, #8]
90010102:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90010106:	9301      	str	r3, [sp, #4]
90010108:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001010c:	9300      	str	r3, [sp, #0]
9001010e:	4643      	mov	r3, r8
90010110:	47a8      	blx	r5
90010112:	b007      	add	sp, #28
90010114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010118:	240264de 	.word	0x240264de

9001011c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
9001011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010120:	4604      	mov	r4, r0
90010122:	b08f      	sub	sp, #60	; 0x3c
90010124:	4610      	mov	r0, r2
90010126:	460d      	mov	r5, r1
90010128:	4691      	mov	r9, r2
9001012a:	461e      	mov	r6, r3
9001012c:	f005 f9d4 	bl	900154d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90010130:	2800      	cmp	r0, #0
90010132:	f000 809d 	beq.w	90010270 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90010136:	6823      	ldr	r3, [r4, #0]
90010138:	4620      	mov	r0, r4
9001013a:	f8df b198 	ldr.w	fp, [pc, #408]	; 900102d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
9001013e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
90010142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90010144:	4798      	blx	r3
90010146:	6823      	ldr	r3, [r4, #0]
90010148:	4620      	mov	r0, r4
9001014a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 900102d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
9001014e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010150:	4798      	blx	r3
90010152:	f8bb 3000 	ldrh.w	r3, [fp]
90010156:	4f5c      	ldr	r7, [pc, #368]	; (900102c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010158:	9301      	str	r3, [sp, #4]
9001015a:	f8ba 3000 	ldrh.w	r3, [sl]
9001015e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
90010162:	4640      	mov	r0, r8
90010164:	9302      	str	r3, [sp, #8]
90010166:	883b      	ldrh	r3, [r7, #0]
90010168:	9303      	str	r3, [sp, #12]
9001016a:	4b58      	ldr	r3, [pc, #352]	; (900102cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
9001016c:	881a      	ldrh	r2, [r3, #0]
9001016e:	9305      	str	r3, [sp, #20]
90010170:	9204      	str	r2, [sp, #16]
90010172:	f005 fa45 	bl	90015600 <_ZNK8touchgfx6Bitmap8getWidthEv>
90010176:	8038      	strh	r0, [r7, #0]
90010178:	4640      	mov	r0, r8
9001017a:	f005 fa75 	bl	90015668 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001017e:	9b05      	ldr	r3, [sp, #20]
90010180:	b280      	uxth	r0, r0
90010182:	8018      	strh	r0, [r3, #0]
90010184:	4b52      	ldr	r3, [pc, #328]	; (900102d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90010186:	781b      	ldrb	r3, [r3, #0]
90010188:	2b00      	cmp	r3, #0
9001018a:	d174      	bne.n	90010276 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
9001018c:	883b      	ldrh	r3, [r7, #0]
9001018e:	f8aa 0000 	strh.w	r0, [sl]
90010192:	f8ab 3000 	strh.w	r3, [fp]
90010196:	4648      	mov	r0, r9
90010198:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
9001019c:	f005 f99c 	bl	900154d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
900101a0:	2200      	movs	r2, #0
900101a2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
900101a6:	4611      	mov	r1, r2
900101a8:	4628      	mov	r0, r5
900101aa:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
900101ae:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
900101b2:	f7ff fed9 	bl	9000ff68 <_ZN8touchgfx8Drawable5setXYEss>
900101b6:	2301      	movs	r3, #1
900101b8:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
900101bc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
900101c0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900101c4:	2b00      	cmp	r3, #0
900101c6:	dd5c      	ble.n	90010282 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900101c8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900101cc:	2b00      	cmp	r3, #0
900101ce:	dd58      	ble.n	90010282 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900101d0:	462a      	mov	r2, r5
900101d2:	ab0a      	add	r3, sp, #40	; 0x28
900101d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
900101d8:	6851      	ldr	r1, [r2, #4]
900101da:	c303      	stmia	r3!, {r0, r1}
900101dc:	4631      	mov	r1, r6
900101de:	a80a      	add	r0, sp, #40	; 0x28
900101e0:	f7ff fbf2 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900101e4:	4b38      	ldr	r3, [pc, #224]	; (900102c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900101e6:	2100      	movs	r1, #0
900101e8:	f9b3 2000 	ldrsh.w	r2, [r3]
900101ec:	4b37      	ldr	r3, [pc, #220]	; (900102cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900101ee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900101f2:	aa0a      	add	r2, sp, #40	; 0x28
900101f4:	f9b3 3000 	ldrsh.w	r3, [r3]
900101f8:	910c      	str	r1, [sp, #48]	; 0x30
900101fa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900101fe:	ab08      	add	r3, sp, #32
90010200:	e892 0003 	ldmia.w	r2, {r0, r1}
90010204:	e883 0003 	stmia.w	r3, {r0, r1}
90010208:	4618      	mov	r0, r3
9001020a:	a90c      	add	r1, sp, #48	; 0x30
9001020c:	f7ff fbdc 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
90010210:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90010212:	2b00      	cmp	r3, #0
90010214:	d13c      	bne.n	90010290 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90010216:	2000      	movs	r0, #0
90010218:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
9001021c:	2600      	movs	r6, #0
9001021e:	696b      	ldr	r3, [r5, #20]
90010220:	a908      	add	r1, sp, #32
90010222:	682a      	ldr	r2, [r5, #0]
90010224:	4628      	mov	r0, r5
90010226:	9305      	str	r3, [sp, #20]
90010228:	616e      	str	r6, [r5, #20]
9001022a:	6892      	ldr	r2, [r2, #8]
9001022c:	4790      	blx	r2
9001022e:	9b05      	ldr	r3, [sp, #20]
90010230:	4652      	mov	r2, sl
90010232:	4649      	mov	r1, r9
90010234:	616b      	str	r3, [r5, #20]
90010236:	4628      	mov	r0, r5
90010238:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
9001023c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90010240:	f7ff fe92 	bl	9000ff68 <_ZN8touchgfx8Drawable5setXYEss>
90010244:	9a01      	ldr	r2, [sp, #4]
90010246:	4b23      	ldr	r3, [pc, #140]	; (900102d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90010248:	4620      	mov	r0, r4
9001024a:	801a      	strh	r2, [r3, #0]
9001024c:	9a02      	ldr	r2, [sp, #8]
9001024e:	4b22      	ldr	r3, [pc, #136]	; (900102d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90010250:	801a      	strh	r2, [r3, #0]
90010252:	9a03      	ldr	r2, [sp, #12]
90010254:	4b1c      	ldr	r3, [pc, #112]	; (900102c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90010256:	801a      	strh	r2, [r3, #0]
90010258:	4b1c      	ldr	r3, [pc, #112]	; (900102cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
9001025a:	9a04      	ldr	r2, [sp, #16]
9001025c:	801a      	strh	r2, [r3, #0]
9001025e:	6823      	ldr	r3, [r4, #0]
90010260:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90010264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90010266:	4798      	blx	r3
90010268:	6823      	ldr	r3, [r4, #0]
9001026a:	4620      	mov	r0, r4
9001026c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001026e:	4798      	blx	r3
90010270:	b00f      	add	sp, #60	; 0x3c
90010272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010276:	883b      	ldrh	r3, [r7, #0]
90010278:	f8ab 0000 	strh.w	r0, [fp]
9001027c:	f8aa 3000 	strh.w	r3, [sl]
90010280:	e789      	b.n	90010196 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
90010282:	462a      	mov	r2, r5
90010284:	ab0a      	add	r3, sp, #40	; 0x28
90010286:	f852 0f04 	ldr.w	r0, [r2, #4]!
9001028a:	6851      	ldr	r1, [r2, #4]
9001028c:	c303      	stmia	r3!, {r0, r1}
9001028e:	e7a9      	b.n	900101e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90010290:	a807      	add	r0, sp, #28
90010292:	f005 fb25 	bl	900158e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
90010296:	4606      	mov	r6, r0
90010298:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9001029a:	6803      	ldr	r3, [r0, #0]
9001029c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001029e:	4798      	blx	r3
900102a0:	4286      	cmp	r6, r0
900102a2:	d1b8      	bne.n	90010216 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
900102a4:	f7ff fe6e 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
900102a8:	6803      	ldr	r3, [r0, #0]
900102aa:	4606      	mov	r6, r0
900102ac:	a807      	add	r0, sp, #28
900102ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900102b0:	9305      	str	r3, [sp, #20]
900102b2:	f005 fb15 	bl	900158e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
900102b6:	9b05      	ldr	r3, [sp, #20]
900102b8:	4601      	mov	r1, r0
900102ba:	4630      	mov	r0, r6
900102bc:	4798      	blx	r3
900102be:	f080 0001 	eor.w	r0, r0, #1
900102c2:	b2c0      	uxtb	r0, r0
900102c4:	e7a8      	b.n	90010218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
900102c6:	bf00      	nop
900102c8:	240264d8 	.word	0x240264d8
900102cc:	240264da 	.word	0x240264da
900102d0:	240264dc 	.word	0x240264dc
900102d4:	240264de 	.word	0x240264de
900102d8:	240264e0 	.word	0x240264e0

900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
900102dc:	4b07      	ldr	r3, [pc, #28]	; (900102fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
900102de:	b510      	push	{r4, lr}
900102e0:	781b      	ldrb	r3, [r3, #0]
900102e2:	4604      	mov	r4, r0
900102e4:	b13b      	cbz	r3, 900102f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900102e6:	6803      	ldr	r3, [r0, #0]
900102e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900102ea:	4798      	blx	r3
900102ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900102ee:	4283      	cmp	r3, r0
900102f0:	d101      	bne.n	900102f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900102f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
900102f4:	bd10      	pop	{r4, pc}
900102f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
900102f8:	e7fc      	b.n	900102f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
900102fa:	bf00      	nop
900102fc:	240264e2 	.word	0x240264e2

90010300 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
90010300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010304:	461d      	mov	r5, r3
90010306:	b08a      	sub	sp, #40	; 0x28
90010308:	f44f 6380 	mov.w	r3, #1024	; 0x400
9001030c:	4690      	mov	r8, r2
9001030e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
90010312:	2400      	movs	r4, #0
90010314:	4607      	mov	r7, r0
90010316:	fb06 8505 	mla	r5, r6, r5, r8
9001031a:	9404      	str	r4, [sp, #16]
9001031c:	f88d 4020 	strb.w	r4, [sp, #32]
90010320:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010324:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90010328:	f8ad 3018 	strh.w	r3, [sp, #24]
9001032c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90010330:	f8ad 301a 	strh.w	r3, [sp, #26]
90010334:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010338:	f8ad 301c 	strh.w	r3, [sp, #28]
9001033c:	f7ff ffce 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010340:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90010344:	6878      	ldr	r0, [r7, #4]
90010346:	f8ad 601e 	strh.w	r6, [sp, #30]
9001034a:	a901      	add	r1, sp, #4
9001034c:	9505      	str	r5, [sp, #20]
9001034e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90010352:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90010356:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
9001035a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
9001035e:	6803      	ldr	r3, [r0, #0]
90010360:	685b      	ldr	r3, [r3, #4]
90010362:	4798      	blx	r3
90010364:	b00a      	add	sp, #40	; 0x28
90010366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001036a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
9001036a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001036e:	b08b      	sub	sp, #44	; 0x2c
90010370:	2400      	movs	r4, #0
90010372:	4691      	mov	r9, r2
90010374:	461d      	mov	r5, r3
90010376:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
9001037a:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001037e:	4688      	mov	r8, r1
90010380:	4607      	mov	r7, r0
90010382:	9404      	str	r4, [sp, #16]
90010384:	fb06 9505 	mla	r5, r6, r5, r9
90010388:	e9cd 3401 	strd	r3, r4, [sp, #4]
9001038c:	f7ff ffa6 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010390:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010394:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90010398:	6878      	ldr	r0, [r7, #4]
9001039a:	f8ad 3018 	strh.w	r3, [sp, #24]
9001039e:	a901      	add	r1, sp, #4
900103a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900103a4:	9505      	str	r5, [sp, #20]
900103a6:	f8ad 301a 	strh.w	r3, [sp, #26]
900103aa:	f8ad 401c 	strh.w	r4, [sp, #28]
900103ae:	f8ad 601e 	strh.w	r6, [sp, #30]
900103b2:	f8cd 8010 	str.w	r8, [sp, #16]
900103b6:	f8ad 4020 	strh.w	r4, [sp, #32]
900103ba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900103be:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900103c2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900103c6:	6803      	ldr	r3, [r0, #0]
900103c8:	685b      	ldr	r3, [r3, #4]
900103ca:	4798      	blx	r3
900103cc:	b00b      	add	sp, #44	; 0x2c
900103ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

900103d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
900103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900103d8:	b08a      	sub	sp, #40	; 0x28
900103da:	4698      	mov	r8, r3
900103dc:	2300      	movs	r3, #0
900103de:	4606      	mov	r6, r0
900103e0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
900103e4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
900103e8:	2d0b      	cmp	r5, #11
900103ea:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
900103ee:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
900103f2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
900103f6:	9304      	str	r3, [sp, #16]
900103f8:	d137      	bne.n	9001046a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
900103fa:	2380      	movs	r3, #128	; 0x80
900103fc:	f88d 0020 	strb.w	r0, [sp, #32]
90010400:	4630      	mov	r0, r6
90010402:	9203      	str	r2, [sp, #12]
90010404:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010408:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001040c:	f8ad 3018 	strh.w	r3, [sp, #24]
90010410:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90010414:	f8ad 301a 	strh.w	r3, [sp, #26]
90010418:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
9001041c:	f8ad 301c 	strh.w	r3, [sp, #28]
90010420:	f7ff ff5c 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010424:	2c0b      	cmp	r4, #11
90010426:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
9001042a:	f8ad 701e 	strh.w	r7, [sp, #30]
9001042e:	bf94      	ite	ls
90010430:	4b19      	ldrls	r3, [pc, #100]	; (90010498 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
90010432:	2100      	movhi	r1, #0
90010434:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90010438:	bf98      	it	ls
9001043a:	5d19      	ldrbls	r1, [r3, r4]
9001043c:	fb02 8307 	mla	r3, r2, r7, r8
90010440:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90010444:	10c9      	asrs	r1, r1, #3
90010446:	fb01 0003 	mla	r0, r1, r3, r0
9001044a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
9001044e:	a901      	add	r1, sp, #4
90010450:	9005      	str	r0, [sp, #20]
90010452:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90010456:	2300      	movs	r3, #0
90010458:	6870      	ldr	r0, [r6, #4]
9001045a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001045e:	6803      	ldr	r3, [r0, #0]
90010460:	685b      	ldr	r3, [r3, #4]
90010462:	4798      	blx	r3
90010464:	b00a      	add	sp, #40	; 0x28
90010466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001046a:	2d02      	cmp	r5, #2
9001046c:	d109      	bne.n	90010482 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
9001046e:	28ff      	cmp	r0, #255	; 0xff
90010470:	d105      	bne.n	9001047e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
90010472:	f1bc 0f00 	cmp.w	ip, #0
90010476:	bf14      	ite	ne
90010478:	2340      	movne	r3, #64	; 0x40
9001047a:	2320      	moveq	r3, #32
9001047c:	e7be      	b.n	900103fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001047e:	2340      	movs	r3, #64	; 0x40
90010480:	e7bc      	b.n	900103fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010482:	28ff      	cmp	r0, #255	; 0xff
90010484:	d105      	bne.n	90010492 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90010486:	f1bc 0f00 	cmp.w	ip, #0
9001048a:	bf14      	ite	ne
9001048c:	2304      	movne	r3, #4
9001048e:	2301      	moveq	r3, #1
90010490:	e7b4      	b.n	900103fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010492:	2304      	movs	r3, #4
90010494:	e7b2      	b.n	900103fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90010496:	bf00      	nop
90010498:	90024ec8 	.word	0x90024ec8

9001049c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
9001049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900104a0:	b08b      	sub	sp, #44	; 0x2c
900104a2:	461d      	mov	r5, r3
900104a4:	2400      	movs	r4, #0
900104a6:	4688      	mov	r8, r1
900104a8:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
900104ac:	4693      	mov	fp, r2
900104ae:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
900104b2:	4607      	mov	r7, r0
900104b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900104b8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
900104bc:	9404      	str	r4, [sp, #16]
900104be:	bf14      	ite	ne
900104c0:	2308      	movne	r3, #8
900104c2:	2302      	moveq	r3, #2
900104c4:	fb05 b50a 	mla	r5, r5, sl, fp
900104c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
900104cc:	f7ff ff06 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900104d0:	2e0b      	cmp	r6, #11
900104d2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900104d6:	a901      	add	r1, sp, #4
900104d8:	bf98      	it	ls
900104da:	4b13      	ldrls	r3, [pc, #76]	; (90010528 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
900104dc:	f8ad a01e 	strh.w	sl, [sp, #30]
900104e0:	bf98      	it	ls
900104e2:	5d9c      	ldrbls	r4, [r3, r6]
900104e4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900104e8:	10e4      	asrs	r4, r4, #3
900104ea:	f8cd 8010 	str.w	r8, [sp, #16]
900104ee:	f8ad 3018 	strh.w	r3, [sp, #24]
900104f2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900104f6:	fb04 0405 	mla	r4, r4, r5, r0
900104fa:	6878      	ldr	r0, [r7, #4]
900104fc:	f8ad 301a 	strh.w	r3, [sp, #26]
90010500:	2300      	movs	r3, #0
90010502:	9405      	str	r4, [sp, #20]
90010504:	f8ad 301c 	strh.w	r3, [sp, #28]
90010508:	f88d 9020 	strb.w	r9, [sp, #32]
9001050c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90010510:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90010514:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90010518:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
9001051c:	6803      	ldr	r3, [r0, #0]
9001051e:	685b      	ldr	r3, [r3, #4]
90010520:	4798      	blx	r3
90010522:	b00b      	add	sp, #44	; 0x2c
90010524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010528:	90024ec8 	.word	0x90024ec8

9001052c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
9001052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010530:	461e      	mov	r6, r3
90010532:	4b0a      	ldr	r3, [pc, #40]	; (9001055c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90010534:	460f      	mov	r7, r1
90010536:	4690      	mov	r8, r2
90010538:	881d      	ldrh	r5, [r3, #0]
9001053a:	f7ff fd23 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
9001053e:	6803      	ldr	r3, [r0, #0]
90010540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010542:	4798      	blx	r3
90010544:	280b      	cmp	r0, #11
90010546:	bf96      	itet	ls
90010548:	4b05      	ldrls	r3, [pc, #20]	; (90010560 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
9001054a:	2400      	movhi	r4, #0
9001054c:	5c1c      	ldrbls	r4, [r3, r0]
9001054e:	fb08 7005 	mla	r0, r8, r5, r7
90010552:	10e4      	asrs	r4, r4, #3
90010554:	fb04 6000 	mla	r0, r4, r0, r6
90010558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001055c:	240264de 	.word	0x240264de
90010560:	90024ec8 	.word	0x90024ec8

90010564 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90010564:	b5f0      	push	{r4, r5, r6, r7, lr}
90010566:	b08b      	sub	sp, #44	; 0x2c
90010568:	461f      	mov	r7, r3
9001056a:	4604      	mov	r4, r0
9001056c:	4616      	mov	r6, r2
9001056e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90010572:	2500      	movs	r5, #0
90010574:	e9cd 3101 	strd	r3, r1, [sp, #4]
90010578:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001057c:	9504      	str	r5, [sp, #16]
9001057e:	f8ad 3018 	strh.w	r3, [sp, #24]
90010582:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90010586:	f8ad 301a 	strh.w	r3, [sp, #26]
9001058a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001058e:	f8ad 301c 	strh.w	r3, [sp, #28]
90010592:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90010596:	f88d 3020 	strb.w	r3, [sp, #32]
9001059a:	f7ff fe9f 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001059e:	463a      	mov	r2, r7
900105a0:	4631      	mov	r1, r6
900105a2:	4603      	mov	r3, r0
900105a4:	4620      	mov	r0, r4
900105a6:	f7ff ffc1 	bl	9001052c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
900105aa:	4b0e      	ldr	r3, [pc, #56]	; (900105e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
900105ac:	9005      	str	r0, [sp, #20]
900105ae:	881b      	ldrh	r3, [r3, #0]
900105b0:	f8ad 301e 	strh.w	r3, [sp, #30]
900105b4:	f7ff fce6 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
900105b8:	6803      	ldr	r3, [r0, #0]
900105ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900105bc:	4798      	blx	r3
900105be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900105c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
900105c4:	a901      	add	r1, sp, #4
900105c6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
900105ca:	9304      	str	r3, [sp, #16]
900105cc:	6860      	ldr	r0, [r4, #4]
900105ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
900105d2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
900105d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
900105da:	6803      	ldr	r3, [r0, #0]
900105dc:	685b      	ldr	r3, [r3, #4]
900105de:	4798      	blx	r3
900105e0:	b00b      	add	sp, #44	; 0x2c
900105e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
900105e4:	240264de 	.word	0x240264de

900105e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
900105e8:	b5f0      	push	{r4, r5, r6, r7, lr}
900105ea:	b08d      	sub	sp, #52	; 0x34
900105ec:	2501      	movs	r5, #1
900105ee:	4604      	mov	r4, r0
900105f0:	466b      	mov	r3, sp
900105f2:	9503      	str	r5, [sp, #12]
900105f4:	e883 0006 	stmia.w	r3, {r1, r2}
900105f8:	2300      	movs	r3, #0
900105fa:	f8bd 6000 	ldrh.w	r6, [sp]
900105fe:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90010602:	9306      	str	r3, [sp, #24]
90010604:	6803      	ldr	r3, [r0, #0]
90010606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010608:	4798      	blx	r3
9001060a:	463a      	mov	r2, r7
9001060c:	4631      	mov	r1, r6
9001060e:	4603      	mov	r3, r0
90010610:	4620      	mov	r0, r4
90010612:	f7ff ff8b 	bl	9001052c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90010616:	6c63      	ldr	r3, [r4, #68]	; 0x44
90010618:	9004      	str	r0, [sp, #16]
9001061a:	9307      	str	r3, [sp, #28]
9001061c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90010620:	f8ad 3020 	strh.w	r3, [sp, #32]
90010624:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90010628:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001062c:	4b0e      	ldr	r3, [pc, #56]	; (90010668 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
9001062e:	881b      	ldrh	r3, [r3, #0]
90010630:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90010634:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90010638:	f7ff fca4 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
9001063c:	6803      	ldr	r3, [r0, #0]
9001063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010640:	4798      	blx	r3
90010642:	23ff      	movs	r3, #255	; 0xff
90010644:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90010648:	a903      	add	r1, sp, #12
9001064a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
9001064e:	6860      	ldr	r0, [r4, #4]
90010650:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90010654:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90010658:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
9001065c:	6803      	ldr	r3, [r0, #0]
9001065e:	685b      	ldr	r3, [r3, #4]
90010660:	4798      	blx	r3
90010662:	6c60      	ldr	r0, [r4, #68]	; 0x44
90010664:	b00d      	add	sp, #52	; 0x34
90010666:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010668:	240264de 	.word	0x240264de

9001066c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
9001066c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010670:	b08c      	sub	sp, #48	; 0x30
90010672:	461e      	mov	r6, r3
90010674:	2300      	movs	r3, #0
90010676:	4604      	mov	r4, r0
90010678:	466d      	mov	r5, sp
9001067a:	9306      	str	r3, [sp, #24]
9001067c:	6803      	ldr	r3, [r0, #0]
9001067e:	e885 0006 	stmia.w	r5, {r1, r2}
90010682:	2501      	movs	r5, #1
90010684:	f8bd 7000 	ldrh.w	r7, [sp]
90010688:	f8bd 8002 	ldrh.w	r8, [sp, #2]
9001068c:	9503      	str	r5, [sp, #12]
9001068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010690:	4798      	blx	r3
90010692:	4642      	mov	r2, r8
90010694:	4639      	mov	r1, r7
90010696:	4603      	mov	r3, r0
90010698:	4620      	mov	r0, r4
9001069a:	f7ff ff47 	bl	9001052c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
9001069e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
900106a2:	9004      	str	r0, [sp, #16]
900106a4:	f8ad 3020 	strh.w	r3, [sp, #32]
900106a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
900106ac:	9607      	str	r6, [sp, #28]
900106ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900106b2:	4b10      	ldr	r3, [pc, #64]	; (900106f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
900106b4:	881b      	ldrh	r3, [r3, #0]
900106b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900106ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
900106bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
900106c0:	f7ff fc60 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
900106c4:	6803      	ldr	r3, [r0, #0]
900106c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900106c8:	4798      	blx	r3
900106ca:	23ff      	movs	r3, #255	; 0xff
900106cc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
900106d0:	a903      	add	r1, sp, #12
900106d2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
900106d6:	6860      	ldr	r0, [r4, #4]
900106d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
900106dc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900106e0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
900106e4:	6803      	ldr	r3, [r0, #0]
900106e6:	685b      	ldr	r3, [r3, #4]
900106e8:	4798      	blx	r3
900106ea:	4630      	mov	r0, r6
900106ec:	b00c      	add	sp, #48	; 0x30
900106ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900106f2:	bf00      	nop
900106f4:	240264de 	.word	0x240264de

900106f8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
900106f8:	b5f0      	push	{r4, r5, r6, r7, lr}
900106fa:	b085      	sub	sp, #20
900106fc:	4605      	mov	r5, r0
900106fe:	ac02      	add	r4, sp, #8
90010700:	e884 0006 	stmia.w	r4, {r1, r2}
90010704:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90010708:	f8bd 700a 	ldrh.w	r7, [sp, #10]
9001070c:	f7ff fde6 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90010710:	4631      	mov	r1, r6
90010712:	4603      	mov	r3, r0
90010714:	463a      	mov	r2, r7
90010716:	4628      	mov	r0, r5
90010718:	f7ff ff08 	bl	9001052c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
9001071c:	4a05      	ldr	r2, [pc, #20]	; (90010734 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
9001071e:	682b      	ldr	r3, [r5, #0]
90010720:	8812      	ldrh	r2, [r2, #0]
90010722:	9200      	str	r2, [sp, #0]
90010724:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90010726:	4603      	mov	r3, r0
90010728:	4628      	mov	r0, r5
9001072a:	e894 0006 	ldmia.w	r4, {r1, r2}
9001072e:	47b0      	blx	r6
90010730:	b005      	add	sp, #20
90010732:	bdf0      	pop	{r4, r5, r6, r7, pc}
90010734:	240264de 	.word	0x240264de

90010738 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90010738:	b570      	push	{r4, r5, r6, lr}
9001073a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
9001073e:	4604      	mov	r4, r0
90010740:	b19b      	cbz	r3, 9001076a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90010742:	2002      	movs	r0, #2
90010744:	f7ef ff6e 	bl	90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90010748:	2300      	movs	r3, #0
9001074a:	4620      	mov	r0, r4
9001074c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90010750:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90010754:	6823      	ldr	r3, [r4, #0]
90010756:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
9001075a:	f7ff fdbf 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001075e:	4601      	mov	r1, r0
90010760:	4620      	mov	r0, r4
90010762:	462b      	mov	r3, r5
90010764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010768:	4718      	bx	r3
9001076a:	bd70      	pop	{r4, r5, r6, pc}

9001076c <_ZN8touchgfx3HAL12setMCUActiveEb>:
9001076c:	b570      	push	{r4, r5, r6, lr}
9001076e:	4605      	mov	r5, r0
90010770:	460c      	mov	r4, r1
90010772:	2003      	movs	r0, #3
90010774:	b149      	cbz	r1, 9001078a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90010776:	f7ef feed 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
9001077a:	6928      	ldr	r0, [r5, #16]
9001077c:	b168      	cbz	r0, 9001079a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001077e:	6803      	ldr	r3, [r0, #0]
90010780:	2101      	movs	r1, #1
90010782:	695b      	ldr	r3, [r3, #20]
90010784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010788:	4718      	bx	r3
9001078a:	f7ef ff17 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
9001078e:	6928      	ldr	r0, [r5, #16]
90010790:	b118      	cbz	r0, 9001079a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90010792:	6803      	ldr	r3, [r0, #0]
90010794:	4621      	mov	r1, r4
90010796:	695b      	ldr	r3, [r3, #20]
90010798:	e7f4      	b.n	90010784 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
9001079a:	bd70      	pop	{r4, r5, r6, pc}

9001079c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
9001079c:	b538      	push	{r3, r4, r5, lr}
9001079e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
900107a2:	4604      	mov	r4, r0
900107a4:	460d      	mov	r5, r1
900107a6:	428b      	cmp	r3, r1
900107a8:	d006      	beq.n	900107b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
900107aa:	6803      	ldr	r3, [r0, #0]
900107ac:	b929      	cbnz	r1, 900107ba <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
900107ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
900107b2:	4798      	blx	r3
900107b4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
900107b8:	bd38      	pop	{r3, r4, r5, pc}
900107ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
900107be:	e7f8      	b.n	900107b2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

900107c0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
900107c0:	4b0d      	ldr	r3, [pc, #52]	; (900107f8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
900107c2:	b510      	push	{r4, lr}
900107c4:	781b      	ldrb	r3, [r3, #0]
900107c6:	4604      	mov	r4, r0
900107c8:	b95b      	cbnz	r3, 900107e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900107ca:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
900107ce:	2b02      	cmp	r3, #2
900107d0:	d007      	beq.n	900107e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900107d2:	6840      	ldr	r0, [r0, #4]
900107d4:	f000 f900 	bl	900109d8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
900107d8:	b118      	cbz	r0, 900107e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900107da:	6862      	ldr	r2, [r4, #4]
900107dc:	7a53      	ldrb	r3, [r2, #9]
900107de:	2b00      	cmp	r3, #0
900107e0:	d0fc      	beq.n	900107dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
900107e2:	f7f1 f8dd 	bl	900019a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900107e6:	4620      	mov	r0, r4
900107e8:	2100      	movs	r1, #0
900107ea:	f7ff ffd7 	bl	9001079c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900107ee:	4620      	mov	r0, r4
900107f0:	f7ff fd74 	bl	900102dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900107f4:	bd10      	pop	{r4, pc}
900107f6:	bf00      	nop
900107f8:	240264e2 	.word	0x240264e2

900107fc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
900107fc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90010800:	1a13      	subs	r3, r2, r0
90010802:	4258      	negs	r0, r3
90010804:	4158      	adcs	r0, r3
90010806:	4770      	bx	lr

90010808 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90010808:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
9001080c:	1a9b      	subs	r3, r3, r2
9001080e:	2b00      	cmp	r3, #0
90010810:	bfdc      	itt	le
90010812:	6882      	ldrle	r2, [r0, #8]
90010814:	189b      	addle	r3, r3, r2
90010816:	2b01      	cmp	r3, #1
90010818:	bfcc      	ite	gt
9001081a:	2000      	movgt	r0, #0
9001081c:	2001      	movle	r0, #1
9001081e:	4770      	bx	lr

90010820 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90010820:	6902      	ldr	r2, [r0, #16]
90010822:	6843      	ldr	r3, [r0, #4]
90010824:	2024      	movs	r0, #36	; 0x24
90010826:	fb00 3002 	mla	r0, r0, r2, r3
9001082a:	4770      	bx	lr

9001082c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
9001082c:	6803      	ldr	r3, [r0, #0]
9001082e:	691b      	ldr	r3, [r3, #16]
90010830:	4718      	bx	r3

90010832 <_ZN8touchgfx13DMA_Interface7executeEv>:
90010832:	2301      	movs	r3, #1
90010834:	b570      	push	{r4, r5, r6, lr}
90010836:	7203      	strb	r3, [r0, #8]
90010838:	4604      	mov	r4, r0
9001083a:	6840      	ldr	r0, [r0, #4]
9001083c:	6803      	ldr	r3, [r0, #0]
9001083e:	699b      	ldr	r3, [r3, #24]
90010840:	4798      	blx	r3
90010842:	6803      	ldr	r3, [r0, #0]
90010844:	4605      	mov	r5, r0
90010846:	2b40      	cmp	r3, #64	; 0x40
90010848:	d00c      	beq.n	90010864 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001084a:	d810      	bhi.n	9001086e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
9001084c:	2b04      	cmp	r3, #4
9001084e:	d01d      	beq.n	9001088c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90010850:	d804      	bhi.n	9001085c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
90010852:	2b01      	cmp	r3, #1
90010854:	d006      	beq.n	90010864 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010856:	2b02      	cmp	r3, #2
90010858:	d02c      	beq.n	900108b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
9001085a:	bd70      	pop	{r4, r5, r6, pc}
9001085c:	2b08      	cmp	r3, #8
9001085e:	d01d      	beq.n	9001089c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90010860:	2b20      	cmp	r3, #32
90010862:	d1fa      	bne.n	9001085a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90010864:	6823      	ldr	r3, [r4, #0]
90010866:	4620      	mov	r0, r4
90010868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001086a:	4798      	blx	r3
9001086c:	e013      	b.n	90010896 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
9001086e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90010872:	d0f7      	beq.n	90010864 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010874:	d804      	bhi.n	90010880 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90010876:	2b80      	cmp	r3, #128	; 0x80
90010878:	d0f4      	beq.n	90010864 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001087a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9001087e:	e7f0      	b.n	90010862 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90010880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90010884:	d0ee      	beq.n	90010864 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90010886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9001088a:	e7e5      	b.n	90010858 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
9001088c:	6823      	ldr	r3, [r4, #0]
9001088e:	7f01      	ldrb	r1, [r0, #28]
90010890:	4620      	mov	r0, r4
90010892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010894:	4798      	blx	r3
90010896:	6823      	ldr	r3, [r4, #0]
90010898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001089a:	e006      	b.n	900108aa <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
9001089c:	6823      	ldr	r3, [r4, #0]
9001089e:	7f01      	ldrb	r1, [r0, #28]
900108a0:	4620      	mov	r0, r4
900108a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900108a4:	4798      	blx	r3
900108a6:	6823      	ldr	r3, [r4, #0]
900108a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900108aa:	4629      	mov	r1, r5
900108ac:	4620      	mov	r0, r4
900108ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900108b2:	4718      	bx	r3
900108b4:	6823      	ldr	r3, [r4, #0]
900108b6:	4620      	mov	r0, r4
900108b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900108ba:	4798      	blx	r3
900108bc:	e7f3      	b.n	900108a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

900108be <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
900108be:	4770      	bx	lr

900108c0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
900108c0:	4770      	bx	lr

900108c2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
900108c2:	4770      	bx	lr

900108c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
900108c4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
900108c8:	b510      	push	{r4, lr}
900108ca:	1ad2      	subs	r2, r2, r3
900108cc:	2a00      	cmp	r2, #0
900108ce:	bfdc      	itt	le
900108d0:	6884      	ldrle	r4, [r0, #8]
900108d2:	1912      	addle	r2, r2, r4
900108d4:	2a01      	cmp	r2, #1
900108d6:	dd16      	ble.n	90010906 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
900108d8:	6842      	ldr	r2, [r0, #4]
900108da:	2424      	movs	r4, #36	; 0x24
900108dc:	fb04 2303 	mla	r3, r4, r3, r2
900108e0:	f101 0220 	add.w	r2, r1, #32
900108e4:	f851 4b04 	ldr.w	r4, [r1], #4
900108e8:	4291      	cmp	r1, r2
900108ea:	f843 4b04 	str.w	r4, [r3], #4
900108ee:	d1f9      	bne.n	900108e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
900108f0:	780a      	ldrb	r2, [r1, #0]
900108f2:	701a      	strb	r2, [r3, #0]
900108f4:	68c3      	ldr	r3, [r0, #12]
900108f6:	6882      	ldr	r2, [r0, #8]
900108f8:	f3bf 8f5b 	dmb	ish
900108fc:	3301      	adds	r3, #1
900108fe:	429a      	cmp	r2, r3
90010900:	bfd8      	it	le
90010902:	1a9b      	suble	r3, r3, r2
90010904:	60c3      	str	r3, [r0, #12]
90010906:	bd10      	pop	{r4, pc}

90010908 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90010908:	6903      	ldr	r3, [r0, #16]
9001090a:	6882      	ldr	r2, [r0, #8]
9001090c:	f3bf 8f5b 	dmb	ish
90010910:	3301      	adds	r3, #1
90010912:	429a      	cmp	r2, r3
90010914:	bfd8      	it	le
90010916:	1a9b      	suble	r3, r3, r2
90010918:	6103      	str	r3, [r0, #16]
9001091a:	4770      	bx	lr

9001091c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
9001091c:	b570      	push	{r4, r5, r6, lr}
9001091e:	4604      	mov	r4, r0
90010920:	460e      	mov	r6, r1
90010922:	6860      	ldr	r0, [r4, #4]
90010924:	6803      	ldr	r3, [r0, #0]
90010926:	685b      	ldr	r3, [r3, #4]
90010928:	4798      	blx	r3
9001092a:	2800      	cmp	r0, #0
9001092c:	d1f9      	bne.n	90010922 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
9001092e:	4d0d      	ldr	r5, [pc, #52]	; (90010964 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90010930:	6828      	ldr	r0, [r5, #0]
90010932:	6803      	ldr	r3, [r0, #0]
90010934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010936:	4798      	blx	r3
90010938:	f7f1 f840 	bl	900019bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
9001093c:	6828      	ldr	r0, [r5, #0]
9001093e:	2101      	movs	r1, #1
90010940:	f7ff ff2c 	bl	9001079c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90010944:	6860      	ldr	r0, [r4, #4]
90010946:	4631      	mov	r1, r6
90010948:	6803      	ldr	r3, [r0, #0]
9001094a:	689b      	ldr	r3, [r3, #8]
9001094c:	4798      	blx	r3
9001094e:	6823      	ldr	r3, [r4, #0]
90010950:	4620      	mov	r0, r4
90010952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010954:	4798      	blx	r3
90010956:	6828      	ldr	r0, [r5, #0]
90010958:	6803      	ldr	r3, [r0, #0]
9001095a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001095e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90010960:	4718      	bx	r3
90010962:	bf00      	nop
90010964:	240264e4 	.word	0x240264e4

90010968 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90010968:	b508      	push	{r3, lr}
9001096a:	f7f1 f819 	bl	900019a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
9001096e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90010972:	f7f1 b81d 	b.w	900019b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90010976 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90010976:	b510      	push	{r4, lr}
90010978:	4604      	mov	r4, r0
9001097a:	2114      	movs	r1, #20
9001097c:	f010 fc21 	bl	900211c2 <_ZdlPvj>
90010980:	4620      	mov	r0, r4
90010982:	bd10      	pop	{r4, pc}

90010984 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90010984:	b570      	push	{r4, r5, r6, lr}
90010986:	4604      	mov	r4, r0
90010988:	6840      	ldr	r0, [r0, #4]
9001098a:	6803      	ldr	r3, [r0, #0]
9001098c:	681b      	ldr	r3, [r3, #0]
9001098e:	4798      	blx	r3
90010990:	4605      	mov	r5, r0
90010992:	b930      	cbnz	r0, 900109a2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90010994:	7a23      	ldrb	r3, [r4, #8]
90010996:	b123      	cbz	r3, 900109a2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90010998:	6860      	ldr	r0, [r4, #4]
9001099a:	6803      	ldr	r3, [r0, #0]
9001099c:	695b      	ldr	r3, [r3, #20]
9001099e:	4798      	blx	r3
900109a0:	7225      	strb	r5, [r4, #8]
900109a2:	6860      	ldr	r0, [r4, #4]
900109a4:	6803      	ldr	r3, [r0, #0]
900109a6:	681b      	ldr	r3, [r3, #0]
900109a8:	4798      	blx	r3
900109aa:	b928      	cbnz	r0, 900109b8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
900109ac:	6823      	ldr	r3, [r4, #0]
900109ae:	4620      	mov	r0, r4
900109b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900109b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900109b6:	4718      	bx	r3
900109b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900109bc:	f7f1 b806 	b.w	900019cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

900109c0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
900109c0:	b510      	push	{r4, lr}
900109c2:	6082      	str	r2, [r0, #8]
900109c4:	2200      	movs	r2, #0
900109c6:	4c03      	ldr	r4, [pc, #12]	; (900109d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
900109c8:	e9c0 2203 	strd	r2, r2, [r0, #12]
900109cc:	e9c0 4100 	strd	r4, r1, [r0]
900109d0:	bd10      	pop	{r4, pc}
900109d2:	bf00      	nop
900109d4:	90024edc 	.word	0x90024edc

900109d8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
900109d8:	6840      	ldr	r0, [r0, #4]
900109da:	6803      	ldr	r3, [r0, #0]
900109dc:	681b      	ldr	r3, [r3, #0]
900109de:	4718      	bx	r3

900109e0 <_ZN8touchgfx8TextArea8setWidthEs>:
900109e0:	b530      	push	{r4, r5, lr}
900109e2:	b085      	sub	sp, #20
900109e4:	6803      	ldr	r3, [r0, #0]
900109e6:	4604      	mov	r4, r0
900109e8:	8101      	strh	r1, [r0, #8]
900109ea:	466d      	mov	r5, sp
900109ec:	4601      	mov	r1, r0
900109ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900109f2:	343c      	adds	r4, #60	; 0x3c
900109f4:	4628      	mov	r0, r5
900109f6:	4798      	blx	r3
900109f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900109fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90010a00:	b005      	add	sp, #20
90010a02:	bd30      	pop	{r4, r5, pc}

90010a04 <_ZN8touchgfx8TextArea9setHeightEs>:
90010a04:	b530      	push	{r4, r5, lr}
90010a06:	b085      	sub	sp, #20
90010a08:	6803      	ldr	r3, [r0, #0]
90010a0a:	4604      	mov	r4, r0
90010a0c:	8141      	strh	r1, [r0, #10]
90010a0e:	466d      	mov	r5, sp
90010a10:	4601      	mov	r1, r0
90010a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90010a16:	343c      	adds	r4, #60	; 0x3c
90010a18:	4628      	mov	r0, r5
90010a1a:	4798      	blx	r3
90010a1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90010a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90010a24:	b005      	add	sp, #20
90010a26:	bd30      	pop	{r4, r5, pc}

90010a28 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
90010a28:	2200      	movs	r2, #0
90010a2a:	8002      	strh	r2, [r0, #0]
90010a2c:	8042      	strh	r2, [r0, #2]
90010a2e:	8082      	strh	r2, [r0, #4]
90010a30:	80c2      	strh	r2, [r0, #6]
90010a32:	4770      	bx	lr

90010a34 <_ZN8touchgfx8TextArea8setAlphaEh>:
90010a34:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
90010a38:	4770      	bx	lr
	...

90010a3c <_ZN8touchgfx8TextArea12setBaselineYEs>:
90010a3c:	b570      	push	{r4, r5, r6, lr}
90010a3e:	6803      	ldr	r3, [r0, #0]
90010a40:	4604      	mov	r4, r0
90010a42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90010a44:	460d      	mov	r5, r1
90010a46:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90010a48:	4b08      	ldr	r3, [pc, #32]	; (90010a6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
90010a4a:	681b      	ldr	r3, [r3, #0]
90010a4c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90010a50:	4b07      	ldr	r3, [pc, #28]	; (90010a70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
90010a52:	681b      	ldr	r3, [r3, #0]
90010a54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90010a58:	6803      	ldr	r3, [r0, #0]
90010a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010a5c:	4798      	blx	r3
90010a5e:	1a29      	subs	r1, r5, r0
90010a60:	4633      	mov	r3, r6
90010a62:	4620      	mov	r0, r4
90010a64:	b209      	sxth	r1, r1
90010a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010a6a:	4718      	bx	r3
90010a6c:	24026534 	.word	0x24026534
90010a70:	2402653c 	.word	0x2402653c

90010a74 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
90010a74:	b570      	push	{r4, r5, r6, lr}
90010a76:	6803      	ldr	r3, [r0, #0]
90010a78:	4604      	mov	r4, r0
90010a7a:	4615      	mov	r5, r2
90010a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010a7e:	4798      	blx	r3
90010a80:	6823      	ldr	r3, [r4, #0]
90010a82:	4629      	mov	r1, r5
90010a84:	4620      	mov	r0, r4
90010a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90010a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010a8c:	4718      	bx	r3

90010a8e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90010a8e:	2000      	movs	r0, #0
90010a90:	4770      	bx	lr

90010a92 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
90010a92:	2000      	movs	r0, #0
90010a94:	4770      	bx	lr
	...

90010a98 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90010a98:	4b07      	ldr	r3, [pc, #28]	; (90010ab8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
90010a9a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90010a9c:	881b      	ldrh	r3, [r3, #0]
90010a9e:	4293      	cmp	r3, r2
90010aa0:	bf81      	itttt	hi
90010aa2:	4b06      	ldrhi	r3, [pc, #24]	; (90010abc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90010aa4:	681b      	ldrhi	r3, [r3, #0]
90010aa6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
90010aaa:	7858      	ldrbhi	r0, [r3, #1]
90010aac:	bf8c      	ite	hi
90010aae:	f000 0003 	andhi.w	r0, r0, #3
90010ab2:	2000      	movls	r0, #0
90010ab4:	4770      	bx	lr
90010ab6:	bf00      	nop
90010ab8:	24026538 	.word	0x24026538
90010abc:	24026534 	.word	0x24026534

90010ac0 <_ZN8touchgfx8TextAreaD1Ev>:
90010ac0:	4770      	bx	lr
	...

90010ac4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90010ac4:	4b11      	ldr	r3, [pc, #68]	; (90010b0c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90010ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010aca:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90010acc:	4604      	mov	r4, r0
90010ace:	881b      	ldrh	r3, [r3, #0]
90010ad0:	428b      	cmp	r3, r1
90010ad2:	d918      	bls.n	90010b06 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90010ad4:	6803      	ldr	r3, [r0, #0]
90010ad6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90010ad8:	4b0d      	ldr	r3, [pc, #52]	; (90010b10 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90010ada:	6818      	ldr	r0, [r3, #0]
90010adc:	f7f4 fcc0 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90010ae0:	6823      	ldr	r3, [r4, #0]
90010ae2:	4606      	mov	r6, r0
90010ae4:	4620      	mov	r0, r4
90010ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010ae8:	4798      	blx	r3
90010aea:	6823      	ldr	r3, [r4, #0]
90010aec:	4607      	mov	r7, r0
90010aee:	4620      	mov	r0, r4
90010af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90010af4:	4798      	blx	r3
90010af6:	463a      	mov	r2, r7
90010af8:	4603      	mov	r3, r0
90010afa:	4631      	mov	r1, r6
90010afc:	4620      	mov	r0, r4
90010afe:	46ac      	mov	ip, r5
90010b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90010b04:	4760      	bx	ip
90010b06:	2000      	movs	r0, #0
90010b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010b0c:	24026538 	.word	0x24026538
90010b10:	24026540 	.word	0x24026540

90010b14 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90010b14:	4b18      	ldr	r3, [pc, #96]	; (90010b78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90010b16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90010b1a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90010b1c:	4604      	mov	r4, r0
90010b1e:	881b      	ldrh	r3, [r3, #0]
90010b20:	428b      	cmp	r3, r1
90010b22:	d926      	bls.n	90010b72 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90010b24:	4b15      	ldr	r3, [pc, #84]	; (90010b7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90010b26:	681b      	ldr	r3, [r3, #0]
90010b28:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90010b2c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90010b30:	4b13      	ldr	r3, [pc, #76]	; (90010b80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90010b32:	7855      	ldrb	r5, [r2, #1]
90010b34:	681b      	ldr	r3, [r3, #0]
90010b36:	f3c5 0581 	ubfx	r5, r5, #2, #2
90010b3a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90010b3e:	6833      	ldr	r3, [r6, #0]
90010b40:	69df      	ldr	r7, [r3, #28]
90010b42:	4b10      	ldr	r3, [pc, #64]	; (90010b84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90010b44:	6818      	ldr	r0, [r3, #0]
90010b46:	f7f4 fc8b 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90010b4a:	6823      	ldr	r3, [r4, #0]
90010b4c:	4680      	mov	r8, r0
90010b4e:	4620      	mov	r0, r4
90010b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010b52:	4798      	blx	r3
90010b54:	6823      	ldr	r3, [r4, #0]
90010b56:	4681      	mov	r9, r0
90010b58:	4620      	mov	r0, r4
90010b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90010b5e:	4798      	blx	r3
90010b60:	464b      	mov	r3, r9
90010b62:	9000      	str	r0, [sp, #0]
90010b64:	4642      	mov	r2, r8
90010b66:	4629      	mov	r1, r5
90010b68:	4630      	mov	r0, r6
90010b6a:	47b8      	blx	r7
90010b6c:	b003      	add	sp, #12
90010b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90010b72:	2000      	movs	r0, #0
90010b74:	e7fa      	b.n	90010b6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90010b76:	bf00      	nop
90010b78:	24026538 	.word	0x24026538
90010b7c:	24026534 	.word	0x24026534
90010b80:	2402653c 	.word	0x2402653c
90010b84:	24026540 	.word	0x24026540

90010b88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90010b88:	b40e      	push	{r1, r2, r3}
90010b8a:	4b30      	ldr	r3, [pc, #192]	; (90010c4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
90010b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010b90:	881a      	ldrh	r2, [r3, #0]
90010b92:	b09d      	sub	sp, #116	; 0x74
90010b94:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90010b96:	4604      	mov	r4, r0
90010b98:	429a      	cmp	r2, r3
90010b9a:	d954      	bls.n	90010c46 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
90010b9c:	aa26      	add	r2, sp, #152	; 0x98
90010b9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90010c50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90010ba2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90010c54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90010ba6:	9202      	str	r2, [sp, #8]
90010ba8:	f8d9 2000 	ldr.w	r2, [r9]
90010bac:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90010bb0:	f8d8 3000 	ldr.w	r3, [r8]
90010bb4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90010bb8:	682b      	ldr	r3, [r5, #0]
90010bba:	4628      	mov	r0, r5
90010bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010bbe:	4798      	blx	r3
90010bc0:	4606      	mov	r6, r0
90010bc2:	b207      	sxth	r7, r0
90010bc4:	a803      	add	r0, sp, #12
90010bc6:	f003 fd09 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90010bca:	682b      	ldr	r3, [r5, #0]
90010bcc:	4628      	mov	r0, r5
90010bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90010bd0:	4798      	blx	r3
90010bd2:	682b      	ldr	r3, [r5, #0]
90010bd4:	4682      	mov	sl, r0
90010bd6:	4628      	mov	r0, r5
90010bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90010bda:	4798      	blx	r3
90010bdc:	4653      	mov	r3, sl
90010bde:	9000      	str	r0, [sp, #0]
90010be0:	a803      	add	r0, sp, #12
90010be2:	9a02      	ldr	r2, [sp, #8]
90010be4:	9925      	ldr	r1, [sp, #148]	; 0x94
90010be6:	f003 fd54 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90010bea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90010bec:	f8d9 3000 	ldr.w	r3, [r9]
90010bf0:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90010bf4:	8925      	ldrh	r5, [r4, #8]
90010bf6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90010bfa:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90010bfe:	eba5 050c 	sub.w	r5, r5, ip
90010c02:	784a      	ldrb	r2, [r1, #1]
90010c04:	f8d8 3000 	ldr.w	r3, [r8]
90010c08:	b22d      	sxth	r5, r5
90010c0a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
90010c0e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90010c12:	9500      	str	r5, [sp, #0]
90010c14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90010c18:	a803      	add	r0, sp, #12
90010c1a:	f001 fbcb 	bl	900123b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90010c1e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90010c22:	b203      	sxth	r3, r0
90010c24:	18b9      	adds	r1, r7, r2
90010c26:	2900      	cmp	r1, #0
90010c28:	dd0b      	ble.n	90010c42 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90010c2a:	3b01      	subs	r3, #1
90010c2c:	fb13 f302 	smulbb	r3, r3, r2
90010c30:	fb16 3300 	smlabb	r3, r6, r0, r3
90010c34:	b21f      	sxth	r7, r3
90010c36:	4638      	mov	r0, r7
90010c38:	b01d      	add	sp, #116	; 0x74
90010c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010c3e:	b003      	add	sp, #12
90010c40:	4770      	bx	lr
90010c42:	2b00      	cmp	r3, #0
90010c44:	dcf7      	bgt.n	90010c36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90010c46:	2700      	movs	r7, #0
90010c48:	e7f5      	b.n	90010c36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90010c4a:	bf00      	nop
90010c4c:	24026538 	.word	0x24026538
90010c50:	24026534 	.word	0x24026534
90010c54:	2402653c 	.word	0x2402653c

90010c58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
90010c58:	4bbd      	ldr	r3, [pc, #756]	; (90010f50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
90010c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010c5e:	460c      	mov	r4, r1
90010c60:	881b      	ldrh	r3, [r3, #0]
90010c62:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
90010c64:	b0a9      	sub	sp, #164	; 0xa4
90010c66:	4680      	mov	r8, r0
90010c68:	428b      	cmp	r3, r1
90010c6a:	d809      	bhi.n	90010c80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
90010c6c:	2300      	movs	r3, #0
90010c6e:	f04f 32ff 	mov.w	r2, #4294967295
90010c72:	6083      	str	r3, [r0, #8]
90010c74:	e9c0 3200 	strd	r3, r2, [r0]
90010c78:	4640      	mov	r0, r8
90010c7a:	b029      	add	sp, #164	; 0xa4
90010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010c80:	4eb4      	ldr	r6, [pc, #720]	; (90010f54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
90010c82:	6833      	ldr	r3, [r6, #0]
90010c84:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90010c88:	4bb3      	ldr	r3, [pc, #716]	; (90010f58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
90010c8a:	681b      	ldr	r3, [r3, #0]
90010c8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90010c90:	4bb2      	ldr	r3, [pc, #712]	; (90010f5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90010c92:	6818      	ldr	r0, [r3, #0]
90010c94:	f7f4 fbe4 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90010c98:	682b      	ldr	r3, [r5, #0]
90010c9a:	4681      	mov	r9, r0
90010c9c:	4628      	mov	r0, r5
90010c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010ca0:	4798      	blx	r3
90010ca2:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
90010ca4:	b203      	sxth	r3, r0
90010ca6:	4682      	mov	sl, r0
90010ca8:	4407      	add	r7, r0
90010caa:	a80f      	add	r0, sp, #60	; 0x3c
90010cac:	9304      	str	r3, [sp, #16]
90010cae:	b2bb      	uxth	r3, r7
90010cb0:	9303      	str	r3, [sp, #12]
90010cb2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90010cb6:	2b00      	cmp	r3, #0
90010cb8:	f040 80a5 	bne.w	90010e06 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
90010cbc:	f003 fc8e 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90010cc0:	682b      	ldr	r3, [r5, #0]
90010cc2:	4628      	mov	r0, r5
90010cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90010cc6:	4798      	blx	r3
90010cc8:	682b      	ldr	r3, [r5, #0]
90010cca:	4606      	mov	r6, r0
90010ccc:	4628      	mov	r0, r5
90010cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90010cd0:	4798      	blx	r3
90010cd2:	6823      	ldr	r3, [r4, #0]
90010cd4:	4607      	mov	r7, r0
90010cd6:	4620      	mov	r0, r4
90010cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010cda:	4798      	blx	r3
90010cdc:	6823      	ldr	r3, [r4, #0]
90010cde:	4683      	mov	fp, r0
90010ce0:	4620      	mov	r0, r4
90010ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90010ce6:	4798      	blx	r3
90010ce8:	463b      	mov	r3, r7
90010cea:	4649      	mov	r1, r9
90010cec:	4632      	mov	r2, r6
90010cee:	2600      	movs	r6, #0
90010cf0:	e9cd b000 	strd	fp, r0, [sp]
90010cf4:	a80f      	add	r0, sp, #60	; 0x3c
90010cf6:	4637      	mov	r7, r6
90010cf8:	f003 fce0 	bl	900146bc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90010cfc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90010d00:	f8df b250 	ldr.w	fp, [pc, #592]	; 90010f54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
90010d04:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90010d08:	bf0c      	ite	eq
90010d0a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
90010d0e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
90010d12:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90010d14:	4629      	mov	r1, r5
90010d16:	f8db 3000 	ldr.w	r3, [fp]
90010d1a:	a80f      	add	r0, sp, #60	; 0x3c
90010d1c:	3701      	adds	r7, #1
90010d1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90010d22:	f647 72ff 	movw	r2, #32767	; 0x7fff
90010d26:	b2bf      	uxth	r7, r7
90010d28:	785b      	ldrb	r3, [r3, #1]
90010d2a:	f3c3 0381 	ubfx	r3, r3, #2, #2
90010d2e:	f001 f85c 	bl	90011dea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90010d32:	9b03      	ldr	r3, [sp, #12]
90010d34:	4286      	cmp	r6, r0
90010d36:	eba9 0903 	sub.w	r9, r9, r3
90010d3a:	bfb8      	it	lt
90010d3c:	4606      	movlt	r6, r0
90010d3e:	a80f      	add	r0, sp, #60	; 0x3c
90010d40:	fa0f f989 	sxth.w	r9, r9
90010d44:	b236      	sxth	r6, r6
90010d46:	f003 fc70 	bl	9001462a <_ZN8touchgfx12TextProvider11endOfStringEv>
90010d4a:	b918      	cbnz	r0, 90010d54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90010d4c:	7a2b      	ldrb	r3, [r5, #8]
90010d4e:	444b      	add	r3, r9
90010d50:	2b00      	cmp	r3, #0
90010d52:	dcde      	bgt.n	90010d12 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
90010d54:	9b03      	ldr	r3, [sp, #12]
90010d56:	4620      	mov	r0, r4
90010d58:	9a04      	ldr	r2, [sp, #16]
90010d5a:	fb13 f707 	smulbb	r7, r3, r7
90010d5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90010d60:	f895 9009 	ldrb.w	r9, [r5, #9]
90010d64:	1aff      	subs	r7, r7, r3
90010d66:	b2bf      	uxth	r7, r7
90010d68:	b23b      	sxth	r3, r7
90010d6a:	429a      	cmp	r2, r3
90010d6c:	bfa8      	it	ge
90010d6e:	4657      	movge	r7, sl
90010d70:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90010d74:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90010d78:	6823      	ldr	r3, [r4, #0]
90010d7a:	444f      	add	r7, r9
90010d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010d7e:	bf08      	it	eq
90010d80:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
90010d84:	fa1f f987 	uxth.w	r9, r7
90010d88:	bf18      	it	ne
90010d8a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
90010d8e:	4798      	blx	r3
90010d90:	2801      	cmp	r0, #1
90010d92:	fa0f f789 	sxth.w	r7, r9
90010d96:	b2b3      	uxth	r3, r6
90010d98:	f000 80e2 	beq.w	90010f60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
90010d9c:	2802      	cmp	r0, #2
90010d9e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
90010da2:	f000 80e3 	beq.w	90010f6c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90010da6:	7aea      	ldrb	r2, [r5, #11]
90010da8:	b236      	sxth	r6, r6
90010daa:	7b2d      	ldrb	r5, [r5, #12]
90010dac:	1ab6      	subs	r6, r6, r2
90010dae:	442a      	add	r2, r5
90010db0:	fa1f fa86 	uxth.w	sl, r6
90010db4:	4413      	add	r3, r2
90010db6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
90010dba:	fa0f fb8a 	sxth.w	fp, sl
90010dbe:	b29b      	uxth	r3, r3
90010dc0:	2a02      	cmp	r2, #2
90010dc2:	b21e      	sxth	r6, r3
90010dc4:	f000 80d6 	beq.w	90010f74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90010dc8:	2a03      	cmp	r2, #3
90010dca:	f000 80de 	beq.w	90010f8a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
90010dce:	2a01      	cmp	r2, #1
90010dd0:	f040 80e6 	bne.w	90010fa0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
90010dd4:	8925      	ldrh	r5, [r4, #8]
90010dd6:	4633      	mov	r3, r6
90010dd8:	463e      	mov	r6, r7
90010dda:	eba5 0909 	sub.w	r9, r5, r9
90010dde:	461f      	mov	r7, r3
90010de0:	465d      	mov	r5, fp
90010de2:	fa0f fb89 	sxth.w	fp, r9
90010de6:	4b5d      	ldr	r3, [pc, #372]	; (90010f5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90010de8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90010dea:	6818      	ldr	r0, [r3, #0]
90010dec:	f7f4 fb38 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90010df0:	f8a8 b000 	strh.w	fp, [r8]
90010df4:	f8a8 5002 	strh.w	r5, [r8, #2]
90010df8:	f8a8 6004 	strh.w	r6, [r8, #4]
90010dfc:	f8a8 7006 	strh.w	r7, [r8, #6]
90010e00:	f8c8 0008 	str.w	r0, [r8, #8]
90010e04:	e738      	b.n	90010c78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
90010e06:	f003 fbe9 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90010e0a:	682b      	ldr	r3, [r5, #0]
90010e0c:	4628      	mov	r0, r5
90010e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90010e10:	4798      	blx	r3
90010e12:	682b      	ldr	r3, [r5, #0]
90010e14:	4607      	mov	r7, r0
90010e16:	4628      	mov	r0, r5
90010e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90010e1a:	4798      	blx	r3
90010e1c:	6823      	ldr	r3, [r4, #0]
90010e1e:	4683      	mov	fp, r0
90010e20:	4620      	mov	r0, r4
90010e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90010e24:	4798      	blx	r3
90010e26:	6822      	ldr	r2, [r4, #0]
90010e28:	9005      	str	r0, [sp, #20]
90010e2a:	4620      	mov	r0, r4
90010e2c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
90010e30:	4790      	blx	r2
90010e32:	9b05      	ldr	r3, [sp, #20]
90010e34:	463a      	mov	r2, r7
90010e36:	4649      	mov	r1, r9
90010e38:	9001      	str	r0, [sp, #4]
90010e3a:	a80f      	add	r0, sp, #60	; 0x3c
90010e3c:	9300      	str	r3, [sp, #0]
90010e3e:	465b      	mov	r3, fp
90010e40:	f003 fc3c 	bl	900146bc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90010e44:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90010e48:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
90010e4c:	af0f      	add	r7, sp, #60	; 0x3c
90010e4e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90010e52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90010e56:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90010e58:	bf0a      	itet	eq
90010e5a:	464a      	moveq	r2, r9
90010e5c:	461a      	movne	r2, r3
90010e5e:	4699      	moveq	r9, r3
90010e60:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90010e64:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
90010e68:	1ad2      	subs	r2, r2, r3
90010e6a:	6833      	ldr	r3, [r6, #0]
90010e6c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
90010e70:	eb03 0341 	add.w	r3, r3, r1, lsl #1
90010e74:	7859      	ldrb	r1, [r3, #1]
90010e76:	2300      	movs	r3, #0
90010e78:	9707      	str	r7, [sp, #28]
90010e7a:	f3c1 0181 	ubfx	r1, r1, #2, #2
90010e7e:	f8ad 3018 	strh.w	r3, [sp, #24]
90010e82:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90010e86:	f88d 1020 	strb.w	r1, [sp, #32]
90010e8a:	9509      	str	r5, [sp, #36]	; 0x24
90010e8c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90010e90:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
90010e94:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90010e98:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90010e9c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90010ea0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90010ea4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90010ea8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90010eac:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90010eb0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
90010eb4:	b350      	cbz	r0, 90010f0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90010eb6:	682b      	ldr	r3, [r5, #0]
90010eb8:	4628      	mov	r0, r5
90010eba:	695b      	ldr	r3, [r3, #20]
90010ebc:	4798      	blx	r3
90010ebe:	4607      	mov	r7, r0
90010ec0:	b320      	cbz	r0, 90010f0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90010ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
90010ec4:	4639      	mov	r1, r7
90010ec6:	6803      	ldr	r3, [r0, #0]
90010ec8:	68db      	ldr	r3, [r3, #12]
90010eca:	4798      	blx	r3
90010ecc:	4606      	mov	r6, r0
90010ece:	b1e8      	cbz	r0, 90010f0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90010ed0:	7b43      	ldrb	r3, [r0, #13]
90010ed2:	7a82      	ldrb	r2, [r0, #10]
90010ed4:	005b      	lsls	r3, r3, #1
90010ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
90010eda:	4313      	orrs	r3, r2
90010edc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90010ee0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
90010ee4:	2b06      	cmp	r3, #6
90010ee6:	d111      	bne.n	90010f0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90010ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
90010eea:	4632      	mov	r2, r6
90010eec:	4639      	mov	r1, r7
90010eee:	6803      	ldr	r3, [r0, #0]
90010ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90010ef2:	4798      	blx	r3
90010ef4:	7b73      	ldrb	r3, [r6, #13]
90010ef6:	005b      	lsls	r3, r3, #1
90010ef8:	f403 7280 	and.w	r2, r3, #256	; 0x100
90010efc:	7ab3      	ldrb	r3, [r6, #10]
90010efe:	4313      	orrs	r3, r2
90010f00:	4418      	add	r0, r3
90010f02:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90010f06:	4418      	add	r0, r3
90010f08:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
90010f0c:	2600      	movs	r6, #0
90010f0e:	4637      	mov	r7, r6
90010f10:	a806      	add	r0, sp, #24
90010f12:	3701      	adds	r7, #1
90010f14:	f001 f94b 	bl	900121ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90010f18:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
90010f1c:	9b03      	ldr	r3, [sp, #12]
90010f1e:	b2bf      	uxth	r7, r7
90010f20:	4286      	cmp	r6, r0
90010f22:	eba9 0903 	sub.w	r9, r9, r3
90010f26:	f8bd 3018 	ldrh.w	r3, [sp, #24]
90010f2a:	bfb8      	it	lt
90010f2c:	4606      	movlt	r6, r0
90010f2e:	fa0f f989 	sxth.w	r9, r9
90010f32:	b236      	sxth	r6, r6
90010f34:	2b00      	cmp	r3, #0
90010f36:	f43f af0d 	beq.w	90010d54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90010f3a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
90010f3e:	2b00      	cmp	r3, #0
90010f40:	f47f af08 	bne.w	90010d54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90010f44:	7a2b      	ldrb	r3, [r5, #8]
90010f46:	444b      	add	r3, r9
90010f48:	2b00      	cmp	r3, #0
90010f4a:	dce1      	bgt.n	90010f10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
90010f4c:	e702      	b.n	90010d54 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
90010f4e:	bf00      	nop
90010f50:	24026538 	.word	0x24026538
90010f54:	24026534 	.word	0x24026534
90010f58:	2402653c 	.word	0x2402653c
90010f5c:	24026540 	.word	0x24026540
90010f60:	ebaa 0606 	sub.w	r6, sl, r6
90010f64:	2002      	movs	r0, #2
90010f66:	fb96 f6f0 	sdiv	r6, r6, r0
90010f6a:	e71c      	b.n	90010da6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90010f6c:	441e      	add	r6, r3
90010f6e:	ebaa 0606 	sub.w	r6, sl, r6
90010f72:	e718      	b.n	90010da6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90010f74:	8925      	ldrh	r5, [r4, #8]
90010f76:	1aed      	subs	r5, r5, r3
90010f78:	eba5 050a 	sub.w	r5, r5, sl
90010f7c:	fa0f fb85 	sxth.w	fp, r5
90010f80:	8965      	ldrh	r5, [r4, #10]
90010f82:	eba5 0509 	sub.w	r5, r5, r9
90010f86:	b22d      	sxth	r5, r5
90010f88:	e72d      	b.n	90010de6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90010f8a:	8965      	ldrh	r5, [r4, #10]
90010f8c:	f04f 0b00 	mov.w	fp, #0
90010f90:	1aed      	subs	r5, r5, r3
90010f92:	4633      	mov	r3, r6
90010f94:	463e      	mov	r6, r7
90010f96:	eba5 050a 	sub.w	r5, r5, sl
90010f9a:	461f      	mov	r7, r3
90010f9c:	b22d      	sxth	r5, r5
90010f9e:	e722      	b.n	90010de6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90010fa0:	2500      	movs	r5, #0
90010fa2:	e720      	b.n	90010de6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

90010fa4 <_ZN8touchgfx8TextAreaD0Ev>:
90010fa4:	b510      	push	{r4, lr}
90010fa6:	4604      	mov	r4, r0
90010fa8:	2148      	movs	r1, #72	; 0x48
90010faa:	f010 f90a 	bl	900211c2 <_ZdlPvj>
90010fae:	4620      	mov	r0, r4
90010fb0:	bd10      	pop	{r4, pc}
	...

90010fb4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90010fb4:	b513      	push	{r0, r1, r4, lr}
90010fb6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
90010fba:	4604      	mov	r4, r0
90010fbc:	b1fb      	cbz	r3, 90010ffe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90010fbe:	4b16      	ldr	r3, [pc, #88]	; (90011018 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90010fc0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90010fc2:	881b      	ldrh	r3, [r3, #0]
90010fc4:	428b      	cmp	r3, r1
90010fc6:	d91a      	bls.n	90010ffe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90010fc8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90010fcc:	2b00      	cmp	r3, #0
90010fce:	dd16      	ble.n	90010ffe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90010fd0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90010fd4:	2b00      	cmp	r3, #0
90010fd6:	dd12      	ble.n	90010ffe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90010fd8:	4b10      	ldr	r3, [pc, #64]	; (9001101c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
90010fda:	6818      	ldr	r0, [r3, #0]
90010fdc:	f7f4 fa40 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90010fe0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90010fe4:	6822      	ldr	r2, [r4, #0]
90010fe6:	2b00      	cmp	r3, #0
90010fe8:	db06      	blt.n	90010ff8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90010fea:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90010fee:	2b00      	cmp	r3, #0
90010ff0:	db02      	blt.n	90010ff8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90010ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
90010ff4:	4298      	cmp	r0, r3
90010ff6:	d004      	beq.n	90011002 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
90010ff8:	6953      	ldr	r3, [r2, #20]
90010ffa:	4620      	mov	r0, r4
90010ffc:	4798      	blx	r3
90010ffe:	b002      	add	sp, #8
90011000:	bd10      	pop	{r4, pc}
90011002:	f104 013c 	add.w	r1, r4, #60	; 0x3c
90011006:	466b      	mov	r3, sp
90011008:	6912      	ldr	r2, [r2, #16]
9001100a:	c903      	ldmia	r1, {r0, r1}
9001100c:	e883 0003 	stmia.w	r3, {r0, r1}
90011010:	4619      	mov	r1, r3
90011012:	4620      	mov	r0, r4
90011014:	4790      	blx	r2
90011016:	e7f2      	b.n	90010ffe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90011018:	24026538 	.word	0x24026538
9001101c:	24026540 	.word	0x24026540

90011020 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
90011020:	4b45      	ldr	r3, [pc, #276]	; (90011138 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
90011022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011026:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90011028:	b08e      	sub	sp, #56	; 0x38
9001102a:	881b      	ldrh	r3, [r3, #0]
9001102c:	4604      	mov	r4, r0
9001102e:	4293      	cmp	r3, r2
90011030:	d97e      	bls.n	90011130 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011032:	6808      	ldr	r0, [r1, #0]
90011034:	ab05      	add	r3, sp, #20
90011036:	6849      	ldr	r1, [r1, #4]
90011038:	4d40      	ldr	r5, [pc, #256]	; (9001113c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
9001103a:	c303      	stmia	r3!, {r0, r1}
9001103c:	4611      	mov	r1, r2
9001103e:	6828      	ldr	r0, [r5, #0]
90011040:	f7f4 fa0e 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90011044:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90011048:	2b00      	cmp	r3, #0
9001104a:	db11      	blt.n	90011070 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001104c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90011050:	2b00      	cmp	r3, #0
90011052:	db0d      	blt.n	90011070 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90011054:	6c63      	ldr	r3, [r4, #68]	; 0x44
90011056:	4298      	cmp	r0, r3
90011058:	d10a      	bne.n	90011070 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
9001105a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
9001105e:	ab09      	add	r3, sp, #36	; 0x24
90011060:	e892 0003 	ldmia.w	r2, {r0, r1}
90011064:	e883 0003 	stmia.w	r3, {r0, r1}
90011068:	4619      	mov	r1, r3
9001106a:	a805      	add	r0, sp, #20
9001106c:	f7fe fcac 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
90011070:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90011074:	2b00      	cmp	r3, #0
90011076:	dd5b      	ble.n	90011130 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011078:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
9001107c:	2b00      	cmp	r3, #0
9001107e:	dd57      	ble.n	90011130 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011080:	4f2f      	ldr	r7, [pc, #188]	; (90011140 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
90011082:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90011084:	683b      	ldr	r3, [r7, #0]
90011086:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9001108a:	4b2e      	ldr	r3, [pc, #184]	; (90011144 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
9001108c:	681b      	ldr	r3, [r3, #0]
9001108e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90011092:	2e00      	cmp	r6, #0
90011094:	d04c      	beq.n	90011130 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90011096:	6823      	ldr	r3, [r4, #0]
90011098:	4620      	mov	r0, r4
9001109a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
9001109e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900110a0:	4798      	blx	r3
900110a2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900110a4:	683b      	ldr	r3, [r7, #0]
900110a6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
900110aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
900110ae:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
900110b2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
900110b6:	785b      	ldrb	r3, [r3, #1]
900110b8:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
900110bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
900110c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
900110c2:	9609      	str	r6, [sp, #36]	; 0x24
900110c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900110c8:	4b1f      	ldr	r3, [pc, #124]	; (90011148 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
900110ca:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
900110ce:	681b      	ldr	r3, [r3, #0]
900110d0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
900110d4:	910b      	str	r1, [sp, #44]	; 0x2c
900110d6:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
900110da:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
900110de:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
900110e2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
900110e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900110ea:	b10a      	cbz	r2, 900110f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
900110ec:	6cde      	ldr	r6, [r3, #76]	; 0x4c
900110ee:	b906      	cbnz	r6, 900110f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
900110f0:	689e      	ldr	r6, [r3, #8]
900110f2:	af07      	add	r7, sp, #28
900110f4:	4621      	mov	r1, r4
900110f6:	4638      	mov	r0, r7
900110f8:	f002 feb0 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900110fc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900110fe:	6828      	ldr	r0, [r5, #0]
90011100:	f7f4 f9ae 	bl	90005460 <_ZNK8touchgfx5Texts7getTextEt>
90011104:	6823      	ldr	r3, [r4, #0]
90011106:	4605      	mov	r5, r0
90011108:	4620      	mov	r0, r4
9001110a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001110c:	4798      	blx	r3
9001110e:	6823      	ldr	r3, [r4, #0]
90011110:	4680      	mov	r8, r0
90011112:	4620      	mov	r0, r4
90011114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90011118:	4798      	blx	r3
9001111a:	ab09      	add	r3, sp, #36	; 0x24
9001111c:	9501      	str	r5, [sp, #4]
9001111e:	9300      	str	r3, [sp, #0]
90011120:	ab05      	add	r3, sp, #20
90011122:	e9cd 8002 	strd	r8, r0, [sp, #8]
90011126:	4630      	mov	r0, r6
90011128:	e897 0006 	ldmia.w	r7, {r1, r2}
9001112c:	f7f4 f948 	bl	900053c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90011130:	b00e      	add	sp, #56	; 0x38
90011132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011136:	bf00      	nop
90011138:	24026538 	.word	0x24026538
9001113c:	24026540 	.word	0x24026540
90011140:	24026534 	.word	0x24026534
90011144:	2402653c 	.word	0x2402653c
90011148:	240264e4 	.word	0x240264e4

9001114c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
9001114c:	b538      	push	{r3, r4, r5, lr}
9001114e:	4b0e      	ldr	r3, [pc, #56]	; (90011188 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
90011150:	4604      	mov	r4, r0
90011152:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90011154:	881b      	ldrh	r3, [r3, #0]
90011156:	429a      	cmp	r2, r3
90011158:	d214      	bcs.n	90011184 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
9001115a:	6803      	ldr	r3, [r0, #0]
9001115c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9001115e:	4798      	blx	r3
90011160:	6823      	ldr	r3, [r4, #0]
90011162:	4605      	mov	r5, r0
90011164:	4620      	mov	r0, r4
90011166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011168:	4798      	blx	r3
9001116a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001116e:	b22d      	sxth	r5, r5
90011170:	4601      	mov	r1, r0
90011172:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90011176:	bf06      	itte	eq
90011178:	4602      	moveq	r2, r0
9001117a:	4629      	moveq	r1, r5
9001117c:	462a      	movne	r2, r5
9001117e:	4620      	mov	r0, r4
90011180:	f7fe fa86 	bl	9000f690 <_ZN8touchgfx8Drawable14setWidthHeightEss>
90011184:	bd38      	pop	{r3, r4, r5, pc}
90011186:	bf00      	nop
90011188:	24026538 	.word	0x24026538

9001118c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
9001118c:	b530      	push	{r4, r5, lr}
9001118e:	888b      	ldrh	r3, [r1, #4]
90011190:	b085      	sub	sp, #20
90011192:	4604      	mov	r4, r0
90011194:	8583      	strh	r3, [r0, #44]	; 0x2c
90011196:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
9001119a:	b923      	cbnz	r3, 900111a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001119c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
900111a0:	b90b      	cbnz	r3, 900111a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
900111a2:	f7ff ffd3 	bl	9001114c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
900111a6:	6823      	ldr	r3, [r4, #0]
900111a8:	466d      	mov	r5, sp
900111aa:	4621      	mov	r1, r4
900111ac:	343c      	adds	r4, #60	; 0x3c
900111ae:	4628      	mov	r0, r5
900111b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900111b4:	4798      	blx	r3
900111b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900111ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
900111be:	b005      	add	sp, #20
900111c0:	bd30      	pop	{r4, r5, pc}

900111c2 <_ZNK8touchgfx3Box12getSolidRectEv>:
900111c2:	2300      	movs	r3, #0
900111c4:	8083      	strh	r3, [r0, #4]
900111c6:	80c3      	strh	r3, [r0, #6]
900111c8:	8003      	strh	r3, [r0, #0]
900111ca:	8043      	strh	r3, [r0, #2]
900111cc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
900111d0:	2bff      	cmp	r3, #255	; 0xff
900111d2:	bf01      	itttt	eq
900111d4:	890b      	ldrheq	r3, [r1, #8]
900111d6:	8083      	strheq	r3, [r0, #4]
900111d8:	894b      	ldrheq	r3, [r1, #10]
900111da:	80c3      	strheq	r3, [r0, #6]
900111dc:	4770      	bx	lr
	...

900111e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
900111e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
900111e2:	4604      	mov	r4, r0
900111e4:	466b      	mov	r3, sp
900111e6:	6808      	ldr	r0, [r1, #0]
900111e8:	6849      	ldr	r1, [r1, #4]
900111ea:	c303      	stmia	r3!, {r0, r1}
900111ec:	6823      	ldr	r3, [r4, #0]
900111ee:	4669      	mov	r1, sp
900111f0:	4620      	mov	r0, r4
900111f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900111f4:	4798      	blx	r3
900111f6:	4b08      	ldr	r3, [pc, #32]	; (90011218 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
900111f8:	681b      	ldr	r3, [r3, #0]
900111fa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900111fe:	b10a      	cbz	r2, 90011204 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90011200:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90011202:	b900      	cbnz	r0, 90011206 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90011204:	6898      	ldr	r0, [r3, #8]
90011206:	6803      	ldr	r3, [r0, #0]
90011208:	4669      	mov	r1, sp
9001120a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9001120c:	6a1d      	ldr	r5, [r3, #32]
9001120e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
90011212:	47a8      	blx	r5
90011214:	b003      	add	sp, #12
90011216:	bd30      	pop	{r4, r5, pc}
90011218:	240264e4 	.word	0x240264e4

9001121c <_ZN8touchgfx3BoxD1Ev>:
9001121c:	4770      	bx	lr

9001121e <_ZN8touchgfx3BoxD0Ev>:
9001121e:	b510      	push	{r4, lr}
90011220:	4604      	mov	r4, r0
90011222:	212c      	movs	r1, #44	; 0x2c
90011224:	f00f ffcd 	bl	900211c2 <_ZdlPvj>
90011228:	4620      	mov	r0, r4
9001122a:	bd10      	pop	{r4, pc}

9001122c <_ZNK8touchgfx3Box17invalidateContentEv>:
9001122c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
90011230:	b12a      	cbz	r2, 9001123e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90011232:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90011236:	b112      	cbz	r2, 9001123e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90011238:	6803      	ldr	r3, [r0, #0]
9001123a:	695b      	ldr	r3, [r3, #20]
9001123c:	4718      	bx	r3
9001123e:	4770      	bx	lr

90011240 <_ZN8touchgfx5ImageD1Ev>:
90011240:	4770      	bx	lr

90011242 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90011242:	b570      	push	{r4, r5, r6, lr}
90011244:	880b      	ldrh	r3, [r1, #0]
90011246:	460d      	mov	r5, r1
90011248:	4604      	mov	r4, r0
9001124a:	84c3      	strh	r3, [r0, #38]	; 0x26
9001124c:	4608      	mov	r0, r1
9001124e:	f004 f9d7 	bl	90015600 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011252:	4606      	mov	r6, r0
90011254:	4628      	mov	r0, r5
90011256:	f004 fa07 	bl	90015668 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001125a:	6823      	ldr	r3, [r4, #0]
9001125c:	4605      	mov	r5, r0
9001125e:	4631      	mov	r1, r6
90011260:	4620      	mov	r0, r4
90011262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90011264:	4798      	blx	r3
90011266:	6823      	ldr	r3, [r4, #0]
90011268:	4629      	mov	r1, r5
9001126a:	4620      	mov	r0, r4
9001126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001126e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011272:	4718      	bx	r3

90011274 <_ZN8touchgfx5ImageD0Ev>:
90011274:	b510      	push	{r4, lr}
90011276:	4604      	mov	r4, r0
90011278:	212c      	movs	r1, #44	; 0x2c
9001127a:	f00f ffa2 	bl	900211c2 <_ZdlPvj>
9001127e:	4620      	mov	r0, r4
90011280:	bd10      	pop	{r4, pc}

90011282 <_ZNK8touchgfx5Image12getSolidRectEv>:
90011282:	b510      	push	{r4, lr}
90011284:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90011288:	4604      	mov	r4, r0
9001128a:	2bff      	cmp	r3, #255	; 0xff
9001128c:	d006      	beq.n	9001129c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
9001128e:	2300      	movs	r3, #0
90011290:	8003      	strh	r3, [r0, #0]
90011292:	8043      	strh	r3, [r0, #2]
90011294:	8083      	strh	r3, [r0, #4]
90011296:	80c3      	strh	r3, [r0, #6]
90011298:	4620      	mov	r0, r4
9001129a:	bd10      	pop	{r4, pc}
9001129c:	3126      	adds	r1, #38	; 0x26
9001129e:	f004 fa17 	bl	900156d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900112a2:	e7f9      	b.n	90011298 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

900112a4 <_ZNK8touchgfx5Image17invalidateContentEv>:
900112a4:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
900112a8:	b12a      	cbz	r2, 900112b6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900112aa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900112ae:	b112      	cbz	r2, 900112b6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900112b0:	6803      	ldr	r3, [r0, #0]
900112b2:	695b      	ldr	r3, [r3, #20]
900112b4:	4718      	bx	r3
900112b6:	4770      	bx	lr

900112b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
900112b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900112bc:	4604      	mov	r4, r0
900112be:	b088      	sub	sp, #32
900112c0:	2500      	movs	r5, #0
900112c2:	460f      	mov	r7, r1
900112c4:	f854 3b26 	ldr.w	r3, [r4], #38
900112c8:	a904      	add	r1, sp, #16
900112ca:	4606      	mov	r6, r0
900112cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900112ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
900112d2:	4798      	blx	r3
900112d4:	4620      	mov	r0, r4
900112d6:	f004 f993 	bl	90015600 <_ZNK8touchgfx6Bitmap8getWidthEv>
900112da:	4680      	mov	r8, r0
900112dc:	4620      	mov	r0, r4
900112de:	f004 f9c3 	bl	90015668 <_ZNK8touchgfx6Bitmap9getHeightEv>
900112e2:	9506      	str	r5, [sp, #24]
900112e4:	ad06      	add	r5, sp, #24
900112e6:	f8ad 001e 	strh.w	r0, [sp, #30]
900112ea:	4639      	mov	r1, r7
900112ec:	f8ad 801c 	strh.w	r8, [sp, #28]
900112f0:	4628      	mov	r0, r5
900112f2:	f7fe fb69 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900112f6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
900112fa:	2b00      	cmp	r3, #0
900112fc:	dd19      	ble.n	90011332 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
900112fe:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90011302:	2b00      	cmp	r3, #0
90011304:	dd15      	ble.n	90011332 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90011306:	4b0c      	ldr	r3, [pc, #48]	; (90011338 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90011308:	681b      	ldr	r3, [r3, #0]
9001130a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001130e:	b10a      	cbz	r2, 90011314 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90011310:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90011312:	b900      	cbnz	r0, 90011316 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90011314:	6898      	ldr	r0, [r3, #8]
90011316:	2701      	movs	r7, #1
90011318:	6801      	ldr	r1, [r0, #0]
9001131a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001131e:	9702      	str	r7, [sp, #8]
90011320:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90011324:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90011328:	e9cd 5600 	strd	r5, r6, [sp]
9001132c:	688d      	ldr	r5, [r1, #8]
9001132e:	4621      	mov	r1, r4
90011330:	47a8      	blx	r5
90011332:	b008      	add	sp, #32
90011334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011338:	240264e4 	.word	0x240264e4

9001133c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
9001133c:	b510      	push	{r4, lr}
9001133e:	6803      	ldr	r3, [r0, #0]
90011340:	460c      	mov	r4, r1
90011342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011344:	4798      	blx	r3
90011346:	1b03      	subs	r3, r0, r4
90011348:	4258      	negs	r0, r3
9001134a:	4158      	adcs	r0, r3
9001134c:	bd10      	pop	{r4, pc}
	...

90011350 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
90011350:	4b01      	ldr	r3, [pc, #4]	; (90011358 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
90011352:	6019      	str	r1, [r3, #0]
90011354:	4770      	bx	lr
90011356:	bf00      	nop
90011358:	240264ec 	.word	0x240264ec

9001135c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
9001135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011360:	4696      	mov	lr, r2
90011362:	b097      	sub	sp, #92	; 0x5c
90011364:	4605      	mov	r5, r0
90011366:	4614      	mov	r4, r2
90011368:	460e      	mov	r6, r1
9001136a:	461f      	mov	r7, r3
9001136c:	f10d 0c1c 	add.w	ip, sp, #28
90011370:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90011374:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
90011378:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
9001137c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90011384:	f8de 3000 	ldr.w	r3, [lr]
90011388:	f104 0e14 	add.w	lr, r4, #20
9001138c:	f8cc 3000 	str.w	r3, [ip]
90011390:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90011394:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001139c:	f8de 3000 	ldr.w	r3, [lr]
900113a0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900113a4:	f8cc 3000 	str.w	r3, [ip]
900113a8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900113ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900113b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900113b4:	f8de 3000 	ldr.w	r3, [lr]
900113b8:	4631      	mov	r1, r6
900113ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
900113bc:	4628      	mov	r0, r5
900113be:	f8cc 3000 	str.w	r3, [ip]
900113c2:	682b      	ldr	r3, [r5, #0]
900113c4:	9201      	str	r2, [sp, #4]
900113c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
900113c8:	f8cd 8008 	str.w	r8, [sp, #8]
900113cc:	9200      	str	r2, [sp, #0]
900113ce:	aa07      	add	r2, sp, #28
900113d0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900113d4:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
900113d8:	463b      	mov	r3, r7
900113da:	47d8      	blx	fp
900113dc:	46a6      	mov	lr, r4
900113de:	f10d 0c1c 	add.w	ip, sp, #28
900113e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900113e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900113ea:	f8de 3000 	ldr.w	r3, [lr]
900113ee:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900113f2:	343c      	adds	r4, #60	; 0x3c
900113f4:	f8cc 3000 	str.w	r3, [ip]
900113f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900113fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90011400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90011404:	f8de 3000 	ldr.w	r3, [lr]
90011408:	f8cc 3000 	str.w	r3, [ip]
9001140c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90011410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90011412:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90011416:	6823      	ldr	r3, [r4, #0]
90011418:	4631      	mov	r1, r6
9001141a:	4628      	mov	r0, r5
9001141c:	f8cc 3000 	str.w	r3, [ip]
90011420:	682b      	ldr	r3, [r5, #0]
90011422:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90011426:	9a21      	ldr	r2, [sp, #132]	; 0x84
90011428:	f8cd 8008 	str.w	r8, [sp, #8]
9001142c:	9201      	str	r2, [sp, #4]
9001142e:	9a20      	ldr	r2, [sp, #128]	; 0x80
90011430:	9200      	str	r2, [sp, #0]
90011432:	aa07      	add	r2, sp, #28
90011434:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
90011436:	463b      	mov	r3, r7
90011438:	47a0      	blx	r4
9001143a:	b017      	add	sp, #92	; 0x5c
9001143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90011440 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
90011440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011444:	b08d      	sub	sp, #52	; 0x34
90011446:	4688      	mov	r8, r1
90011448:	f8d3 c000 	ldr.w	ip, [r3]
9001144c:	9916      	ldr	r1, [sp, #88]	; 0x58
9001144e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
90011452:	680f      	ldr	r7, [r1, #0]
90011454:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
90011458:	eba7 070c 	sub.w	r7, r7, ip
9001145c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
90011460:	edd3 6a07 	vldr	s13, [r3, #28]
90011464:	42bc      	cmp	r4, r7
90011466:	9918      	ldr	r1, [sp, #96]	; 0x60
90011468:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
9001146c:	bfa8      	it	ge
9001146e:	463c      	movge	r4, r7
90011470:	f9b1 9000 	ldrsh.w	r9, [r1]
90011474:	f9ba 1000 	ldrsh.w	r1, [sl]
90011478:	ee07 4a90 	vmov	s15, r4
9001147c:	eb09 0e0c 	add.w	lr, r9, ip
90011480:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90011484:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90011488:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
9001148c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
90011490:	4571      	cmp	r1, lr
90011492:	ee25 4a04 	vmul.f32	s8, s10, s8
90011496:	ee65 4a24 	vmul.f32	s9, s10, s9
9001149a:	ee25 5a27 	vmul.f32	s10, s10, s15
9001149e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
900114a2:	ee71 0aa4 	vadd.f32	s1, s3, s9
900114a6:	ee32 1a05 	vadd.f32	s2, s4, s10
900114aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
900114ae:	ee36 0a84 	vadd.f32	s0, s13, s8
900114b2:	ee61 1a87 	vmul.f32	s3, s3, s14
900114b6:	ee22 2a07 	vmul.f32	s4, s4, s14
900114ba:	f340 808c 	ble.w	900115d6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
900114be:	eba1 060e 	sub.w	r6, r1, lr
900114c2:	fb96 f5f4 	sdiv	r5, r6, r4
900114c6:	ee07 5a10 	vmov	s14, r5
900114ca:	2d00      	cmp	r5, #0
900114cc:	fb04 6615 	mls	r6, r4, r5, r6
900114d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900114d4:	eea7 0a04 	vfma.f32	s0, s14, s8
900114d8:	eee7 0a24 	vfma.f32	s1, s14, s9
900114dc:	eea7 1a05 	vfma.f32	s2, s14, s10
900114e0:	dd12      	ble.n	90011508 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
900114e2:	ee70 6a44 	vsub.f32	s13, s0, s8
900114e6:	ee70 1ae4 	vsub.f32	s3, s1, s9
900114ea:	ee31 2a45 	vsub.f32	s4, s2, s10
900114ee:	eef5 6a40 	vcmp.f32	s13, #0.0
900114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900114f6:	bf14      	ite	ne
900114f8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
900114fc:	eeb0 7a67 	vmoveq.f32	s14, s15
90011500:	ee61 1a87 	vmul.f32	s3, s3, s14
90011504:	ee22 2a07 	vmul.f32	s4, s4, s14
90011508:	fb05 f204 	mul.w	r2, r5, r4
9001150c:	1abf      	subs	r7, r7, r2
9001150e:	4494      	add	ip, r2
90011510:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90011514:	4411      	add	r1, r2
90011516:	eb09 020c 	add.w	r2, r9, ip
9001151a:	b209      	sxth	r1, r1
9001151c:	443a      	add	r2, r7
9001151e:	428a      	cmp	r2, r1
90011520:	bfc4      	itt	gt
90011522:	eba1 0209 	subgt.w	r2, r1, r9
90011526:	eba2 070c 	subgt.w	r7, r2, ip
9001152a:	2f00      	cmp	r7, #0
9001152c:	dd50      	ble.n	900115d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
9001152e:	fb97 f1f4 	sdiv	r1, r7, r4
90011532:	fb04 7211 	mls	r2, r4, r1, r7
90011536:	b90a      	cbnz	r2, 9001153c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90011538:	3901      	subs	r1, #1
9001153a:	4622      	mov	r2, r4
9001153c:	eec7 3a80 	vdiv.f32	s7, s15, s0
90011540:	6840      	ldr	r0, [r0, #4]
90011542:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90011546:	44b6      	add	lr, r6
90011548:	f8d0 a000 	ldr.w	sl, [r0]
9001154c:	2900      	cmp	r1, #0
9001154e:	bfcc      	ite	gt
90011550:	46a1      	movgt	r9, r4
90011552:	4691      	movle	r9, r2
90011554:	900b      	str	r0, [sp, #44]	; 0x2c
90011556:	9817      	ldr	r0, [sp, #92]	; 0x5c
90011558:	fb04 e505 	mla	r5, r4, r5, lr
9001155c:	eef0 6a42 	vmov.f32	s13, s4
90011560:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90011564:	9008      	str	r0, [sp, #32]
90011566:	eeb0 7a61 	vmov.f32	s14, s3
9001156a:	9818      	ldr	r0, [sp, #96]	; 0x60
9001156c:	695b      	ldr	r3, [r3, #20]
9001156e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90011572:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90011576:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
9001157a:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001157c:	445b      	add	r3, fp
9001157e:	9307      	str	r3, [sp, #28]
90011580:	ee16 3a90 	vmov	r3, s13
90011584:	e9cd 8505 	strd	r8, r5, [sp, #20]
90011588:	ee60 2aa3 	vmul.f32	s5, s1, s7
9001158c:	ee21 3a23 	vmul.f32	s6, s2, s7
90011590:	ee72 7ae1 	vsub.f32	s15, s5, s3
90011594:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90011598:	ee17 7a90 	vmov	r7, s15
9001159c:	ee73 7a42 	vsub.f32	s15, s6, s4
900115a0:	fb97 f7f4 	sdiv	r7, r7, r4
900115a4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900115a8:	ee17 ca90 	vmov	ip, s15
900115ac:	fb9c fcf4 	sdiv	ip, ip, r4
900115b0:	fb0c 3306 	mla	r3, ip, r6, r3
900115b4:	9302      	str	r3, [sp, #8]
900115b6:	ee17 3a10 	vmov	r3, s14
900115ba:	e9cd 7c03 	strd	r7, ip, [sp, #12]
900115be:	fb07 3706 	mla	r7, r7, r6, r3
900115c2:	eba9 0306 	sub.w	r3, r9, r6
900115c6:	e9cd 4700 	strd	r4, r7, [sp]
900115ca:	f8da 4008 	ldr.w	r4, [sl, #8]
900115ce:	47a0      	blx	r4
900115d0:	b00d      	add	sp, #52	; 0x34
900115d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900115d6:	2500      	movs	r5, #0
900115d8:	462e      	mov	r6, r5
900115da:	e799      	b.n	90011510 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

900115dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900115dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900115e0:	b0db      	sub	sp, #364	; 0x16c
900115e2:	461d      	mov	r5, r3
900115e4:	4614      	mov	r4, r2
900115e6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
900115ea:	910f      	str	r1, [sp, #60]	; 0x3c
900115ec:	4629      	mov	r1, r5
900115ee:	930a      	str	r3, [sp, #40]	; 0x28
900115f0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
900115f4:	9009      	str	r0, [sp, #36]	; 0x24
900115f6:	930b      	str	r3, [sp, #44]	; 0x2c
900115f8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
900115fc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90011600:	9310      	str	r3, [sp, #64]	; 0x40
90011602:	6803      	ldr	r3, [r0, #0]
90011604:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90011606:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
9001160a:	47b8      	blx	r7
9001160c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001160e:	6058      	str	r0, [r3, #4]
90011610:	2800      	cmp	r0, #0
90011612:	f000 83a1 	beq.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011616:	682b      	ldr	r3, [r5, #0]
90011618:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
9001161c:	ed94 7a02 	vldr	s14, [r4, #8]
90011620:	9314      	str	r3, [sp, #80]	; 0x50
90011622:	686b      	ldr	r3, [r5, #4]
90011624:	eeb4 7ae7 	vcmpe.f32	s14, s15
90011628:	9315      	str	r3, [sp, #84]	; 0x54
9001162a:	4bc1      	ldr	r3, [pc, #772]	; (90011930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
9001162c:	7819      	ldrb	r1, [r3, #0]
9001162e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90011632:	2900      	cmp	r1, #0
90011634:	bf16      	itet	ne
90011636:	4619      	movne	r1, r3
90011638:	4611      	moveq	r1, r2
9001163a:	4613      	movne	r3, r2
9001163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011640:	9116      	str	r1, [sp, #88]	; 0x58
90011642:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90011646:	f240 8387 	bls.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001164a:	ed94 7a07 	vldr	s14, [r4, #28]
9001164e:	eeb4 7ae7 	vcmpe.f32	s14, s15
90011652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011656:	f240 837f 	bls.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001165a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
9001165e:	eeb4 7ae7 	vcmpe.f32	s14, s15
90011662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011666:	f240 8377 	bls.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001166a:	6822      	ldr	r2, [r4, #0]
9001166c:	4bb1      	ldr	r3, [pc, #708]	; (90011934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
9001166e:	429a      	cmp	r2, r3
90011670:	f2c0 8372 	blt.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011674:	49b0      	ldr	r1, [pc, #704]	; (90011938 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90011676:	6963      	ldr	r3, [r4, #20]
90011678:	428a      	cmp	r2, r1
9001167a:	f300 836d 	bgt.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001167e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90011682:	48ae      	ldr	r0, [pc, #696]	; (9001193c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90011684:	33ff      	adds	r3, #255	; 0xff
90011686:	4283      	cmp	r3, r0
90011688:	f200 8366 	bhi.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001168c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9001168e:	4dac      	ldr	r5, [pc, #688]	; (90011940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90011690:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90011694:	33ff      	adds	r3, #255	; 0xff
90011696:	42ab      	cmp	r3, r5
90011698:	f200 835e 	bhi.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001169c:	6862      	ldr	r2, [r4, #4]
9001169e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
900116a2:	33ff      	adds	r3, #255	; 0xff
900116a4:	4283      	cmp	r3, r0
900116a6:	f200 8357 	bhi.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116aa:	69a1      	ldr	r1, [r4, #24]
900116ac:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
900116b0:	33ff      	adds	r3, #255	; 0xff
900116b2:	4283      	cmp	r3, r0
900116b4:	f200 8350 	bhi.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900116ba:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
900116be:	30ff      	adds	r0, #255	; 0xff
900116c0:	42a8      	cmp	r0, r5
900116c2:	f200 8349 	bhi.w	90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900116c6:	428a      	cmp	r2, r1
900116c8:	f280 8110 	bge.w	900118ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
900116cc:	429a      	cmp	r2, r3
900116ce:	f300 8119 	bgt.w	90011904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
900116d2:	4299      	cmp	r1, r3
900116d4:	f280 811d 	bge.w	90011912 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
900116d8:	2502      	movs	r5, #2
900116da:	2701      	movs	r7, #1
900116dc:	46a9      	mov	r9, r5
900116de:	46b8      	mov	r8, r7
900116e0:	f04f 0a00 	mov.w	sl, #0
900116e4:	4621      	mov	r1, r4
900116e6:	a849      	add	r0, sp, #292	; 0x124
900116e8:	f003 fcc2 	bl	90015070 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
900116ec:	4622      	mov	r2, r4
900116ee:	4653      	mov	r3, sl
900116f0:	a949      	add	r1, sp, #292	; 0x124
900116f2:	f8cd 9000 	str.w	r9, [sp]
900116f6:	a819      	add	r0, sp, #100	; 0x64
900116f8:	f003 fdea 	bl	900152d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
900116fc:	4622      	mov	r2, r4
900116fe:	4653      	mov	r3, sl
90011700:	a949      	add	r1, sp, #292	; 0x124
90011702:	f8cd 8000 	str.w	r8, [sp]
90011706:	a829      	add	r0, sp, #164	; 0xa4
90011708:	f003 fde2 	bl	900152d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
9001170c:	4643      	mov	r3, r8
9001170e:	4622      	mov	r2, r4
90011710:	a949      	add	r1, sp, #292	; 0x124
90011712:	f8cd 9000 	str.w	r9, [sp]
90011716:	a839      	add	r0, sp, #228	; 0xe4
90011718:	f003 fdda 	bl	900152d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
9001171c:	42af      	cmp	r7, r5
9001171e:	af12      	add	r7, sp, #72	; 0x48
90011720:	bfb7      	itett	lt
90011722:	2300      	movlt	r3, #0
90011724:	2301      	movge	r3, #1
90011726:	ad29      	addlt	r5, sp, #164	; 0xa4
90011728:	ac19      	addlt	r4, sp, #100	; 0x64
9001172a:	bfb1      	iteee	lt
9001172c:	930e      	strlt	r3, [sp, #56]	; 0x38
9001172e:	ad19      	addge	r5, sp, #100	; 0x64
90011730:	930e      	strge	r3, [sp, #56]	; 0x38
90011732:	ac29      	addge	r4, sp, #164	; 0xa4
90011734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011736:	e893 0003 	ldmia.w	r3, {r0, r1}
9001173a:	e887 0003 	stmia.w	r7, {r0, r1}
9001173e:	b928      	cbnz	r0, 9001174c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90011740:	4b80      	ldr	r3, [pc, #512]	; (90011944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90011742:	6818      	ldr	r0, [r3, #0]
90011744:	6803      	ldr	r3, [r0, #0]
90011746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011748:	4798      	blx	r3
9001174a:	6038      	str	r0, [r7, #0]
9001174c:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001174e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90011752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90011756:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90011758:	930c      	str	r3, [sp, #48]	; 0x30
9001175a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001175c:	6963      	ldr	r3, [r4, #20]
9001175e:	440b      	add	r3, r1
90011760:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90011764:	4408      	add	r0, r1
90011766:	b200      	sxth	r0, r0
90011768:	4283      	cmp	r3, r0
9001176a:	900d      	str	r0, [sp, #52]	; 0x34
9001176c:	f280 80dd 	bge.w	9001192a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90011770:	428b      	cmp	r3, r1
90011772:	da08      	bge.n	90011786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90011774:	2a00      	cmp	r2, #0
90011776:	dd06      	ble.n	90011786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90011778:	1acb      	subs	r3, r1, r3
9001177a:	429a      	cmp	r2, r3
9001177c:	f2c0 80e4 	blt.w	90011948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90011780:	2b00      	cmp	r3, #0
90011782:	f300 80e2 	bgt.w	9001194a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90011786:	6967      	ldr	r7, [r4, #20]
90011788:	f10d 0850 	add.w	r8, sp, #80	; 0x50
9001178c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001178e:	443b      	add	r3, r7
90011790:	461f      	mov	r7, r3
90011792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011794:	1bdf      	subs	r7, r3, r7
90011796:	4297      	cmp	r7, r2
90011798:	bfa8      	it	ge
9001179a:	4617      	movge	r7, r2
9001179c:	2f00      	cmp	r7, #0
9001179e:	f340 8166 	ble.w	90011a6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
900117a2:	9b64      	ldr	r3, [sp, #400]	; 0x190
900117a4:	6829      	ldr	r1, [r5, #0]
900117a6:	f9b3 2000 	ldrsh.w	r2, [r3]
900117aa:	f9bb 3000 	ldrsh.w	r3, [fp]
900117ae:	4411      	add	r1, r2
900117b0:	6820      	ldr	r0, [r4, #0]
900117b2:	4299      	cmp	r1, r3
900117b4:	dd1a      	ble.n	900117ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
900117b6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
900117ba:	4402      	add	r2, r0
900117bc:	440b      	add	r3, r1
900117be:	b21b      	sxth	r3, r3
900117c0:	429a      	cmp	r2, r3
900117c2:	dc13      	bgt.n	900117ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
900117c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
900117c6:	a912      	add	r1, sp, #72	; 0x48
900117c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900117ca:	9809      	ldr	r0, [sp, #36]	; 0x24
900117cc:	681b      	ldr	r3, [r3, #0]
900117ce:	9206      	str	r2, [sp, #24]
900117d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900117d2:	9500      	str	r5, [sp, #0]
900117d4:	9205      	str	r2, [sp, #20]
900117d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900117d8:	e9cd b203 	strd	fp, r2, [sp, #12]
900117dc:	9a64      	ldr	r2, [sp, #400]	; 0x190
900117de:	e9cd 8201 	strd	r8, r2, [sp, #4]
900117e2:	aa49      	add	r2, sp, #292	; 0x124
900117e4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900117e8:	4623      	mov	r3, r4
900117ea:	47c8      	blx	r9
900117ec:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900117f0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900117f4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900117f8:	ee37 7a27 	vadd.f32	s14, s14, s15
900117fc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90011800:	68a1      	ldr	r1, [r4, #8]
90011802:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011806:	ed94 6a08 	vldr	s12, [r4, #32]
9001180a:	edd4 6a07 	vldr	s13, [r4, #28]
9001180e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90011812:	ee76 6a86 	vadd.f32	s13, s13, s12
90011816:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
9001181a:	e9d4 2300 	ldrd	r2, r3, [r4]
9001181e:	edc4 6a07 	vstr	s13, [r4, #28]
90011822:	441a      	add	r2, r3
90011824:	6963      	ldr	r3, [r4, #20]
90011826:	3301      	adds	r3, #1
90011828:	6022      	str	r2, [r4, #0]
9001182a:	6163      	str	r3, [r4, #20]
9001182c:	69a3      	ldr	r3, [r4, #24]
9001182e:	3b01      	subs	r3, #1
90011830:	61a3      	str	r3, [r4, #24]
90011832:	6923      	ldr	r3, [r4, #16]
90011834:	440b      	add	r3, r1
90011836:	68e1      	ldr	r1, [r4, #12]
90011838:	428b      	cmp	r3, r1
9001183a:	6123      	str	r3, [r4, #16]
9001183c:	db15      	blt.n	9001186a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
9001183e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90011842:	3201      	adds	r2, #1
90011844:	1a5b      	subs	r3, r3, r1
90011846:	ee76 6a26 	vadd.f32	s13, s12, s13
9001184a:	6022      	str	r2, [r4, #0]
9001184c:	6123      	str	r3, [r4, #16]
9001184e:	edc4 6a07 	vstr	s13, [r4, #28]
90011852:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90011856:	ee36 7a87 	vadd.f32	s14, s13, s14
9001185a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001185e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90011862:	ee77 7a27 	vadd.f32	s15, s14, s15
90011866:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
9001186a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
9001186e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90011872:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90011876:	ee37 7a27 	vadd.f32	s14, s14, s15
9001187a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
9001187e:	68a9      	ldr	r1, [r5, #8]
90011880:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011884:	ed95 6a08 	vldr	s12, [r5, #32]
90011888:	edd5 6a07 	vldr	s13, [r5, #28]
9001188c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90011890:	ee76 6a86 	vadd.f32	s13, s13, s12
90011894:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011898:	e9d5 2300 	ldrd	r2, r3, [r5]
9001189c:	edc5 6a07 	vstr	s13, [r5, #28]
900118a0:	441a      	add	r2, r3
900118a2:	696b      	ldr	r3, [r5, #20]
900118a4:	3301      	adds	r3, #1
900118a6:	602a      	str	r2, [r5, #0]
900118a8:	616b      	str	r3, [r5, #20]
900118aa:	69ab      	ldr	r3, [r5, #24]
900118ac:	3b01      	subs	r3, #1
900118ae:	61ab      	str	r3, [r5, #24]
900118b0:	692b      	ldr	r3, [r5, #16]
900118b2:	440b      	add	r3, r1
900118b4:	68e9      	ldr	r1, [r5, #12]
900118b6:	428b      	cmp	r3, r1
900118b8:	612b      	str	r3, [r5, #16]
900118ba:	db15      	blt.n	900118e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
900118bc:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
900118c0:	3201      	adds	r2, #1
900118c2:	1a5b      	subs	r3, r3, r1
900118c4:	ee76 6a26 	vadd.f32	s13, s12, s13
900118c8:	602a      	str	r2, [r5, #0]
900118ca:	612b      	str	r3, [r5, #16]
900118cc:	edc5 6a07 	vstr	s13, [r5, #28]
900118d0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900118d4:	ee36 7a87 	vadd.f32	s14, s13, s14
900118d8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900118dc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900118e0:	ee77 7a27 	vadd.f32	s15, s14, s15
900118e4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900118e8:	3f01      	subs	r7, #1
900118ea:	e757      	b.n	9001179c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
900118ec:	4299      	cmp	r1, r3
900118ee:	dc13      	bgt.n	90011918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
900118f0:	429a      	cmp	r2, r3
900118f2:	da14      	bge.n	9001191e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
900118f4:	2502      	movs	r5, #2
900118f6:	2703      	movs	r7, #3
900118f8:	f04f 0800 	mov.w	r8, #0
900118fc:	46a9      	mov	r9, r5
900118fe:	f04f 0a01 	mov.w	sl, #1
90011902:	e6ef      	b.n	900116e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90011904:	2501      	movs	r5, #1
90011906:	2700      	movs	r7, #0
90011908:	46a9      	mov	r9, r5
9001190a:	46b8      	mov	r8, r7
9001190c:	f04f 0a02 	mov.w	sl, #2
90011910:	e6e8      	b.n	900116e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90011912:	2501      	movs	r5, #1
90011914:	2702      	movs	r7, #2
90011916:	e6e1      	b.n	900116dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90011918:	2500      	movs	r5, #0
9001191a:	2701      	movs	r7, #1
9001191c:	e7f4      	b.n	90011908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
9001191e:	2702      	movs	r7, #2
90011920:	2503      	movs	r5, #3
90011922:	f04f 0900 	mov.w	r9, #0
90011926:	46b8      	mov	r8, r7
90011928:	e7e9      	b.n	900118fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
9001192a:	4613      	mov	r3, r2
9001192c:	e728      	b.n	90011780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
9001192e:	bf00      	nop
90011930:	240264dc 	.word	0x240264dc
90011934:	fffd8f01 	.word	0xfffd8f01
90011938:	00027100 	.word	0x00027100
9001193c:	0004e1ff 	.word	0x0004e1ff
90011940:	0004e1fe 	.word	0x0004e1fe
90011944:	240264e4 	.word	0x240264e4
90011948:	4613      	mov	r3, r2
9001194a:	992b      	ldr	r1, [sp, #172]	; 0xac
9001194c:	469e      	mov	lr, r3
9001194e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90011950:	469c      	mov	ip, r3
90011952:	9111      	str	r1, [sp, #68]	; 0x44
90011954:	f04f 0900 	mov.w	r9, #0
90011958:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
9001195c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90011960:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90011964:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90011968:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
9001196c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90011970:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90011974:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90011978:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
9001197c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90011980:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90011984:	f1bc 0f00 	cmp.w	ip, #0
90011988:	d147      	bne.n	90011a1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
9001198a:	eb03 0c07 	add.w	ip, r3, r7
9001198e:	1ad7      	subs	r7, r2, r3
90011990:	f1b9 0f00 	cmp.w	r9, #0
90011994:	d009      	beq.n	900119aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90011996:	9029      	str	r0, [sp, #164]	; 0xa4
90011998:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
9001199c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
900119a0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
900119a4:	912d      	str	r1, [sp, #180]	; 0xb4
900119a6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
900119aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
900119ac:	f04f 0800 	mov.w	r8, #0
900119b0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
900119b4:	9111      	str	r1, [sp, #68]	; 0x44
900119b6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
900119ba:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
900119be:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
900119c2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
900119c6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
900119ca:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
900119ce:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
900119d2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
900119d6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
900119da:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
900119de:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
900119e2:	f1be 0f00 	cmp.w	lr, #0
900119e6:	d031      	beq.n	90011a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
900119e8:	9e11      	ldr	r6, [sp, #68]	; 0x44
900119ea:	4450      	add	r0, sl
900119ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
900119f0:	4431      	add	r1, r6
900119f2:	ee37 7a04 	vadd.f32	s14, s14, s8
900119f6:	ee77 7aa3 	vadd.f32	s15, s15, s7
900119fa:	4549      	cmp	r1, r9
900119fc:	db08      	blt.n	90011a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
900119fe:	ee77 7a85 	vadd.f32	s15, s15, s10
90011a02:	3001      	adds	r0, #1
90011a04:	ee76 6aa5 	vadd.f32	s13, s13, s11
90011a08:	eba1 0109 	sub.w	r1, r1, r9
90011a0c:	ee37 7a06 	vadd.f32	s14, s14, s12
90011a10:	f10e 3eff 	add.w	lr, lr, #4294967295
90011a14:	f04f 0801 	mov.w	r8, #1
90011a18:	e7e3      	b.n	900119e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90011a1a:	9e11      	ldr	r6, [sp, #68]	; 0x44
90011a1c:	4450      	add	r0, sl
90011a1e:	ee37 7a24 	vadd.f32	s14, s14, s9
90011a22:	4431      	add	r1, r6
90011a24:	ee77 7a84 	vadd.f32	s15, s15, s8
90011a28:	ee76 6aa3 	vadd.f32	s13, s13, s7
90011a2c:	4541      	cmp	r1, r8
90011a2e:	db08      	blt.n	90011a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90011a30:	ee76 6a85 	vadd.f32	s13, s13, s10
90011a34:	3001      	adds	r0, #1
90011a36:	ee37 7a25 	vadd.f32	s14, s14, s11
90011a3a:	eba1 0108 	sub.w	r1, r1, r8
90011a3e:	ee77 7a86 	vadd.f32	s15, s15, s12
90011a42:	f10c 3cff 	add.w	ip, ip, #4294967295
90011a46:	f04f 0901 	mov.w	r9, #1
90011a4a:	e79b      	b.n	90011984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90011a4c:	449c      	add	ip, r3
90011a4e:	1aff      	subs	r7, r7, r3
90011a50:	f1b8 0f00 	cmp.w	r8, #0
90011a54:	d009      	beq.n	90011a6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90011a56:	9019      	str	r0, [sp, #100]	; 0x64
90011a58:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90011a5c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90011a60:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90011a64:	911d      	str	r1, [sp, #116]	; 0x74
90011a66:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90011a6a:	1ad2      	subs	r2, r2, r3
90011a6c:	e68b      	b.n	90011786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90011a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90011a70:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90011a72:	2b00      	cmp	r3, #0
90011a74:	f000 80d1 	beq.w	90011c1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90011a78:	ad19      	add	r5, sp, #100	; 0x64
90011a7a:	ac39      	add	r4, sp, #228	; 0xe4
90011a7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
90011a7e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90011a82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90011a86:	930c      	str	r3, [sp, #48]	; 0x30
90011a88:	990c      	ldr	r1, [sp, #48]	; 0x30
90011a8a:	6963      	ldr	r3, [r4, #20]
90011a8c:	440b      	add	r3, r1
90011a8e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90011a92:	4408      	add	r0, r1
90011a94:	b200      	sxth	r0, r0
90011a96:	4283      	cmp	r3, r0
90011a98:	900d      	str	r0, [sp, #52]	; 0x34
90011a9a:	f280 80c1 	bge.w	90011c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90011a9e:	428b      	cmp	r3, r1
90011aa0:	da08      	bge.n	90011ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90011aa2:	2a00      	cmp	r2, #0
90011aa4:	dd06      	ble.n	90011ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90011aa6:	1acb      	subs	r3, r1, r3
90011aa8:	429a      	cmp	r2, r3
90011aaa:	f2c0 80bb 	blt.w	90011c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90011aae:	2b00      	cmp	r3, #0
90011ab0:	f300 80b9 	bgt.w	90011c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90011ab4:	6967      	ldr	r7, [r4, #20]
90011ab6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90011aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90011abc:	443b      	add	r3, r7
90011abe:	461f      	mov	r7, r3
90011ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011ac2:	1bdf      	subs	r7, r3, r7
90011ac4:	4297      	cmp	r7, r2
90011ac6:	bfa8      	it	ge
90011ac8:	4617      	movge	r7, r2
90011aca:	2f00      	cmp	r7, #0
90011acc:	f340 813c 	ble.w	90011d48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90011ad0:	9b64      	ldr	r3, [sp, #400]	; 0x190
90011ad2:	6829      	ldr	r1, [r5, #0]
90011ad4:	f9b3 2000 	ldrsh.w	r2, [r3]
90011ad8:	f9bb 3000 	ldrsh.w	r3, [fp]
90011adc:	4411      	add	r1, r2
90011ade:	6820      	ldr	r0, [r4, #0]
90011ae0:	4299      	cmp	r1, r3
90011ae2:	dd1a      	ble.n	90011b1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90011ae4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90011ae8:	4402      	add	r2, r0
90011aea:	440b      	add	r3, r1
90011aec:	b21b      	sxth	r3, r3
90011aee:	429a      	cmp	r2, r3
90011af0:	dc13      	bgt.n	90011b1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90011af2:	9a10      	ldr	r2, [sp, #64]	; 0x40
90011af4:	a912      	add	r1, sp, #72	; 0x48
90011af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90011af8:	9809      	ldr	r0, [sp, #36]	; 0x24
90011afa:	681b      	ldr	r3, [r3, #0]
90011afc:	9206      	str	r2, [sp, #24]
90011afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90011b00:	9500      	str	r5, [sp, #0]
90011b02:	9205      	str	r2, [sp, #20]
90011b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90011b06:	e9cd b203 	strd	fp, r2, [sp, #12]
90011b0a:	9a64      	ldr	r2, [sp, #400]	; 0x190
90011b0c:	e9cd 8201 	strd	r8, r2, [sp, #4]
90011b10:	aa49      	add	r2, sp, #292	; 0x124
90011b12:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90011b16:	4623      	mov	r3, r4
90011b18:	47c8      	blx	r9
90011b1a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90011b1e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90011b22:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90011b26:	ee37 7a27 	vadd.f32	s14, s14, s15
90011b2a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90011b2e:	68a1      	ldr	r1, [r4, #8]
90011b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011b34:	ed94 6a08 	vldr	s12, [r4, #32]
90011b38:	edd4 6a07 	vldr	s13, [r4, #28]
90011b3c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90011b40:	ee76 6a86 	vadd.f32	s13, s13, s12
90011b44:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90011b48:	e9d4 2300 	ldrd	r2, r3, [r4]
90011b4c:	edc4 6a07 	vstr	s13, [r4, #28]
90011b50:	441a      	add	r2, r3
90011b52:	6963      	ldr	r3, [r4, #20]
90011b54:	3301      	adds	r3, #1
90011b56:	6022      	str	r2, [r4, #0]
90011b58:	6163      	str	r3, [r4, #20]
90011b5a:	69a3      	ldr	r3, [r4, #24]
90011b5c:	3b01      	subs	r3, #1
90011b5e:	61a3      	str	r3, [r4, #24]
90011b60:	6923      	ldr	r3, [r4, #16]
90011b62:	440b      	add	r3, r1
90011b64:	68e1      	ldr	r1, [r4, #12]
90011b66:	428b      	cmp	r3, r1
90011b68:	6123      	str	r3, [r4, #16]
90011b6a:	db15      	blt.n	90011b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90011b6c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90011b70:	3201      	adds	r2, #1
90011b72:	1a5b      	subs	r3, r3, r1
90011b74:	ee76 6a26 	vadd.f32	s13, s12, s13
90011b78:	6022      	str	r2, [r4, #0]
90011b7a:	6123      	str	r3, [r4, #16]
90011b7c:	edc4 6a07 	vstr	s13, [r4, #28]
90011b80:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90011b84:	ee36 7a87 	vadd.f32	s14, s13, s14
90011b88:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90011b8c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90011b90:	ee77 7a27 	vadd.f32	s15, s14, s15
90011b94:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90011b98:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90011b9c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90011ba0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90011ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
90011ba8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90011bac:	68a9      	ldr	r1, [r5, #8]
90011bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
90011bb2:	ed95 6a08 	vldr	s12, [r5, #32]
90011bb6:	edd5 6a07 	vldr	s13, [r5, #28]
90011bba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90011bbe:	ee76 6a86 	vadd.f32	s13, s13, s12
90011bc2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011bc6:	e9d5 2300 	ldrd	r2, r3, [r5]
90011bca:	edc5 6a07 	vstr	s13, [r5, #28]
90011bce:	441a      	add	r2, r3
90011bd0:	696b      	ldr	r3, [r5, #20]
90011bd2:	3301      	adds	r3, #1
90011bd4:	602a      	str	r2, [r5, #0]
90011bd6:	616b      	str	r3, [r5, #20]
90011bd8:	69ab      	ldr	r3, [r5, #24]
90011bda:	3b01      	subs	r3, #1
90011bdc:	61ab      	str	r3, [r5, #24]
90011bde:	692b      	ldr	r3, [r5, #16]
90011be0:	440b      	add	r3, r1
90011be2:	68e9      	ldr	r1, [r5, #12]
90011be4:	428b      	cmp	r3, r1
90011be6:	612b      	str	r3, [r5, #16]
90011be8:	db15      	blt.n	90011c16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90011bea:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90011bee:	3201      	adds	r2, #1
90011bf0:	1a5b      	subs	r3, r3, r1
90011bf2:	ee76 6a26 	vadd.f32	s13, s12, s13
90011bf6:	602a      	str	r2, [r5, #0]
90011bf8:	612b      	str	r3, [r5, #16]
90011bfa:	edc5 6a07 	vstr	s13, [r5, #28]
90011bfe:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90011c02:	ee36 7a87 	vadd.f32	s14, s13, s14
90011c06:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90011c0a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90011c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
90011c12:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90011c16:	3f01      	subs	r7, #1
90011c18:	e757      	b.n	90011aca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90011c1a:	ad39      	add	r5, sp, #228	; 0xe4
90011c1c:	ac19      	add	r4, sp, #100	; 0x64
90011c1e:	e72d      	b.n	90011a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90011c20:	4613      	mov	r3, r2
90011c22:	e744      	b.n	90011aae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90011c24:	4613      	mov	r3, r2
90011c26:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90011c28:	469e      	mov	lr, r3
90011c2a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90011c2e:	461f      	mov	r7, r3
90011c30:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90011c34:	f04f 0900 	mov.w	r9, #0
90011c38:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90011c3c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90011c40:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90011c44:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90011c48:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90011c4c:	993d      	ldr	r1, [sp, #244]	; 0xf4
90011c4e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90011c52:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90011c56:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90011c5a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90011c5e:	960e      	str	r6, [sp, #56]	; 0x38
90011c60:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90011c64:	2f00      	cmp	r7, #0
90011c66:	d146      	bne.n	90011cf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90011c68:	449c      	add	ip, r3
90011c6a:	1ad7      	subs	r7, r2, r3
90011c6c:	f1b9 0f00 	cmp.w	r9, #0
90011c70:	d009      	beq.n	90011c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90011c72:	9039      	str	r0, [sp, #228]	; 0xe4
90011c74:	913d      	str	r1, [sp, #244]	; 0xf4
90011c76:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90011c7a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90011c7e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90011c82:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90011c86:	991b      	ldr	r1, [sp, #108]	; 0x6c
90011c88:	f04f 0800 	mov.w	r8, #0
90011c8c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90011c90:	910e      	str	r1, [sp, #56]	; 0x38
90011c92:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90011c96:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90011c9a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90011c9e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90011ca2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90011ca6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90011caa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90011cae:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90011cb2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90011cb6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90011cba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90011cbe:	f1be 0f00 	cmp.w	lr, #0
90011cc2:	d030      	beq.n	90011d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90011cc4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90011cc6:	4450      	add	r0, sl
90011cc8:	ee76 6aa4 	vadd.f32	s13, s13, s9
90011ccc:	4431      	add	r1, r6
90011cce:	ee37 7a04 	vadd.f32	s14, s14, s8
90011cd2:	ee77 7aa3 	vadd.f32	s15, s15, s7
90011cd6:	4549      	cmp	r1, r9
90011cd8:	db08      	blt.n	90011cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90011cda:	ee77 7a85 	vadd.f32	s15, s15, s10
90011cde:	3001      	adds	r0, #1
90011ce0:	ee76 6aa5 	vadd.f32	s13, s13, s11
90011ce4:	eba1 0109 	sub.w	r1, r1, r9
90011ce8:	ee37 7a06 	vadd.f32	s14, s14, s12
90011cec:	f10e 3eff 	add.w	lr, lr, #4294967295
90011cf0:	f04f 0801 	mov.w	r8, #1
90011cf4:	e7e3      	b.n	90011cbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90011cf6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90011cf8:	4450      	add	r0, sl
90011cfa:	ee37 7a24 	vadd.f32	s14, s14, s9
90011cfe:	4431      	add	r1, r6
90011d00:	ee77 7a84 	vadd.f32	s15, s15, s8
90011d04:	ee76 6aa3 	vadd.f32	s13, s13, s7
90011d08:	4541      	cmp	r1, r8
90011d0a:	db08      	blt.n	90011d1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90011d0c:	ee76 6a85 	vadd.f32	s13, s13, s10
90011d10:	3001      	adds	r0, #1
90011d12:	ee37 7a25 	vadd.f32	s14, s14, s11
90011d16:	eba1 0108 	sub.w	r1, r1, r8
90011d1a:	ee77 7a86 	vadd.f32	s15, s15, s12
90011d1e:	3f01      	subs	r7, #1
90011d20:	f04f 0901 	mov.w	r9, #1
90011d24:	e79e      	b.n	90011c64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
90011d26:	449c      	add	ip, r3
90011d28:	1aff      	subs	r7, r7, r3
90011d2a:	f1b8 0f00 	cmp.w	r8, #0
90011d2e:	d009      	beq.n	90011d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90011d30:	9019      	str	r0, [sp, #100]	; 0x64
90011d32:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90011d36:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90011d3a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90011d3e:	911d      	str	r1, [sp, #116]	; 0x74
90011d40:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90011d44:	1ad2      	subs	r2, r2, r3
90011d46:	e6b5      	b.n	90011ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90011d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011d4a:	681b      	ldr	r3, [r3, #0]
90011d4c:	b923      	cbnz	r3, 90011d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90011d4e:	4b04      	ldr	r3, [pc, #16]	; (90011d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90011d50:	6818      	ldr	r0, [r3, #0]
90011d52:	6803      	ldr	r3, [r0, #0]
90011d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011d56:	4798      	blx	r3
90011d58:	b05b      	add	sp, #364	; 0x16c
90011d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011d5e:	bf00      	nop
90011d60:	240264e4 	.word	0x240264e4

90011d64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90011d64:	b570      	push	{r4, r5, r6, lr}
90011d66:	4604      	mov	r4, r0
90011d68:	2500      	movs	r5, #0
90011d6a:	9805      	ldr	r0, [sp, #20]
90011d6c:	f89d 601c 	ldrb.w	r6, [sp, #28]
90011d70:	6061      	str	r1, [r4, #4]
90011d72:	8263      	strh	r3, [r4, #18]
90011d74:	f89d 1010 	ldrb.w	r1, [sp, #16]
90011d78:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90011d7c:	8025      	strh	r5, [r4, #0]
90011d7e:	7221      	strb	r1, [r4, #8]
90011d80:	7266      	strb	r6, [r4, #9]
90011d82:	60e0      	str	r0, [r4, #12]
90011d84:	8222      	strh	r2, [r4, #16]
90011d86:	82a3      	strh	r3, [r4, #20]
90011d88:	82e5      	strh	r5, [r4, #22]
90011d8a:	8325      	strh	r5, [r4, #24]
90011d8c:	8365      	strh	r5, [r4, #26]
90011d8e:	83a5      	strh	r5, [r4, #28]
90011d90:	83e5      	strh	r5, [r4, #30]
90011d92:	8425      	strh	r5, [r4, #32]
90011d94:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90011d98:	b32e      	cbz	r6, 90011de6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011d9a:	6803      	ldr	r3, [r0, #0]
90011d9c:	695b      	ldr	r3, [r3, #20]
90011d9e:	4798      	blx	r3
90011da0:	4606      	mov	r6, r0
90011da2:	b300      	cbz	r0, 90011de6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011da4:	68e0      	ldr	r0, [r4, #12]
90011da6:	4631      	mov	r1, r6
90011da8:	6803      	ldr	r3, [r0, #0]
90011daa:	68db      	ldr	r3, [r3, #12]
90011dac:	4798      	blx	r3
90011dae:	4605      	mov	r5, r0
90011db0:	b1c8      	cbz	r0, 90011de6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011db2:	7b43      	ldrb	r3, [r0, #13]
90011db4:	7a82      	ldrb	r2, [r0, #10]
90011db6:	005b      	lsls	r3, r3, #1
90011db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
90011dbc:	4313      	orrs	r3, r2
90011dbe:	8423      	strh	r3, [r4, #32]
90011dc0:	7a63      	ldrb	r3, [r4, #9]
90011dc2:	2b06      	cmp	r3, #6
90011dc4:	d10f      	bne.n	90011de6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90011dc6:	68e0      	ldr	r0, [r4, #12]
90011dc8:	462a      	mov	r2, r5
90011dca:	4631      	mov	r1, r6
90011dcc:	6803      	ldr	r3, [r0, #0]
90011dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90011dd0:	4798      	blx	r3
90011dd2:	7b6b      	ldrb	r3, [r5, #13]
90011dd4:	005b      	lsls	r3, r3, #1
90011dd6:	f403 7280 	and.w	r2, r3, #256	; 0x100
90011dda:	7aab      	ldrb	r3, [r5, #10]
90011ddc:	4313      	orrs	r3, r2
90011dde:	4418      	add	r0, r3
90011de0:	8c23      	ldrh	r3, [r4, #32]
90011de2:	4418      	add	r0, r3
90011de4:	8420      	strh	r0, [r4, #32]
90011de6:	4620      	mov	r0, r4
90011de8:	bd70      	pop	{r4, r5, r6, pc}

90011dea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90011dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011dee:	2400      	movs	r4, #0
90011df0:	b085      	sub	sp, #20
90011df2:	4681      	mov	r9, r0
90011df4:	4688      	mov	r8, r1
90011df6:	4692      	mov	sl, r2
90011df8:	469b      	mov	fp, r3
90011dfa:	4627      	mov	r7, r4
90011dfc:	4625      	mov	r5, r4
90011dfe:	4626      	mov	r6, r4
90011e00:	4554      	cmp	r4, sl
90011e02:	da2a      	bge.n	90011e5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90011e04:	2300      	movs	r3, #0
90011e06:	9303      	str	r3, [sp, #12]
90011e08:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90011e0c:	429d      	cmp	r5, r3
90011e0e:	d004      	beq.n	90011e1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90011e10:	f242 030b 	movw	r3, #8203	; 0x200b
90011e14:	429d      	cmp	r5, r3
90011e16:	bf18      	it	ne
90011e18:	462f      	movne	r7, r5
90011e1a:	ab03      	add	r3, sp, #12
90011e1c:	4642      	mov	r2, r8
90011e1e:	4659      	mov	r1, fp
90011e20:	4648      	mov	r0, r9
90011e22:	f002 ff3b 	bl	90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90011e26:	4605      	mov	r5, r0
90011e28:	b1b8      	cbz	r0, 90011e5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90011e2a:	280a      	cmp	r0, #10
90011e2c:	d015      	beq.n	90011e5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90011e2e:	9a03      	ldr	r2, [sp, #12]
90011e30:	b18a      	cbz	r2, 90011e56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90011e32:	7b50      	ldrb	r0, [r2, #13]
90011e34:	4639      	mov	r1, r7
90011e36:	7a93      	ldrb	r3, [r2, #10]
90011e38:	0040      	lsls	r0, r0, #1
90011e3a:	8895      	ldrh	r5, [r2, #4]
90011e3c:	f400 7080 	and.w	r0, r0, #256	; 0x100
90011e40:	4303      	orrs	r3, r0
90011e42:	4640      	mov	r0, r8
90011e44:	9301      	str	r3, [sp, #4]
90011e46:	f8d8 3000 	ldr.w	r3, [r8]
90011e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90011e4c:	4798      	blx	r3
90011e4e:	9b01      	ldr	r3, [sp, #4]
90011e50:	4418      	add	r0, r3
90011e52:	4406      	add	r6, r0
90011e54:	b2b6      	uxth	r6, r6
90011e56:	3401      	adds	r4, #1
90011e58:	e7d2      	b.n	90011e00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90011e5a:	4630      	mov	r0, r6
90011e5c:	b005      	add	sp, #20
90011e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90011e62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90011e62:	2a02      	cmp	r2, #2
90011e64:	b530      	push	{r4, r5, lr}
90011e66:	d011      	beq.n	90011e8c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90011e68:	2a03      	cmp	r2, #3
90011e6a:	d01c      	beq.n	90011ea6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90011e6c:	2a01      	cmp	r2, #1
90011e6e:	d10c      	bne.n	90011e8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90011e70:	888b      	ldrh	r3, [r1, #4]
90011e72:	8801      	ldrh	r1, [r0, #0]
90011e74:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90011e78:	1a5b      	subs	r3, r3, r1
90011e7a:	8844      	ldrh	r4, [r0, #2]
90011e7c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90011e80:	1a9b      	subs	r3, r3, r2
90011e82:	8004      	strh	r4, [r0, #0]
90011e84:	8081      	strh	r1, [r0, #4]
90011e86:	8043      	strh	r3, [r0, #2]
90011e88:	80c2      	strh	r2, [r0, #6]
90011e8a:	bd30      	pop	{r4, r5, pc}
90011e8c:	88cb      	ldrh	r3, [r1, #6]
90011e8e:	8842      	ldrh	r2, [r0, #2]
90011e90:	1a9b      	subs	r3, r3, r2
90011e92:	88c2      	ldrh	r2, [r0, #6]
90011e94:	1a9b      	subs	r3, r3, r2
90011e96:	888a      	ldrh	r2, [r1, #4]
90011e98:	8801      	ldrh	r1, [r0, #0]
90011e9a:	8043      	strh	r3, [r0, #2]
90011e9c:	1a52      	subs	r2, r2, r1
90011e9e:	8881      	ldrh	r1, [r0, #4]
90011ea0:	1a52      	subs	r2, r2, r1
90011ea2:	8002      	strh	r2, [r0, #0]
90011ea4:	e7f1      	b.n	90011e8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90011ea6:	88cb      	ldrh	r3, [r1, #6]
90011ea8:	8841      	ldrh	r1, [r0, #2]
90011eaa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90011eae:	1a5b      	subs	r3, r3, r1
90011eb0:	f9b0 5000 	ldrsh.w	r5, [r0]
90011eb4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90011eb8:	1a9b      	subs	r3, r3, r2
90011eba:	8045      	strh	r5, [r0, #2]
90011ebc:	8082      	strh	r2, [r0, #4]
90011ebe:	8003      	strh	r3, [r0, #0]
90011ec0:	80c4      	strh	r4, [r0, #6]
90011ec2:	e7e2      	b.n	90011e8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90011ec4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90011ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011ec8:	b09f      	sub	sp, #124	; 0x7c
90011eca:	9116      	str	r1, [sp, #88]	; 0x58
90011ecc:	9317      	str	r3, [sp, #92]	; 0x5c
90011ece:	9929      	ldr	r1, [sp, #164]	; 0xa4
90011ed0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90011ed2:	8809      	ldrh	r1, [r1, #0]
90011ed4:	889b      	ldrh	r3, [r3, #4]
90011ed6:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90011eda:	440b      	add	r3, r1
90011edc:	9212      	str	r2, [sp, #72]	; 0x48
90011ede:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90011ee2:	b21b      	sxth	r3, r3
90011ee4:	9011      	str	r0, [sp, #68]	; 0x44
90011ee6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90011eea:	9310      	str	r3, [sp, #64]	; 0x40
90011eec:	f8d8 3000 	ldr.w	r3, [r8]
90011ef0:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90011ef4:	7b19      	ldrb	r1, [r3, #12]
90011ef6:	7adb      	ldrb	r3, [r3, #11]
90011ef8:	9114      	str	r1, [sp, #80]	; 0x50
90011efa:	9315      	str	r3, [sp, #84]	; 0x54
90011efc:	2a00      	cmp	r2, #0
90011efe:	d06a      	beq.n	90011fd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90011f00:	f898 3010 	ldrb.w	r3, [r8, #16]
90011f04:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90011f06:	2b06      	cmp	r3, #6
90011f08:	bf14      	ite	ne
90011f0a:	2301      	movne	r3, #1
90011f0c:	2302      	moveq	r3, #2
90011f0e:	4413      	add	r3, r2
90011f10:	f04f 0900 	mov.w	r9, #0
90011f14:	930f      	str	r3, [sp, #60]	; 0x3c
90011f16:	464c      	mov	r4, r9
90011f18:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90011f1c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90011f20:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90011f24:	4293      	cmp	r3, r2
90011f26:	f280 808f 	bge.w	90012048 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90011f2a:	2300      	movs	r3, #0
90011f2c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90011f30:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90011f34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90011f38:	429c      	cmp	r4, r3
90011f3a:	d006      	beq.n	90011f4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90011f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011f3e:	f242 020b 	movw	r2, #8203	; 0x200b
90011f42:	4294      	cmp	r4, r2
90011f44:	bf18      	it	ne
90011f46:	4623      	movne	r3, r4
90011f48:	930d      	str	r3, [sp, #52]	; 0x34
90011f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90011f4c:	992d      	ldr	r1, [sp, #180]	; 0xb4
90011f4e:	f8d8 2000 	ldr.w	r2, [r8]
90011f52:	428b      	cmp	r3, r1
90011f54:	db41      	blt.n	90011fda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90011f56:	6813      	ldr	r3, [r2, #0]
90011f58:	4610      	mov	r0, r2
90011f5a:	695b      	ldr	r3, [r3, #20]
90011f5c:	4798      	blx	r3
90011f5e:	4604      	mov	r4, r0
90011f60:	f8d8 0000 	ldr.w	r0, [r8]
90011f64:	aa1d      	add	r2, sp, #116	; 0x74
90011f66:	4621      	mov	r1, r4
90011f68:	6803      	ldr	r3, [r0, #0]
90011f6a:	689d      	ldr	r5, [r3, #8]
90011f6c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90011f70:	47a8      	blx	r5
90011f72:	901c      	str	r0, [sp, #112]	; 0x70
90011f74:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90011f78:	429c      	cmp	r4, r3
90011f7a:	f000 80ec 	beq.w	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90011f7e:	f242 030b 	movw	r3, #8203	; 0x200b
90011f82:	429c      	cmp	r4, r3
90011f84:	f000 80e7 	beq.w	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90011f88:	2c00      	cmp	r4, #0
90011f8a:	f000 80f9 	beq.w	90012180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90011f8e:	2c0a      	cmp	r4, #10
90011f90:	d060      	beq.n	90012054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90011f92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90011f94:	b36a      	cbz	r2, 90011ff2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90011f96:	8894      	ldrh	r4, [r2, #4]
90011f98:	f1bb 0f00 	cmp.w	fp, #0
90011f9c:	d03b      	beq.n	90012016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
90011f9e:	f892 900d 	ldrb.w	r9, [r2, #13]
90011fa2:	f1bb 0f01 	cmp.w	fp, #1
90011fa6:	ea4f 0949 	mov.w	r9, r9, lsl #1
90011faa:	f409 7380 	and.w	r3, r9, #256	; 0x100
90011fae:	f892 900a 	ldrb.w	r9, [r2, #10]
90011fb2:	ea49 0903 	orr.w	r9, r9, r3
90011fb6:	d134      	bne.n	90012022 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90011fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011fba:	eba6 0609 	sub.w	r6, r6, r9
90011fbe:	2b00      	cmp	r3, #0
90011fc0:	d14f      	bne.n	90012062 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90011fc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
90011fc4:	eb09 0306 	add.w	r3, r9, r6
90011fc8:	4413      	add	r3, r2
90011fca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90011fcc:	f9b2 2000 	ldrsh.w	r2, [r2]
90011fd0:	4293      	cmp	r3, r2
90011fd2:	da51      	bge.n	90012078 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90011fd4:	e038      	b.n	90012048 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90011fd6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90011fd8:	e79a      	b.n	90011f10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90011fda:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90011fde:	4659      	mov	r1, fp
90011fe0:	982c      	ldr	r0, [sp, #176]	; 0xb0
90011fe2:	9301      	str	r3, [sp, #4]
90011fe4:	ab1d      	add	r3, sp, #116	; 0x74
90011fe6:	9300      	str	r3, [sp, #0]
90011fe8:	ab1c      	add	r3, sp, #112	; 0x70
90011fea:	f002 fea0 	bl	90014d2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
90011fee:	4604      	mov	r4, r0
90011ff0:	e7c0      	b.n	90011f74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90011ff2:	f8d8 0000 	ldr.w	r0, [r8]
90011ff6:	6803      	ldr	r3, [r0, #0]
90011ff8:	691b      	ldr	r3, [r3, #16]
90011ffa:	4798      	blx	r3
90011ffc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90012000:	4298      	cmp	r0, r3
90012002:	f000 80a8 	beq.w	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012006:	f242 030b 	movw	r3, #8203	; 0x200b
9001200a:	4298      	cmp	r0, r3
9001200c:	f000 80a3 	beq.w	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012010:	f1bb 0f00 	cmp.w	fp, #0
90012014:	d100      	bne.n	90012018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90012016:	444e      	add	r6, r9
90012018:	9a1c      	ldr	r2, [sp, #112]	; 0x70
9001201a:	2a00      	cmp	r2, #0
9001201c:	d1bf      	bne.n	90011f9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
9001201e:	4691      	mov	r9, r2
90012020:	e099      	b.n	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012024:	2b00      	cmp	r3, #0
90012026:	f000 80ad 	beq.w	90012184 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
9001202a:	f1bb 0f00 	cmp.w	fp, #0
9001202e:	d118      	bne.n	90012062 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90012030:	f8d8 0000 	ldr.w	r0, [r8]
90012034:	990d      	ldr	r1, [sp, #52]	; 0x34
90012036:	6803      	ldr	r3, [r0, #0]
90012038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001203a:	4798      	blx	r3
9001203c:	4406      	add	r6, r0
9001203e:	9b15      	ldr	r3, [sp, #84]	; 0x54
90012040:	9a10      	ldr	r2, [sp, #64]	; 0x40
90012042:	1af3      	subs	r3, r6, r3
90012044:	4293      	cmp	r3, r2
90012046:	dd17      	ble.n	90012078 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90012048:	2c00      	cmp	r4, #0
9001204a:	f000 8099 	beq.w	90012180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001204e:	2c0a      	cmp	r4, #10
90012050:	f040 8087 	bne.w	90012162 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90012054:	240a      	movs	r4, #10
90012056:	fab4 f084 	clz	r0, r4
9001205a:	0940      	lsrs	r0, r0, #5
9001205c:	b01f      	add	sp, #124	; 0x7c
9001205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012062:	f8d8 0000 	ldr.w	r0, [r8]
90012066:	990d      	ldr	r1, [sp, #52]	; 0x34
90012068:	6803      	ldr	r3, [r0, #0]
9001206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001206c:	4798      	blx	r3
9001206e:	f1bb 0f01 	cmp.w	fp, #1
90012072:	eba6 0600 	sub.w	r6, r6, r0
90012076:	d0a4      	beq.n	90011fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90012078:	981c      	ldr	r0, [sp, #112]	; 0x70
9001207a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001207c:	f990 1009 	ldrsb.w	r1, [r0, #9]
90012080:	f9b3 7000 	ldrsh.w	r7, [r3]
90012084:	7b43      	ldrb	r3, [r0, #13]
90012086:	4431      	add	r1, r6
90012088:	015b      	lsls	r3, r3, #5
9001208a:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001208e:	7983      	ldrb	r3, [r0, #6]
90012090:	4313      	orrs	r3, r2
90012092:	440b      	add	r3, r1
90012094:	42bb      	cmp	r3, r7
90012096:	db5e      	blt.n	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90012098:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001209a:	4299      	cmp	r1, r3
9001209c:	da5b      	bge.n	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001209e:	f8d8 0000 	ldr.w	r0, [r8]
900120a2:	42b7      	cmp	r7, r6
900120a4:	6803      	ldr	r3, [r0, #0]
900120a6:	bfcc      	ite	gt
900120a8:	1bbf      	subgt	r7, r7, r6
900120aa:	2700      	movle	r7, #0
900120ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900120ae:	bfc8      	it	gt
900120b0:	b2bf      	uxthgt	r7, r7
900120b2:	4798      	blx	r3
900120b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900120b6:	7b5a      	ldrb	r2, [r3, #13]
900120b8:	00d1      	lsls	r1, r2, #3
900120ba:	f401 7580 	and.w	r5, r1, #256	; 0x100
900120be:	7a19      	ldrb	r1, [r3, #8]
900120c0:	4329      	orrs	r1, r5
900120c2:	0655      	lsls	r5, r2, #25
900120c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
900120c6:	bf48      	it	mi
900120c8:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
900120cc:	4405      	add	r5, r0
900120ce:	bf48      	it	mi
900120d0:	b209      	sxthmi	r1, r1
900120d2:	1a6d      	subs	r5, r5, r1
900120d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
900120d6:	b2ad      	uxth	r5, r5
900120d8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
900120dc:	fa0f fa85 	sxth.w	sl, r5
900120e0:	4551      	cmp	r1, sl
900120e2:	dd3c      	ble.n	9001215e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
900120e4:	0112      	lsls	r2, r2, #4
900120e6:	79d8      	ldrb	r0, [r3, #7]
900120e8:	f402 7280 	and.w	r2, r2, #256	; 0x100
900120ec:	4302      	orrs	r2, r0
900120ee:	4492      	add	sl, r2
900120f0:	4551      	cmp	r1, sl
900120f2:	dc30      	bgt.n	90012156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900120f4:	1b4d      	subs	r5, r1, r5
900120f6:	468a      	mov	sl, r1
900120f8:	b22d      	sxth	r5, r5
900120fa:	9319      	str	r3, [sp, #100]	; 0x64
900120fc:	b2ad      	uxth	r5, r5
900120fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
90012100:	f8d8 0000 	ldr.w	r0, [r8]
90012104:	681a      	ldr	r2, [r3, #0]
90012106:	6801      	ldr	r1, [r0, #0]
90012108:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
9001210a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001210c:	9313      	str	r3, [sp, #76]	; 0x4c
9001210e:	9218      	str	r2, [sp, #96]	; 0x60
90012110:	6c09      	ldr	r1, [r1, #64]	; 0x40
90012112:	4788      	blx	r1
90012114:	f898 1006 	ldrb.w	r1, [r8, #6]
90012118:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001211a:	910b      	str	r1, [sp, #44]	; 0x2c
9001211c:	f898 100e 	ldrb.w	r1, [r8, #14]
90012120:	9a18      	ldr	r2, [sp, #96]	; 0x60
90012122:	910a      	str	r1, [sp, #40]	; 0x28
90012124:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90012128:	9109      	str	r1, [sp, #36]	; 0x24
9001212a:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001212e:	9305      	str	r3, [sp, #20]
90012130:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90012132:	9206      	str	r2, [sp, #24]
90012134:	9304      	str	r3, [sp, #16]
90012136:	9b12      	ldr	r3, [sp, #72]	; 0x48
90012138:	f8cd a004 	str.w	sl, [sp, #4]
9001213c:	e9cd 7502 	strd	r7, r5, [sp, #8]
90012140:	4437      	add	r7, r6
90012142:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90012144:	b23f      	sxth	r7, r7
90012146:	e9cd 0107 	strd	r0, r1, [sp, #28]
9001214a:	9700      	str	r7, [sp, #0]
9001214c:	9916      	ldr	r1, [sp, #88]	; 0x58
9001214e:	681a      	ldr	r2, [r3, #0]
90012150:	9811      	ldr	r0, [sp, #68]	; 0x44
90012152:	685b      	ldr	r3, [r3, #4]
90012154:	47a8      	blx	r5
90012156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90012158:	3301      	adds	r3, #1
9001215a:	930e      	str	r3, [sp, #56]	; 0x38
9001215c:	e6e0      	b.n	90011f20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
9001215e:	2500      	movs	r5, #0
90012160:	e7cb      	b.n	900120fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
90012162:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90012164:	3501      	adds	r5, #1
90012166:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90012168:	429d      	cmp	r5, r3
9001216a:	f6bf af74 	bge.w	90012056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
9001216e:	4659      	mov	r1, fp
90012170:	982c      	ldr	r0, [sp, #176]	; 0xb0
90012172:	f7f3 f8d3 	bl	9000531c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90012176:	4604      	mov	r4, r0
90012178:	b110      	cbz	r0, 90012180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001217a:	280a      	cmp	r0, #10
9001217c:	d1f2      	bne.n	90012164 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
9001217e:	e769      	b.n	90012054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90012180:	2400      	movs	r4, #0
90012182:	e768      	b.n	90012056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90012184:	f1bb 0f00 	cmp.w	fp, #0
90012188:	f43f af59 	beq.w	9001203e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
9001218c:	e774      	b.n	90012078 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

9001218e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
9001218e:	b530      	push	{r4, r5, lr}
90012190:	8ac4      	ldrh	r4, [r0, #22]
90012192:	8b45      	ldrh	r5, [r0, #26]
90012194:	8343      	strh	r3, [r0, #26]
90012196:	442c      	add	r4, r5
90012198:	1ae4      	subs	r4, r4, r3
9001219a:	8b83      	ldrh	r3, [r0, #28]
9001219c:	82c4      	strh	r4, [r0, #22]
9001219e:	8b04      	ldrh	r4, [r0, #24]
900121a0:	4422      	add	r2, r4
900121a2:	440c      	add	r4, r1
900121a4:	1a59      	subs	r1, r3, r1
900121a6:	83c2      	strh	r2, [r0, #30]
900121a8:	8304      	strh	r4, [r0, #24]
900121aa:	8381      	strh	r1, [r0, #28]
900121ac:	bd30      	pop	{r4, r5, pc}

900121ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
900121ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900121b2:	4604      	mov	r4, r0
900121b4:	8a47      	ldrh	r7, [r0, #18]
900121b6:	68c0      	ldr	r0, [r0, #12]
900121b8:	b085      	sub	sp, #20
900121ba:	6803      	ldr	r3, [r0, #0]
900121bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900121be:	4798      	blx	r3
900121c0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
900121c4:	7a63      	ldrb	r3, [r4, #9]
900121c6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
900121ca:	3b01      	subs	r3, #1
900121cc:	42b7      	cmp	r7, r6
900121ce:	bfac      	ite	ge
900121d0:	f04f 0900 	movge.w	r9, #0
900121d4:	f04f 0901 	movlt.w	r9, #1
900121d8:	2b05      	cmp	r3, #5
900121da:	d804      	bhi.n	900121e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
900121dc:	e8df f003 	tbb	[pc, r3]
900121e0:	470f0854 	.word	0x470f0854
900121e4:	4c4c      	.short	0x4c4c
900121e6:	2500      	movs	r5, #0
900121e8:	46a9      	mov	r9, r5
900121ea:	462e      	mov	r6, r5
900121ec:	462f      	mov	r7, r5
900121ee:	e00e      	b.n	9001220e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900121f0:	42b7      	cmp	r7, r6
900121f2:	f04f 0500 	mov.w	r5, #0
900121f6:	bfb4      	ite	lt
900121f8:	2600      	movlt	r6, #0
900121fa:	2601      	movge	r6, #1
900121fc:	e7f6      	b.n	900121ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900121fe:	42b7      	cmp	r7, r6
90012200:	464d      	mov	r5, r9
90012202:	f04f 0900 	mov.w	r9, #0
90012206:	bfb4      	ite	lt
90012208:	2600      	movlt	r6, #0
9001220a:	2601      	movge	r6, #1
9001220c:	464f      	mov	r7, r9
9001220e:	f04f 0800 	mov.w	r8, #0
90012212:	f8a4 8016 	strh.w	r8, [r4, #22]
90012216:	f8a4 8018 	strh.w	r8, [r4, #24]
9001221a:	f8cd 8004 	str.w	r8, [sp, #4]
9001221e:	2300      	movs	r3, #0
90012220:	9303      	str	r3, [sp, #12]
90012222:	8823      	ldrh	r3, [r4, #0]
90012224:	2b20      	cmp	r3, #32
90012226:	d033      	beq.n	90012290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90012228:	f242 010b 	movw	r1, #8203	; 0x200b
9001222c:	1a5a      	subs	r2, r3, r1
9001222e:	f1d2 0a00 	rsbs	sl, r2, #0
90012232:	eb4a 0a02 	adc.w	sl, sl, r2
90012236:	f64f 62ff 	movw	r2, #65279	; 0xfeff
9001223a:	4293      	cmp	r3, r2
9001223c:	d008      	beq.n	90012250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
9001223e:	428b      	cmp	r3, r1
90012240:	9a01      	ldr	r2, [sp, #4]
90012242:	bf0e      	itee	eq
90012244:	f04f 0a01 	moveq.w	sl, #1
90012248:	461a      	movne	r2, r3
9001224a:	f04f 0a00 	movne.w	sl, #0
9001224e:	9201      	str	r2, [sp, #4]
90012250:	ab03      	add	r3, sp, #12
90012252:	68e2      	ldr	r2, [r4, #12]
90012254:	7a21      	ldrb	r1, [r4, #8]
90012256:	6860      	ldr	r0, [r4, #4]
90012258:	f002 fd20 	bl	90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001225c:	8020      	strh	r0, [r4, #0]
9001225e:	b9d8      	cbnz	r0, 90012298 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
90012260:	8ba2      	ldrh	r2, [r4, #28]
90012262:	2300      	movs	r3, #0
90012264:	4611      	mov	r1, r2
90012266:	4620      	mov	r0, r4
90012268:	f7ff ff91 	bl	9001218e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
9001226c:	e06e      	b.n	9001234c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001226e:	2500      	movs	r5, #0
90012270:	2701      	movs	r7, #1
90012272:	46a9      	mov	r9, r5
90012274:	462e      	mov	r6, r5
90012276:	e7ca      	b.n	9001220e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90012278:	42b7      	cmp	r7, r6
9001227a:	f04f 0500 	mov.w	r5, #0
9001227e:	bfb4      	ite	lt
90012280:	2700      	movlt	r7, #0
90012282:	2701      	movge	r7, #1
90012284:	462e      	mov	r6, r5
90012286:	e7c2      	b.n	9001220e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90012288:	2500      	movs	r5, #0
9001228a:	2601      	movs	r6, #1
9001228c:	46a9      	mov	r9, r5
9001228e:	e7ad      	b.n	900121ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90012290:	9301      	str	r3, [sp, #4]
90012292:	f04f 0a01 	mov.w	sl, #1
90012296:	e7db      	b.n	90012250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90012298:	8b63      	ldrh	r3, [r4, #26]
9001229a:	280a      	cmp	r0, #10
9001229c:	f103 0301 	add.w	r3, r3, #1
900122a0:	8363      	strh	r3, [r4, #26]
900122a2:	d0dd      	beq.n	90012260 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
900122a4:	9a03      	ldr	r2, [sp, #12]
900122a6:	bb62      	cbnz	r2, 90012302 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
900122a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900122ac:	4298      	cmp	r0, r3
900122ae:	d003      	beq.n	900122b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
900122b0:	f242 030b 	movw	r3, #8203	; 0x200b
900122b4:	4298      	cmp	r0, r3
900122b6:	d1b2      	bne.n	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900122b8:	8823      	ldrh	r3, [r4, #0]
900122ba:	8ba1      	ldrh	r1, [r4, #28]
900122bc:	2b20      	cmp	r3, #32
900122be:	d003      	beq.n	900122c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
900122c0:	f242 000b 	movw	r0, #8203	; 0x200b
900122c4:	4283      	cmp	r3, r0
900122c6:	d131      	bne.n	9001232c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
900122c8:	f1ba 0f00 	cmp.w	sl, #0
900122cc:	bf0a      	itet	eq
900122ce:	4688      	moveq	r8, r1
900122d0:	4650      	movne	r0, sl
900122d2:	2001      	moveq	r0, #1
900122d4:	440a      	add	r2, r1
900122d6:	8b23      	ldrh	r3, [r4, #24]
900122d8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
900122dc:	b292      	uxth	r2, r2
900122de:	83a2      	strh	r2, [r4, #28]
900122e0:	4413      	add	r3, r2
900122e2:	f1b9 0f00 	cmp.w	r9, #0
900122e6:	d102      	bne.n	900122ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
900122e8:	2d00      	cmp	r5, #0
900122ea:	d042      	beq.n	90012372 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
900122ec:	b300      	cbz	r0, 90012330 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
900122ee:	8c21      	ldrh	r1, [r4, #32]
900122f0:	4419      	add	r1, r3
900122f2:	458c      	cmp	ip, r1
900122f4:	da37      	bge.n	90012366 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900122f6:	8ae1      	ldrh	r1, [r4, #22]
900122f8:	2900      	cmp	r1, #0
900122fa:	d034      	beq.n	90012366 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900122fc:	4563      	cmp	r3, ip
900122fe:	dd8e      	ble.n	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012300:	e01d      	b.n	9001233e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
90012302:	8893      	ldrh	r3, [r2, #4]
90012304:	9901      	ldr	r1, [sp, #4]
90012306:	8023      	strh	r3, [r4, #0]
90012308:	f892 b00d 	ldrb.w	fp, [r2, #13]
9001230c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
90012310:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90012314:	f892 b00a 	ldrb.w	fp, [r2, #10]
90012318:	ea4b 0b00 	orr.w	fp, fp, r0
9001231c:	68e0      	ldr	r0, [r4, #12]
9001231e:	6803      	ldr	r3, [r0, #0]
90012320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90012322:	4798      	blx	r3
90012324:	eb0b 0200 	add.w	r2, fp, r0
90012328:	b292      	uxth	r2, r2
9001232a:	e7c5      	b.n	900122b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001232c:	2000      	movs	r0, #0
9001232e:	e7d1      	b.n	900122d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
90012330:	4563      	cmp	r3, ip
90012332:	f77f af74 	ble.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012336:	8ae3      	ldrh	r3, [r4, #22]
90012338:	2b00      	cmp	r3, #0
9001233a:	f43f af70 	beq.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001233e:	2301      	movs	r3, #1
90012340:	8c22      	ldrh	r2, [r4, #32]
90012342:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
90012346:	8be3      	ldrh	r3, [r4, #30]
90012348:	4413      	add	r3, r2
9001234a:	83e3      	strh	r3, [r4, #30]
9001234c:	68e0      	ldr	r0, [r4, #12]
9001234e:	6803      	ldr	r3, [r0, #0]
90012350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012352:	4798      	blx	r3
90012354:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90012358:	4418      	add	r0, r3
9001235a:	8a63      	ldrh	r3, [r4, #18]
9001235c:	1a18      	subs	r0, r3, r0
9001235e:	8260      	strh	r0, [r4, #18]
90012360:	b005      	add	sp, #20
90012362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012366:	2300      	movs	r3, #0
90012368:	4611      	mov	r1, r2
9001236a:	4620      	mov	r0, r4
9001236c:	f7ff ff0f 	bl	9001218e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90012370:	e755      	b.n	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012372:	4563      	cmp	r3, ip
90012374:	dd14      	ble.n	900123a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
90012376:	b117      	cbz	r7, 9001237e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90012378:	2301      	movs	r3, #1
9001237a:	460a      	mov	r2, r1
9001237c:	e772      	b.n	90012264 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
9001237e:	2e00      	cmp	r6, #0
90012380:	f43f af4d 	beq.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90012384:	2800      	cmp	r0, #0
90012386:	f47f af4a 	bne.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001238a:	f1ba 0f00 	cmp.w	sl, #0
9001238e:	d002      	beq.n	90012396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
90012390:	2301      	movs	r3, #1
90012392:	4642      	mov	r2, r8
90012394:	e767      	b.n	90012266 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90012396:	8ae3      	ldrh	r3, [r4, #22]
90012398:	2b00      	cmp	r3, #0
9001239a:	f43f af40 	beq.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001239e:	e7d5      	b.n	9001234c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900123a0:	2800      	cmp	r0, #0
900123a2:	f47f af3c 	bne.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123a6:	f1ba 0f00 	cmp.w	sl, #0
900123aa:	f43f af38 	beq.w	9001221e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900123ae:	2301      	movs	r3, #1
900123b0:	4642      	mov	r2, r8
900123b2:	e7da      	b.n	9001236a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

900123b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
900123b4:	b5f0      	push	{r4, r5, r6, r7, lr}
900123b6:	4605      	mov	r5, r0
900123b8:	b08f      	sub	sp, #60	; 0x3c
900123ba:	4617      	mov	r7, r2
900123bc:	461c      	mov	r4, r3
900123be:	460e      	mov	r6, r1
900123c0:	b1d1      	cbz	r1, 900123f8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
900123c2:	681b      	ldr	r3, [r3, #0]
900123c4:	4620      	mov	r0, r4
900123c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900123c8:	4798      	blx	r3
900123ca:	4240      	negs	r0, r0
900123cc:	9603      	str	r6, [sp, #12]
900123ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
900123d2:	b200      	sxth	r0, r0
900123d4:	9700      	str	r7, [sp, #0]
900123d6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
900123da:	4629      	mov	r1, r5
900123dc:	e9cd 4001 	strd	r4, r0, [sp, #4]
900123e0:	2401      	movs	r4, #1
900123e2:	a805      	add	r0, sp, #20
900123e4:	f7ff fcbe 	bl	90011d64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900123e8:	a805      	add	r0, sp, #20
900123ea:	f7ff fee0 	bl	900121ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900123ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
900123f2:	b163      	cbz	r3, 9001240e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
900123f4:	3401      	adds	r4, #1
900123f6:	e7f7      	b.n	900123e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
900123f8:	2401      	movs	r4, #1
900123fa:	f002 fd1b 	bl	90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>
900123fe:	280a      	cmp	r0, #10
90012400:	4628      	mov	r0, r5
90012402:	bf08      	it	eq
90012404:	3401      	addeq	r4, #1
90012406:	f002 fd15 	bl	90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001240a:	2800      	cmp	r0, #0
9001240c:	d1f7      	bne.n	900123fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
9001240e:	b2a0      	uxth	r0, r4
90012410:	b00f      	add	sp, #60	; 0x3c
90012412:	bdf0      	pop	{r4, r5, r6, r7, pc}

90012414 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90012414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012418:	b0e3      	sub	sp, #396	; 0x18c
9001241a:	461c      	mov	r4, r3
9001241c:	4683      	mov	fp, r0
9001241e:	4688      	mov	r8, r1
90012420:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
90012422:	2b00      	cmp	r3, #0
90012424:	f000 810f 	beq.w	90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012428:	6823      	ldr	r3, [r4, #0]
9001242a:	2b00      	cmp	r3, #0
9001242c:	f000 810b 	beq.w	90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012430:	7ba3      	ldrb	r3, [r4, #14]
90012432:	2b00      	cmp	r3, #0
90012434:	f000 8107 	beq.w	90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012438:	ad0a      	add	r5, sp, #40	; 0x28
9001243a:	6810      	ldr	r0, [r2, #0]
9001243c:	6851      	ldr	r1, [r2, #4]
9001243e:	462b      	mov	r3, r5
90012440:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
90012444:	c303      	stmia	r3!, {r0, r1}
90012446:	2100      	movs	r1, #0
90012448:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
9001244c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90012450:	4628      	mov	r0, r5
90012452:	910c      	str	r1, [sp, #48]	; 0x30
90012454:	a90c      	add	r1, sp, #48	; 0x30
90012456:	79a2      	ldrb	r2, [r4, #6]
90012458:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001245c:	f7ff fd01 	bl	90011e62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90012460:	a90c      	add	r1, sp, #48	; 0x30
90012462:	79a2      	ldrb	r2, [r4, #6]
90012464:	4608      	mov	r0, r1
90012466:	f7ff fcfc 	bl	90011e62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
9001246a:	a817      	add	r0, sp, #92	; 0x5c
9001246c:	f002 f8b6 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90012470:	6820      	ldr	r0, [r4, #0]
90012472:	6803      	ldr	r3, [r0, #0]
90012474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90012476:	4798      	blx	r3
90012478:	4606      	mov	r6, r0
9001247a:	6820      	ldr	r0, [r4, #0]
9001247c:	6803      	ldr	r3, [r0, #0]
9001247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90012480:	4798      	blx	r3
90012482:	4633      	mov	r3, r6
90012484:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90012486:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90012488:	9000      	str	r0, [sp, #0]
9001248a:	a817      	add	r0, sp, #92	; 0x5c
9001248c:	f002 f901 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90012490:	6820      	ldr	r0, [r4, #0]
90012492:	f894 a004 	ldrb.w	sl, [r4, #4]
90012496:	6803      	ldr	r3, [r0, #0]
90012498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001249a:	4798      	blx	r3
9001249c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
900124a0:	6823      	ldr	r3, [r4, #0]
900124a2:	4607      	mov	r7, r0
900124a4:	4406      	add	r6, r0
900124a6:	a830      	add	r0, sp, #192	; 0xc0
900124a8:	f893 9009 	ldrb.w	r9, [r3, #9]
900124ac:	f002 f896 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
900124b0:	7c23      	ldrb	r3, [r4, #16]
900124b2:	b17b      	cbz	r3, 900124d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
900124b4:	6820      	ldr	r0, [r4, #0]
900124b6:	6803      	ldr	r3, [r0, #0]
900124b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900124ba:	4798      	blx	r3
900124bc:	9009      	str	r0, [sp, #36]	; 0x24
900124be:	6820      	ldr	r0, [r4, #0]
900124c0:	6802      	ldr	r2, [r0, #0]
900124c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
900124c4:	4790      	blx	r2
900124c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900124c8:	9000      	str	r0, [sp, #0]
900124ca:	a830      	add	r0, sp, #192	; 0xc0
900124cc:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900124ce:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900124d0:	f002 f8df 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900124d4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
900124d8:	a80e      	add	r0, sp, #56	; 0x38
900124da:	7be2      	ldrb	r2, [r4, #15]
900124dc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
900124e0:	1a8a      	subs	r2, r1, r2
900124e2:	7c21      	ldrb	r1, [r4, #16]
900124e4:	9103      	str	r1, [sp, #12]
900124e6:	b292      	uxth	r2, r2
900124e8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
900124ec:	9102      	str	r1, [sp, #8]
900124ee:	6821      	ldr	r1, [r4, #0]
900124f0:	9101      	str	r1, [sp, #4]
900124f2:	7961      	ldrb	r1, [r4, #5]
900124f4:	9100      	str	r1, [sp, #0]
900124f6:	a930      	add	r1, sp, #192	; 0xc0
900124f8:	f7ff fc34 	bl	90011d64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900124fc:	2e00      	cmp	r6, #0
900124fe:	dc5b      	bgt.n	900125b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90012500:	af17      	add	r7, sp, #92	; 0x5c
90012502:	f04f 0900 	mov.w	r9, #0
90012506:	7c23      	ldrb	r3, [r4, #16]
90012508:	2b00      	cmp	r3, #0
9001250a:	f000 80ae 	beq.w	9001266a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
9001250e:	a80e      	add	r0, sp, #56	; 0x38
90012510:	f7ff fe4d 	bl	900121ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90012514:	f1ba 0f00 	cmp.w	sl, #0
90012518:	f000 80a2 	beq.w	90012660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
9001251c:	7c23      	ldrb	r3, [r4, #16]
9001251e:	2264      	movs	r2, #100	; 0x64
90012520:	4639      	mov	r1, r7
90012522:	a849      	add	r0, sp, #292	; 0x124
90012524:	9309      	str	r3, [sp, #36]	; 0x24
90012526:	f00e fefd 	bl	90021324 <memcpy>
9001252a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001252c:	2b00      	cmp	r3, #0
9001252e:	f000 80a4 	beq.w	9001267a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
90012532:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90012536:	7922      	ldrb	r2, [r4, #4]
90012538:	2a01      	cmp	r2, #1
9001253a:	f040 8087 	bne.w	9001264c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
9001253e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
90012542:	1ac0      	subs	r0, r0, r3
90012544:	2302      	movs	r3, #2
90012546:	fb90 f0f3 	sdiv	r0, r0, r3
9001254a:	b200      	sxth	r0, r0
9001254c:	7c23      	ldrb	r3, [r4, #16]
9001254e:	2b00      	cmp	r3, #0
90012550:	f000 8088 	beq.w	90012664 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90012554:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90012558:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
9001255c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90012560:	e9cd 2105 	strd	r2, r1, [sp, #20]
90012564:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90012568:	2100      	movs	r1, #0
9001256a:	4410      	add	r0, r2
9001256c:	4642      	mov	r2, r8
9001256e:	b200      	sxth	r0, r0
90012570:	e9cd 9703 	strd	r9, r7, [sp, #12]
90012574:	9000      	str	r0, [sp, #0]
90012576:	4658      	mov	r0, fp
90012578:	e9cd 5401 	strd	r5, r4, [sp, #4]
9001257c:	f7ff fca2 	bl	90011ec4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90012580:	2800      	cmp	r0, #0
90012582:	d160      	bne.n	90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90012584:	b2b2      	uxth	r2, r6
90012586:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001258a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
9001258e:	4413      	add	r3, r2
90012590:	1a8a      	subs	r2, r1, r2
90012592:	b21b      	sxth	r3, r3
90012594:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90012598:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
9001259c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
900125a0:	2a00      	cmp	r2, #0
900125a2:	d150      	bne.n	90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900125a4:	6822      	ldr	r2, [r4, #0]
900125a6:	8869      	ldrh	r1, [r5, #2]
900125a8:	7a12      	ldrb	r2, [r2, #8]
900125aa:	1a9b      	subs	r3, r3, r2
900125ac:	88ea      	ldrh	r2, [r5, #6]
900125ae:	440a      	add	r2, r1
900125b0:	b212      	sxth	r2, r2
900125b2:	4293      	cmp	r3, r2
900125b4:	dda7      	ble.n	90012506 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
900125b6:	e046      	b.n	90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900125b8:	7c23      	ldrb	r3, [r4, #16]
900125ba:	444f      	add	r7, r9
900125bc:	b1c3      	cbz	r3, 900125f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
900125be:	f64f 79ff 	movw	r9, #65535	; 0xffff
900125c2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900125c6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900125ca:	443b      	add	r3, r7
900125cc:	4293      	cmp	r3, r2
900125ce:	da97      	bge.n	90012500 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
900125d0:	a80e      	add	r0, sp, #56	; 0x38
900125d2:	f7ff fdec 	bl	900121ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900125d6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
900125da:	3b01      	subs	r3, #1
900125dc:	b29b      	uxth	r3, r3
900125de:	454b      	cmp	r3, r9
900125e0:	9309      	str	r3, [sp, #36]	; 0x24
900125e2:	d021      	beq.n	90012628 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
900125e4:	7961      	ldrb	r1, [r4, #5]
900125e6:	a817      	add	r0, sp, #92	; 0x5c
900125e8:	f7f2 fe98 	bl	9000531c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900125ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
900125ee:	e7f4      	b.n	900125da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
900125f0:	fa1f f986 	uxth.w	r9, r6
900125f4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900125f8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900125fc:	443b      	add	r3, r7
900125fe:	4293      	cmp	r3, r2
90012600:	f6bf af7e 	bge.w	90012500 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90012604:	a817      	add	r0, sp, #92	; 0x5c
90012606:	f002 fc15 	bl	90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001260a:	b1e0      	cbz	r0, 90012646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
9001260c:	280a      	cmp	r0, #10
9001260e:	d1f1      	bne.n	900125f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90012610:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90012614:	444b      	add	r3, r9
90012616:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001261a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
9001261e:	eba3 0309 	sub.w	r3, r3, r9
90012622:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90012626:	e7e5      	b.n	900125f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90012628:	b2b3      	uxth	r3, r6
9001262a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001262e:	441a      	add	r2, r3
90012630:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90012634:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90012638:	1ad3      	subs	r3, r2, r3
9001263a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001263e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90012642:	2b00      	cmp	r3, #0
90012644:	d1bd      	bne.n	900125c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90012646:	b063      	add	sp, #396	; 0x18c
90012648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001264c:	2a02      	cmp	r2, #2
9001264e:	d105      	bne.n	9001265c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90012650:	7be2      	ldrb	r2, [r4, #15]
90012652:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90012656:	1a80      	subs	r0, r0, r2
90012658:	1ac0      	subs	r0, r0, r3
9001265a:	e776      	b.n	9001254a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
9001265c:	2000      	movs	r0, #0
9001265e:	e775      	b.n	9001254c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90012660:	7be0      	ldrb	r0, [r4, #15]
90012662:	e773      	b.n	9001254c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90012664:	f647 72ff 	movw	r2, #32767	; 0x7fff
90012668:	e776      	b.n	90012558 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
9001266a:	f1ba 0f00 	cmp.w	sl, #0
9001266e:	d0f7      	beq.n	90012660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90012670:	2264      	movs	r2, #100	; 0x64
90012672:	4639      	mov	r1, r7
90012674:	a849      	add	r0, sp, #292	; 0x124
90012676:	f00e fe55 	bl	90021324 <memcpy>
9001267a:	2300      	movs	r3, #0
9001267c:	f647 72ff 	movw	r2, #32767	; 0x7fff
90012680:	6821      	ldr	r1, [r4, #0]
90012682:	a849      	add	r0, sp, #292	; 0x124
90012684:	f7ff fbb1 	bl	90011dea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90012688:	b203      	sxth	r3, r0
9001268a:	e754      	b.n	90012536 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

9001268c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
9001268c:	2b03      	cmp	r3, #3
9001268e:	d818      	bhi.n	900126c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90012690:	e8df f003 	tbb	[pc, r3]
90012694:	130d0602 	.word	0x130d0602
90012698:	f9b0 2000 	ldrsh.w	r2, [r0]
9001269c:	1850      	adds	r0, r2, r1
9001269e:	4770      	bx	lr
900126a0:	8803      	ldrh	r3, [r0, #0]
900126a2:	8880      	ldrh	r0, [r0, #4]
900126a4:	4418      	add	r0, r3
900126a6:	b200      	sxth	r0, r0
900126a8:	1a80      	subs	r0, r0, r2
900126aa:	3801      	subs	r0, #1
900126ac:	4770      	bx	lr
900126ae:	8803      	ldrh	r3, [r0, #0]
900126b0:	8880      	ldrh	r0, [r0, #4]
900126b2:	4418      	add	r0, r3
900126b4:	b200      	sxth	r0, r0
900126b6:	1a40      	subs	r0, r0, r1
900126b8:	e7f7      	b.n	900126aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
900126ba:	f9b0 0000 	ldrsh.w	r0, [r0]
900126be:	4410      	add	r0, r2
900126c0:	4770      	bx	lr
900126c2:	2000      	movs	r0, #0
900126c4:	4770      	bx	lr

900126c6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
900126c6:	2b03      	cmp	r3, #3
900126c8:	d817      	bhi.n	900126fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
900126ca:	e8df f003 	tbb	[pc, r3]
900126ce:	0602      	.short	0x0602
900126d0:	1009      	.short	0x1009
900126d2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900126d6:	1850      	adds	r0, r2, r1
900126d8:	4770      	bx	lr
900126da:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
900126de:	e7fa      	b.n	900126d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
900126e0:	8843      	ldrh	r3, [r0, #2]
900126e2:	88c0      	ldrh	r0, [r0, #6]
900126e4:	4418      	add	r0, r3
900126e6:	b200      	sxth	r0, r0
900126e8:	1a80      	subs	r0, r0, r2
900126ea:	3801      	subs	r0, #1
900126ec:	4770      	bx	lr
900126ee:	8843      	ldrh	r3, [r0, #2]
900126f0:	88c0      	ldrh	r0, [r0, #6]
900126f2:	4418      	add	r0, r3
900126f4:	b200      	sxth	r0, r0
900126f6:	1a40      	subs	r0, r0, r1
900126f8:	e7f7      	b.n	900126ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
900126fa:	2000      	movs	r0, #0
900126fc:	4770      	bx	lr
	...

90012700 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90012700:	4b01      	ldr	r3, [pc, #4]	; (90012708 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90012702:	2200      	movs	r2, #0
90012704:	601a      	str	r2, [r3, #0]
90012706:	4770      	bx	lr
90012708:	240264ec 	.word	0x240264ec

9001270c <_ZN8touchgfx16TouchCalibration4clzuEm>:
9001270c:	4603      	mov	r3, r0
9001270e:	b1c8      	cbz	r0, 90012744 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90012710:	0c02      	lsrs	r2, r0, #16
90012712:	0412      	lsls	r2, r2, #16
90012714:	b9a2      	cbnz	r2, 90012740 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90012716:	0403      	lsls	r3, r0, #16
90012718:	2010      	movs	r0, #16
9001271a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
9001271e:	bf04      	itt	eq
90012720:	021b      	lsleq	r3, r3, #8
90012722:	3008      	addeq	r0, #8
90012724:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90012728:	bf04      	itt	eq
9001272a:	011b      	lsleq	r3, r3, #4
9001272c:	3004      	addeq	r0, #4
9001272e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90012732:	bf04      	itt	eq
90012734:	009b      	lsleq	r3, r3, #2
90012736:	3002      	addeq	r0, #2
90012738:	2b00      	cmp	r3, #0
9001273a:	db04      	blt.n	90012746 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
9001273c:	3001      	adds	r0, #1
9001273e:	4770      	bx	lr
90012740:	2000      	movs	r0, #0
90012742:	e7ea      	b.n	9001271a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90012744:	2020      	movs	r0, #32
90012746:	4770      	bx	lr

90012748 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90012748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001274c:	b087      	sub	sp, #28
9001274e:	4681      	mov	r9, r0
90012750:	4698      	mov	r8, r3
90012752:	4610      	mov	r0, r2
90012754:	460d      	mov	r5, r1
90012756:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
9001275a:	b981      	cbnz	r1, 9001277e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
9001275c:	b14b      	cbz	r3, 90012772 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
9001275e:	460b      	mov	r3, r1
90012760:	464a      	mov	r2, r9
90012762:	4641      	mov	r1, r8
90012764:	e9cd 4700 	strd	r4, r7, [sp]
90012768:	f7ff ffee 	bl	90012748 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
9001276c:	b007      	add	sp, #28
9001276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012772:	f04f 33ff 	mov.w	r3, #4294967295
90012776:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
9001277a:	603b      	str	r3, [r7, #0]
9001277c:	e7f6      	b.n	9001276c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
9001277e:	fa32 fa01 	lsrs.w	sl, r2, r1
90012782:	d107      	bne.n	90012794 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90012784:	fb09 f602 	mul.w	r6, r9, r2
90012788:	fbb6 f0f4 	udiv	r0, r6, r4
9001278c:	fb04 6610 	mls	r6, r4, r0, r6
90012790:	603e      	str	r6, [r7, #0]
90012792:	e7eb      	b.n	9001276c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90012794:	2601      	movs	r6, #1
90012796:	fa09 fb01 	lsl.w	fp, r9, r1
9001279a:	408e      	lsls	r6, r1
9001279c:	fbbb f3f4 	udiv	r3, fp, r4
900127a0:	3e01      	subs	r6, #1
900127a2:	9302      	str	r3, [sp, #8]
900127a4:	fb0a f303 	mul.w	r3, sl, r3
900127a8:	4016      	ands	r6, r2
900127aa:	9303      	str	r3, [sp, #12]
900127ac:	4630      	mov	r0, r6
900127ae:	f7ff ffad 	bl	9001270c <_ZN8touchgfx16TouchCalibration4clzuEm>
900127b2:	464a      	mov	r2, r9
900127b4:	460b      	mov	r3, r1
900127b6:	4601      	mov	r1, r0
900127b8:	4630      	mov	r0, r6
900127ba:	e9cd 4700 	strd	r4, r7, [sp]
900127be:	f7ff ffc3 	bl	90012748 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900127c2:	9b02      	ldr	r3, [sp, #8]
900127c4:	4606      	mov	r6, r0
900127c6:	eb05 0108 	add.w	r1, r5, r8
900127ca:	fb04 bb13 	mls	fp, r4, r3, fp
900127ce:	4658      	mov	r0, fp
900127d0:	f7ff ff9c 	bl	9001270c <_ZN8touchgfx16TouchCalibration4clzuEm>
900127d4:	ab05      	add	r3, sp, #20
900127d6:	465a      	mov	r2, fp
900127d8:	e9cd 4300 	strd	r4, r3, [sp]
900127dc:	4603      	mov	r3, r0
900127de:	4650      	mov	r0, sl
900127e0:	f7ff ffb2 	bl	90012748 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900127e4:	6839      	ldr	r1, [r7, #0]
900127e6:	9a05      	ldr	r2, [sp, #20]
900127e8:	9b03      	ldr	r3, [sp, #12]
900127ea:	4411      	add	r1, r2
900127ec:	fbb1 f2f4 	udiv	r2, r1, r4
900127f0:	18d3      	adds	r3, r2, r3
900127f2:	fb04 1412 	mls	r4, r4, r2, r1
900127f6:	441e      	add	r6, r3
900127f8:	603c      	str	r4, [r7, #0]
900127fa:	4430      	add	r0, r6
900127fc:	e7b6      	b.n	9001276c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

900127fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
900127fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012802:	b085      	sub	sp, #20
90012804:	f1b0 0900 	subs.w	r9, r0, #0
90012808:	461d      	mov	r5, r3
9001280a:	4617      	mov	r7, r2
9001280c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001280e:	bfbb      	ittet	lt
90012810:	f1c9 0900 	rsblt	r9, r9, #0
90012814:	f04f 36ff 	movlt.w	r6, #4294967295
90012818:	2601      	movge	r6, #1
9001281a:	6823      	ldrlt	r3, [r4, #0]
9001281c:	bfbc      	itt	lt
9001281e:	425b      	neglt	r3, r3
90012820:	6023      	strlt	r3, [r4, #0]
90012822:	2a00      	cmp	r2, #0
90012824:	da04      	bge.n	90012830 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90012826:	6823      	ldr	r3, [r4, #0]
90012828:	4257      	negs	r7, r2
9001282a:	4276      	negs	r6, r6
9001282c:	425b      	negs	r3, r3
9001282e:	6023      	str	r3, [r4, #0]
90012830:	2d00      	cmp	r5, #0
90012832:	4638      	mov	r0, r7
90012834:	bfba      	itte	lt
90012836:	426d      	neglt	r5, r5
90012838:	f04f 38ff 	movlt.w	r8, #4294967295
9001283c:	f04f 0801 	movge.w	r8, #1
90012840:	f7ff ff64 	bl	9001270c <_ZN8touchgfx16TouchCalibration4clzuEm>
90012844:	ab03      	add	r3, sp, #12
90012846:	463a      	mov	r2, r7
90012848:	e9cd 5300 	strd	r5, r3, [sp]
9001284c:	4603      	mov	r3, r0
9001284e:	4648      	mov	r0, r9
90012850:	f7ff ff7a 	bl	90012748 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90012854:	6823      	ldr	r3, [r4, #0]
90012856:	9a03      	ldr	r2, [sp, #12]
90012858:	4546      	cmp	r6, r8
9001285a:	441a      	add	r2, r3
9001285c:	fb92 f3f5 	sdiv	r3, r2, r5
90012860:	4418      	add	r0, r3
90012862:	fb05 2313 	mls	r3, r5, r3, r2
90012866:	bf18      	it	ne
90012868:	4240      	negne	r0, r0
9001286a:	1c72      	adds	r2, r6, #1
9001286c:	6023      	str	r3, [r4, #0]
9001286e:	d105      	bne.n	9001287c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90012870:	2b00      	cmp	r3, #0
90012872:	f1c3 0200 	rsb	r2, r3, #0
90012876:	db0b      	blt.n	90012890 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90012878:	6022      	str	r2, [r4, #0]
9001287a:	e006      	b.n	9001288a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
9001287c:	2e01      	cmp	r6, #1
9001287e:	d104      	bne.n	9001288a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90012880:	2b00      	cmp	r3, #0
90012882:	da02      	bge.n	9001288a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90012884:	442b      	add	r3, r5
90012886:	3801      	subs	r0, #1
90012888:	6023      	str	r3, [r4, #0]
9001288a:	b005      	add	sp, #20
9001288c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012890:	3801      	subs	r0, #1
90012892:	1b52      	subs	r2, r2, r5
90012894:	e7f0      	b.n	90012878 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90012898 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90012898:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
9001289c:	4c1c      	ldr	r4, [pc, #112]	; (90012910 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
9001289e:	4605      	mov	r5, r0
900128a0:	6807      	ldr	r7, [r0, #0]
900128a2:	69a3      	ldr	r3, [r4, #24]
900128a4:	b92b      	cbnz	r3, 900128b2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
900128a6:	6840      	ldr	r0, [r0, #4]
900128a8:	e9c5 7000 	strd	r7, r0, [r5]
900128ac:	b004      	add	sp, #16
900128ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900128b2:	f04f 0802 	mov.w	r8, #2
900128b6:	68a2      	ldr	r2, [r4, #8]
900128b8:	ae04      	add	r6, sp, #16
900128ba:	6820      	ldr	r0, [r4, #0]
900128bc:	fb93 f1f8 	sdiv	r1, r3, r8
900128c0:	440a      	add	r2, r1
900128c2:	69e1      	ldr	r1, [r4, #28]
900128c4:	f846 2d04 	str.w	r2, [r6, #-4]!
900128c8:	463a      	mov	r2, r7
900128ca:	9600      	str	r6, [sp, #0]
900128cc:	f7ff ff97 	bl	900127fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900128d0:	69a3      	ldr	r3, [r4, #24]
900128d2:	4607      	mov	r7, r0
900128d4:	686a      	ldr	r2, [r5, #4]
900128d6:	6a21      	ldr	r1, [r4, #32]
900128d8:	9600      	str	r6, [sp, #0]
900128da:	6860      	ldr	r0, [r4, #4]
900128dc:	f7ff ff8f 	bl	900127fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900128e0:	69a3      	ldr	r3, [r4, #24]
900128e2:	6962      	ldr	r2, [r4, #20]
900128e4:	4407      	add	r7, r0
900128e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
900128e8:	9600      	str	r6, [sp, #0]
900128ea:	68e0      	ldr	r0, [r4, #12]
900128ec:	fb93 f8f8 	sdiv	r8, r3, r8
900128f0:	4442      	add	r2, r8
900128f2:	9203      	str	r2, [sp, #12]
900128f4:	682a      	ldr	r2, [r5, #0]
900128f6:	f7ff ff82 	bl	900127fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900128fa:	4680      	mov	r8, r0
900128fc:	9600      	str	r6, [sp, #0]
900128fe:	69a3      	ldr	r3, [r4, #24]
90012900:	686a      	ldr	r2, [r5, #4]
90012902:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90012904:	6920      	ldr	r0, [r4, #16]
90012906:	f7ff ff7a 	bl	900127fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
9001290a:	4440      	add	r0, r8
9001290c:	e7cc      	b.n	900128a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
9001290e:	bf00      	nop
90012910:	240264f0 	.word	0x240264f0

90012914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90012914:	4b07      	ldr	r3, [pc, #28]	; (90012934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90012916:	781b      	ldrb	r3, [r3, #0]
90012918:	2b01      	cmp	r3, #1
9001291a:	d109      	bne.n	90012930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
9001291c:	f9b1 3000 	ldrsh.w	r3, [r1]
90012920:	f9b0 2000 	ldrsh.w	r2, [r0]
90012924:	8003      	strh	r3, [r0, #0]
90012926:	4b04      	ldr	r3, [pc, #16]	; (90012938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90012928:	881b      	ldrh	r3, [r3, #0]
9001292a:	3b01      	subs	r3, #1
9001292c:	1a9b      	subs	r3, r3, r2
9001292e:	800b      	strh	r3, [r1, #0]
90012930:	4770      	bx	lr
90012932:	bf00      	nop
90012934:	240264dc 	.word	0x240264dc
90012938:	240264d8 	.word	0x240264d8

9001293c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
9001293c:	4b07      	ldr	r3, [pc, #28]	; (9001295c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
9001293e:	b510      	push	{r4, lr}
90012940:	781b      	ldrb	r3, [r3, #0]
90012942:	2b01      	cmp	r3, #1
90012944:	d108      	bne.n	90012958 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90012946:	4b06      	ldr	r3, [pc, #24]	; (90012960 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90012948:	880c      	ldrh	r4, [r1, #0]
9001294a:	881b      	ldrh	r3, [r3, #0]
9001294c:	f9b0 2000 	ldrsh.w	r2, [r0]
90012950:	3b01      	subs	r3, #1
90012952:	1b1b      	subs	r3, r3, r4
90012954:	8003      	strh	r3, [r0, #0]
90012956:	800a      	strh	r2, [r1, #0]
90012958:	bd10      	pop	{r4, pc}
9001295a:	bf00      	nop
9001295c:	240264dc 	.word	0x240264dc
90012960:	240264d8 	.word	0x240264d8

90012964 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90012964:	4b0a      	ldr	r3, [pc, #40]	; (90012990 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90012966:	b510      	push	{r4, lr}
90012968:	781b      	ldrb	r3, [r3, #0]
9001296a:	2b01      	cmp	r3, #1
9001296c:	d10e      	bne.n	9001298c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
9001296e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90012972:	8843      	ldrh	r3, [r0, #2]
90012974:	f9b0 4000 	ldrsh.w	r4, [r0]
90012978:	18ca      	adds	r2, r1, r3
9001297a:	4b06      	ldr	r3, [pc, #24]	; (90012994 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
9001297c:	8044      	strh	r4, [r0, #2]
9001297e:	881b      	ldrh	r3, [r3, #0]
90012980:	1a9b      	subs	r3, r3, r2
90012982:	8003      	strh	r3, [r0, #0]
90012984:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012988:	8081      	strh	r1, [r0, #4]
9001298a:	80c3      	strh	r3, [r0, #6]
9001298c:	bd10      	pop	{r4, pc}
9001298e:	bf00      	nop
90012990:	240264dc 	.word	0x240264dc
90012994:	240264d8 	.word	0x240264d8

90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90012998:	4b08      	ldr	r3, [pc, #32]	; (900129bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
9001299a:	781b      	ldrb	r3, [r3, #0]
9001299c:	2b01      	cmp	r3, #1
9001299e:	d10c      	bne.n	900129ba <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
900129a0:	8803      	ldrh	r3, [r0, #0]
900129a2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
900129a6:	8842      	ldrh	r2, [r0, #2]
900129a8:	8002      	strh	r2, [r0, #0]
900129aa:	185a      	adds	r2, r3, r1
900129ac:	4b04      	ldr	r3, [pc, #16]	; (900129c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
900129ae:	881b      	ldrh	r3, [r3, #0]
900129b0:	1a9b      	subs	r3, r3, r2
900129b2:	8043      	strh	r3, [r0, #2]
900129b4:	88c3      	ldrh	r3, [r0, #6]
900129b6:	80c1      	strh	r1, [r0, #6]
900129b8:	8083      	strh	r3, [r0, #4]
900129ba:	4770      	bx	lr
900129bc:	240264dc 	.word	0x240264dc
900129c0:	240264d8 	.word	0x240264d8

900129c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
900129c4:	4b07      	ldr	r3, [pc, #28]	; (900129e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
900129c6:	b510      	push	{r4, lr}
900129c8:	781b      	ldrb	r3, [r3, #0]
900129ca:	2b01      	cmp	r3, #1
900129cc:	d108      	bne.n	900129e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
900129ce:	f9b1 3000 	ldrsh.w	r3, [r1]
900129d2:	f9b0 4000 	ldrsh.w	r4, [r0]
900129d6:	8003      	strh	r3, [r0, #0]
900129d8:	8893      	ldrh	r3, [r2, #4]
900129da:	3b01      	subs	r3, #1
900129dc:	1b1b      	subs	r3, r3, r4
900129de:	800b      	strh	r3, [r1, #0]
900129e0:	bd10      	pop	{r4, pc}
900129e2:	bf00      	nop
900129e4:	240264dc 	.word	0x240264dc

900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
900129e8:	4b0a      	ldr	r3, [pc, #40]	; (90012a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
900129ea:	460a      	mov	r2, r1
900129ec:	b510      	push	{r4, lr}
900129ee:	781b      	ldrb	r3, [r3, #0]
900129f0:	2b01      	cmp	r3, #1
900129f2:	d10d      	bne.n	90012a10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
900129f4:	8881      	ldrh	r1, [r0, #4]
900129f6:	8803      	ldrh	r3, [r0, #0]
900129f8:	440b      	add	r3, r1
900129fa:	4601      	mov	r1, r0
900129fc:	3b01      	subs	r3, #1
900129fe:	f821 3b02 	strh.w	r3, [r1], #2
90012a02:	f7ff ffdf 	bl	900129c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90012a06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012a0a:	88c2      	ldrh	r2, [r0, #6]
90012a0c:	80c3      	strh	r3, [r0, #6]
90012a0e:	8082      	strh	r2, [r0, #4]
90012a10:	bd10      	pop	{r4, pc}
90012a12:	bf00      	nop
90012a14:	240264dc 	.word	0x240264dc

90012a18 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90012a18:	4770      	bx	lr
	...

90012a1c <_ZN8touchgfx11Application13requestRedrawEv>:
90012a1c:	4b06      	ldr	r3, [pc, #24]	; (90012a38 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90012a1e:	2100      	movs	r1, #0
90012a20:	f9b3 2000 	ldrsh.w	r2, [r3]
90012a24:	4b05      	ldr	r3, [pc, #20]	; (90012a3c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90012a26:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90012a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
90012a2e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90012a32:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90012a36:	4770      	bx	lr
90012a38:	240264d8 	.word	0x240264d8
90012a3c:	240264da 	.word	0x240264da

90012a40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90012a40:	4b03      	ldr	r3, [pc, #12]	; (90012a50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90012a42:	6818      	ldr	r0, [r3, #0]
90012a44:	b110      	cbz	r0, 90012a4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90012a46:	6803      	ldr	r3, [r0, #0]
90012a48:	699b      	ldr	r3, [r3, #24]
90012a4a:	4718      	bx	r3
90012a4c:	4770      	bx	lr
90012a4e:	bf00      	nop
90012a50:	24026520 	.word	0x24026520

90012a54 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90012a54:	4770      	bx	lr
	...

90012a58 <_ZN8touchgfx11Application4drawEv>:
90012a58:	4b09      	ldr	r3, [pc, #36]	; (90012a80 <_ZN8touchgfx11Application4drawEv+0x28>)
90012a5a:	b507      	push	{r0, r1, r2, lr}
90012a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
90012a60:	2100      	movs	r1, #0
90012a62:	4b08      	ldr	r3, [pc, #32]	; (90012a84 <_ZN8touchgfx11Application4drawEv+0x2c>)
90012a64:	9100      	str	r1, [sp, #0]
90012a66:	4669      	mov	r1, sp
90012a68:	f9b3 3000 	ldrsh.w	r3, [r3]
90012a6c:	f8ad 2004 	strh.w	r2, [sp, #4]
90012a70:	f8ad 3006 	strh.w	r3, [sp, #6]
90012a74:	6803      	ldr	r3, [r0, #0]
90012a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90012a78:	4798      	blx	r3
90012a7a:	b003      	add	sp, #12
90012a7c:	f85d fb04 	ldr.w	pc, [sp], #4
90012a80:	240264d8 	.word	0x240264d8
90012a84:	240264da 	.word	0x240264da

90012a88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90012a88:	4b03      	ldr	r3, [pc, #12]	; (90012a98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90012a8a:	6818      	ldr	r0, [r3, #0]
90012a8c:	b110      	cbz	r0, 90012a94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90012a8e:	6803      	ldr	r3, [r0, #0]
90012a90:	69db      	ldr	r3, [r3, #28]
90012a92:	4718      	bx	r3
90012a94:	4770      	bx	lr
90012a96:	bf00      	nop
90012a98:	24026520 	.word	0x24026520

90012a9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90012a9c:	4b03      	ldr	r3, [pc, #12]	; (90012aac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90012a9e:	6818      	ldr	r0, [r3, #0]
90012aa0:	b110      	cbz	r0, 90012aa8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90012aa2:	6803      	ldr	r3, [r0, #0]
90012aa4:	6a1b      	ldr	r3, [r3, #32]
90012aa6:	4718      	bx	r3
90012aa8:	4770      	bx	lr
90012aaa:	bf00      	nop
90012aac:	24026520 	.word	0x24026520

90012ab0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
90012ab0:	2300      	movs	r3, #0
90012ab2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90012ab6:	4770      	bx	lr

90012ab8 <_ZN8touchgfx11Application14handleKeyEventEh>:
90012ab8:	4b03      	ldr	r3, [pc, #12]	; (90012ac8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90012aba:	6818      	ldr	r0, [r3, #0]
90012abc:	b110      	cbz	r0, 90012ac4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90012abe:	6803      	ldr	r3, [r0, #0]
90012ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90012ac2:	4718      	bx	r3
90012ac4:	4770      	bx	lr
90012ac6:	bf00      	nop
90012ac8:	24026520 	.word	0x24026520

90012acc <_ZN8touchgfx11ApplicationD1Ev>:
90012acc:	4770      	bx	lr

90012ace <_ZN8touchgfx11ApplicationD0Ev>:
90012ace:	b510      	push	{r4, lr}
90012ad0:	4604      	mov	r4, r0
90012ad2:	f44f 719e 	mov.w	r1, #316	; 0x13c
90012ad6:	f00e fb74 	bl	900211c2 <_ZdlPvj>
90012ada:	4620      	mov	r0, r4
90012adc:	bd10      	pop	{r4, pc}

90012ade <_ZNK8touchgfx4Rect9intersectERKS0_>:
90012ade:	b510      	push	{r4, lr}
90012ae0:	f9b1 4000 	ldrsh.w	r4, [r1]
90012ae4:	888a      	ldrh	r2, [r1, #4]
90012ae6:	f9b0 3000 	ldrsh.w	r3, [r0]
90012aea:	4422      	add	r2, r4
90012aec:	b212      	sxth	r2, r2
90012aee:	4293      	cmp	r3, r2
90012af0:	da15      	bge.n	90012b1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90012af2:	8882      	ldrh	r2, [r0, #4]
90012af4:	4413      	add	r3, r2
90012af6:	b21b      	sxth	r3, r3
90012af8:	429c      	cmp	r4, r3
90012afa:	da10      	bge.n	90012b1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90012afc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90012b00:	88c9      	ldrh	r1, [r1, #6]
90012b02:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90012b06:	4419      	add	r1, r3
90012b08:	b209      	sxth	r1, r1
90012b0a:	428a      	cmp	r2, r1
90012b0c:	da07      	bge.n	90012b1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90012b0e:	88c0      	ldrh	r0, [r0, #6]
90012b10:	4410      	add	r0, r2
90012b12:	b200      	sxth	r0, r0
90012b14:	4283      	cmp	r3, r0
90012b16:	bfac      	ite	ge
90012b18:	2000      	movge	r0, #0
90012b1a:	2001      	movlt	r0, #1
90012b1c:	bd10      	pop	{r4, pc}
90012b1e:	2000      	movs	r0, #0
90012b20:	e7fc      	b.n	90012b1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90012b22 <_ZN8touchgfx4Rect10restrictToEss>:
90012b22:	f9b0 3000 	ldrsh.w	r3, [r0]
90012b26:	2b00      	cmp	r3, #0
90012b28:	b510      	push	{r4, lr}
90012b2a:	da04      	bge.n	90012b36 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90012b2c:	8884      	ldrh	r4, [r0, #4]
90012b2e:	4423      	add	r3, r4
90012b30:	8083      	strh	r3, [r0, #4]
90012b32:	2300      	movs	r3, #0
90012b34:	8003      	strh	r3, [r0, #0]
90012b36:	f9b0 4000 	ldrsh.w	r4, [r0]
90012b3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012b3e:	1b09      	subs	r1, r1, r4
90012b40:	428b      	cmp	r3, r1
90012b42:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90012b46:	bfc8      	it	gt
90012b48:	8081      	strhgt	r1, [r0, #4]
90012b4a:	2b00      	cmp	r3, #0
90012b4c:	da04      	bge.n	90012b58 <_ZN8touchgfx4Rect10restrictToEss+0x36>
90012b4e:	88c1      	ldrh	r1, [r0, #6]
90012b50:	440b      	add	r3, r1
90012b52:	80c3      	strh	r3, [r0, #6]
90012b54:	2300      	movs	r3, #0
90012b56:	8043      	strh	r3, [r0, #2]
90012b58:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90012b5c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90012b60:	1a52      	subs	r2, r2, r1
90012b62:	4293      	cmp	r3, r2
90012b64:	bfc8      	it	gt
90012b66:	80c2      	strhgt	r2, [r0, #6]
90012b68:	bd10      	pop	{r4, pc}
	...

90012b6c <_ZN8touchgfx11Application4drawERNS_4RectE>:
90012b6c:	4b10      	ldr	r3, [pc, #64]	; (90012bb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90012b6e:	b510      	push	{r4, lr}
90012b70:	460c      	mov	r4, r1
90012b72:	f9b3 2000 	ldrsh.w	r2, [r3]
90012b76:	4b0f      	ldr	r3, [pc, #60]	; (90012bb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90012b78:	4620      	mov	r0, r4
90012b7a:	f9b3 1000 	ldrsh.w	r1, [r3]
90012b7e:	f7ff ffd0 	bl	90012b22 <_ZN8touchgfx4Rect10restrictToEss>
90012b82:	4b0d      	ldr	r3, [pc, #52]	; (90012bb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90012b84:	6818      	ldr	r0, [r3, #0]
90012b86:	b190      	cbz	r0, 90012bae <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90012b88:	6803      	ldr	r3, [r0, #0]
90012b8a:	4621      	mov	r1, r4
90012b8c:	689b      	ldr	r3, [r3, #8]
90012b8e:	4798      	blx	r3
90012b90:	4b0a      	ldr	r3, [pc, #40]	; (90012bbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90012b92:	6818      	ldr	r0, [r3, #0]
90012b94:	b118      	cbz	r0, 90012b9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90012b96:	6803      	ldr	r3, [r0, #0]
90012b98:	4621      	mov	r1, r4
90012b9a:	689b      	ldr	r3, [r3, #8]
90012b9c:	4798      	blx	r3
90012b9e:	4b08      	ldr	r3, [pc, #32]	; (90012bc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90012ba0:	4621      	mov	r1, r4
90012ba2:	6818      	ldr	r0, [r3, #0]
90012ba4:	6803      	ldr	r3, [r0, #0]
90012ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90012baa:	69db      	ldr	r3, [r3, #28]
90012bac:	4718      	bx	r3
90012bae:	bd10      	pop	{r4, pc}
90012bb0:	240264da 	.word	0x240264da
90012bb4:	240264d8 	.word	0x240264d8
90012bb8:	24026520 	.word	0x24026520
90012bbc:	2402651c 	.word	0x2402651c
90012bc0:	240264e4 	.word	0x240264e4

90012bc4 <_ZNK8touchgfx4Rect8includesERKS0_>:
90012bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90012bc6:	4606      	mov	r6, r0
90012bc8:	4608      	mov	r0, r1
90012bca:	460f      	mov	r7, r1
90012bcc:	f7fc ff3f 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90012bd0:	b9e8      	cbnz	r0, 90012c0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012bd2:	f9b7 5000 	ldrsh.w	r5, [r7]
90012bd6:	f9b6 4000 	ldrsh.w	r4, [r6]
90012bda:	42a5      	cmp	r5, r4
90012bdc:	db17      	blt.n	90012c0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012bde:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90012be2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90012be6:	429a      	cmp	r2, r3
90012be8:	db11      	blt.n	90012c0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012bea:	88b9      	ldrh	r1, [r7, #4]
90012bec:	440d      	add	r5, r1
90012bee:	88b1      	ldrh	r1, [r6, #4]
90012bf0:	440c      	add	r4, r1
90012bf2:	b22d      	sxth	r5, r5
90012bf4:	b224      	sxth	r4, r4
90012bf6:	42a5      	cmp	r5, r4
90012bf8:	dc09      	bgt.n	90012c0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90012bfa:	88f8      	ldrh	r0, [r7, #6]
90012bfc:	4410      	add	r0, r2
90012bfe:	88f2      	ldrh	r2, [r6, #6]
90012c00:	4413      	add	r3, r2
90012c02:	b200      	sxth	r0, r0
90012c04:	b21b      	sxth	r3, r3
90012c06:	4298      	cmp	r0, r3
90012c08:	bfcc      	ite	gt
90012c0a:	2000      	movgt	r0, #0
90012c0c:	2001      	movle	r0, #1
90012c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90012c10 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90012c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90012c12:	4604      	mov	r4, r0
90012c14:	4608      	mov	r0, r1
90012c16:	460d      	mov	r5, r1
90012c18:	f7fc ff19 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90012c1c:	b978      	cbnz	r0, 90012c3e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90012c1e:	4620      	mov	r0, r4
90012c20:	f7fc ff15 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90012c24:	f9b5 6000 	ldrsh.w	r6, [r5]
90012c28:	b150      	cbz	r0, 90012c40 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
90012c2a:	8026      	strh	r6, [r4, #0]
90012c2c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90012c30:	8063      	strh	r3, [r4, #2]
90012c32:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90012c36:	80a3      	strh	r3, [r4, #4]
90012c38:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90012c3c:	80e3      	strh	r3, [r4, #6]
90012c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90012c40:	f9b4 1000 	ldrsh.w	r1, [r4]
90012c44:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90012c48:	42b1      	cmp	r1, r6
90012c4a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90012c4e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90012c52:	460f      	mov	r7, r1
90012c54:	88ed      	ldrh	r5, [r5, #6]
90012c56:	bfa8      	it	ge
90012c58:	4637      	movge	r7, r6
90012c5a:	4293      	cmp	r3, r2
90012c5c:	4618      	mov	r0, r3
90012c5e:	4466      	add	r6, ip
90012c60:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90012c64:	bfa8      	it	ge
90012c66:	4610      	movge	r0, r2
90012c68:	442a      	add	r2, r5
90012c6a:	88e5      	ldrh	r5, [r4, #6]
90012c6c:	4461      	add	r1, ip
90012c6e:	b236      	sxth	r6, r6
90012c70:	8027      	strh	r7, [r4, #0]
90012c72:	442b      	add	r3, r5
90012c74:	b209      	sxth	r1, r1
90012c76:	b212      	sxth	r2, r2
90012c78:	8060      	strh	r0, [r4, #2]
90012c7a:	b21b      	sxth	r3, r3
90012c7c:	428e      	cmp	r6, r1
90012c7e:	bfac      	ite	ge
90012c80:	ebc7 0106 	rsbge	r1, r7, r6
90012c84:	ebc7 0101 	rsblt	r1, r7, r1
90012c88:	429a      	cmp	r2, r3
90012c8a:	bfac      	ite	ge
90012c8c:	ebc0 0202 	rsbge	r2, r0, r2
90012c90:	ebc0 0203 	rsblt	r2, r0, r3
90012c94:	80a1      	strh	r1, [r4, #4]
90012c96:	80e2      	strh	r2, [r4, #6]
90012c98:	e7d1      	b.n	90012c3e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

90012c9c <_ZN8touchgfx11Application11getInstanceEv>:
90012c9c:	4b01      	ldr	r3, [pc, #4]	; (90012ca4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90012c9e:	6818      	ldr	r0, [r3, #0]
90012ca0:	4770      	bx	lr
90012ca2:	bf00      	nop
90012ca4:	24026530 	.word	0x24026530

90012ca8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90012ca8:	2300      	movs	r3, #0
90012caa:	b510      	push	{r4, lr}
90012cac:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90012cb0:	4604      	mov	r4, r0
90012cb2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90012cb6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90012cba:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90012cbe:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90012cc2:	429a      	cmp	r2, r3
90012cc4:	d90e      	bls.n	90012ce4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90012cc6:	18e2      	adds	r2, r4, r3
90012cc8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
90012ccc:	b122      	cbz	r2, 90012cd8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
90012cce:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90012cd2:	6803      	ldr	r3, [r0, #0]
90012cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90012cd6:	4798      	blx	r3
90012cd8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90012cdc:	3301      	adds	r3, #1
90012cde:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90012ce2:	e7ea      	b.n	90012cba <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90012ce4:	bd10      	pop	{r4, pc}

90012ce6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90012ce6:	2300      	movs	r3, #0
90012ce8:	f100 0284 	add.w	r2, r0, #132	; 0x84
90012cec:	30a4      	adds	r0, #164	; 0xa4
90012cee:	f820 3c24 	strh.w	r3, [r0, #-36]
90012cf2:	f802 3b01 	strb.w	r3, [r2], #1
90012cf6:	4282      	cmp	r2, r0
90012cf8:	d1fb      	bne.n	90012cf2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90012cfa:	4770      	bx	lr

90012cfc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90012cfc:	b570      	push	{r4, r5, r6, lr}
90012cfe:	4c0b      	ldr	r4, [pc, #44]	; (90012d2c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90012d00:	4605      	mov	r5, r0
90012d02:	460e      	mov	r6, r1
90012d04:	6820      	ldr	r0, [r4, #0]
90012d06:	b110      	cbz	r0, 90012d0e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90012d08:	6803      	ldr	r3, [r0, #0]
90012d0a:	695b      	ldr	r3, [r3, #20]
90012d0c:	4798      	blx	r3
90012d0e:	1d28      	adds	r0, r5, #4
90012d10:	f7ff ffe9 	bl	90012ce6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90012d14:	6026      	str	r6, [r4, #0]
90012d16:	6833      	ldr	r3, [r6, #0]
90012d18:	4630      	mov	r0, r6
90012d1a:	68db      	ldr	r3, [r3, #12]
90012d1c:	4798      	blx	r3
90012d1e:	682b      	ldr	r3, [r5, #0]
90012d20:	4628      	mov	r0, r5
90012d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012d28:	4718      	bx	r3
90012d2a:	bf00      	nop
90012d2c:	24026520 	.word	0x24026520

90012d30 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90012d30:	2300      	movs	r3, #0
90012d32:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90012d36:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90012d3a:	461a      	mov	r2, r3
90012d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
90012d3e:	461c      	mov	r4, r3
90012d40:	461d      	mov	r5, r3
90012d42:	459c      	cmp	ip, r3
90012d44:	dd1a      	ble.n	90012d7c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90012d46:	18c6      	adds	r6, r0, r3
90012d48:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90012d4c:	b16e      	cbz	r6, 90012d6a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90012d4e:	429a      	cmp	r2, r3
90012d50:	d008      	beq.n	90012d64 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90012d52:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90012d56:	fa1f fe82 	uxth.w	lr, r2
90012d5a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90012d5e:	1887      	adds	r7, r0, r2
90012d60:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90012d64:	3201      	adds	r2, #1
90012d66:	3301      	adds	r3, #1
90012d68:	e7eb      	b.n	90012d42 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90012d6a:	4299      	cmp	r1, r3
90012d6c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90012d70:	bfa8      	it	ge
90012d72:	3501      	addge	r5, #1
90012d74:	429e      	cmp	r6, r3
90012d76:	bfc8      	it	gt
90012d78:	3401      	addgt	r4, #1
90012d7a:	e7f4      	b.n	90012d66 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90012d7c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90012d80:	1b49      	subs	r1, r1, r5
90012d82:	1b1b      	subs	r3, r3, r4
90012d84:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90012d88:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90012d8c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90012d90:	4293      	cmp	r3, r2
90012d92:	dd03      	ble.n	90012d9c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90012d94:	3b01      	subs	r3, #1
90012d96:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90012d9a:	e7f7      	b.n	90012d8c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90012d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90012da0 <_ZN8touchgfx11Application15handleTickEventEv>:
90012da0:	b570      	push	{r4, r5, r6, lr}
90012da2:	4d16      	ldr	r5, [pc, #88]	; (90012dfc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90012da4:	4604      	mov	r4, r0
90012da6:	6828      	ldr	r0, [r5, #0]
90012da8:	b140      	cbz	r0, 90012dbc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90012daa:	7a03      	ldrb	r3, [r0, #8]
90012dac:	b933      	cbnz	r3, 90012dbc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90012dae:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90012db2:	6803      	ldr	r3, [r0, #0]
90012db4:	689b      	ldr	r3, [r3, #8]
90012db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012dba:	4718      	bx	r3
90012dbc:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90012dc0:	4e0f      	ldr	r6, [pc, #60]	; (90012e00 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90012dc2:	b973      	cbnz	r3, 90012de2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90012dc4:	b168      	cbz	r0, 90012de2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90012dc6:	7a03      	ldrb	r3, [r0, #8]
90012dc8:	b15b      	cbz	r3, 90012de2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90012dca:	6830      	ldr	r0, [r6, #0]
90012dcc:	b110      	cbz	r0, 90012dd4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90012dce:	6803      	ldr	r3, [r0, #0]
90012dd0:	691b      	ldr	r3, [r3, #16]
90012dd2:	4798      	blx	r3
90012dd4:	6828      	ldr	r0, [r5, #0]
90012dd6:	6803      	ldr	r3, [r0, #0]
90012dd8:	68db      	ldr	r3, [r3, #12]
90012dda:	4798      	blx	r3
90012ddc:	2301      	movs	r3, #1
90012dde:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90012de2:	3404      	adds	r4, #4
90012de4:	4620      	mov	r0, r4
90012de6:	f7ff ff5f 	bl	90012ca8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90012dea:	4620      	mov	r0, r4
90012dec:	f7ff ffa0 	bl	90012d30 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90012df0:	6830      	ldr	r0, [r6, #0]
90012df2:	b110      	cbz	r0, 90012dfa <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90012df4:	6803      	ldr	r3, [r0, #0]
90012df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012df8:	e7dd      	b.n	90012db6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90012dfa:	bd70      	pop	{r4, r5, r6, pc}
90012dfc:	24026524 	.word	0x24026524
90012e00:	24026520 	.word	0x24026520

90012e04 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90012e04:	4603      	mov	r3, r0
90012e06:	f100 0140 	add.w	r1, r0, #64	; 0x40
90012e0a:	2200      	movs	r2, #0
90012e0c:	801a      	strh	r2, [r3, #0]
90012e0e:	3308      	adds	r3, #8
90012e10:	f823 2c06 	strh.w	r2, [r3, #-6]
90012e14:	f823 2c04 	strh.w	r2, [r3, #-4]
90012e18:	f823 2c02 	strh.w	r2, [r3, #-2]
90012e1c:	428b      	cmp	r3, r1
90012e1e:	d1f5      	bne.n	90012e0c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90012e20:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90012e24:	4770      	bx	lr
	...

90012e28 <_ZN8touchgfx11ApplicationC1Ev>:
90012e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90012e2a:	4b1d      	ldr	r3, [pc, #116]	; (90012ea0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90012e2c:	4606      	mov	r6, r0
90012e2e:	4604      	mov	r4, r0
90012e30:	2500      	movs	r5, #0
90012e32:	f846 3b04 	str.w	r3, [r6], #4
90012e36:	22a8      	movs	r2, #168	; 0xa8
90012e38:	2100      	movs	r1, #0
90012e3a:	4630      	mov	r0, r6
90012e3c:	f00e fa80 	bl	90021340 <memset>
90012e40:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90012e44:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90012e48:	4f16      	ldr	r7, [pc, #88]	; (90012ea4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90012e4a:	f7ff ffdb 	bl	90012e04 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90012e4e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90012e52:	f7ff ffd7 	bl	90012e04 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90012e56:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90012e5a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90012e5e:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90012e62:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90012e66:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90012e6a:	490f      	ldr	r1, [pc, #60]	; (90012ea8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90012e6c:	480f      	ldr	r0, [pc, #60]	; (90012eac <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90012e6e:	f00e f89f 	bl	90020fb0 <CRC_Lock>
90012e72:	4b0f      	ldr	r3, [pc, #60]	; (90012eb0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90012e74:	b158      	cbz	r0, 90012e8e <_ZN8touchgfx11ApplicationC1Ev+0x66>
90012e76:	801d      	strh	r5, [r3, #0]
90012e78:	2300      	movs	r3, #0
90012e7a:	4a0e      	ldr	r2, [pc, #56]	; (90012eb4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90012e7c:	4630      	mov	r0, r6
90012e7e:	6013      	str	r3, [r2, #0]
90012e80:	4a0d      	ldr	r2, [pc, #52]	; (90012eb8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90012e82:	603b      	str	r3, [r7, #0]
90012e84:	6013      	str	r3, [r2, #0]
90012e86:	f7ff ff2e 	bl	90012ce6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90012e8a:	4620      	mov	r0, r4
90012e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90012e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
90012e92:	2002      	movs	r0, #2
90012e94:	801a      	strh	r2, [r3, #0]
90012e96:	6038      	str	r0, [r7, #0]
90012e98:	f001 fa26 	bl	900142e8 <_ZN8touchgfx6Screen4drawEv>
90012e9c:	e7ec      	b.n	90012e78 <_ZN8touchgfx11ApplicationC1Ev+0x50>
90012e9e:	bf00      	nop
90012ea0:	90025064 	.word	0x90025064
90012ea4:	24026520 	.word	0x24026520
90012ea8:	b5e8b5cd 	.word	0xb5e8b5cd
90012eac:	f407a5c2 	.word	0xf407a5c2
90012eb0:	24000068 	.word	0x24000068
90012eb4:	24026530 	.word	0x24026530
90012eb8:	24026524 	.word	0x24026524

90012ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90012ebc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90012ec0:	3b01      	subs	r3, #1
90012ec2:	b29b      	uxth	r3, r3
90012ec4:	428b      	cmp	r3, r1
90012ec6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90012eca:	b510      	push	{r4, lr}
90012ecc:	d908      	bls.n	90012ee0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90012ece:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90012ed2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90012ed6:	681a      	ldr	r2, [r3, #0]
90012ed8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90012edc:	685a      	ldr	r2, [r3, #4]
90012ede:	6062      	str	r2, [r4, #4]
90012ee0:	bd10      	pop	{r4, pc}
	...

90012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90012ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012ee8:	b08f      	sub	sp, #60	; 0x3c
90012eea:	4b8f      	ldr	r3, [pc, #572]	; (90013128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90012eec:	4683      	mov	fp, r0
90012eee:	ac0a      	add	r4, sp, #40	; 0x28
90012ef0:	e884 0006 	stmia.w	r4, {r1, r2}
90012ef4:	f9b3 2000 	ldrsh.w	r2, [r3]
90012ef8:	4620      	mov	r0, r4
90012efa:	4b8c      	ldr	r3, [pc, #560]	; (9001312c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90012efc:	f9b3 1000 	ldrsh.w	r1, [r3]
90012f00:	f7ff fe0f 	bl	90012b22 <_ZN8touchgfx4Rect10restrictToEss>
90012f04:	4620      	mov	r0, r4
90012f06:	f7fc fda2 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90012f0a:	2800      	cmp	r0, #0
90012f0c:	d16a      	bne.n	90012fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90012f0e:	9403      	str	r4, [sp, #12]
90012f10:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90012f14:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90012f18:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90012f1c:	9301      	str	r3, [sp, #4]
90012f1e:	35a4      	adds	r5, #164	; 0xa4
90012f20:	b15c      	cbz	r4, 90012f3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90012f22:	4629      	mov	r1, r5
90012f24:	9803      	ldr	r0, [sp, #12]
90012f26:	f7ff fe4d 	bl	90012bc4 <_ZNK8touchgfx4Rect8includesERKS0_>
90012f2a:	3c01      	subs	r4, #1
90012f2c:	b118      	cbz	r0, 90012f36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90012f2e:	b2a1      	uxth	r1, r4
90012f30:	9801      	ldr	r0, [sp, #4]
90012f32:	f7ff ffc3 	bl	90012ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90012f36:	3d08      	subs	r5, #8
90012f38:	e7f2      	b.n	90012f20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90012f3a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90012f3e:	f108 33ff 	add.w	r3, r8, #4294967295
90012f42:	f8cd 8010 	str.w	r8, [sp, #16]
90012f46:	9302      	str	r3, [sp, #8]
90012f48:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90012f4c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90012f50:	9306      	str	r3, [sp, #24]
90012f52:	445c      	add	r4, fp
90012f54:	2500      	movs	r5, #0
90012f56:	4626      	mov	r6, r4
90012f58:	f8cd 8014 	str.w	r8, [sp, #20]
90012f5c:	462f      	mov	r7, r5
90012f5e:	9b05      	ldr	r3, [sp, #20]
90012f60:	2b00      	cmp	r3, #0
90012f62:	d073      	beq.n	9001304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90012f64:	9903      	ldr	r1, [sp, #12]
90012f66:	4630      	mov	r0, r6
90012f68:	f7ff fdb9 	bl	90012ade <_ZNK8touchgfx4Rect9intersectERKS0_>
90012f6c:	b350      	cbz	r0, 90012fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90012f6e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90012f72:	f9b6 c000 	ldrsh.w	ip, [r6]
90012f76:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90012f7a:	45e6      	cmp	lr, ip
90012f7c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90012f80:	db33      	blt.n	90012fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90012f82:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90012f86:	88b3      	ldrh	r3, [r6, #4]
90012f88:	4472      	add	r2, lr
90012f8a:	4463      	add	r3, ip
90012f8c:	b212      	sxth	r2, r2
90012f8e:	b21b      	sxth	r3, r3
90012f90:	429a      	cmp	r2, r3
90012f92:	dc2a      	bgt.n	90012fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90012f94:	fa1f f289 	uxth.w	r2, r9
90012f98:	88f3      	ldrh	r3, [r6, #6]
90012f9a:	45ca      	cmp	sl, r9
90012f9c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90012fa0:	4413      	add	r3, r2
90012fa2:	fa1f fc8a 	uxth.w	ip, sl
90012fa6:	b29b      	uxth	r3, r3
90012fa8:	fa0f fe83 	sxth.w	lr, r3
90012fac:	db0f      	blt.n	90012fce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90012fae:	eba3 030c 	sub.w	r3, r3, ip
90012fb2:	1ac9      	subs	r1, r1, r3
90012fb4:	b209      	sxth	r1, r1
90012fb6:	2900      	cmp	r1, #0
90012fb8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90012fbc:	dd12      	ble.n	90012fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90012fbe:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90012fc2:	4605      	mov	r5, r0
90012fc4:	9b05      	ldr	r3, [sp, #20]
90012fc6:	3e08      	subs	r6, #8
90012fc8:	3b01      	subs	r3, #1
90012fca:	9305      	str	r3, [sp, #20]
90012fcc:	e7c7      	b.n	90012f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90012fce:	4461      	add	r1, ip
90012fd0:	b209      	sxth	r1, r1
90012fd2:	4571      	cmp	r1, lr
90012fd4:	dc38      	bgt.n	90013048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90012fd6:	eba2 020c 	sub.w	r2, r2, ip
90012fda:	b212      	sxth	r2, r2
90012fdc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90012fe0:	2a00      	cmp	r2, #0
90012fe2:	dcee      	bgt.n	90012fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90012fe4:	b00f      	add	sp, #60	; 0x3c
90012fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012fea:	45ca      	cmp	sl, r9
90012fec:	db2c      	blt.n	90013048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90012fee:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90012ff2:	449a      	add	sl, r3
90012ff4:	88f3      	ldrh	r3, [r6, #6]
90012ff6:	4499      	add	r9, r3
90012ff8:	fa0f fa8a 	sxth.w	sl, sl
90012ffc:	fa0f f989 	sxth.w	r9, r9
90013000:	45ca      	cmp	sl, r9
90013002:	dc21      	bgt.n	90013048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90013004:	fa1f f28c 	uxth.w	r2, ip
90013008:	88b3      	ldrh	r3, [r6, #4]
9001300a:	45e6      	cmp	lr, ip
9001300c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90013010:	4413      	add	r3, r2
90013012:	fa1f f98e 	uxth.w	r9, lr
90013016:	b29b      	uxth	r3, r3
90013018:	fa0f fa83 	sxth.w	sl, r3
9001301c:	db0a      	blt.n	90013034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
9001301e:	eba3 0309 	sub.w	r3, r3, r9
90013022:	1ac9      	subs	r1, r1, r3
90013024:	b209      	sxth	r1, r1
90013026:	2900      	cmp	r1, #0
90013028:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
9001302c:	ddda      	ble.n	90012fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001302e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90013032:	e7c6      	b.n	90012fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90013034:	4449      	add	r1, r9
90013036:	b209      	sxth	r1, r1
90013038:	4551      	cmp	r1, sl
9001303a:	dc05      	bgt.n	90013048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001303c:	eba2 0209 	sub.w	r2, r2, r9
90013040:	b212      	sxth	r2, r2
90013042:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
90013046:	e7cb      	b.n	90012fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90013048:	4607      	mov	r7, r0
9001304a:	e7bb      	b.n	90012fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
9001304c:	2d00      	cmp	r5, #0
9001304e:	d181      	bne.n	90012f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90013050:	2f00      	cmp	r7, #0
90013052:	f000 81dd 	beq.w	90013410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90013056:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
9001305a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
9001305e:	b2b3      	uxth	r3, r6
90013060:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90013064:	b2b9      	uxth	r1, r7
90013066:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
9001306a:	441a      	add	r2, r3
9001306c:	448a      	add	sl, r1
9001306e:	9105      	str	r1, [sp, #20]
90013070:	b292      	uxth	r2, r2
90013072:	fa1f fa8a 	uxth.w	sl, sl
90013076:	fa0f f882 	sxth.w	r8, r2
9001307a:	fa0f f98a 	sxth.w	r9, sl
9001307e:	e9cd 2307 	strd	r2, r3, [sp, #28]
90013082:	9b04      	ldr	r3, [sp, #16]
90013084:	2b00      	cmp	r3, #0
90013086:	d053      	beq.n	90013130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90013088:	9903      	ldr	r1, [sp, #12]
9001308a:	4620      	mov	r0, r4
9001308c:	f7ff fd27 	bl	90012ade <_ZNK8touchgfx4Rect9intersectERKS0_>
90013090:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90013094:	b1c0      	cbz	r0, 900130c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013096:	f9b4 e000 	ldrsh.w	lr, [r4]
9001309a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001309e:	4576      	cmp	r6, lr
900130a0:	dc23      	bgt.n	900130ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900130a2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900130a6:	44f4      	add	ip, lr
900130a8:	fa0f fc8c 	sxth.w	ip, ip
900130ac:	45e0      	cmp	r8, ip
900130ae:	db1c      	blt.n	900130ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900130b0:	428f      	cmp	r7, r1
900130b2:	fa1f fc81 	uxth.w	ip, r1
900130b6:	88e1      	ldrh	r1, [r4, #6]
900130b8:	dc0d      	bgt.n	900130d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
900130ba:	ebaa 0c0c 	sub.w	ip, sl, ip
900130be:	f8a4 9002 	strh.w	r9, [r4, #2]
900130c2:	eba1 010c 	sub.w	r1, r1, ip
900130c6:	80e1      	strh	r1, [r4, #6]
900130c8:	4628      	mov	r0, r5
900130ca:	9904      	ldr	r1, [sp, #16]
900130cc:	3c08      	subs	r4, #8
900130ce:	4605      	mov	r5, r0
900130d0:	3901      	subs	r1, #1
900130d2:	9104      	str	r1, [sp, #16]
900130d4:	e7d3      	b.n	9001307e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
900130d6:	4461      	add	r1, ip
900130d8:	b209      	sxth	r1, r1
900130da:	4549      	cmp	r1, r9
900130dc:	dcf5      	bgt.n	900130ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900130de:	9905      	ldr	r1, [sp, #20]
900130e0:	eba1 0c0c 	sub.w	ip, r1, ip
900130e4:	f8a4 c006 	strh.w	ip, [r4, #6]
900130e8:	e7ee      	b.n	900130c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900130ea:	428f      	cmp	r7, r1
900130ec:	dced      	bgt.n	900130ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900130ee:	f8b4 c006 	ldrh.w	ip, [r4, #6]
900130f2:	4461      	add	r1, ip
900130f4:	b209      	sxth	r1, r1
900130f6:	4589      	cmp	r9, r1
900130f8:	dbe7      	blt.n	900130ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900130fa:	4576      	cmp	r6, lr
900130fc:	fa1f fc8e 	uxth.w	ip, lr
90013100:	88a1      	ldrh	r1, [r4, #4]
90013102:	dc07      	bgt.n	90013114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90013104:	eba2 0c0c 	sub.w	ip, r2, ip
90013108:	f8a4 8000 	strh.w	r8, [r4]
9001310c:	eba1 010c 	sub.w	r1, r1, ip
90013110:	80a1      	strh	r1, [r4, #4]
90013112:	e7d9      	b.n	900130c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013114:	4461      	add	r1, ip
90013116:	b209      	sxth	r1, r1
90013118:	4588      	cmp	r8, r1
9001311a:	dbd6      	blt.n	900130ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001311c:	eba3 0c0c 	sub.w	ip, r3, ip
90013120:	f8a4 c004 	strh.w	ip, [r4, #4]
90013124:	e7d0      	b.n	900130c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90013126:	bf00      	nop
90013128:	240264da 	.word	0x240264da
9001312c:	240264d8 	.word	0x240264d8
90013130:	2d00      	cmp	r5, #0
90013132:	f000 816d 	beq.w	90013410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90013136:	9b06      	ldr	r3, [sp, #24]
90013138:	445b      	add	r3, fp
9001313a:	461c      	mov	r4, r3
9001313c:	9b02      	ldr	r3, [sp, #8]
9001313e:	3301      	adds	r3, #1
90013140:	f000 8166 	beq.w	90013410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90013144:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
90013148:	9803      	ldr	r0, [sp, #12]
9001314a:	4629      	mov	r1, r5
9001314c:	f7ff fd3a 	bl	90012bc4 <_ZNK8touchgfx4Rect8includesERKS0_>
90013150:	b120      	cbz	r0, 9001315c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
90013152:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90013156:	9801      	ldr	r0, [sp, #4]
90013158:	f7ff feb0 	bl	90012ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001315c:	9903      	ldr	r1, [sp, #12]
9001315e:	4628      	mov	r0, r5
90013160:	f7ff fcbd 	bl	90012ade <_ZNK8touchgfx4Rect9intersectERKS0_>
90013164:	2800      	cmp	r0, #0
90013166:	f000 809c 	beq.w	900132a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
9001316a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
9001316e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90013172:	fa1f f189 	uxth.w	r1, r9
90013176:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
9001317a:	9309      	str	r3, [sp, #36]	; 0x24
9001317c:	eb01 0c03 	add.w	ip, r1, r3
90013180:	b283      	uxth	r3, r0
90013182:	4548      	cmp	r0, r9
90013184:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
90013188:	fa1f fa8c 	uxth.w	sl, ip
9001318c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90013190:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90013194:	eb03 050c 	add.w	r5, r3, ip
90013198:	b2ad      	uxth	r5, r5
9001319a:	9505      	str	r5, [sp, #20]
9001319c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
900131a0:	9504      	str	r5, [sp, #16]
900131a2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
900131a6:	f340 8099 	ble.w	900132dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
900131aa:	1a5b      	subs	r3, r3, r1
900131ac:	4596      	cmp	lr, r2
900131ae:	fa0f f08a 	sxth.w	r0, sl
900131b2:	b29b      	uxth	r3, r3
900131b4:	b21e      	sxth	r6, r3
900131b6:	dd2e      	ble.n	90013216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
900131b8:	9f02      	ldr	r7, [sp, #8]
900131ba:	fa1f fe8e 	uxth.w	lr, lr
900131be:	b292      	uxth	r2, r2
900131c0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
900131c4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
900131c8:	9f04      	ldr	r7, [sp, #16]
900131ca:	ebae 0102 	sub.w	r1, lr, r2
900131ce:	44a6      	add	lr, r4
900131d0:	1a3f      	subs	r7, r7, r0
900131d2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
900131d6:	b289      	uxth	r1, r1
900131d8:	4402      	add	r2, r0
900131da:	fa0f fe8e 	sxth.w	lr, lr
900131de:	b20d      	sxth	r5, r1
900131e0:	b212      	sxth	r2, r2
900131e2:	436f      	muls	r7, r5
900131e4:	ebae 0202 	sub.w	r2, lr, r2
900131e8:	4372      	muls	r2, r6
900131ea:	4297      	cmp	r7, r2
900131ec:	db09      	blt.n	90013202 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
900131ee:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
900131f2:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
900131f6:	449c      	add	ip, r3
900131f8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
900131fc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90013200:	e686      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013202:	4421      	add	r1, r4
90013204:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
90013208:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
9001320c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013210:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90013214:	e67c      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013216:	9f04      	ldr	r7, [sp, #16]
90013218:	42b8      	cmp	r0, r7
9001321a:	da27      	bge.n	9001326c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
9001321c:	9902      	ldr	r1, [sp, #8]
9001321e:	1a3f      	subs	r7, r7, r0
90013220:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90013224:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90013228:	eb05 010e 	add.w	r1, r5, lr
9001322c:	fa1f f881 	uxth.w	r8, r1
90013230:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90013234:	4411      	add	r1, r2
90013236:	fa0f f988 	sxth.w	r9, r8
9001323a:	eba2 020e 	sub.w	r2, r2, lr
9001323e:	eba1 0108 	sub.w	r1, r1, r8
90013242:	4372      	muls	r2, r6
90013244:	b289      	uxth	r1, r1
90013246:	fa0f f881 	sxth.w	r8, r1
9001324a:	fb08 f707 	mul.w	r7, r8, r7
9001324e:	42ba      	cmp	r2, r7
90013250:	dc06      	bgt.n	90013260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
90013252:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
90013256:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
9001325a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
9001325e:	e7ca      	b.n	900131f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90013260:	4429      	add	r1, r5
90013262:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
90013266:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001326a:	e651      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001326c:	9805      	ldr	r0, [sp, #20]
9001326e:	2d06      	cmp	r5, #6
90013270:	ebaa 0000 	sub.w	r0, sl, r0
90013274:	b280      	uxth	r0, r0
90013276:	fa0f fe80 	sxth.w	lr, r0
9001327a:	d817      	bhi.n	900132ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
9001327c:	9b04      	ldr	r3, [sp, #16]
9001327e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90013282:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90013286:	1c6b      	adds	r3, r5, #1
90013288:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
9001328c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90013290:	9b01      	ldr	r3, [sp, #4]
90013292:	9801      	ldr	r0, [sp, #4]
90013294:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90013298:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
9001329c:	805a      	strh	r2, [r3, #2]
9001329e:	809e      	strh	r6, [r3, #4]
900132a0:	80d9      	strh	r1, [r3, #6]
900132a2:	9b02      	ldr	r3, [sp, #8]
900132a4:	3c08      	subs	r4, #8
900132a6:	3b01      	subs	r3, #1
900132a8:	9302      	str	r3, [sp, #8]
900132aa:	e747      	b.n	9001313c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
900132ac:	9a02      	ldr	r2, [sp, #8]
900132ae:	45b6      	cmp	lr, r6
900132b0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900132b4:	db0d      	blt.n	900132d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
900132b6:	449c      	add	ip, r3
900132b8:	445a      	add	r2, fp
900132ba:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
900132be:	fa1f fc8c 	uxth.w	ip, ip
900132c2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
900132c6:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900132ca:	448c      	add	ip, r1
900132cc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
900132d0:	e61e      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900132d2:	445a      	add	r2, fp
900132d4:	4484      	add	ip, r0
900132d6:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
900132da:	e78f      	b.n	900131fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900132dc:	fa1f f18e 	uxth.w	r1, lr
900132e0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
900132e4:	b293      	uxth	r3, r2
900132e6:	4596      	cmp	lr, r2
900132e8:	eb01 0806 	add.w	r8, r1, r6
900132ec:	9306      	str	r3, [sp, #24]
900132ee:	fa1f f888 	uxth.w	r8, r8
900132f2:	9f06      	ldr	r7, [sp, #24]
900132f4:	fa0f f388 	sxth.w	r3, r8
900132f8:	9307      	str	r3, [sp, #28]
900132fa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
900132fe:	443b      	add	r3, r7
90013300:	b29b      	uxth	r3, r3
90013302:	9308      	str	r3, [sp, #32]
90013304:	da24      	bge.n	90013350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
90013306:	9905      	ldr	r1, [sp, #20]
90013308:	eba3 0308 	sub.w	r3, r3, r8
9001330c:	eba2 020e 	sub.w	r2, r2, lr
90013310:	eba9 0000 	sub.w	r0, r9, r0
90013314:	ebaa 0401 	sub.w	r4, sl, r1
90013318:	b29b      	uxth	r3, r3
9001331a:	b2a4      	uxth	r4, r4
9001331c:	b219      	sxth	r1, r3
9001331e:	b225      	sxth	r5, r4
90013320:	4348      	muls	r0, r1
90013322:	436a      	muls	r2, r5
90013324:	4282      	cmp	r2, r0
90013326:	9a02      	ldr	r2, [sp, #8]
90013328:	ea4f 02c2 	mov.w	r2, r2, lsl #3
9001332c:	445a      	add	r2, fp
9001332e:	dc06      	bgt.n	9001333e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90013330:	9b07      	ldr	r3, [sp, #28]
90013332:	44a4      	add	ip, r4
90013334:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
90013338:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
9001333c:	e75e      	b.n	900131fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001333e:	9904      	ldr	r1, [sp, #16]
90013340:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90013344:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
90013348:	4433      	add	r3, r6
9001334a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001334e:	e5df      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013350:	9f06      	ldr	r7, [sp, #24]
90013352:	9b04      	ldr	r3, [sp, #16]
90013354:	1bc9      	subs	r1, r1, r7
90013356:	fa0f f78a 	sxth.w	r7, sl
9001335a:	b289      	uxth	r1, r1
9001335c:	429f      	cmp	r7, r3
9001335e:	fa0f fe81 	sxth.w	lr, r1
90013362:	dd23      	ble.n	900133ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90013364:	9a05      	ldr	r2, [sp, #20]
90013366:	eba9 0000 	sub.w	r0, r9, r0
9001336a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
9001336e:	ebaa 0202 	sub.w	r2, sl, r2
90013372:	9d07      	ldr	r5, [sp, #28]
90013374:	fb0e f000 	mul.w	r0, lr, r0
90013378:	b292      	uxth	r2, r2
9001337a:	eba5 0a03 	sub.w	sl, r5, r3
9001337e:	9b02      	ldr	r3, [sp, #8]
90013380:	b214      	sxth	r4, r2
90013382:	00db      	lsls	r3, r3, #3
90013384:	fb04 fa0a 	mul.w	sl, r4, sl
90013388:	445b      	add	r3, fp
9001338a:	4550      	cmp	r0, sl
9001338c:	db03      	blt.n	90013396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
9001338e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90013392:	4494      	add	ip, r2
90013394:	e732      	b.n	900131fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90013396:	9a04      	ldr	r2, [sp, #16]
90013398:	4431      	add	r1, r6
9001339a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
9001339e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
900133a2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
900133a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900133aa:	e75c      	b.n	90013266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900133ac:	9b08      	ldr	r3, [sp, #32]
900133ae:	2d06      	cmp	r5, #6
900133b0:	eba3 0308 	sub.w	r3, r3, r8
900133b4:	b29b      	uxth	r3, r3
900133b6:	b218      	sxth	r0, r3
900133b8:	d813      	bhi.n	900133e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900133ba:	9b07      	ldr	r3, [sp, #28]
900133bc:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
900133c0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
900133c4:	1c6b      	adds	r3, r5, #1
900133c6:	9901      	ldr	r1, [sp, #4]
900133c8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900133cc:	9b01      	ldr	r3, [sp, #4]
900133ce:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
900133d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900133d6:	805a      	strh	r2, [r3, #2]
900133d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
900133da:	f8a3 e006 	strh.w	lr, [r3, #6]
900133de:	809a      	strh	r2, [r3, #4]
900133e0:	e75f      	b.n	900132a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900133e2:	9c02      	ldr	r4, [sp, #8]
900133e4:	4570      	cmp	r0, lr
900133e6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
900133ea:	db0d      	blt.n	90013408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
900133ec:	4431      	add	r1, r6
900133ee:	9b06      	ldr	r3, [sp, #24]
900133f0:	445c      	add	r4, fp
900133f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
900133f6:	b289      	uxth	r1, r1
900133f8:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
900133fc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90013400:	4419      	add	r1, r3
90013402:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
90013406:	e583      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013408:	445c      	add	r4, fp
9001340a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
9001340e:	e79b      	b.n	90013348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90013410:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90013414:	2e07      	cmp	r6, #7
90013416:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001341a:	d812      	bhi.n	90013442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
9001341c:	1c75      	adds	r5, r6, #1
9001341e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90013422:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
90013426:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001342a:	9d01      	ldr	r5, [sp, #4]
9001342c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90013430:	442c      	add	r4, r5
90013432:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
90013436:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
9001343a:	8061      	strh	r1, [r4, #2]
9001343c:	80a2      	strh	r2, [r4, #4]
9001343e:	80e3      	strh	r3, [r4, #6]
90013440:	e5d0      	b.n	90012fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90013442:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90013446:	3e01      	subs	r6, #1
90013448:	445c      	add	r4, fp
9001344a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
9001344e:	f04f 37ff 	mov.w	r7, #4294967295
90013452:	2500      	movs	r5, #0
90013454:	9305      	str	r3, [sp, #20]
90013456:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
9001345a:	1e72      	subs	r2, r6, #1
9001345c:	9302      	str	r3, [sp, #8]
9001345e:	4691      	mov	r9, r2
90013460:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90013464:	9304      	str	r3, [sp, #16]
90013466:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
9001346a:	f1b9 3fff 	cmp.w	r9, #4294967295
9001346e:	6818      	ldr	r0, [r3, #0]
90013470:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90013474:	9207      	str	r2, [sp, #28]
90013476:	bf16      	itet	ne
90013478:	9905      	ldrne	r1, [sp, #20]
9001347a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
9001347e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90013482:	9306      	str	r3, [sp, #24]
90013484:	f8be 1006 	ldrh.w	r1, [lr, #6]
90013488:	f8be 8004 	ldrh.w	r8, [lr, #4]
9001348c:	fb18 f801 	smulbb	r8, r8, r1
90013490:	6859      	ldr	r1, [r3, #4]
90013492:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90013496:	4671      	mov	r1, lr
90013498:	a80c      	add	r0, sp, #48	; 0x30
9001349a:	f7ff fbb9 	bl	90012c10 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001349e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900134a2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
900134a6:	f04f 0c08 	mov.w	ip, #8
900134aa:	9b04      	ldr	r3, [sp, #16]
900134ac:	9a02      	ldr	r2, [sp, #8]
900134ae:	fb10 f001 	smulbb	r0, r0, r1
900134b2:	fb02 8803 	mla	r8, r2, r3, r8
900134b6:	eba0 0108 	sub.w	r1, r0, r8
900134ba:	fb90 f0fc 	sdiv	r0, r0, ip
900134be:	4288      	cmp	r0, r1
900134c0:	dc20      	bgt.n	90013504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900134c2:	4551      	cmp	r1, sl
900134c4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
900134c8:	da03      	bge.n	900134d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
900134ca:	b1d9      	cbz	r1, 90013504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900134cc:	468a      	mov	sl, r1
900134ce:	464f      	mov	r7, r9
900134d0:	4635      	mov	r5, r6
900134d2:	f109 39ff 	add.w	r9, r9, #4294967295
900134d6:	f119 0f02 	cmn.w	r9, #2
900134da:	d1c6      	bne.n	9001346a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
900134dc:	4616      	mov	r6, r2
900134de:	3201      	adds	r2, #1
900134e0:	f1a4 0408 	sub.w	r4, r4, #8
900134e4:	d1b7      	bne.n	90013456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
900134e6:	9b01      	ldr	r3, [sp, #4]
900134e8:	b2ac      	uxth	r4, r5
900134ea:	00ed      	lsls	r5, r5, #3
900134ec:	1958      	adds	r0, r3, r5
900134ee:	1c7b      	adds	r3, r7, #1
900134f0:	d10b      	bne.n	9001350a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
900134f2:	4601      	mov	r1, r0
900134f4:	9803      	ldr	r0, [sp, #12]
900134f6:	f7ff fb8b 	bl	90012c10 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900134fa:	4621      	mov	r1, r4
900134fc:	9801      	ldr	r0, [sp, #4]
900134fe:	f7ff fcdd 	bl	90012ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013502:	e505      	b.n	90012f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90013504:	464f      	mov	r7, r9
90013506:	4635      	mov	r5, r6
90013508:	e7ed      	b.n	900134e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
9001350a:	9b01      	ldr	r3, [sp, #4]
9001350c:	00ff      	lsls	r7, r7, #3
9001350e:	445d      	add	r5, fp
90013510:	19d9      	adds	r1, r3, r7
90013512:	445f      	add	r7, fp
90013514:	f7ff fb7c 	bl	90012c10 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90013518:	9b03      	ldr	r3, [sp, #12]
9001351a:	cb03      	ldmia	r3!, {r0, r1}
9001351c:	9b03      	ldr	r3, [sp, #12]
9001351e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90013522:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90013526:	f855 0fac 	ldr.w	r0, [r5, #172]!
9001352a:	6869      	ldr	r1, [r5, #4]
9001352c:	c303      	stmia	r3!, {r0, r1}
9001352e:	e7e4      	b.n	900134fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90013530 <_ZN8touchgfx11Application10invalidateEv>:
90013530:	4b09      	ldr	r3, [pc, #36]	; (90013558 <_ZN8touchgfx11Application10invalidateEv+0x28>)
90013532:	b082      	sub	sp, #8
90013534:	2100      	movs	r1, #0
90013536:	f9b3 2000 	ldrsh.w	r2, [r3]
9001353a:	4b08      	ldr	r3, [pc, #32]	; (9001355c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
9001353c:	9100      	str	r1, [sp, #0]
9001353e:	f9b3 3000 	ldrsh.w	r3, [r3]
90013542:	f8ad 2004 	strh.w	r2, [sp, #4]
90013546:	f8ad 3006 	strh.w	r3, [sp, #6]
9001354a:	ab02      	add	r3, sp, #8
9001354c:	e913 0006 	ldmdb	r3, {r1, r2}
90013550:	b002      	add	sp, #8
90013552:	f7ff bcc7 	b.w	90012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90013556:	bf00      	nop
90013558:	240264d8 	.word	0x240264d8
9001355c:	240264da 	.word	0x240264da

90013560 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90013560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013564:	f500 7698 	add.w	r6, r0, #304	; 0x130
90013568:	b09b      	sub	sp, #108	; 0x6c
9001356a:	4604      	mov	r4, r0
9001356c:	4630      	mov	r0, r6
9001356e:	f7fc fa6e 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90013572:	4605      	mov	r5, r0
90013574:	b940      	cbnz	r0, 90013588 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
90013576:	4620      	mov	r0, r4
90013578:	e896 0006 	ldmia.w	r6, {r1, r2}
9001357c:	f7ff fcb2 	bl	90012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90013580:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90013584:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90013588:	4bc8      	ldr	r3, [pc, #800]	; (900138ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
9001358a:	681b      	ldr	r3, [r3, #0]
9001358c:	2b00      	cmp	r3, #0
9001358e:	d03e      	beq.n	9001360e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90013590:	4dc7      	ldr	r5, [pc, #796]	; (900138b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90013592:	4628      	mov	r0, r5
90013594:	f7fc fa5b 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90013598:	4606      	mov	r6, r0
9001359a:	2800      	cmp	r0, #0
9001359c:	d137      	bne.n	9001360e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
9001359e:	4628      	mov	r0, r5
900135a0:	f7ff f9e0 	bl	90012964 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
900135a4:	6829      	ldr	r1, [r5, #0]
900135a6:	686a      	ldr	r2, [r5, #4]
900135a8:	4620      	mov	r0, r4
900135aa:	f7ff fc9b 	bl	90012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900135ae:	802e      	strh	r6, [r5, #0]
900135b0:	806e      	strh	r6, [r5, #2]
900135b2:	80ae      	strh	r6, [r5, #4]
900135b4:	80ee      	strh	r6, [r5, #6]
900135b6:	ae09      	add	r6, sp, #36	; 0x24
900135b8:	4630      	mov	r0, r6
900135ba:	f7ff fc23 	bl	90012e04 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900135be:	4abd      	ldr	r2, [pc, #756]	; (900138b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
900135c0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
900135c4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900135c8:	8815      	ldrh	r5, [r2, #0]
900135ca:	9202      	str	r2, [sp, #8]
900135cc:	462b      	mov	r3, r5
900135ce:	429f      	cmp	r7, r3
900135d0:	d924      	bls.n	9001361c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
900135d2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
900135d6:	2907      	cmp	r1, #7
900135d8:	d816      	bhi.n	90013608 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
900135da:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
900135de:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
900135e2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
900135e6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
900135ea:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
900135ee:	1c4a      	adds	r2, r1, #1
900135f0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
900135f4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
900135f8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
900135fc:	f8a2 9002 	strh.w	r9, [r2, #2]
90013600:	f8a2 e004 	strh.w	lr, [r2, #4]
90013604:	f8a2 c006 	strh.w	ip, [r2, #6]
90013608:	3301      	adds	r3, #1
9001360a:	b29b      	uxth	r3, r3
9001360c:	e7df      	b.n	900135ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
9001360e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013612:	2b00      	cmp	r3, #0
90013614:	d1cf      	bne.n	900135b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90013616:	b01b      	add	sp, #108	; 0x6c
90013618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001361c:	462f      	mov	r7, r5
9001361e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90013622:	42bb      	cmp	r3, r7
90013624:	d90b      	bls.n	9001363e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90013626:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
9001362a:	3701      	adds	r7, #1
9001362c:	4620      	mov	r0, r4
9001362e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90013632:	b2bf      	uxth	r7, r7
90013634:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90013638:	f7ff fc54 	bl	90012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001363c:	e7ef      	b.n	9001361e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
9001363e:	4a9e      	ldr	r2, [pc, #632]	; (900138b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90013640:	6813      	ldr	r3, [r2, #0]
90013642:	4690      	mov	r8, r2
90013644:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90013648:	2b01      	cmp	r3, #1
9001364a:	f040 80e4 	bne.w	90013816 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
9001364e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90013652:	4629      	mov	r1, r5
90013654:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90013658:	2500      	movs	r5, #0
9001365a:	33ae      	adds	r3, #174	; 0xae
9001365c:	428f      	cmp	r7, r1
9001365e:	f103 0308 	add.w	r3, r3, #8
90013662:	dd0a      	ble.n	9001367a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90013664:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90013668:	3101      	adds	r1, #1
9001366a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
9001366e:	4402      	add	r2, r0
90013670:	b212      	sxth	r2, r2
90013672:	4295      	cmp	r5, r2
90013674:	bfb8      	it	lt
90013676:	4615      	movlt	r5, r2
90013678:	e7f0      	b.n	9001365c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
9001367a:	4b90      	ldr	r3, [pc, #576]	; (900138bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
9001367c:	f8df b238 	ldr.w	fp, [pc, #568]	; 900138b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90013680:	881b      	ldrh	r3, [r3, #0]
90013682:	46d8      	mov	r8, fp
90013684:	2b0f      	cmp	r3, #15
90013686:	bf8c      	ite	hi
90013688:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
9001368c:	f04f 0a01 	movls.w	sl, #1
90013690:	2300      	movs	r3, #0
90013692:	e9cd 3305 	strd	r3, r3, [sp, #20]
90013696:	f8bd 701a 	ldrh.w	r7, [sp, #26]
9001369a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9001369e:	4438      	add	r0, r7
900136a0:	b207      	sxth	r7, r0
900136a2:	f8db 0000 	ldr.w	r0, [fp]
900136a6:	42bd      	cmp	r5, r7
900136a8:	6803      	ldr	r3, [r0, #0]
900136aa:	f340 8084 	ble.w	900137b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
900136ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900136b2:	4798      	blx	r3
900136b4:	eb07 030a 	add.w	r3, r7, sl
900136b8:	4298      	cmp	r0, r3
900136ba:	da07      	bge.n	900136cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900136bc:	4285      	cmp	r5, r0
900136be:	dd05      	ble.n	900136cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900136c0:	4287      	cmp	r7, r0
900136c2:	dd6d      	ble.n	900137a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
900136c4:	2f00      	cmp	r7, #0
900136c6:	dd6b      	ble.n	900137a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
900136c8:	4628      	mov	r0, r5
900136ca:	e004      	b.n	900136d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
900136cc:	4287      	cmp	r7, r0
900136ce:	dcfb      	bgt.n	900136c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
900136d0:	42a8      	cmp	r0, r5
900136d2:	bfa8      	it	ge
900136d4:	4628      	movge	r0, r5
900136d6:	4b7a      	ldr	r3, [pc, #488]	; (900138c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
900136d8:	1bc0      	subs	r0, r0, r7
900136da:	2200      	movs	r2, #0
900136dc:	f8ad 7016 	strh.w	r7, [sp, #22]
900136e0:	f9b3 3000 	ldrsh.w	r3, [r3]
900136e4:	f8ad 2014 	strh.w	r2, [sp, #20]
900136e8:	f8ad 3018 	strh.w	r3, [sp, #24]
900136ec:	9b02      	ldr	r3, [sp, #8]
900136ee:	f8ad 001a 	strh.w	r0, [sp, #26]
900136f2:	881f      	ldrh	r7, [r3, #0]
900136f4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
900136f8:	42bb      	cmp	r3, r7
900136fa:	d9cc      	bls.n	90013696 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
900136fc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90013700:	ab07      	add	r3, sp, #28
90013702:	f852 0fac 	ldr.w	r0, [r2, #172]!
90013706:	6851      	ldr	r1, [r2, #4]
90013708:	c303      	stmia	r3!, {r0, r1}
9001370a:	a905      	add	r1, sp, #20
9001370c:	a807      	add	r0, sp, #28
9001370e:	f7ff f9e6 	bl	90012ade <_ZNK8touchgfx4Rect9intersectERKS0_>
90013712:	2800      	cmp	r0, #0
90013714:	d04c      	beq.n	900137b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90013716:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
9001371a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
9001371e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90013722:	4686      	mov	lr, r0
90013724:	4290      	cmp	r0, r2
90013726:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
9001372a:	4448      	add	r0, r9
9001372c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90013730:	bfb8      	it	lt
90013732:	4696      	movlt	lr, r2
90013734:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90013738:	444a      	add	r2, r9
9001373a:	b280      	uxth	r0, r0
9001373c:	4299      	cmp	r1, r3
9001373e:	468c      	mov	ip, r1
90013740:	b292      	uxth	r2, r2
90013742:	9303      	str	r3, [sp, #12]
90013744:	bfb8      	it	lt
90013746:	469c      	movlt	ip, r3
90013748:	b203      	sxth	r3, r0
9001374a:	fa0f f982 	sxth.w	r9, r2
9001374e:	f8ad e01c 	strh.w	lr, [sp, #28]
90013752:	f8ad c01e 	strh.w	ip, [sp, #30]
90013756:	454b      	cmp	r3, r9
90013758:	bfb8      	it	lt
9001375a:	4602      	movlt	r2, r0
9001375c:	9b03      	ldr	r3, [sp, #12]
9001375e:	eba2 020e 	sub.w	r2, r2, lr
90013762:	f8ad 2020 	strh.w	r2, [sp, #32]
90013766:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001376a:	4411      	add	r1, r2
9001376c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90013770:	4413      	add	r3, r2
90013772:	b289      	uxth	r1, r1
90013774:	b29b      	uxth	r3, r3
90013776:	b208      	sxth	r0, r1
90013778:	b21a      	sxth	r2, r3
9001377a:	4290      	cmp	r0, r2
9001377c:	bfb8      	it	lt
9001377e:	460b      	movlt	r3, r1
90013780:	eba3 030c 	sub.w	r3, r3, ip
90013784:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013788:	a807      	add	r0, sp, #28
9001378a:	f7fc f960 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
9001378e:	b920      	cbnz	r0, 9001379a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90013790:	6823      	ldr	r3, [r4, #0]
90013792:	a907      	add	r1, sp, #28
90013794:	4620      	mov	r0, r4
90013796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013798:	4798      	blx	r3
9001379a:	3701      	adds	r7, #1
9001379c:	b2bf      	uxth	r7, r7
9001379e:	e7a9      	b.n	900136f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
900137a0:	f8d8 0000 	ldr.w	r0, [r8]
900137a4:	2101      	movs	r1, #1
900137a6:	6803      	ldr	r3, [r0, #0]
900137a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
900137ac:	4798      	blx	r3
900137ae:	e772      	b.n	90013696 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
900137b0:	e9cd 0007 	strd	r0, r0, [sp, #28]
900137b4:	e7e8      	b.n	90013788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
900137b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900137b8:	4798      	blx	r3
900137ba:	4b42      	ldr	r3, [pc, #264]	; (900138c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
900137bc:	781b      	ldrb	r3, [r3, #0]
900137be:	2b00      	cmp	r3, #0
900137c0:	f43f af29 	beq.w	90013616 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
900137c4:	2300      	movs	r3, #0
900137c6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
900137ca:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900137ce:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
900137d2:	9b02      	ldr	r3, [sp, #8]
900137d4:	881b      	ldrh	r3, [r3, #0]
900137d6:	429d      	cmp	r5, r3
900137d8:	f67f af1d 	bls.w	90013616 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
900137dc:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
900137e0:	2907      	cmp	r1, #7
900137e2:	d815      	bhi.n	90013810 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
900137e4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
900137e8:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
900137ec:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
900137f0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
900137f4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
900137f8:	1c4a      	adds	r2, r1, #1
900137fa:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
900137fe:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90013802:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90013806:	f8a2 e002 	strh.w	lr, [r2, #2]
9001380a:	f8a2 c004 	strh.w	ip, [r2, #4]
9001380e:	80d7      	strh	r7, [r2, #6]
90013810:	3301      	adds	r3, #1
90013812:	b29b      	uxth	r3, r3
90013814:	e7df      	b.n	900137d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90013816:	2b02      	cmp	r3, #2
90013818:	f040 8135 	bne.w	90013a86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
9001381c:	4b2a      	ldr	r3, [pc, #168]	; (900138c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
9001381e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90013822:	781b      	ldrb	r3, [r3, #0]
90013824:	2b01      	cmp	r3, #1
90013826:	f000 809c 	beq.w	90013962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001382a:	9b02      	ldr	r3, [sp, #8]
9001382c:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90013830:	f8b3 b000 	ldrh.w	fp, [r3]
90013834:	f10b 0b01 	add.w	fp, fp, #1
90013838:	fa1f fb8b 	uxth.w	fp, fp
9001383c:	2a00      	cmp	r2, #0
9001383e:	d0bc      	beq.n	900137ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90013840:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90013844:	4659      	mov	r1, fp
90013846:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
9001384a:	f04f 0800 	mov.w	r8, #0
9001384e:	441d      	add	r5, r3
90013850:	b22d      	sxth	r5, r5
90013852:	b28b      	uxth	r3, r1
90013854:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90013858:	429a      	cmp	r2, r3
9001385a:	f240 80c0 	bls.w	900139de <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
9001385e:	4427      	add	r7, r4
90013860:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90013864:	4608      	mov	r0, r1
90013866:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
9001386a:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
9001386e:	4563      	cmp	r3, ip
90013870:	f340 80a2 	ble.w	900139b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90013874:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90013878:	4465      	add	r5, ip
9001387a:	b22d      	sxth	r5, r5
9001387c:	429d      	cmp	r5, r3
9001387e:	bfa8      	it	ge
90013880:	461d      	movge	r5, r3
90013882:	3101      	adds	r1, #1
90013884:	4680      	mov	r8, r0
90013886:	e7e4      	b.n	90013852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90013888:	d10b      	bne.n	900138a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
9001388a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
9001388e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90013892:	458c      	cmp	ip, r1
90013894:	bfb4      	ite	lt
90013896:	469c      	movlt	ip, r3
90013898:	46bc      	movge	ip, r7
9001389a:	4572      	cmp	r2, lr
9001389c:	bfb8      	it	lt
9001389e:	4672      	movlt	r2, lr
900138a0:	e087      	b.n	900139b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900138a2:	428a      	cmp	r2, r1
900138a4:	46bc      	mov	ip, r7
900138a6:	bfb8      	it	lt
900138a8:	460a      	movlt	r2, r1
900138aa:	e082      	b.n	900139b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900138ac:	2402651c 	.word	0x2402651c
900138b0:	24026528 	.word	0x24026528
900138b4:	24000068 	.word	0x24000068
900138b8:	240264e4 	.word	0x240264e4
900138bc:	240264da 	.word	0x240264da
900138c0:	240264d8 	.word	0x240264d8
900138c4:	240264e2 	.word	0x240264e2
900138c8:	240264dc 	.word	0x240264dc
900138cc:	1961      	adds	r1, r4, r5
900138ce:	ab07      	add	r3, sp, #28
900138d0:	f851 0fac 	ldr.w	r0, [r1, #172]!
900138d4:	6849      	ldr	r1, [r1, #4]
900138d6:	c303      	stmia	r3!, {r0, r1}
900138d8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900138dc:	a807      	add	r0, sp, #28
900138de:	f8bd 101c 	ldrh.w	r1, [sp, #28]
900138e2:	2b13      	cmp	r3, #19
900138e4:	440b      	add	r3, r1
900138e6:	bfd8      	it	le
900138e8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
900138ec:	1a9b      	subs	r3, r3, r2
900138ee:	f8ad 201c 	strh.w	r2, [sp, #28]
900138f2:	f8ad 3020 	strh.w	r3, [sp, #32]
900138f6:	f7ff f84f 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900138fa:	a807      	add	r0, sp, #28
900138fc:	f7fc f8a7 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90013900:	bb78      	cbnz	r0, 90013962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90013902:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90013906:	4425      	add	r5, r4
90013908:	f8d8 0000 	ldr.w	r0, [r8]
9001390c:	f1bc 0f14 	cmp.w	ip, #20
90013910:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90013914:	f8d0 e000 	ldr.w	lr, [r0]
90013918:	bfa8      	it	ge
9001391a:	f04f 0c14 	movge.w	ip, #20
9001391e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90013922:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90013926:	fa1f fc8c 	uxth.w	ip, ip
9001392a:	f8cd c000 	str.w	ip, [sp]
9001392e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90013932:	47d0      	blx	sl
90013934:	4682      	mov	sl, r0
90013936:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
9001393a:	a807      	add	r0, sp, #28
9001393c:	f7ff f812 	bl	90012964 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90013940:	6823      	ldr	r3, [r4, #0]
90013942:	4620      	mov	r0, r4
90013944:	a907      	add	r1, sp, #28
90013946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013948:	4798      	blx	r3
9001394a:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
9001394e:	eba0 000a 	sub.w	r0, r0, sl
90013952:	b200      	sxth	r0, r0
90013954:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90013958:	b918      	cbnz	r0, 90013962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001395a:	b2b9      	uxth	r1, r7
9001395c:	4648      	mov	r0, r9
9001395e:	f7ff faad 	bl	90012ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013962:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90013966:	f1bb 0f00 	cmp.w	fp, #0
9001396a:	f43f af26 	beq.w	900137ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
9001396e:	9b02      	ldr	r3, [sp, #8]
90013970:	2700      	movs	r7, #0
90013972:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90013976:	881b      	ldrh	r3, [r3, #0]
90013978:	3301      	adds	r3, #1
9001397a:	b29b      	uxth	r3, r3
9001397c:	b299      	uxth	r1, r3
9001397e:	00fd      	lsls	r5, r7, #3
90013980:	458b      	cmp	fp, r1
90013982:	d9a3      	bls.n	900138cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90013984:	4425      	add	r5, r4
90013986:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
9001398a:	469c      	mov	ip, r3
9001398c:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90013990:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90013994:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90013998:	4408      	add	r0, r1
9001399a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
9001399e:	4471      	add	r1, lr
900139a0:	b200      	sxth	r0, r0
900139a2:	b209      	sxth	r1, r1
900139a4:	4288      	cmp	r0, r1
900139a6:	f6bf af6f 	bge.w	90013888 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
900139aa:	4586      	cmp	lr, r0
900139ac:	4672      	mov	r2, lr
900139ae:	bfb8      	it	lt
900139b0:	4602      	movlt	r2, r0
900139b2:	3301      	adds	r3, #1
900139b4:	4667      	mov	r7, ip
900139b6:	e7e1      	b.n	9001397c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
900139b8:	d10c      	bne.n	900139d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
900139ba:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
900139be:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
900139c2:	4287      	cmp	r7, r0
900139c4:	bfb4      	ite	lt
900139c6:	4608      	movlt	r0, r1
900139c8:	4640      	movge	r0, r8
900139ca:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
900139ce:	443b      	add	r3, r7
900139d0:	b21b      	sxth	r3, r3
900139d2:	e753      	b.n	9001387c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
900139d4:	4565      	cmp	r5, ip
900139d6:	4640      	mov	r0, r8
900139d8:	bfa8      	it	ge
900139da:	4665      	movge	r5, ip
900139dc:	e751      	b.n	90013882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
900139de:	eb09 0007 	add.w	r0, r9, r7
900139e2:	4427      	add	r7, r4
900139e4:	9203      	str	r2, [sp, #12]
900139e6:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
900139ea:	f1ba 0f13 	cmp.w	sl, #19
900139ee:	bfde      	ittt	le
900139f0:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
900139f4:	4455      	addle	r5, sl
900139f6:	b22d      	sxthle	r5, r5
900139f8:	f7fc f829 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
900139fc:	9a03      	ldr	r2, [sp, #12]
900139fe:	2800      	cmp	r0, #0
90013a00:	f47f af1c 	bne.w	9001383c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90013a04:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90013a08:	fa1f fa8a 	uxth.w	sl, sl
90013a0c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90013a10:	1aad      	subs	r5, r5, r2
90013a12:	4829      	ldr	r0, [pc, #164]	; (90013ab8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90013a14:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90013a18:	2d14      	cmp	r5, #20
90013a1a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90013a1e:	6800      	ldr	r0, [r0, #0]
90013a20:	bfa8      	it	ge
90013a22:	2514      	movge	r5, #20
90013a24:	f8ad 101c 	strh.w	r1, [sp, #28]
90013a28:	f8ad 201e 	strh.w	r2, [sp, #30]
90013a2c:	b289      	uxth	r1, r1
90013a2e:	f8ad 3020 	strh.w	r3, [sp, #32]
90013a32:	b2ad      	uxth	r5, r5
90013a34:	f8d0 c000 	ldr.w	ip, [r0]
90013a38:	b292      	uxth	r2, r2
90013a3a:	4555      	cmp	r5, sl
90013a3c:	bf94      	ite	ls
90013a3e:	9500      	strls	r5, [sp, #0]
90013a40:	f8cd a000 	strhi.w	sl, [sp]
90013a44:	b29b      	uxth	r3, r3
90013a46:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90013a4a:	47a8      	blx	r5
90013a4c:	6823      	ldr	r3, [r4, #0]
90013a4e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90013a52:	a907      	add	r1, sp, #28
90013a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013a56:	4620      	mov	r0, r4
90013a58:	4798      	blx	r3
90013a5a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90013a5e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90013a62:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90013a66:	1a5b      	subs	r3, r3, r1
90013a68:	440a      	add	r2, r1
90013a6a:	b21b      	sxth	r3, r3
90013a6c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90013a70:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90013a74:	2b00      	cmp	r3, #0
90013a76:	f47f aed8 	bne.w	9001382a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90013a7a:	fa1f f188 	uxth.w	r1, r8
90013a7e:	4648      	mov	r0, r9
90013a80:	f7ff fa1c 	bl	90012ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90013a84:	e6d1      	b.n	9001382a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90013a86:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90013a8a:	42ab      	cmp	r3, r5
90013a8c:	f67f ae95 	bls.w	900137ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90013a90:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90013a94:	ab07      	add	r3, sp, #28
90013a96:	f852 0fac 	ldr.w	r0, [r2, #172]!
90013a9a:	6851      	ldr	r1, [r2, #4]
90013a9c:	c303      	stmia	r3!, {r0, r1}
90013a9e:	a807      	add	r0, sp, #28
90013aa0:	f7fb ffd5 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90013aa4:	b920      	cbnz	r0, 90013ab0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90013aa6:	6823      	ldr	r3, [r4, #0]
90013aa8:	a907      	add	r1, sp, #28
90013aaa:	4620      	mov	r0, r4
90013aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013aae:	4798      	blx	r3
90013ab0:	3501      	adds	r5, #1
90013ab2:	b2ad      	uxth	r5, r5
90013ab4:	e7e7      	b.n	90013a86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90013ab6:	bf00      	nop
90013ab8:	240264e4 	.word	0x240264e4

90013abc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90013abc:	4b03      	ldr	r3, [pc, #12]	; (90013acc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90013abe:	2200      	movs	r2, #0
90013ac0:	801a      	strh	r2, [r3, #0]
90013ac2:	805a      	strh	r2, [r3, #2]
90013ac4:	809a      	strh	r2, [r3, #4]
90013ac6:	80da      	strh	r2, [r3, #6]
90013ac8:	4770      	bx	lr
90013aca:	bf00      	nop
90013acc:	24026528 	.word	0x24026528

90013ad0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90013ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013ad4:	b09d      	sub	sp, #116	; 0x74
90013ad6:	4606      	mov	r6, r0
90013ad8:	4614      	mov	r4, r2
90013ada:	468a      	mov	sl, r1
90013adc:	a803      	add	r0, sp, #12
90013ade:	461d      	mov	r5, r3
90013ae0:	f000 fd7c 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90013ae4:	6833      	ldr	r3, [r6, #0]
90013ae6:	4630      	mov	r0, r6
90013ae8:	f242 0b0b 	movw	fp, #8203	; 0x200b
90013aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013aee:	4798      	blx	r3
90013af0:	6833      	ldr	r3, [r6, #0]
90013af2:	4607      	mov	r7, r0
90013af4:	4630      	mov	r0, r6
90013af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013af8:	4798      	blx	r3
90013afa:	462a      	mov	r2, r5
90013afc:	2500      	movs	r5, #0
90013afe:	4621      	mov	r1, r4
90013b00:	9000      	str	r0, [sp, #0]
90013b02:	463b      	mov	r3, r7
90013b04:	462c      	mov	r4, r5
90013b06:	46a9      	mov	r9, r5
90013b08:	46a8      	mov	r8, r5
90013b0a:	a803      	add	r0, sp, #12
90013b0c:	f000 fdc1 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013b10:	2300      	movs	r3, #0
90013b12:	9302      	str	r3, [sp, #8]
90013b14:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013b18:	429c      	cmp	r4, r3
90013b1a:	d002      	beq.n	90013b22 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90013b1c:	455c      	cmp	r4, fp
90013b1e:	bf18      	it	ne
90013b20:	4625      	movne	r5, r4
90013b22:	ab02      	add	r3, sp, #8
90013b24:	4632      	mov	r2, r6
90013b26:	4651      	mov	r1, sl
90013b28:	a803      	add	r0, sp, #12
90013b2a:	f001 f8b7 	bl	90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013b2e:	4604      	mov	r4, r0
90013b30:	b108      	cbz	r0, 90013b36 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90013b32:	280a      	cmp	r0, #10
90013b34:	d10a      	bne.n	90013b4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90013b36:	45c1      	cmp	r9, r8
90013b38:	bf38      	it	cc
90013b3a:	46c1      	movcc	r9, r8
90013b3c:	f04f 0800 	mov.w	r8, #0
90013b40:	2c00      	cmp	r4, #0
90013b42:	d1e5      	bne.n	90013b10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90013b44:	4648      	mov	r0, r9
90013b46:	b01d      	add	sp, #116	; 0x74
90013b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013b4c:	9a02      	ldr	r2, [sp, #8]
90013b4e:	2a00      	cmp	r2, #0
90013b50:	d0de      	beq.n	90013b10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90013b52:	7b57      	ldrb	r7, [r2, #13]
90013b54:	4629      	mov	r1, r5
90013b56:	6833      	ldr	r3, [r6, #0]
90013b58:	007f      	lsls	r7, r7, #1
90013b5a:	8894      	ldrh	r4, [r2, #4]
90013b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013b5e:	f407 7080 	and.w	r0, r7, #256	; 0x100
90013b62:	7a97      	ldrb	r7, [r2, #10]
90013b64:	4307      	orrs	r7, r0
90013b66:	4630      	mov	r0, r6
90013b68:	4798      	blx	r3
90013b6a:	4438      	add	r0, r7
90013b6c:	4480      	add	r8, r0
90013b6e:	fa1f f888 	uxth.w	r8, r8
90013b72:	e7e5      	b.n	90013b40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90013b74 <_ZNK8touchgfx4Font12getCharWidthEt>:
90013b74:	b508      	push	{r3, lr}
90013b76:	6803      	ldr	r3, [r0, #0]
90013b78:	68db      	ldr	r3, [r3, #12]
90013b7a:	4798      	blx	r3
90013b7c:	b128      	cbz	r0, 90013b8a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90013b7e:	7b43      	ldrb	r3, [r0, #13]
90013b80:	7a80      	ldrb	r0, [r0, #10]
90013b82:	005b      	lsls	r3, r3, #1
90013b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
90013b88:	4318      	orrs	r0, r3
90013b8a:	bd08      	pop	{r3, pc}

90013b8c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90013b8c:	b40e      	push	{r1, r2, r3}
90013b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
90013b90:	b09e      	sub	sp, #120	; 0x78
90013b92:	4605      	mov	r5, r0
90013b94:	ab23      	add	r3, sp, #140	; 0x8c
90013b96:	a805      	add	r0, sp, #20
90013b98:	f853 4b04 	ldr.w	r4, [r3], #4
90013b9c:	9303      	str	r3, [sp, #12]
90013b9e:	f000 fd1d 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90013ba2:	682b      	ldr	r3, [r5, #0]
90013ba4:	4628      	mov	r0, r5
90013ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013ba8:	4798      	blx	r3
90013baa:	682b      	ldr	r3, [r5, #0]
90013bac:	4606      	mov	r6, r0
90013bae:	4628      	mov	r0, r5
90013bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013bb2:	4798      	blx	r3
90013bb4:	4633      	mov	r3, r6
90013bb6:	4621      	mov	r1, r4
90013bb8:	ae1e      	add	r6, sp, #120	; 0x78
90013bba:	2400      	movs	r4, #0
90013bbc:	9000      	str	r0, [sp, #0]
90013bbe:	9a03      	ldr	r2, [sp, #12]
90013bc0:	a805      	add	r0, sp, #20
90013bc2:	f000 fd66 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013bc6:	f846 4d68 	str.w	r4, [r6, #-104]!
90013bca:	462a      	mov	r2, r5
90013bcc:	4633      	mov	r3, r6
90013bce:	4621      	mov	r1, r4
90013bd0:	a805      	add	r0, sp, #20
90013bd2:	f001 f863 	bl	90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013bd6:	b300      	cbz	r0, 90013c1a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90013bd8:	280a      	cmp	r0, #10
90013bda:	d01a      	beq.n	90013c12 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90013bdc:	9f04      	ldr	r7, [sp, #16]
90013bde:	b1c7      	cbz	r7, 90013c12 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90013be0:	7b78      	ldrb	r0, [r7, #13]
90013be2:	7a3b      	ldrb	r3, [r7, #8]
90013be4:	00c1      	lsls	r1, r0, #3
90013be6:	88ea      	ldrh	r2, [r5, #6]
90013be8:	f401 7180 	and.w	r1, r1, #256	; 0x100
90013bec:	4319      	orrs	r1, r3
90013bee:	0643      	lsls	r3, r0, #25
90013bf0:	ea4f 1000 	mov.w	r0, r0, lsl #4
90013bf4:	bf48      	it	mi
90013bf6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
90013bfa:	f400 7080 	and.w	r0, r0, #256	; 0x100
90013bfe:	bf48      	it	mi
90013c00:	b219      	sxthmi	r1, r3
90013c02:	79fb      	ldrb	r3, [r7, #7]
90013c04:	4303      	orrs	r3, r0
90013c06:	4413      	add	r3, r2
90013c08:	1a5b      	subs	r3, r3, r1
90013c0a:	b21b      	sxth	r3, r3
90013c0c:	429c      	cmp	r4, r3
90013c0e:	bfb8      	it	lt
90013c10:	461c      	movlt	r4, r3
90013c12:	4633      	mov	r3, r6
90013c14:	462a      	mov	r2, r5
90013c16:	2100      	movs	r1, #0
90013c18:	e7da      	b.n	90013bd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90013c1a:	b2a0      	uxth	r0, r4
90013c1c:	b01e      	add	sp, #120	; 0x78
90013c1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90013c22:	b003      	add	sp, #12
90013c24:	4770      	bx	lr

90013c26 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90013c26:	7a43      	ldrb	r3, [r0, #9]
90013c28:	8880      	ldrh	r0, [r0, #4]
90013c2a:	4418      	add	r0, r3
90013c2c:	b280      	uxth	r0, r0
90013c2e:	4770      	bx	lr

90013c30 <_ZNK8touchgfx4Font13getFontHeightEv>:
90013c30:	6803      	ldr	r3, [r0, #0]
90013c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013c34:	4718      	bx	r3

90013c36 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90013c36:	b40e      	push	{r1, r2, r3}
90013c38:	b570      	push	{r4, r5, r6, lr}
90013c3a:	b09d      	sub	sp, #116	; 0x74
90013c3c:	4604      	mov	r4, r0
90013c3e:	ab21      	add	r3, sp, #132	; 0x84
90013c40:	a803      	add	r0, sp, #12
90013c42:	f853 5b04 	ldr.w	r5, [r3], #4
90013c46:	9302      	str	r3, [sp, #8]
90013c48:	f000 fcc8 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90013c4c:	6823      	ldr	r3, [r4, #0]
90013c4e:	4620      	mov	r0, r4
90013c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013c52:	4798      	blx	r3
90013c54:	6823      	ldr	r3, [r4, #0]
90013c56:	4606      	mov	r6, r0
90013c58:	4620      	mov	r0, r4
90013c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013c5c:	2401      	movs	r4, #1
90013c5e:	4798      	blx	r3
90013c60:	4633      	mov	r3, r6
90013c62:	9000      	str	r0, [sp, #0]
90013c64:	4629      	mov	r1, r5
90013c66:	9a02      	ldr	r2, [sp, #8]
90013c68:	a803      	add	r0, sp, #12
90013c6a:	f000 fd12 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013c6e:	a803      	add	r0, sp, #12
90013c70:	f001 f8e0 	bl	90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013c74:	b2a3      	uxth	r3, r4
90013c76:	b138      	cbz	r0, 90013c88 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90013c78:	280a      	cmp	r0, #10
90013c7a:	a803      	add	r0, sp, #12
90013c7c:	bf04      	itt	eq
90013c7e:	3301      	addeq	r3, #1
90013c80:	b21c      	sxtheq	r4, r3
90013c82:	f001 f8d7 	bl	90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013c86:	e7f5      	b.n	90013c74 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90013c88:	4618      	mov	r0, r3
90013c8a:	b01d      	add	sp, #116	; 0x74
90013c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013c90:	b003      	add	sp, #12
90013c92:	4770      	bx	lr

90013c94 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90013c94:	b40e      	push	{r1, r2, r3}
90013c96:	b5f0      	push	{r4, r5, r6, r7, lr}
90013c98:	b09e      	sub	sp, #120	; 0x78
90013c9a:	4604      	mov	r4, r0
90013c9c:	ab23      	add	r3, sp, #140	; 0x8c
90013c9e:	a805      	add	r0, sp, #20
90013ca0:	f853 5b04 	ldr.w	r5, [r3], #4
90013ca4:	9303      	str	r3, [sp, #12]
90013ca6:	f000 fc99 	bl	900145dc <_ZN8touchgfx12TextProviderC1Ev>
90013caa:	6823      	ldr	r3, [r4, #0]
90013cac:	4620      	mov	r0, r4
90013cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013cb0:	4798      	blx	r3
90013cb2:	6823      	ldr	r3, [r4, #0]
90013cb4:	4606      	mov	r6, r0
90013cb6:	4620      	mov	r0, r4
90013cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013cba:	4798      	blx	r3
90013cbc:	4633      	mov	r3, r6
90013cbe:	4629      	mov	r1, r5
90013cc0:	9000      	str	r0, [sp, #0]
90013cc2:	9a03      	ldr	r2, [sp, #12]
90013cc4:	a805      	add	r0, sp, #20
90013cc6:	f000 fce4 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013cca:	ad1e      	add	r5, sp, #120	; 0x78
90013ccc:	2100      	movs	r1, #0
90013cce:	f647 76ff 	movw	r6, #32767	; 0x7fff
90013cd2:	4622      	mov	r2, r4
90013cd4:	a805      	add	r0, sp, #20
90013cd6:	f845 1d68 	str.w	r1, [r5, #-104]!
90013cda:	462b      	mov	r3, r5
90013cdc:	f000 ffde 	bl	90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013ce0:	b1d8      	cbz	r0, 90013d1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90013ce2:	280a      	cmp	r0, #10
90013ce4:	d012      	beq.n	90013d0c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90013ce6:	9804      	ldr	r0, [sp, #16]
90013ce8:	b180      	cbz	r0, 90013d0c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90013cea:	7b47      	ldrb	r7, [r0, #13]
90013cec:	88e2      	ldrh	r2, [r4, #6]
90013cee:	00fb      	lsls	r3, r7, #3
90013cf0:	f403 7180 	and.w	r1, r3, #256	; 0x100
90013cf4:	7a03      	ldrb	r3, [r0, #8]
90013cf6:	430b      	orrs	r3, r1
90013cf8:	0679      	lsls	r1, r7, #25
90013cfa:	bf44      	itt	mi
90013cfc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90013d00:	b21b      	sxthmi	r3, r3
90013d02:	1ad3      	subs	r3, r2, r3
90013d04:	b21b      	sxth	r3, r3
90013d06:	429e      	cmp	r6, r3
90013d08:	bfa8      	it	ge
90013d0a:	461e      	movge	r6, r3
90013d0c:	462b      	mov	r3, r5
90013d0e:	4622      	mov	r2, r4
90013d10:	2100      	movs	r1, #0
90013d12:	a805      	add	r0, sp, #20
90013d14:	f000 ffc2 	bl	90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013d18:	e7e2      	b.n	90013ce0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90013d1a:	4630      	mov	r0, r6
90013d1c:	b01e      	add	sp, #120	; 0x78
90013d1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90013d22:	b003      	add	sp, #12
90013d24:	4770      	bx	lr

90013d26 <_ZNK8touchgfx8Drawable10invalidateEv>:
90013d26:	b513      	push	{r0, r1, r4, lr}
90013d28:	6803      	ldr	r3, [r0, #0]
90013d2a:	2400      	movs	r4, #0
90013d2c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90013d30:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90013d34:	f8ad 1004 	strh.w	r1, [sp, #4]
90013d38:	4669      	mov	r1, sp
90013d3a:	691b      	ldr	r3, [r3, #16]
90013d3c:	9400      	str	r4, [sp, #0]
90013d3e:	f8ad 2006 	strh.w	r2, [sp, #6]
90013d42:	4798      	blx	r3
90013d44:	b002      	add	sp, #8
90013d46:	bd10      	pop	{r4, pc}

90013d48 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90013d48:	b538      	push	{r3, r4, r5, lr}
90013d4a:	680b      	ldr	r3, [r1, #0]
90013d4c:	460c      	mov	r4, r1
90013d4e:	4605      	mov	r5, r0
90013d50:	68db      	ldr	r3, [r3, #12]
90013d52:	4798      	blx	r3
90013d54:	6823      	ldr	r3, [r4, #0]
90013d56:	4620      	mov	r0, r4
90013d58:	4629      	mov	r1, r5
90013d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013d5c:	4798      	blx	r3
90013d5e:	4628      	mov	r0, r5
90013d60:	bd38      	pop	{r3, r4, r5, pc}

90013d62 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90013d62:	b410      	push	{r4}
90013d64:	880a      	ldrh	r2, [r1, #0]
90013d66:	8884      	ldrh	r4, [r0, #4]
90013d68:	4422      	add	r2, r4
90013d6a:	800a      	strh	r2, [r1, #0]
90013d6c:	884a      	ldrh	r2, [r1, #2]
90013d6e:	88c4      	ldrh	r4, [r0, #6]
90013d70:	4422      	add	r2, r4
90013d72:	804a      	strh	r2, [r1, #2]
90013d74:	6940      	ldr	r0, [r0, #20]
90013d76:	b120      	cbz	r0, 90013d82 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90013d78:	6803      	ldr	r3, [r0, #0]
90013d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
90013d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013d80:	4718      	bx	r3
90013d82:	f85d 4b04 	ldr.w	r4, [sp], #4
90013d86:	4770      	bx	lr

90013d88 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90013d88:	b570      	push	{r4, r5, r6, lr}
90013d8a:	8882      	ldrh	r2, [r0, #4]
90013d8c:	460c      	mov	r4, r1
90013d8e:	880b      	ldrh	r3, [r1, #0]
90013d90:	4605      	mov	r5, r0
90013d92:	4413      	add	r3, r2
90013d94:	800b      	strh	r3, [r1, #0]
90013d96:	884b      	ldrh	r3, [r1, #2]
90013d98:	88c2      	ldrh	r2, [r0, #6]
90013d9a:	4413      	add	r3, r2
90013d9c:	804b      	strh	r3, [r1, #2]
90013d9e:	1d01      	adds	r1, r0, #4
90013da0:	4620      	mov	r0, r4
90013da2:	f7fb fe11 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
90013da6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90013daa:	2b00      	cmp	r3, #0
90013dac:	dd0b      	ble.n	90013dc6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90013dae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90013db2:	2b00      	cmp	r3, #0
90013db4:	dd07      	ble.n	90013dc6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90013db6:	6968      	ldr	r0, [r5, #20]
90013db8:	b128      	cbz	r0, 90013dc6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90013dba:	6803      	ldr	r3, [r0, #0]
90013dbc:	4621      	mov	r1, r4
90013dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013dc4:	4718      	bx	r3
90013dc6:	bd70      	pop	{r4, r5, r6, pc}

90013dc8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90013dc8:	b570      	push	{r4, r5, r6, lr}
90013dca:	8882      	ldrh	r2, [r0, #4]
90013dcc:	460c      	mov	r4, r1
90013dce:	880b      	ldrh	r3, [r1, #0]
90013dd0:	4605      	mov	r5, r0
90013dd2:	4413      	add	r3, r2
90013dd4:	800b      	strh	r3, [r1, #0]
90013dd6:	884b      	ldrh	r3, [r1, #2]
90013dd8:	88c2      	ldrh	r2, [r0, #6]
90013dda:	4413      	add	r3, r2
90013ddc:	804b      	strh	r3, [r1, #2]
90013dde:	1d01      	adds	r1, r0, #4
90013de0:	4620      	mov	r0, r4
90013de2:	f7fb fdf1 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
90013de6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90013dea:	2b00      	cmp	r3, #0
90013dec:	dd18      	ble.n	90013e20 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90013dee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90013df2:	2b00      	cmp	r3, #0
90013df4:	dd14      	ble.n	90013e20 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90013df6:	6968      	ldr	r0, [r5, #20]
90013df8:	b128      	cbz	r0, 90013e06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90013dfa:	6803      	ldr	r3, [r0, #0]
90013dfc:	4621      	mov	r1, r4
90013dfe:	691b      	ldr	r3, [r3, #16]
90013e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e04:	4718      	bx	r3
90013e06:	4b07      	ldr	r3, [pc, #28]	; (90013e24 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90013e08:	681b      	ldr	r3, [r3, #0]
90013e0a:	3304      	adds	r3, #4
90013e0c:	429d      	cmp	r5, r3
90013e0e:	d107      	bne.n	90013e20 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90013e10:	f7fe ff44 	bl	90012c9c <_ZN8touchgfx11Application11getInstanceEv>
90013e14:	6821      	ldr	r1, [r4, #0]
90013e16:	6862      	ldr	r2, [r4, #4]
90013e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e1c:	f7ff b862 	b.w	90012ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90013e20:	bd70      	pop	{r4, r5, r6, pc}
90013e22:	bf00      	nop
90013e24:	24026520 	.word	0x24026520

90013e28 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90013e28:	b570      	push	{r4, r5, r6, lr}
90013e2a:	4604      	mov	r4, r0
90013e2c:	4616      	mov	r6, r2
90013e2e:	460d      	mov	r5, r1
90013e30:	b901      	cbnz	r1, 90013e34 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90013e32:	b192      	cbz	r2, 90013e5a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90013e34:	6823      	ldr	r3, [r4, #0]
90013e36:	4620      	mov	r0, r4
90013e38:	699b      	ldr	r3, [r3, #24]
90013e3a:	4798      	blx	r3
90013e3c:	88e2      	ldrh	r2, [r4, #6]
90013e3e:	88a1      	ldrh	r1, [r4, #4]
90013e40:	4620      	mov	r0, r4
90013e42:	4432      	add	r2, r6
90013e44:	4429      	add	r1, r5
90013e46:	b212      	sxth	r2, r2
90013e48:	b209      	sxth	r1, r1
90013e4a:	f7fc f88d 	bl	9000ff68 <_ZN8touchgfx8Drawable5setXYEss>
90013e4e:	6823      	ldr	r3, [r4, #0]
90013e50:	4620      	mov	r0, r4
90013e52:	699b      	ldr	r3, [r3, #24]
90013e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e58:	4718      	bx	r3
90013e5a:	bd70      	pop	{r4, r5, r6, pc}

90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90013e5c:	b510      	push	{r4, lr}
90013e5e:	2300      	movs	r3, #0
90013e60:	4604      	mov	r4, r0
90013e62:	4608      	mov	r0, r1
90013e64:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90013e68:	8023      	strh	r3, [r4, #0]
90013e6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90013e6e:	8063      	strh	r3, [r4, #2]
90013e70:	6803      	ldr	r3, [r0, #0]
90013e72:	80a1      	strh	r1, [r4, #4]
90013e74:	4621      	mov	r1, r4
90013e76:	80e2      	strh	r2, [r4, #6]
90013e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013e7a:	4798      	blx	r3
90013e7c:	4620      	mov	r0, r4
90013e7e:	bd10      	pop	{r4, pc}

90013e80 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90013e80:	b530      	push	{r4, r5, lr}
90013e82:	8083      	strh	r3, [r0, #4]
90013e84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90013e88:	f89d 5018 	ldrb.w	r5, [sp, #24]
90013e8c:	80c3      	strh	r3, [r0, #6]
90013e8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
90013e92:	6141      	str	r1, [r0, #20]
90013e94:	7203      	strb	r3, [r0, #8]
90013e96:	f89d 3014 	ldrb.w	r3, [sp, #20]
90013e9a:	8302      	strh	r2, [r0, #24]
90013e9c:	7243      	strb	r3, [r0, #9]
90013e9e:	7a83      	ldrb	r3, [r0, #10]
90013ea0:	f365 0306 	bfi	r3, r5, #0, #7
90013ea4:	f89d 501c 	ldrb.w	r5, [sp, #28]
90013ea8:	f365 13c7 	bfi	r3, r5, #7, #1
90013eac:	7283      	strb	r3, [r0, #10]
90013eae:	f89d 3020 	ldrb.w	r3, [sp, #32]
90013eb2:	72c3      	strb	r3, [r0, #11]
90013eb4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90013eb8:	7303      	strb	r3, [r0, #12]
90013eba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90013ebe:	81c3      	strh	r3, [r0, #14]
90013ec0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90013ec4:	8203      	strh	r3, [r0, #16]
90013ec6:	4b01      	ldr	r3, [pc, #4]	; (90013ecc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90013ec8:	6003      	str	r3, [r0, #0]
90013eca:	bd30      	pop	{r4, r5, pc}
90013ecc:	900250b0 	.word	0x900250b0

90013ed0 <_ZNK8touchgfx9ConstFont4findEt>:
90013ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
90013ed2:	6944      	ldr	r4, [r0, #20]
90013ed4:	b3bc      	cbz	r4, 90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013ed6:	88a3      	ldrh	r3, [r4, #4]
90013ed8:	8b02      	ldrh	r2, [r0, #24]
90013eda:	1acb      	subs	r3, r1, r3
90013edc:	f102 32ff 	add.w	r2, r2, #4294967295
90013ee0:	d431      	bmi.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013ee2:	4293      	cmp	r3, r2
90013ee4:	dd0c      	ble.n	90013f00 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90013ee6:	230e      	movs	r3, #14
90013ee8:	fb03 4302 	mla	r3, r3, r2, r4
90013eec:	889b      	ldrh	r3, [r3, #4]
90013eee:	1a5b      	subs	r3, r3, r1
90013ef0:	1ad3      	subs	r3, r2, r3
90013ef2:	429a      	cmp	r2, r3
90013ef4:	db27      	blt.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013ef6:	2b00      	cmp	r3, #0
90013ef8:	bfbc      	itt	lt
90013efa:	2302      	movlt	r3, #2
90013efc:	fb92 f3f3 	sdivlt	r3, r2, r3
90013f00:	2500      	movs	r5, #0
90013f02:	260e      	movs	r6, #14
90013f04:	4295      	cmp	r5, r2
90013f06:	dc1e      	bgt.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f08:	fb06 4003 	mla	r0, r6, r3, r4
90013f0c:	8887      	ldrh	r7, [r0, #4]
90013f0e:	42b9      	cmp	r1, r7
90013f10:	d01a      	beq.n	90013f48 <_ZNK8touchgfx9ConstFont4findEt+0x78>
90013f12:	d20d      	bcs.n	90013f30 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90013f14:	1e5a      	subs	r2, r3, #1
90013f16:	4295      	cmp	r5, r2
90013f18:	dc15      	bgt.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f1a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90013f1e:	1a5b      	subs	r3, r3, r1
90013f20:	1ad3      	subs	r3, r2, r3
90013f22:	429a      	cmp	r2, r3
90013f24:	db0f      	blt.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f26:	429d      	cmp	r5, r3
90013f28:	ddec      	ble.n	90013f04 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90013f2a:	1953      	adds	r3, r2, r5
90013f2c:	105b      	asrs	r3, r3, #1
90013f2e:	e7e9      	b.n	90013f04 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90013f30:	1c5d      	adds	r5, r3, #1
90013f32:	42aa      	cmp	r2, r5
90013f34:	db07      	blt.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f36:	8a43      	ldrh	r3, [r0, #18]
90013f38:	1acb      	subs	r3, r1, r3
90013f3a:	442b      	add	r3, r5
90013f3c:	429d      	cmp	r5, r3
90013f3e:	dc02      	bgt.n	90013f46 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90013f40:	429a      	cmp	r2, r3
90013f42:	dadf      	bge.n	90013f04 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90013f44:	e7f1      	b.n	90013f2a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90013f46:	2000      	movs	r0, #0
90013f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

90013f4a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90013f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013f4c:	4604      	mov	r4, r0
90013f4e:	4617      	mov	r7, r2
90013f50:	461e      	mov	r6, r3
90013f52:	b911      	cbnz	r1, 90013f5a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90013f54:	2500      	movs	r5, #0
90013f56:	4628      	mov	r0, r5
90013f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90013f5a:	290a      	cmp	r1, #10
90013f5c:	d0fa      	beq.n	90013f54 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013f5e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90013f62:	4291      	cmp	r1, r2
90013f64:	d0f6      	beq.n	90013f54 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013f66:	f242 020b 	movw	r2, #8203	; 0x200b
90013f6a:	4291      	cmp	r1, r2
90013f6c:	d0f2      	beq.n	90013f54 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013f6e:	f7ff ffaf 	bl	90013ed0 <_ZNK8touchgfx9ConstFont4findEt>
90013f72:	4605      	mov	r5, r0
90013f74:	b950      	cbnz	r0, 90013f8c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90013f76:	6823      	ldr	r3, [r4, #0]
90013f78:	4620      	mov	r0, r4
90013f7a:	691b      	ldr	r3, [r3, #16]
90013f7c:	4798      	blx	r3
90013f7e:	4601      	mov	r1, r0
90013f80:	4620      	mov	r0, r4
90013f82:	f7ff ffa5 	bl	90013ed0 <_ZNK8touchgfx9ConstFont4findEt>
90013f86:	4605      	mov	r5, r0
90013f88:	2800      	cmp	r0, #0
90013f8a:	d0e3      	beq.n	90013f54 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90013f8c:	6823      	ldr	r3, [r4, #0]
90013f8e:	4629      	mov	r1, r5
90013f90:	4620      	mov	r0, r4
90013f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90013f94:	4798      	blx	r3
90013f96:	6038      	str	r0, [r7, #0]
90013f98:	6823      	ldr	r3, [r4, #0]
90013f9a:	4620      	mov	r0, r4
90013f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013f9e:	4798      	blx	r3
90013fa0:	7030      	strb	r0, [r6, #0]
90013fa2:	e7d8      	b.n	90013f56 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90013fa4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
90013fa4:	2000      	movs	r0, #0
90013fa6:	4770      	bx	lr

90013fa8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90013fa8:	2001      	movs	r0, #1
90013faa:	4770      	bx	lr

90013fac <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
90013fac:	2002      	movs	r0, #2
90013fae:	4770      	bx	lr

90013fb0 <_ZN8touchgfx6ScreenD1Ev>:
90013fb0:	4770      	bx	lr

90013fb2 <_ZN8touchgfx6Screen11setupScreenEv>:
90013fb2:	4770      	bx	lr

90013fb4 <_ZN8touchgfx12GestureEventD1Ev>:
90013fb4:	4770      	bx	lr

90013fb6 <_ZN8touchgfx9DragEventD1Ev>:
90013fb6:	4770      	bx	lr

90013fb8 <_ZN8touchgfx10ClickEventD1Ev>:
90013fb8:	4770      	bx	lr

90013fba <_ZN8touchgfx10ClickEventD0Ev>:
90013fba:	b510      	push	{r4, lr}
90013fbc:	4604      	mov	r4, r0
90013fbe:	210c      	movs	r1, #12
90013fc0:	f00d f8ff 	bl	900211c2 <_ZdlPvj>
90013fc4:	4620      	mov	r0, r4
90013fc6:	bd10      	pop	{r4, pc}

90013fc8 <_ZN8touchgfx9DragEventD0Ev>:
90013fc8:	b510      	push	{r4, lr}
90013fca:	4604      	mov	r4, r0
90013fcc:	2110      	movs	r1, #16
90013fce:	f00d f8f8 	bl	900211c2 <_ZdlPvj>
90013fd2:	4620      	mov	r0, r4
90013fd4:	bd10      	pop	{r4, pc}

90013fd6 <_ZN8touchgfx12GestureEventD0Ev>:
90013fd6:	b510      	push	{r4, lr}
90013fd8:	4604      	mov	r4, r0
90013fda:	210c      	movs	r1, #12
90013fdc:	f00d f8f1 	bl	900211c2 <_ZdlPvj>
90013fe0:	4620      	mov	r0, r4
90013fe2:	bd10      	pop	{r4, pc}

90013fe4 <_ZN8touchgfx6ScreenD0Ev>:
90013fe4:	b510      	push	{r4, lr}
90013fe6:	4604      	mov	r4, r0
90013fe8:	213c      	movs	r1, #60	; 0x3c
90013fea:	f00d f8ea 	bl	900211c2 <_ZdlPvj>
90013fee:	4620      	mov	r0, r4
90013ff0:	bd10      	pop	{r4, pc}
	...

90013ff4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90013ff4:	b530      	push	{r4, r5, lr}
90013ff6:	460d      	mov	r5, r1
90013ff8:	6b01      	ldr	r1, [r0, #48]	; 0x30
90013ffa:	b087      	sub	sp, #28
90013ffc:	4604      	mov	r4, r0
90013ffe:	b301      	cbz	r1, 90014042 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90014000:	a801      	add	r0, sp, #4
90014002:	f7ff ff2b 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014006:	892a      	ldrh	r2, [r5, #8]
90014008:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001400c:	7928      	ldrb	r0, [r5, #4]
9001400e:	1ad2      	subs	r2, r2, r3
90014010:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014012:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90014016:	441a      	add	r2, r3
90014018:	896b      	ldrh	r3, [r5, #10]
9001401a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
9001401e:	f88d 0010 	strb.w	r0, [sp, #16]
90014022:	1b5b      	subs	r3, r3, r5
90014024:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
90014026:	6b20      	ldr	r0, [r4, #48]	; 0x30
90014028:	442b      	add	r3, r5
9001402a:	4d07      	ldr	r5, [pc, #28]	; (90014048 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
9001402c:	f8ad 1012 	strh.w	r1, [sp, #18]
90014030:	a903      	add	r1, sp, #12
90014032:	9503      	str	r5, [sp, #12]
90014034:	f8ad 2014 	strh.w	r2, [sp, #20]
90014038:	f8ad 3016 	strh.w	r3, [sp, #22]
9001403c:	6803      	ldr	r3, [r0, #0]
9001403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90014040:	4798      	blx	r3
90014042:	b007      	add	sp, #28
90014044:	bd30      	pop	{r4, r5, pc}
90014046:	bf00      	nop
90014048:	90025138 	.word	0x90025138

9001404c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
9001404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014050:	6b03      	ldr	r3, [r0, #48]	; 0x30
90014052:	b08a      	sub	sp, #40	; 0x28
90014054:	4604      	mov	r4, r0
90014056:	460d      	mov	r5, r1
90014058:	b113      	cbz	r3, 90014060 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
9001405a:	790b      	ldrb	r3, [r1, #4]
9001405c:	2b00      	cmp	r3, #0
9001405e:	d044      	beq.n	900140ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90014060:	f104 0804 	add.w	r8, r4, #4
90014064:	a803      	add	r0, sp, #12
90014066:	4641      	mov	r1, r8
90014068:	f7ff fef8 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001406c:	792b      	ldrb	r3, [r5, #4]
9001406e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90014072:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90014076:	b983      	cbnz	r3, 9001409a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90014078:	f104 0336 	add.w	r3, r4, #54	; 0x36
9001407c:	892a      	ldrh	r2, [r5, #8]
9001407e:	88e9      	ldrh	r1, [r5, #6]
90014080:	4640      	mov	r0, r8
90014082:	1b92      	subs	r2, r2, r6
90014084:	9301      	str	r3, [sp, #4]
90014086:	1bc9      	subs	r1, r1, r7
90014088:	f104 0334 	add.w	r3, r4, #52	; 0x34
9001408c:	b212      	sxth	r2, r2
9001408e:	9300      	str	r3, [sp, #0]
90014090:	b209      	sxth	r1, r1
90014092:	f104 0330 	add.w	r3, r4, #48	; 0x30
90014096:	f7fb fbb5 	bl	9000f804 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
9001409a:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001409c:	b329      	cbz	r1, 900140ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001409e:	a805      	add	r0, sp, #20
900140a0:	f7ff fedc 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900140a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900140a8:	792b      	ldrb	r3, [r5, #4]
900140aa:	a907      	add	r1, sp, #28
900140ac:	1abf      	subs	r7, r7, r2
900140ae:	88ea      	ldrh	r2, [r5, #6]
900140b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
900140b2:	4417      	add	r7, r2
900140b4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
900140b6:	f88d 3020 	strb.w	r3, [sp, #32]
900140ba:	4417      	add	r7, r2
900140bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
900140c0:	1ab6      	subs	r6, r6, r2
900140c2:	892a      	ldrh	r2, [r5, #8]
900140c4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900140c8:	4416      	add	r6, r2
900140ca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900140cc:	4416      	add	r6, r2
900140ce:	4a08      	ldr	r2, [pc, #32]	; (900140f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
900140d0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
900140d4:	2600      	movs	r6, #0
900140d6:	9207      	str	r2, [sp, #28]
900140d8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
900140dc:	6803      	ldr	r3, [r0, #0]
900140de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900140e0:	4798      	blx	r3
900140e2:	792b      	ldrb	r3, [r5, #4]
900140e4:	b10b      	cbz	r3, 900140ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900140e6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
900140ea:	b00a      	add	sp, #40	; 0x28
900140ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900140f0:	90025110 	.word	0x90025110

900140f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
900140f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900140f8:	460c      	mov	r4, r1
900140fa:	6b01      	ldr	r1, [r0, #48]	; 0x30
900140fc:	b088      	sub	sp, #32
900140fe:	4605      	mov	r5, r0
90014100:	2900      	cmp	r1, #0
90014102:	d06d      	beq.n	900141e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
90014104:	4668      	mov	r0, sp
90014106:	f7ff fea9 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001410a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
9001410c:	88e3      	ldrh	r3, [r4, #6]
9001410e:	f9bd 8000 	ldrsh.w	r8, [sp]
90014112:	440b      	add	r3, r1
90014114:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90014118:	b21b      	sxth	r3, r3
9001411a:	4543      	cmp	r3, r8
9001411c:	db31      	blt.n	90014182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001411e:	f8bd c004 	ldrh.w	ip, [sp, #4]
90014122:	44c4      	add	ip, r8
90014124:	fa0f fc8c 	sxth.w	ip, ip
90014128:	4563      	cmp	r3, ip
9001412a:	da2a      	bge.n	90014182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001412c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
9001412e:	8926      	ldrh	r6, [r4, #8]
90014130:	4416      	add	r6, r2
90014132:	b236      	sxth	r6, r6
90014134:	42be      	cmp	r6, r7
90014136:	db24      	blt.n	90014182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014138:	f8bd 0006 	ldrh.w	r0, [sp, #6]
9001413c:	4438      	add	r0, r7
9001413e:	b200      	sxth	r0, r0
90014140:	4286      	cmp	r6, r0
90014142:	da1e      	bge.n	90014182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014144:	8963      	ldrh	r3, [r4, #10]
90014146:	4419      	add	r1, r3
90014148:	b209      	sxth	r1, r1
9001414a:	4541      	cmp	r1, r8
9001414c:	db08      	blt.n	90014160 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001414e:	4561      	cmp	r1, ip
90014150:	da06      	bge.n	90014160 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90014152:	89a3      	ldrh	r3, [r4, #12]
90014154:	441a      	add	r2, r3
90014156:	b212      	sxth	r2, r2
90014158:	42ba      	cmp	r2, r7
9001415a:	db01      	blt.n	90014160 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001415c:	4282      	cmp	r2, r0
9001415e:	db10      	blt.n	90014182 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90014160:	4b21      	ldr	r3, [pc, #132]	; (900141e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
90014162:	a904      	add	r1, sp, #16
90014164:	6b28      	ldr	r0, [r5, #48]	; 0x30
90014166:	9304      	str	r3, [sp, #16]
90014168:	2302      	movs	r3, #2
9001416a:	f88d 3014 	strb.w	r3, [sp, #20]
9001416e:	2300      	movs	r3, #0
90014170:	f8ad 3016 	strh.w	r3, [sp, #22]
90014174:	f8ad 3018 	strh.w	r3, [sp, #24]
90014178:	f8ad 301a 	strh.w	r3, [sp, #26]
9001417c:	6803      	ldr	r3, [r0, #0]
9001417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90014180:	4798      	blx	r3
90014182:	1d29      	adds	r1, r5, #4
90014184:	a802      	add	r0, sp, #8
90014186:	f7ff fe69 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001418a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001418e:	88e0      	ldrh	r0, [r4, #6]
90014190:	eba3 0808 	sub.w	r8, r3, r8
90014194:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90014198:	7921      	ldrb	r1, [r4, #4]
9001419a:	fa1f f888 	uxth.w	r8, r8
9001419e:	1bdf      	subs	r7, r3, r7
900141a0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
900141a4:	b2bb      	uxth	r3, r7
900141a6:	4440      	add	r0, r8
900141a8:	8922      	ldrh	r2, [r4, #8]
900141aa:	8967      	ldrh	r7, [r4, #10]
900141ac:	4460      	add	r0, ip
900141ae:	89a4      	ldrh	r4, [r4, #12]
900141b0:	441a      	add	r2, r3
900141b2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
900141b4:	44b8      	add	r8, r7
900141b6:	4423      	add	r3, r4
900141b8:	f8ad 0016 	strh.w	r0, [sp, #22]
900141bc:	4432      	add	r2, r6
900141be:	44e0      	add	r8, ip
900141c0:	4433      	add	r3, r6
900141c2:	4c0a      	ldr	r4, [pc, #40]	; (900141ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
900141c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
900141c6:	f88d 1014 	strb.w	r1, [sp, #20]
900141ca:	a904      	add	r1, sp, #16
900141cc:	9404      	str	r4, [sp, #16]
900141ce:	f8ad 2018 	strh.w	r2, [sp, #24]
900141d2:	f8ad 801a 	strh.w	r8, [sp, #26]
900141d6:	f8ad 301c 	strh.w	r3, [sp, #28]
900141da:	6803      	ldr	r3, [r0, #0]
900141dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900141de:	4798      	blx	r3
900141e0:	b008      	add	sp, #32
900141e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900141e6:	bf00      	nop
900141e8:	90025110 	.word	0x90025110
900141ec:	90025124 	.word	0x90025124

900141f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
900141f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
900141f2:	4604      	mov	r4, r0
900141f4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
900141f8:	3201      	adds	r2, #1
900141fa:	d112      	bne.n	90014222 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
900141fc:	2500      	movs	r5, #0
900141fe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90014202:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014206:	6803      	ldr	r3, [r0, #0]
90014208:	9500      	str	r5, [sp, #0]
9001420a:	466d      	mov	r5, sp
9001420c:	f8ad 1004 	strh.w	r1, [sp, #4]
90014210:	f8ad 2006 	strh.w	r2, [sp, #6]
90014214:	4629      	mov	r1, r5
90014216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014218:	4798      	blx	r3
9001421a:	e895 0003 	ldmia.w	r5, {r0, r1}
9001421e:	e884 0003 	stmia.w	r4, {r0, r1}
90014222:	4620      	mov	r0, r4
90014224:	b003      	add	sp, #12
90014226:	bd30      	pop	{r4, r5, pc}

90014228 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90014228:	b513      	push	{r0, r1, r4, lr}
9001422a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
9001422e:	4604      	mov	r4, r0
90014230:	3301      	adds	r3, #1
90014232:	d109      	bne.n	90014248 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
90014234:	4601      	mov	r1, r0
90014236:	4668      	mov	r0, sp
90014238:	f7ff fe10 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001423c:	f8bd 3000 	ldrh.w	r3, [sp]
90014240:	8423      	strh	r3, [r4, #32]
90014242:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014246:	8463      	strh	r3, [r4, #34]	; 0x22
90014248:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
9001424c:	b002      	add	sp, #8
9001424e:	bd10      	pop	{r4, pc}

90014250 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90014250:	b513      	push	{r0, r1, r4, lr}
90014252:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
90014256:	4604      	mov	r4, r0
90014258:	3301      	adds	r3, #1
9001425a:	d109      	bne.n	90014270 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
9001425c:	4601      	mov	r1, r0
9001425e:	4668      	mov	r0, sp
90014260:	f7ff fdfc 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014264:	f8bd 3000 	ldrh.w	r3, [sp]
90014268:	8423      	strh	r3, [r4, #32]
9001426a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001426e:	8463      	strh	r3, [r4, #34]	; 0x22
90014270:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
90014274:	b002      	add	sp, #8
90014276:	bd10      	pop	{r4, pc}

90014278 <_ZN8touchgfx6ScreenC1Ev>:
90014278:	b570      	push	{r4, r5, r6, lr}
9001427a:	4b17      	ldr	r3, [pc, #92]	; (900142d8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
9001427c:	4605      	mov	r5, r0
9001427e:	4a17      	ldr	r2, [pc, #92]	; (900142dc <_ZN8touchgfx6ScreenC1Ev+0x64>)
90014280:	2101      	movs	r1, #1
90014282:	f845 3b04 	str.w	r3, [r5], #4
90014286:	2300      	movs	r3, #0
90014288:	6042      	str	r2, [r0, #4]
9001428a:	4604      	mov	r4, r0
9001428c:	8103      	strh	r3, [r0, #8]
9001428e:	8143      	strh	r3, [r0, #10]
90014290:	8183      	strh	r3, [r0, #12]
90014292:	81c3      	strh	r3, [r0, #14]
90014294:	8203      	strh	r3, [r0, #16]
90014296:	8243      	strh	r3, [r0, #18]
90014298:	8283      	strh	r3, [r0, #20]
9001429a:	82c3      	strh	r3, [r0, #22]
9001429c:	6203      	str	r3, [r0, #32]
9001429e:	8483      	strh	r3, [r0, #36]	; 0x24
900142a0:	84c3      	strh	r3, [r0, #38]	; 0x26
900142a2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
900142a6:	6343      	str	r3, [r0, #52]	; 0x34
900142a8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900142ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
900142b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
900142b4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
900142b8:	4b09      	ldr	r3, [pc, #36]	; (900142e0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
900142ba:	4628      	mov	r0, r5
900142bc:	f9b3 6000 	ldrsh.w	r6, [r3]
900142c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
900142c2:	4a08      	ldr	r2, [pc, #32]	; (900142e4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
900142c4:	f9b2 1000 	ldrsh.w	r1, [r2]
900142c8:	4798      	blx	r3
900142ca:	6863      	ldr	r3, [r4, #4]
900142cc:	4628      	mov	r0, r5
900142ce:	4631      	mov	r1, r6
900142d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900142d2:	4798      	blx	r3
900142d4:	4620      	mov	r0, r4
900142d6:	bd70      	pop	{r4, r5, r6, pc}
900142d8:	9002514c 	.word	0x9002514c
900142dc:	90024e40 	.word	0x90024e40
900142e0:	240264da 	.word	0x240264da
900142e4:	240264d8 	.word	0x240264d8

900142e8 <_ZN8touchgfx6Screen4drawEv>:
900142e8:	4b09      	ldr	r3, [pc, #36]	; (90014310 <_ZN8touchgfx6Screen4drawEv+0x28>)
900142ea:	b507      	push	{r0, r1, r2, lr}
900142ec:	f9b3 2000 	ldrsh.w	r2, [r3]
900142f0:	2100      	movs	r1, #0
900142f2:	4b08      	ldr	r3, [pc, #32]	; (90014314 <_ZN8touchgfx6Screen4drawEv+0x2c>)
900142f4:	9100      	str	r1, [sp, #0]
900142f6:	4669      	mov	r1, sp
900142f8:	f9b3 3000 	ldrsh.w	r3, [r3]
900142fc:	f8ad 2004 	strh.w	r2, [sp, #4]
90014300:	f8ad 3006 	strh.w	r3, [sp, #6]
90014304:	6803      	ldr	r3, [r0, #0]
90014306:	689b      	ldr	r3, [r3, #8]
90014308:	4798      	blx	r3
9001430a:	b003      	add	sp, #12
9001430c:	f85d fb04 	ldr.w	pc, [sp], #4
90014310:	240264d8 	.word	0x240264d8
90014314:	240264da 	.word	0x240264da

90014318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90014318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001431c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90014320:	b089      	sub	sp, #36	; 0x24
90014322:	4680      	mov	r8, r0
90014324:	460c      	mov	r4, r1
90014326:	2b00      	cmp	r3, #0
90014328:	4615      	mov	r5, r2
9001432a:	dd0e      	ble.n	9001434a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001432c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90014330:	2b00      	cmp	r3, #0
90014332:	dd0a      	ble.n	9001434a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90014334:	4628      	mov	r0, r5
90014336:	f7ff ff5b 	bl	900141f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001433a:	4621      	mov	r1, r4
9001433c:	f7fe fbcf 	bl	90012ade <_ZNK8touchgfx4Rect9intersectERKS0_>
90014340:	69eb      	ldr	r3, [r5, #28]
90014342:	b928      	cbnz	r0, 90014350 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
90014344:	461d      	mov	r5, r3
90014346:	2b00      	cmp	r3, #0
90014348:	d1f4      	bne.n	90014334 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
9001434a:	b009      	add	sp, #36	; 0x24
9001434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014350:	ae04      	add	r6, sp, #16
90014352:	2b00      	cmp	r3, #0
90014354:	f000 80b5 	beq.w	900144c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014358:	682b      	ldr	r3, [r5, #0]
9001435a:	4629      	mov	r1, r5
9001435c:	a802      	add	r0, sp, #8
9001435e:	68db      	ldr	r3, [r3, #12]
90014360:	4798      	blx	r3
90014362:	4628      	mov	r0, r5
90014364:	f7ff ff60 	bl	90014228 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90014368:	f8bd 7008 	ldrh.w	r7, [sp, #8]
9001436c:	4407      	add	r7, r0
9001436e:	4628      	mov	r0, r5
90014370:	f7ff ff6e 	bl	90014250 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90014374:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90014378:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
9001437c:	b23f      	sxth	r7, r7
9001437e:	4418      	add	r0, r3
90014380:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90014384:	4621      	mov	r1, r4
90014386:	f8ad 2014 	strh.w	r2, [sp, #20]
9001438a:	f8ad 0012 	strh.w	r0, [sp, #18]
9001438e:	4630      	mov	r0, r6
90014390:	f8ad 3016 	strh.w	r3, [sp, #22]
90014394:	f8ad 7010 	strh.w	r7, [sp, #16]
90014398:	f7fb fb16 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
9001439c:	4628      	mov	r0, r5
9001439e:	f7ff ff27 	bl	900141f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900143a2:	ab06      	add	r3, sp, #24
900143a4:	4602      	mov	r2, r0
900143a6:	e896 0003 	ldmia.w	r6, {r0, r1}
900143aa:	e883 0003 	stmia.w	r3, {r0, r1}
900143ae:	4611      	mov	r1, r2
900143b0:	4618      	mov	r0, r3
900143b2:	f7fb fb09 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900143b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900143ba:	f9b4 1000 	ldrsh.w	r1, [r4]
900143be:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
900143c2:	4299      	cmp	r1, r3
900143c4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
900143c8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
900143cc:	d10b      	bne.n	900143e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900143ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
900143d2:	4552      	cmp	r2, sl
900143d4:	d107      	bne.n	900143e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900143d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
900143da:	455a      	cmp	r2, fp
900143dc:	d103      	bne.n	900143e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900143de:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
900143e2:	454a      	cmp	r2, r9
900143e4:	d06d      	beq.n	900144c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900143e6:	f1bb 0f00 	cmp.w	fp, #0
900143ea:	dd65      	ble.n	900144b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
900143ec:	f1b9 0f00 	cmp.w	r9, #0
900143f0:	dd62      	ble.n	900144b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
900143f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
900143f6:	fa1f f08a 	uxth.w	r0, sl
900143fa:	4552      	cmp	r2, sl
900143fc:	9000      	str	r0, [sp, #0]
900143fe:	da12      	bge.n	90014426 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90014400:	9301      	str	r3, [sp, #4]
90014402:	9b00      	ldr	r3, [sp, #0]
90014404:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90014408:	f8ad 2012 	strh.w	r2, [sp, #18]
9001440c:	1a9a      	subs	r2, r3, r2
9001440e:	f8ad 1010 	strh.w	r1, [sp, #16]
90014412:	4631      	mov	r1, r6
90014414:	f8ad 0014 	strh.w	r0, [sp, #20]
90014418:	4640      	mov	r0, r8
9001441a:	f8ad 2016 	strh.w	r2, [sp, #22]
9001441e:	69ea      	ldr	r2, [r5, #28]
90014420:	f7ff ff7a 	bl	90014318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90014424:	9b01      	ldr	r3, [sp, #4]
90014426:	f9b4 2000 	ldrsh.w	r2, [r4]
9001442a:	b29f      	uxth	r7, r3
9001442c:	429a      	cmp	r2, r3
9001442e:	da0d      	bge.n	9001444c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90014430:	f8ad 2010 	strh.w	r2, [sp, #16]
90014434:	1aba      	subs	r2, r7, r2
90014436:	f8ad a012 	strh.w	sl, [sp, #18]
9001443a:	4631      	mov	r1, r6
9001443c:	f8ad 2014 	strh.w	r2, [sp, #20]
90014440:	4640      	mov	r0, r8
90014442:	f8ad 9016 	strh.w	r9, [sp, #22]
90014446:	69ea      	ldr	r2, [r5, #28]
90014448:	f7ff ff66 	bl	90014318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001444c:	8822      	ldrh	r2, [r4, #0]
9001444e:	445f      	add	r7, fp
90014450:	88a3      	ldrh	r3, [r4, #4]
90014452:	b2bf      	uxth	r7, r7
90014454:	4413      	add	r3, r2
90014456:	b23a      	sxth	r2, r7
90014458:	b29b      	uxth	r3, r3
9001445a:	b219      	sxth	r1, r3
9001445c:	4291      	cmp	r1, r2
9001445e:	dd0d      	ble.n	9001447c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90014460:	1bdb      	subs	r3, r3, r7
90014462:	f8ad 2010 	strh.w	r2, [sp, #16]
90014466:	f8ad a012 	strh.w	sl, [sp, #18]
9001446a:	4631      	mov	r1, r6
9001446c:	f8ad 3014 	strh.w	r3, [sp, #20]
90014470:	4640      	mov	r0, r8
90014472:	f8ad 9016 	strh.w	r9, [sp, #22]
90014476:	69ea      	ldr	r2, [r5, #28]
90014478:	f7ff ff4e 	bl	90014318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001447c:	88e2      	ldrh	r2, [r4, #6]
9001447e:	8863      	ldrh	r3, [r4, #2]
90014480:	4413      	add	r3, r2
90014482:	9a00      	ldr	r2, [sp, #0]
90014484:	444a      	add	r2, r9
90014486:	b29b      	uxth	r3, r3
90014488:	fa1f f982 	uxth.w	r9, r2
9001448c:	b219      	sxth	r1, r3
9001448e:	fa0f f289 	sxth.w	r2, r9
90014492:	428a      	cmp	r2, r1
90014494:	da15      	bge.n	900144c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90014496:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001449a:	eba3 0309 	sub.w	r3, r3, r9
9001449e:	f9b4 0000 	ldrsh.w	r0, [r4]
900144a2:	f8ad 1014 	strh.w	r1, [sp, #20]
900144a6:	4631      	mov	r1, r6
900144a8:	f8ad 0010 	strh.w	r0, [sp, #16]
900144ac:	f8ad 2012 	strh.w	r2, [sp, #18]
900144b0:	f8ad 3016 	strh.w	r3, [sp, #22]
900144b4:	69ea      	ldr	r2, [r5, #28]
900144b6:	e001      	b.n	900144bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
900144b8:	69ea      	ldr	r2, [r5, #28]
900144ba:	4621      	mov	r1, r4
900144bc:	4640      	mov	r0, r8
900144be:	f7ff ff2b 	bl	90014318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900144c2:	4628      	mov	r0, r5
900144c4:	f7ff fe94 	bl	900141f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900144c8:	6861      	ldr	r1, [r4, #4]
900144ca:	4602      	mov	r2, r0
900144cc:	4633      	mov	r3, r6
900144ce:	6820      	ldr	r0, [r4, #0]
900144d0:	c303      	stmia	r3!, {r0, r1}
900144d2:	4611      	mov	r1, r2
900144d4:	4630      	mov	r0, r6
900144d6:	f7fb fa77 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900144da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
900144de:	2b00      	cmp	r3, #0
900144e0:	f77f af33 	ble.w	9001434a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900144e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
900144e8:	2b00      	cmp	r3, #0
900144ea:	f77f af2e 	ble.w	9001434a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900144ee:	4628      	mov	r0, r5
900144f0:	f7ff fe9a 	bl	90014228 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900144f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
900144f8:	1a18      	subs	r0, r3, r0
900144fa:	f8ad 0010 	strh.w	r0, [sp, #16]
900144fe:	4628      	mov	r0, r5
90014500:	f7ff fea6 	bl	90014250 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90014504:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90014508:	4631      	mov	r1, r6
9001450a:	1a18      	subs	r0, r3, r0
9001450c:	f8ad 0012 	strh.w	r0, [sp, #18]
90014510:	4628      	mov	r0, r5
90014512:	682b      	ldr	r3, [r5, #0]
90014514:	689b      	ldr	r3, [r3, #8]
90014516:	4798      	blx	r3
90014518:	e717      	b.n	9001434a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

9001451a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
9001451a:	b570      	push	{r4, r5, r6, lr}
9001451c:	1d06      	adds	r6, r0, #4
9001451e:	b086      	sub	sp, #24
90014520:	460c      	mov	r4, r1
90014522:	2300      	movs	r3, #0
90014524:	4631      	mov	r1, r6
90014526:	4605      	mov	r5, r0
90014528:	a802      	add	r0, sp, #8
9001452a:	9301      	str	r3, [sp, #4]
9001452c:	f7ff fc96 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014530:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90014534:	8822      	ldrh	r2, [r4, #0]
90014536:	f8bd 100a 	ldrh.w	r1, [sp, #10]
9001453a:	1ad2      	subs	r2, r2, r3
9001453c:	8863      	ldrh	r3, [r4, #2]
9001453e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90014542:	1a5b      	subs	r3, r3, r1
90014544:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90014548:	f8ad 2010 	strh.w	r2, [sp, #16]
9001454c:	aa01      	add	r2, sp, #4
9001454e:	f8ad 0014 	strh.w	r0, [sp, #20]
90014552:	4630      	mov	r0, r6
90014554:	f8ad 1016 	strh.w	r1, [sp, #22]
90014558:	a904      	add	r1, sp, #16
9001455a:	f8ad 3012 	strh.w	r3, [sp, #18]
9001455e:	f7fb fb0b 	bl	9000fb78 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90014562:	9a01      	ldr	r2, [sp, #4]
90014564:	b11a      	cbz	r2, 9001456e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90014566:	4621      	mov	r1, r4
90014568:	4628      	mov	r0, r5
9001456a:	f7ff fed5 	bl	90014318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001456e:	b006      	add	sp, #24
90014570:	bd70      	pop	{r4, r5, r6, pc}

90014572 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90014572:	4602      	mov	r2, r0
90014574:	b530      	push	{r4, r5, lr}
90014576:	4604      	mov	r4, r0
90014578:	b085      	sub	sp, #20
9001457a:	f852 0f08 	ldr.w	r0, [r2, #8]!
9001457e:	460d      	mov	r5, r1
90014580:	466b      	mov	r3, sp
90014582:	6851      	ldr	r1, [r2, #4]
90014584:	c303      	stmia	r3!, {r0, r1}
90014586:	4629      	mov	r1, r5
90014588:	4668      	mov	r0, sp
9001458a:	f7fb fa1d 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
9001458e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90014592:	b12b      	cbz	r3, 900145a0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90014594:	4669      	mov	r1, sp
90014596:	4620      	mov	r0, r4
90014598:	f7ff ffbf 	bl	9001451a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
9001459c:	b005      	add	sp, #20
9001459e:	bd30      	pop	{r4, r5, pc}
900145a0:	3404      	adds	r4, #4
900145a2:	a802      	add	r0, sp, #8
900145a4:	4621      	mov	r1, r4
900145a6:	f7ff fc59 	bl	90013e5c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900145aa:	f8bd 3000 	ldrh.w	r3, [sp]
900145ae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
900145b2:	4669      	mov	r1, sp
900145b4:	4620      	mov	r0, r4
900145b6:	1a9b      	subs	r3, r3, r2
900145b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
900145bc:	f8ad 3000 	strh.w	r3, [sp]
900145c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900145c4:	1a9b      	subs	r3, r3, r2
900145c6:	f8ad 3002 	strh.w	r3, [sp, #2]
900145ca:	f7fb fa9c 	bl	9000fb06 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
900145ce:	e7e5      	b.n	9001459c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

900145d0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
900145d0:	460b      	mov	r3, r1
900145d2:	680a      	ldr	r2, [r1, #0]
900145d4:	1d01      	adds	r1, r0, #4
900145d6:	6992      	ldr	r2, [r2, #24]
900145d8:	4618      	mov	r0, r3
900145da:	4710      	bx	r2

900145dc <_ZN8touchgfx12TextProviderC1Ev>:
900145dc:	b538      	push	{r3, r4, r5, lr}
900145de:	2500      	movs	r5, #0
900145e0:	2302      	movs	r3, #2
900145e2:	4604      	mov	r4, r0
900145e4:	220e      	movs	r2, #14
900145e6:	7403      	strb	r3, [r0, #16]
900145e8:	4629      	mov	r1, r5
900145ea:	6145      	str	r5, [r0, #20]
900145ec:	7605      	strb	r5, [r0, #24]
900145ee:	83c5      	strh	r5, [r0, #30]
900145f0:	8405      	strh	r5, [r0, #32]
900145f2:	86c5      	strh	r5, [r0, #54]	; 0x36
900145f4:	8705      	strh	r5, [r0, #56]	; 0x38
900145f6:	87c5      	strh	r5, [r0, #62]	; 0x3e
900145f8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
900145fc:	e9c0 5500 	strd	r5, r5, [r0]
90014600:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90014604:	304c      	adds	r0, #76	; 0x4c
90014606:	f00c fe9b 	bl	90021340 <memset>
9001460a:	2301      	movs	r3, #1
9001460c:	4620      	mov	r0, r4
9001460e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90014612:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014616:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
9001461a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
9001461e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90014622:	f7f0 fecb 	bl	900053bc <_ZN8touchgfx12TextProvider18initializeInternalEv>
90014626:	4620      	mov	r0, r4
90014628:	bd38      	pop	{r3, r4, r5, pc}

9001462a <_ZN8touchgfx12TextProvider11endOfStringEv>:
9001462a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001462c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90014630:	8c40      	ldrh	r0, [r0, #34]	; 0x22
90014632:	fab0 f080 	clz	r0, r0
90014636:	0940      	lsrs	r0, r0, #5
90014638:	4770      	bx	lr

9001463a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
9001463a:	b530      	push	{r4, r5, lr}
9001463c:	2500      	movs	r5, #0
9001463e:	2401      	movs	r4, #1
90014640:	6843      	ldr	r3, [r0, #4]
90014642:	b913      	cbnz	r3, 9001464a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90014644:	6803      	ldr	r3, [r0, #0]
90014646:	b313      	cbz	r3, 9001468e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90014648:	6043      	str	r3, [r0, #4]
9001464a:	7e03      	ldrb	r3, [r0, #24]
9001464c:	b143      	cbz	r3, 90014660 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
9001464e:	6943      	ldr	r3, [r0, #20]
90014650:	b12b      	cbz	r3, 9001465e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90014652:	881a      	ldrh	r2, [r3, #0]
90014654:	b11a      	cbz	r2, 9001465e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90014656:	1c9a      	adds	r2, r3, #2
90014658:	6142      	str	r2, [r0, #20]
9001465a:	8818      	ldrh	r0, [r3, #0]
9001465c:	bd30      	pop	{r4, r5, pc}
9001465e:	7605      	strb	r5, [r0, #24]
90014660:	6843      	ldr	r3, [r0, #4]
90014662:	8819      	ldrh	r1, [r3, #0]
90014664:	b199      	cbz	r1, 9001468e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90014666:	1c9a      	adds	r2, r3, #2
90014668:	2902      	cmp	r1, #2
9001466a:	6042      	str	r2, [r0, #4]
9001466c:	d1f5      	bne.n	9001465a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
9001466e:	7c03      	ldrb	r3, [r0, #16]
90014670:	2b01      	cmp	r3, #1
90014672:	d8e5      	bhi.n	90014640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90014674:	1c5a      	adds	r2, r3, #1
90014676:	3302      	adds	r3, #2
90014678:	7402      	strb	r2, [r0, #16]
9001467a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
9001467e:	6143      	str	r3, [r0, #20]
90014680:	2b00      	cmp	r3, #0
90014682:	d0dd      	beq.n	90014640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90014684:	881b      	ldrh	r3, [r3, #0]
90014686:	2b00      	cmp	r3, #0
90014688:	d0da      	beq.n	90014640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001468a:	7604      	strb	r4, [r0, #24]
9001468c:	e7d8      	b.n	90014640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001468e:	2000      	movs	r0, #0
90014690:	e7e4      	b.n	9001465c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90014692:	6001      	str	r1, [r0, #0]
90014694:	2100      	movs	r1, #0
90014696:	b430      	push	{r4, r5}
90014698:	6041      	str	r1, [r0, #4]
9001469a:	6815      	ldr	r5, [r2, #0]
9001469c:	6085      	str	r5, [r0, #8]
9001469e:	6852      	ldr	r2, [r2, #4]
900146a0:	6443      	str	r3, [r0, #68]	; 0x44
900146a2:	9b02      	ldr	r3, [sp, #8]
900146a4:	60c2      	str	r2, [r0, #12]
900146a6:	7401      	strb	r1, [r0, #16]
900146a8:	6141      	str	r1, [r0, #20]
900146aa:	7601      	strb	r1, [r0, #24]
900146ac:	8701      	strh	r1, [r0, #56]	; 0x38
900146ae:	8401      	strh	r1, [r0, #32]
900146b0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
900146b4:	6483      	str	r3, [r0, #72]	; 0x48
900146b6:	bc30      	pop	{r4, r5}
900146b8:	f7f0 be80 	b.w	900053bc <_ZN8touchgfx12TextProvider18initializeInternalEv>

900146bc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
900146bc:	b408      	push	{r3}
900146be:	b510      	push	{r4, lr}
900146c0:	b085      	sub	sp, #20
900146c2:	ac07      	add	r4, sp, #28
900146c4:	f854 3b04 	ldr.w	r3, [r4], #4
900146c8:	9300      	str	r3, [sp, #0]
900146ca:	4613      	mov	r3, r2
900146cc:	4622      	mov	r2, r4
900146ce:	9403      	str	r4, [sp, #12]
900146d0:	f7ff ffdf 	bl	90014692 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900146d4:	b005      	add	sp, #20
900146d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900146da:	b001      	add	sp, #4
900146dc:	4770      	bx	lr

900146de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
900146de:	b5f0      	push	{r4, r5, r6, r7, lr}
900146e0:	4605      	mov	r5, r0
900146e2:	4608      	mov	r0, r1
900146e4:	b1f1      	cbz	r1, 90014724 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
900146e6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
900146ea:	460b      	mov	r3, r1
900146ec:	f101 0708 	add.w	r7, r1, #8
900146f0:	4622      	mov	r2, r4
900146f2:	6818      	ldr	r0, [r3, #0]
900146f4:	3308      	adds	r3, #8
900146f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
900146fa:	4626      	mov	r6, r4
900146fc:	42bb      	cmp	r3, r7
900146fe:	c603      	stmia	r6!, {r0, r1}
90014700:	4634      	mov	r4, r6
90014702:	d1f6      	bne.n	900146f2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90014704:	6818      	ldr	r0, [r3, #0]
90014706:	6030      	str	r0, [r6, #0]
90014708:	4610      	mov	r0, r2
9001470a:	889b      	ldrh	r3, [r3, #4]
9001470c:	80b3      	strh	r3, [r6, #4]
9001470e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90014712:	015b      	lsls	r3, r3, #5
90014714:	f403 7180 	and.w	r1, r3, #256	; 0x100
90014718:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
9001471c:	430b      	orrs	r3, r1
9001471e:	425b      	negs	r3, r3
90014720:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90014724:	bdf0      	pop	{r4, r5, r6, r7, pc}

90014726 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90014726:	b538      	push	{r3, r4, r5, lr}
90014728:	460c      	mov	r4, r1
9001472a:	6811      	ldr	r1, [r2, #0]
9001472c:	4610      	mov	r0, r2
9001472e:	68cd      	ldr	r5, [r1, #12]
90014730:	4619      	mov	r1, r3
90014732:	47a8      	blx	r5
90014734:	2800      	cmp	r0, #0
90014736:	bf08      	it	eq
90014738:	4620      	moveq	r0, r4
9001473a:	bd38      	pop	{r3, r4, r5, pc}

9001473c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
9001473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001473e:	4604      	mov	r4, r0
90014740:	4615      	mov	r5, r2
90014742:	4608      	mov	r0, r1
90014744:	b93a      	cbnz	r2, 90014756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90014746:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
9001474a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
9001474e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90014752:	4628      	mov	r0, r5
90014754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014756:	f892 c00d 	ldrb.w	ip, [r2, #13]
9001475a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
9001475e:	8893      	ldrh	r3, [r2, #4]
90014760:	ea4f 160c 	mov.w	r6, ip, lsl #4
90014764:	f406 7280 	and.w	r2, r6, #256	; 0x100
90014768:	79ee      	ldrb	r6, [r5, #7]
9001476a:	4316      	orrs	r6, r2
9001476c:	19da      	adds	r2, r3, r7
9001476e:	b291      	uxth	r1, r2
90014770:	b2b7      	uxth	r7, r6
90014772:	291d      	cmp	r1, #29
90014774:	d87b      	bhi.n	9001486e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90014776:	2201      	movs	r2, #1
90014778:	10f6      	asrs	r6, r6, #3
9001477a:	408a      	lsls	r2, r1
9001477c:	4974      	ldr	r1, [pc, #464]	; (90014950 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
9001477e:	420a      	tst	r2, r1
90014780:	d12e      	bne.n	900147e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90014782:	f412 7f60 	tst.w	r2, #896	; 0x380
90014786:	d072      	beq.n	9001486e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90014788:	f104 024c 	add.w	r2, r4, #76	; 0x4c
9001478c:	462b      	mov	r3, r5
9001478e:	f105 0e08 	add.w	lr, r5, #8
90014792:	4615      	mov	r5, r2
90014794:	6818      	ldr	r0, [r3, #0]
90014796:	3308      	adds	r3, #8
90014798:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001479c:	4694      	mov	ip, r2
9001479e:	4573      	cmp	r3, lr
900147a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
900147a4:	4662      	mov	r2, ip
900147a6:	d1f5      	bne.n	90014794 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
900147a8:	6818      	ldr	r0, [r3, #0]
900147aa:	f8cc 0000 	str.w	r0, [ip]
900147ae:	889b      	ldrh	r3, [r3, #4]
900147b0:	f8ac 3004 	strh.w	r3, [ip, #4]
900147b4:	b2b3      	uxth	r3, r6
900147b6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
900147ba:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
900147be:	1aca      	subs	r2, r1, r3
900147c0:	1bcf      	subs	r7, r1, r7
900147c2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
900147c6:	b292      	uxth	r2, r2
900147c8:	1afb      	subs	r3, r7, r3
900147ca:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
900147ce:	10d2      	asrs	r2, r2, #3
900147d0:	f002 0260 	and.w	r2, r2, #96	; 0x60
900147d4:	4302      	orrs	r2, r0
900147d6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
900147da:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
900147de:	e7b8      	b.n	90014752 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900147e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
900147e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900147e6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
900147e8:	f640 6333 	movw	r3, #3635	; 0xe33
900147ec:	4299      	cmp	r1, r3
900147ee:	d110      	bne.n	90014812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
900147f0:	6803      	ldr	r3, [r0, #0]
900147f2:	68db      	ldr	r3, [r3, #12]
900147f4:	4798      	blx	r3
900147f6:	7b41      	ldrb	r1, [r0, #13]
900147f8:	00cb      	lsls	r3, r1, #3
900147fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
900147fe:	7a03      	ldrb	r3, [r0, #8]
90014800:	0648      	lsls	r0, r1, #25
90014802:	ea43 0302 	orr.w	r3, r3, r2
90014806:	bf44      	itt	mi
90014808:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001480c:	b21b      	sxthmi	r3, r3
9001480e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014812:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90014816:	462a      	mov	r2, r5
90014818:	f105 0c08 	add.w	ip, r5, #8
9001481c:	443b      	add	r3, r7
9001481e:	4433      	add	r3, r6
90014820:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90014824:	b29b      	uxth	r3, r3
90014826:	4635      	mov	r5, r6
90014828:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001482c:	6810      	ldr	r0, [r2, #0]
9001482e:	3208      	adds	r2, #8
90014830:	f852 1c04 	ldr.w	r1, [r2, #-4]
90014834:	4637      	mov	r7, r6
90014836:	4562      	cmp	r2, ip
90014838:	c703      	stmia	r7!, {r0, r1}
9001483a:	463e      	mov	r6, r7
9001483c:	d1f6      	bne.n	9001482c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
9001483e:	6810      	ldr	r0, [r2, #0]
90014840:	6038      	str	r0, [r7, #0]
90014842:	8892      	ldrh	r2, [r2, #4]
90014844:	80ba      	strh	r2, [r7, #4]
90014846:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001484a:	10db      	asrs	r3, r3, #3
9001484c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90014850:	f003 0360 	and.w	r3, r3, #96	; 0x60
90014854:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90014858:	4313      	orrs	r3, r2
9001485a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
9001485e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90014862:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90014866:	1a9b      	subs	r3, r3, r2
90014868:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
9001486c:	e771      	b.n	90014752 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
9001486e:	f023 0204 	bic.w	r2, r3, #4
90014872:	f640 611b 	movw	r1, #3611	; 0xe1b
90014876:	428a      	cmp	r2, r1
90014878:	d003      	beq.n	90014882 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
9001487a:	f640 621d 	movw	r2, #3613	; 0xe1d
9001487e:	4293      	cmp	r3, r2
90014880:	d120      	bne.n	900148c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90014882:	3b01      	subs	r3, #1
90014884:	4602      	mov	r2, r0
90014886:	4629      	mov	r1, r5
90014888:	4620      	mov	r0, r4
9001488a:	b29b      	uxth	r3, r3
9001488c:	f7ff ff4b 	bl	90014726 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90014890:	7b41      	ldrb	r1, [r0, #13]
90014892:	00cb      	lsls	r3, r1, #3
90014894:	0649      	lsls	r1, r1, #25
90014896:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001489a:	7a03      	ldrb	r3, [r0, #8]
9001489c:	ea43 0302 	orr.w	r3, r3, r2
900148a0:	bf44      	itt	mi
900148a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900148a6:	b21b      	sxthmi	r3, r3
900148a8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900148ac:	7b6b      	ldrb	r3, [r5, #13]
900148ae:	7aaa      	ldrb	r2, [r5, #10]
900148b0:	005b      	lsls	r3, r3, #1
900148b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
900148b6:	4313      	orrs	r3, r2
900148b8:	115a      	asrs	r2, r3, #5
900148ba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
900148be:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
900148c2:	e035      	b.n	90014930 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
900148c4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
900148c8:	f01c 0f40 	tst.w	ip, #64	; 0x40
900148cc:	f402 7180 	and.w	r1, r2, #256	; 0x100
900148d0:	7a2a      	ldrb	r2, [r5, #8]
900148d2:	ea42 0201 	orr.w	r2, r2, r1
900148d6:	f640 6109 	movw	r1, #3593	; 0xe09
900148da:	bf1c      	itt	ne
900148dc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
900148e0:	b212      	sxthne	r2, r2
900148e2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
900148e6:	f023 0210 	bic.w	r2, r3, #16
900148ea:	428a      	cmp	r2, r1
900148ec:	d003      	beq.n	900148f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
900148ee:	f640 6213 	movw	r2, #3603	; 0xe13
900148f2:	4293      	cmp	r3, r2
900148f4:	d129      	bne.n	9001494a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
900148f6:	7b6e      	ldrb	r6, [r5, #13]
900148f8:	4629      	mov	r1, r5
900148fa:	0076      	lsls	r6, r6, #1
900148fc:	f406 7280 	and.w	r2, r6, #256	; 0x100
90014900:	7aae      	ldrb	r6, [r5, #10]
90014902:	4316      	orrs	r6, r2
90014904:	f640 6213 	movw	r2, #3603	; 0xe13
90014908:	4293      	cmp	r3, r2
9001490a:	4602      	mov	r2, r0
9001490c:	4620      	mov	r0, r4
9001490e:	bf16      	itet	ne
90014910:	f103 33ff 	addne.w	r3, r3, #4294967295
90014914:	f640 630c 	movweq	r3, #3596	; 0xe0c
90014918:	b29b      	uxthne	r3, r3
9001491a:	f7ff ff04 	bl	90014726 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001491e:	7b43      	ldrb	r3, [r0, #13]
90014920:	7a82      	ldrb	r2, [r0, #10]
90014922:	005b      	lsls	r3, r3, #1
90014924:	f403 7380 	and.w	r3, r3, #256	; 0x100
90014928:	4313      	orrs	r3, r2
9001492a:	1af6      	subs	r6, r6, r3
9001492c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90014930:	7b69      	ldrb	r1, [r5, #13]
90014932:	00cb      	lsls	r3, r1, #3
90014934:	f403 7280 	and.w	r2, r3, #256	; 0x100
90014938:	7a2b      	ldrb	r3, [r5, #8]
9001493a:	4313      	orrs	r3, r2
9001493c:	064a      	lsls	r2, r1, #25
9001493e:	bf44      	itt	mi
90014940:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014944:	b21b      	sxthmi	r3, r3
90014946:	1bdb      	subs	r3, r3, r7
90014948:	e747      	b.n	900147da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
9001494a:	2300      	movs	r3, #0
9001494c:	e7b7      	b.n	900148be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
9001494e:	bf00      	nop
90014950:	3fc00079 	.word	0x3fc00079

90014954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90014954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014958:	4604      	mov	r4, r0
9001495a:	b942      	cbnz	r2, 9001496e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
9001495c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90014960:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90014964:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90014968:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
9001496c:	e047      	b.n	900149fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001496e:	7b51      	ldrb	r1, [r2, #13]
90014970:	8893      	ldrh	r3, [r2, #4]
90014972:	010d      	lsls	r5, r1, #4
90014974:	f405 7080 	and.w	r0, r5, #256	; 0x100
90014978:	79d5      	ldrb	r5, [r2, #7]
9001497a:	4305      	orrs	r5, r0
9001497c:	2d04      	cmp	r5, #4
9001497e:	bfcc      	ite	gt
90014980:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90014984:	f04f 0e01 	movle.w	lr, #1
90014988:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
9001498c:	f200 80ab 	bhi.w	90014ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90014990:	f240 60e7 	movw	r0, #1767	; 0x6e7
90014994:	4283      	cmp	r3, r0
90014996:	d216      	bcs.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014998:	f240 605b 	movw	r0, #1627	; 0x65b
9001499c:	4283      	cmp	r3, r0
9001499e:	d859      	bhi.n	90014a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
900149a0:	f240 6057 	movw	r0, #1623	; 0x657
900149a4:	4283      	cmp	r3, r0
900149a6:	d20e      	bcs.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900149a8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
900149ac:	d24a      	bcs.n	90014a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
900149ae:	f240 604e 	movw	r0, #1614	; 0x64e
900149b2:	4283      	cmp	r3, r0
900149b4:	d207      	bcs.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900149b6:	f240 601a 	movw	r0, #1562	; 0x61a
900149ba:	4283      	cmp	r3, r0
900149bc:	d02a      	beq.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900149be:	d821      	bhi.n	90014a04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
900149c0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
900149c4:	d35b      	bcc.n	90014a7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
900149c6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
900149ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
900149ce:	f040 80d0 	bne.w	90014b72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
900149d2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
900149d6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
900149da:	f040 80ca 	bne.w	90014b72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
900149de:	00cb      	lsls	r3, r1, #3
900149e0:	0649      	lsls	r1, r1, #25
900149e2:	f403 7080 	and.w	r0, r3, #256	; 0x100
900149e6:	7a13      	ldrb	r3, [r2, #8]
900149e8:	ea43 0300 	orr.w	r3, r3, r0
900149ec:	bf44      	itt	mi
900149ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900149f2:	b21b      	sxthmi	r3, r3
900149f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900149f8:	1b5d      	subs	r5, r3, r5
900149fa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
900149fe:	4610      	mov	r0, r2
90014a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014a04:	f240 604b 	movw	r0, #1611	; 0x64b
90014a08:	4283      	cmp	r3, r0
90014a0a:	d338      	bcc.n	90014a7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014a0c:	f240 604c 	movw	r0, #1612	; 0x64c
90014a10:	4283      	cmp	r3, r0
90014a12:	d9d8      	bls.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a14:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90014a18:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90014a1c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014a20:	f040 80f3 	bne.w	90014c0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90014a24:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014a28:	f040 80ef 	bne.w	90014c0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90014a2c:	00cb      	lsls	r3, r1, #3
90014a2e:	064e      	lsls	r6, r1, #25
90014a30:	f403 7080 	and.w	r0, r3, #256	; 0x100
90014a34:	7a13      	ldrb	r3, [r2, #8]
90014a36:	ea43 0300 	orr.w	r3, r3, r0
90014a3a:	bf44      	itt	mi
90014a3c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014a40:	b21b      	sxthmi	r3, r3
90014a42:	e7d9      	b.n	900149f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90014a44:	f240 6054 	movw	r0, #1620	; 0x654
90014a48:	4283      	cmp	r3, r0
90014a4a:	d8e3      	bhi.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014a4c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90014a50:	d9e0      	bls.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014a52:	e7b8      	b.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a54:	f240 6074 	movw	r0, #1652	; 0x674
90014a58:	4283      	cmp	r3, r0
90014a5a:	d0b4      	beq.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a5c:	d82d      	bhi.n	90014aba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90014a5e:	f240 605e 	movw	r0, #1630	; 0x65e
90014a62:	4283      	cmp	r3, r0
90014a64:	d804      	bhi.n	90014a70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90014a66:	f240 605d 	movw	r0, #1629	; 0x65d
90014a6a:	4283      	cmp	r3, r0
90014a6c:	d3d2      	bcc.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014a6e:	e7aa      	b.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a70:	f240 605f 	movw	r0, #1631	; 0x65f
90014a74:	4283      	cmp	r3, r0
90014a76:	d0cd      	beq.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014a78:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90014a7c:	d0a3      	beq.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014a7e:	00cb      	lsls	r3, r1, #3
90014a80:	0649      	lsls	r1, r1, #25
90014a82:	f403 7080 	and.w	r0, r3, #256	; 0x100
90014a86:	7a13      	ldrb	r3, [r2, #8]
90014a88:	ea43 0300 	orr.w	r3, r3, r0
90014a8c:	bf44      	itt	mi
90014a8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014a92:	b21b      	sxthmi	r3, r3
90014a94:	1b5d      	subs	r5, r3, r5
90014a96:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014a9a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014a9e:	7b53      	ldrb	r3, [r2, #13]
90014aa0:	015b      	lsls	r3, r3, #5
90014aa2:	f403 7180 	and.w	r1, r3, #256	; 0x100
90014aa6:	7993      	ldrb	r3, [r2, #6]
90014aa8:	430b      	orrs	r3, r1
90014aaa:	2105      	movs	r1, #5
90014aac:	005b      	lsls	r3, r3, #1
90014aae:	fb93 f3f1 	sdiv	r3, r3, r1
90014ab2:	f992 1009 	ldrsb.w	r1, [r2, #9]
90014ab6:	440b      	add	r3, r1
90014ab8:	e756      	b.n	90014968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90014aba:	f240 60e2 	movw	r0, #1762	; 0x6e2
90014abe:	4283      	cmp	r3, r0
90014ac0:	d809      	bhi.n	90014ad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90014ac2:	f240 60df 	movw	r0, #1759	; 0x6df
90014ac6:	4283      	cmp	r3, r0
90014ac8:	f4bf af7d 	bcs.w	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014acc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90014ad0:	2b05      	cmp	r3, #5
90014ad2:	d8d4      	bhi.n	90014a7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014ad4:	e777      	b.n	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014ad6:	f240 60e3 	movw	r0, #1763	; 0x6e3
90014ada:	4283      	cmp	r3, r0
90014adc:	d09a      	beq.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014ade:	f240 60e4 	movw	r0, #1764	; 0x6e4
90014ae2:	4283      	cmp	r3, r0
90014ae4:	e7ca      	b.n	90014a7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90014ae6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
90014aea:	d22b      	bcs.n	90014b44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90014aec:	f640 00ed 	movw	r0, #2285	; 0x8ed
90014af0:	4283      	cmp	r3, r0
90014af2:	d28f      	bcs.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014af4:	f640 00e5 	movw	r0, #2277	; 0x8e5
90014af8:	4283      	cmp	r3, r0
90014afa:	d816      	bhi.n	90014b2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90014afc:	f640 00e4 	movw	r0, #2276	; 0x8e4
90014b00:	4283      	cmp	r3, r0
90014b02:	f4bf af60 	bcs.w	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b06:	f240 60ec 	movw	r0, #1772	; 0x6ec
90014b0a:	4283      	cmp	r3, r0
90014b0c:	d80a      	bhi.n	90014b24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90014b0e:	f240 60eb 	movw	r0, #1771	; 0x6eb
90014b12:	4283      	cmp	r3, r0
90014b14:	f4bf af57 	bcs.w	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b18:	f240 60ea 	movw	r0, #1770	; 0x6ea
90014b1c:	4283      	cmp	r3, r0
90014b1e:	f43f af79 	beq.w	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b22:	e7ac      	b.n	90014a7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90014b24:	f240 60ed 	movw	r0, #1773	; 0x6ed
90014b28:	e7f8      	b.n	90014b1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90014b2a:	f640 00e8 	movw	r0, #2280	; 0x8e8
90014b2e:	4283      	cmp	r3, r0
90014b30:	d802      	bhi.n	90014b38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90014b32:	f640 00e7 	movw	r0, #2279	; 0x8e7
90014b36:	e798      	b.n	90014a6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90014b38:	f640 00e9 	movw	r0, #2281	; 0x8e9
90014b3c:	4283      	cmp	r3, r0
90014b3e:	f47f af42 	bne.w	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b42:	e767      	b.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b44:	f640 00f6 	movw	r0, #2294	; 0x8f6
90014b48:	4283      	cmp	r3, r0
90014b4a:	f43f af63 	beq.w	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b4e:	d802      	bhi.n	90014b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90014b50:	f640 00f2 	movw	r0, #2290	; 0x8f2
90014b54:	e7f2      	b.n	90014b3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90014b56:	f640 00fa 	movw	r0, #2298	; 0x8fa
90014b5a:	4283      	cmp	r3, r0
90014b5c:	d805      	bhi.n	90014b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
90014b5e:	f640 00f9 	movw	r0, #2297	; 0x8f9
90014b62:	4283      	cmp	r3, r0
90014b64:	f4ff af2f 	bcc.w	900149c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90014b68:	e754      	b.n	90014a14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90014b6a:	f640 00fe 	movw	r0, #2302	; 0x8fe
90014b6e:	4283      	cmp	r3, r0
90014b70:	e7af      	b.n	90014ad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90014b72:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90014b76:	4617      	mov	r7, r2
90014b78:	f102 0808 	add.w	r8, r2, #8
90014b7c:	4666      	mov	r6, ip
90014b7e:	6838      	ldr	r0, [r7, #0]
90014b80:	3708      	adds	r7, #8
90014b82:	f857 1c04 	ldr.w	r1, [r7, #-4]
90014b86:	46e6      	mov	lr, ip
90014b88:	4547      	cmp	r7, r8
90014b8a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
90014b8e:	46f4      	mov	ip, lr
90014b90:	d1f5      	bne.n	90014b7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90014b92:	6838      	ldr	r0, [r7, #0]
90014b94:	f8ce 0000 	str.w	r0, [lr]
90014b98:	88b9      	ldrh	r1, [r7, #4]
90014b9a:	f8ae 1004 	strh.w	r1, [lr, #4]
90014b9e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90014ba2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014ba6:	d009      	beq.n	90014bbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90014ba8:	7b51      	ldrb	r1, [r2, #13]
90014baa:	7992      	ldrb	r2, [r2, #6]
90014bac:	0149      	lsls	r1, r1, #5
90014bae:	f401 7180 	and.w	r1, r1, #256	; 0x100
90014bb2:	4311      	orrs	r1, r2
90014bb4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90014bb8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90014bbc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014bc0:	b2ad      	uxth	r5, r5
90014bc2:	d00d      	beq.n	90014be0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90014bc4:	442b      	add	r3, r5
90014bc6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90014bca:	b29b      	uxth	r3, r3
90014bcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90014bd0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90014bd4:	10db      	asrs	r3, r3, #3
90014bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
90014bda:	4313      	orrs	r3, r2
90014bdc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90014be0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90014be4:	00cb      	lsls	r3, r1, #3
90014be6:	064f      	lsls	r7, r1, #25
90014be8:	f403 7280 	and.w	r2, r3, #256	; 0x100
90014bec:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90014bf0:	ea43 0302 	orr.w	r3, r3, r2
90014bf4:	bf44      	itt	mi
90014bf6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014bfa:	b21b      	sxthmi	r3, r3
90014bfc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90014c00:	1b5b      	subs	r3, r3, r5
90014c02:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90014c06:	4632      	mov	r2, r6
90014c08:	e6f9      	b.n	900149fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90014c0a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90014c0e:	4617      	mov	r7, r2
90014c10:	f102 0908 	add.w	r9, r2, #8
90014c14:	4666      	mov	r6, ip
90014c16:	6838      	ldr	r0, [r7, #0]
90014c18:	3708      	adds	r7, #8
90014c1a:	f857 1c04 	ldr.w	r1, [r7, #-4]
90014c1e:	46e0      	mov	r8, ip
90014c20:	454f      	cmp	r7, r9
90014c22:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90014c26:	46c4      	mov	ip, r8
90014c28:	d1f5      	bne.n	90014c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90014c2a:	6838      	ldr	r0, [r7, #0]
90014c2c:	f8c8 0000 	str.w	r0, [r8]
90014c30:	88b9      	ldrh	r1, [r7, #4]
90014c32:	f8a8 1004 	strh.w	r1, [r8, #4]
90014c36:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90014c3a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90014c3e:	d009      	beq.n	90014c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90014c40:	7b51      	ldrb	r1, [r2, #13]
90014c42:	7992      	ldrb	r2, [r2, #6]
90014c44:	0149      	lsls	r1, r1, #5
90014c46:	f401 7180 	and.w	r1, r1, #256	; 0x100
90014c4a:	4311      	orrs	r1, r2
90014c4c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90014c50:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90014c54:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90014c58:	d00e      	beq.n	90014c78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
90014c5a:	eba3 030e 	sub.w	r3, r3, lr
90014c5e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90014c62:	b29b      	uxth	r3, r3
90014c64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90014c68:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90014c6c:	10db      	asrs	r3, r3, #3
90014c6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
90014c72:	4313      	orrs	r3, r2
90014c74:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90014c78:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90014c7c:	00cb      	lsls	r3, r1, #3
90014c7e:	0648      	lsls	r0, r1, #25
90014c80:	f403 7280 	and.w	r2, r3, #256	; 0x100
90014c84:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90014c88:	ea43 0302 	orr.w	r3, r3, r2
90014c8c:	bf44      	itt	mi
90014c8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90014c92:	b21b      	sxthmi	r3, r3
90014c94:	1b5d      	subs	r5, r3, r5
90014c96:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90014c9a:	e7b4      	b.n	90014c06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

90014c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
90014c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014ca0:	461e      	mov	r6, r3
90014ca2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90014ca4:	4604      	mov	r4, r0
90014ca6:	4617      	mov	r7, r2
90014ca8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90014cac:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90014cb0:	f7f0 fb34 	bl	9000531c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90014cb4:	4605      	mov	r5, r0
90014cb6:	b918      	cbnz	r0, 90014cc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90014cb8:	6030      	str	r0, [r6, #0]
90014cba:	4628      	mov	r0, r5
90014cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014cc0:	683b      	ldr	r3, [r7, #0]
90014cc2:	4601      	mov	r1, r0
90014cc4:	4638      	mov	r0, r7
90014cc6:	68db      	ldr	r3, [r3, #12]
90014cc8:	4798      	blx	r3
90014cca:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90014cce:	4602      	mov	r2, r0
90014cd0:	6030      	str	r0, [r6, #0]
90014cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90014cd6:	d213      	bcs.n	90014d00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90014cd8:	4643      	mov	r3, r8
90014cda:	4639      	mov	r1, r7
90014cdc:	4620      	mov	r0, r4
90014cde:	f7ff fe39 	bl	90014954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90014ce2:	6030      	str	r0, [r6, #0]
90014ce4:	6833      	ldr	r3, [r6, #0]
90014ce6:	b143      	cbz	r3, 90014cfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90014ce8:	7b5a      	ldrb	r2, [r3, #13]
90014cea:	7a9b      	ldrb	r3, [r3, #10]
90014cec:	0052      	lsls	r2, r2, #1
90014cee:	f402 7280 	and.w	r2, r2, #256	; 0x100
90014cf2:	4313      	orrs	r3, r2
90014cf4:	bf0c      	ite	eq
90014cf6:	2301      	moveq	r3, #1
90014cf8:	2300      	movne	r3, #0
90014cfa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90014cfe:	e7dc      	b.n	90014cba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90014d00:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90014d04:	b29b      	uxth	r3, r3
90014d06:	2b7f      	cmp	r3, #127	; 0x7f
90014d08:	d804      	bhi.n	90014d14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90014d0a:	4639      	mov	r1, r7
90014d0c:	4620      	mov	r0, r4
90014d0e:	f7ff fd15 	bl	9001473c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90014d12:	e7e6      	b.n	90014ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90014d14:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90014d18:	2b00      	cmp	r3, #0
90014d1a:	d0e3      	beq.n	90014ce4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90014d1c:	f640 1302 	movw	r3, #2306	; 0x902
90014d20:	429d      	cmp	r5, r3
90014d22:	d1df      	bne.n	90014ce4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90014d24:	4601      	mov	r1, r0
90014d26:	4620      	mov	r0, r4
90014d28:	f7ff fcd9 	bl	900146de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90014d2c:	e7d9      	b.n	90014ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90014d2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90014d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90014d32:	461e      	mov	r6, r3
90014d34:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90014d36:	4604      	mov	r4, r0
90014d38:	4617      	mov	r7, r2
90014d3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90014d3e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90014d42:	f7f0 faeb 	bl	9000531c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90014d46:	4605      	mov	r5, r0
90014d48:	b918      	cbnz	r0, 90014d52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90014d4a:	6030      	str	r0, [r6, #0]
90014d4c:	4628      	mov	r0, r5
90014d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90014d52:	683b      	ldr	r3, [r7, #0]
90014d54:	4601      	mov	r1, r0
90014d56:	4638      	mov	r0, r7
90014d58:	f8d3 9008 	ldr.w	r9, [r3, #8]
90014d5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90014d60:	47c8      	blx	r9
90014d62:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90014d66:	4602      	mov	r2, r0
90014d68:	6030      	str	r0, [r6, #0]
90014d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90014d6e:	d213      	bcs.n	90014d98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90014d70:	4643      	mov	r3, r8
90014d72:	4639      	mov	r1, r7
90014d74:	4620      	mov	r0, r4
90014d76:	f7ff fded 	bl	90014954 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90014d7a:	6030      	str	r0, [r6, #0]
90014d7c:	6833      	ldr	r3, [r6, #0]
90014d7e:	b143      	cbz	r3, 90014d92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90014d80:	7b5a      	ldrb	r2, [r3, #13]
90014d82:	7a9b      	ldrb	r3, [r3, #10]
90014d84:	0052      	lsls	r2, r2, #1
90014d86:	f402 7280 	and.w	r2, r2, #256	; 0x100
90014d8a:	4313      	orrs	r3, r2
90014d8c:	bf0c      	ite	eq
90014d8e:	2301      	moveq	r3, #1
90014d90:	2300      	movne	r3, #0
90014d92:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90014d96:	e7d9      	b.n	90014d4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90014d98:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90014d9c:	b29b      	uxth	r3, r3
90014d9e:	2b7f      	cmp	r3, #127	; 0x7f
90014da0:	d804      	bhi.n	90014dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90014da2:	4639      	mov	r1, r7
90014da4:	4620      	mov	r0, r4
90014da6:	f7ff fcc9 	bl	9001473c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90014daa:	e7e6      	b.n	90014d7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
90014dac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90014db0:	2b00      	cmp	r3, #0
90014db2:	d0e3      	beq.n	90014d7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90014db4:	f640 1302 	movw	r3, #2306	; 0x902
90014db8:	429d      	cmp	r5, r3
90014dba:	d1df      	bne.n	90014d7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90014dbc:	4601      	mov	r1, r0
90014dbe:	4620      	mov	r0, r4
90014dc0:	f7ff fc8d 	bl	900146de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90014dc4:	e7d9      	b.n	90014d7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90014dc6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90014dc6:	b510      	push	{r4, lr}
90014dc8:	4604      	mov	r4, r0
90014dca:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
90014dce:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90014dd0:	b1e1      	cbz	r1, 90014e0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90014dd2:	2b0a      	cmp	r3, #10
90014dd4:	d02d      	beq.n	90014e32 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90014dd6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90014dd8:	3901      	subs	r1, #1
90014dda:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90014dde:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90014de0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90014de4:	1c51      	adds	r1, r2, #1
90014de6:	b289      	uxth	r1, r1
90014de8:	2901      	cmp	r1, #1
90014dea:	bf8a      	itet	hi
90014dec:	f102 32ff 	addhi.w	r2, r2, #4294967295
90014df0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90014df2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90014df4:	1c5a      	adds	r2, r3, #1
90014df6:	8722      	strh	r2, [r4, #56]	; 0x38
90014df8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90014dfa:	4413      	add	r3, r2
90014dfc:	b29b      	uxth	r3, r3
90014dfe:	2b09      	cmp	r3, #9
90014e00:	bf88      	it	hi
90014e02:	3b0a      	subhi	r3, #10
90014e04:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90014e08:	8458      	strh	r0, [r3, #34]	; 0x22
90014e0a:	e7de      	b.n	90014dca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90014e0c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90014e0e:	2b0a      	cmp	r3, #10
90014e10:	d00f      	beq.n	90014e32 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90014e12:	4620      	mov	r0, r4
90014e14:	f7ff fc11 	bl	9001463a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90014e18:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90014e1a:	1c5a      	adds	r2, r3, #1
90014e1c:	8722      	strh	r2, [r4, #56]	; 0x38
90014e1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90014e20:	4413      	add	r3, r2
90014e22:	b29b      	uxth	r3, r3
90014e24:	2b09      	cmp	r3, #9
90014e26:	bf88      	it	hi
90014e28:	3b0a      	subhi	r3, #10
90014e2a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90014e2e:	8458      	strh	r0, [r3, #34]	; 0x22
90014e30:	e7ec      	b.n	90014e0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90014e32:	bd10      	pop	{r4, pc}

90014e34 <_ZN8touchgfx12TextProvider11getNextCharEv>:
90014e34:	b538      	push	{r3, r4, r5, lr}
90014e36:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90014e38:	4604      	mov	r4, r0
90014e3a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90014e3e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90014e40:	8f02      	ldrh	r2, [r0, #56]	; 0x38
90014e42:	3a01      	subs	r2, #1
90014e44:	8702      	strh	r2, [r0, #56]	; 0x38
90014e46:	1c5a      	adds	r2, r3, #1
90014e48:	b292      	uxth	r2, r2
90014e4a:	2a09      	cmp	r2, #9
90014e4c:	bf8a      	itet	hi
90014e4e:	3b09      	subhi	r3, #9
90014e50:	86c2      	strhls	r2, [r0, #54]	; 0x36
90014e52:	86c3      	strhhi	r3, [r0, #54]	; 0x36
90014e54:	f7ff ffb7 	bl	90014dc6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90014e58:	8c23      	ldrh	r3, [r4, #32]
90014e5a:	2b01      	cmp	r3, #1
90014e5c:	bf9c      	itt	ls
90014e5e:	3301      	addls	r3, #1
90014e60:	8423      	strhls	r3, [r4, #32]
90014e62:	8be3      	ldrh	r3, [r4, #30]
90014e64:	b90b      	cbnz	r3, 90014e6a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
90014e66:	2302      	movs	r3, #2
90014e68:	83e3      	strh	r3, [r4, #30]
90014e6a:	8be3      	ldrh	r3, [r4, #30]
90014e6c:	4628      	mov	r0, r5
90014e6e:	3b01      	subs	r3, #1
90014e70:	b29b      	uxth	r3, r3
90014e72:	83e3      	strh	r3, [r4, #30]
90014e74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90014e78:	8365      	strh	r5, [r4, #26]
90014e7a:	bd38      	pop	{r3, r4, r5, pc}

90014e7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
90014e7c:	428a      	cmp	r2, r1
90014e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014e82:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
90014e84:	d932      	bls.n	90014eec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
90014e86:	8f05      	ldrh	r5, [r0, #56]	; 0x38
90014e88:	1a54      	subs	r4, r2, r1
90014e8a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
90014e8e:	19ee      	adds	r6, r5, r7
90014e90:	fa1f fe84 	uxth.w	lr, r4
90014e94:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
90014e98:	3e01      	subs	r6, #1
90014e9a:	b2b4      	uxth	r4, r6
90014e9c:	eba4 090e 	sub.w	r9, r4, lr
90014ea0:	fa1f f989 	uxth.w	r9, r9
90014ea4:	2c09      	cmp	r4, #9
90014ea6:	4626      	mov	r6, r4
90014ea8:	bf88      	it	hi
90014eaa:	f1a4 060a 	subhi.w	r6, r4, #10
90014eae:	f1bc 0f00 	cmp.w	ip, #0
90014eb2:	f104 34ff 	add.w	r4, r4, #4294967295
90014eb6:	bf08      	it	eq
90014eb8:	f04f 0c02 	moveq.w	ip, #2
90014ebc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90014ec0:	b2a4      	uxth	r4, r4
90014ec2:	f10c 3cff 	add.w	ip, ip, #4294967295
90014ec6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
90014eca:	454c      	cmp	r4, r9
90014ecc:	fa1f fc8c 	uxth.w	ip, ip
90014ed0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
90014ed4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
90014ed8:	d1e4      	bne.n	90014ea4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
90014eda:	eba5 050e 	sub.w	r5, r5, lr
90014ede:	eb0e 0408 	add.w	r4, lr, r8
90014ee2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
90014ee6:	8705      	strh	r5, [r0, #56]	; 0x38
90014ee8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
90014eec:	8f04      	ldrh	r4, [r0, #56]	; 0x38
90014eee:	250a      	movs	r5, #10
90014ef0:	1a64      	subs	r4, r4, r1
90014ef2:	4439      	add	r1, r7
90014ef4:	b289      	uxth	r1, r1
90014ef6:	8704      	strh	r4, [r0, #56]	; 0x38
90014ef8:	2909      	cmp	r1, #9
90014efa:	bf88      	it	hi
90014efc:	390a      	subhi	r1, #10
90014efe:	86c1      	strh	r1, [r0, #54]	; 0x36
90014f00:	b18a      	cbz	r2, 90014f26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
90014f02:	8f01      	ldrh	r1, [r0, #56]	; 0x38
90014f04:	3a01      	subs	r2, #1
90014f06:	3101      	adds	r1, #1
90014f08:	b292      	uxth	r2, r2
90014f0a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
90014f0e:	8701      	strh	r1, [r0, #56]	; 0x38
90014f10:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90014f12:	b901      	cbnz	r1, 90014f16 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
90014f14:	86c5      	strh	r5, [r0, #54]	; 0x36
90014f16:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90014f18:	3901      	subs	r1, #1
90014f1a:	b289      	uxth	r1, r1
90014f1c:	86c1      	strh	r1, [r0, #54]	; 0x36
90014f1e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
90014f22:	844c      	strh	r4, [r1, #34]	; 0x22
90014f24:	e7ec      	b.n	90014f00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
90014f26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90014f2a:	f7ff bf4c 	b.w	90014dc6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90014f2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
90014f2e:	b570      	push	{r4, r5, r6, lr}
90014f30:	2500      	movs	r5, #0
90014f32:	4295      	cmp	r5, r2
90014f34:	d011      	beq.n	90014f5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
90014f36:	8bc4      	ldrh	r4, [r0, #30]
90014f38:	f831 6b02 	ldrh.w	r6, [r1], #2
90014f3c:	4414      	add	r4, r2
90014f3e:	3c01      	subs	r4, #1
90014f40:	1b64      	subs	r4, r4, r5
90014f42:	b2a4      	uxth	r4, r4
90014f44:	2c01      	cmp	r4, #1
90014f46:	bf88      	it	hi
90014f48:	3c02      	subhi	r4, #2
90014f4a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90014f4e:	8b64      	ldrh	r4, [r4, #26]
90014f50:	42b4      	cmp	r4, r6
90014f52:	d117      	bne.n	90014f84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
90014f54:	3501      	adds	r5, #1
90014f56:	b2ad      	uxth	r5, r5
90014f58:	e7eb      	b.n	90014f32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
90014f5a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90014f5e:	2400      	movs	r4, #0
90014f60:	4413      	add	r3, r2
90014f62:	b2a2      	uxth	r2, r4
90014f64:	429a      	cmp	r2, r3
90014f66:	da0f      	bge.n	90014f88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90014f68:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
90014f6a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
90014f6e:	3401      	adds	r4, #1
90014f70:	4432      	add	r2, r6
90014f72:	b292      	uxth	r2, r2
90014f74:	2a09      	cmp	r2, #9
90014f76:	bf88      	it	hi
90014f78:	3a0a      	subhi	r2, #10
90014f7a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90014f7e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
90014f80:	42aa      	cmp	r2, r5
90014f82:	d0ee      	beq.n	90014f62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
90014f84:	2000      	movs	r0, #0
90014f86:	bd70      	pop	{r4, r5, r6, pc}
90014f88:	2001      	movs	r0, #1
90014f8a:	e7fc      	b.n	90014f86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

90014f8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
90014f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014f90:	4605      	mov	r5, r0
90014f92:	4616      	mov	r6, r2
90014f94:	1c8c      	adds	r4, r1, #2
90014f96:	8809      	ldrh	r1, [r1, #0]
90014f98:	ea4f 3a11 	mov.w	sl, r1, lsr #12
90014f9c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
90014fa0:	42b3      	cmp	r3, r6
90014fa2:	d124      	bne.n	90014fee <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
90014fa4:	f3c1 2903 	ubfx	r9, r1, #8, #4
90014fa8:	f3c1 1803 	ubfx	r8, r1, #4, #4
90014fac:	f001 070f 	and.w	r7, r1, #15
90014fb0:	4652      	mov	r2, sl
90014fb2:	f8cd 8000 	str.w	r8, [sp]
90014fb6:	464b      	mov	r3, r9
90014fb8:	4621      	mov	r1, r4
90014fba:	4628      	mov	r0, r5
90014fbc:	f7ff ffb7 	bl	90014f2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
90014fc0:	4683      	mov	fp, r0
90014fc2:	b168      	cbz	r0, 90014fe0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
90014fc4:	eb0a 0109 	add.w	r1, sl, r9
90014fc8:	463a      	mov	r2, r7
90014fca:	4628      	mov	r0, r5
90014fcc:	4441      	add	r1, r8
90014fce:	eb04 0341 	add.w	r3, r4, r1, lsl #1
90014fd2:	4649      	mov	r1, r9
90014fd4:	f7ff ff52 	bl	90014e7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
90014fd8:	4658      	mov	r0, fp
90014fda:	b003      	add	sp, #12
90014fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014fe0:	eb07 010a 	add.w	r1, r7, sl
90014fe4:	4449      	add	r1, r9
90014fe6:	4441      	add	r1, r8
90014fe8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
90014fec:	e7d2      	b.n	90014f94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
90014fee:	f04f 0b00 	mov.w	fp, #0
90014ff2:	e7f1      	b.n	90014fd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

90014ff4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
90014ff4:	b570      	push	{r4, r5, r6, lr}
90014ff6:	8810      	ldrh	r0, [r2, #0]
90014ff8:	4298      	cmp	r0, r3
90014ffa:	d817      	bhi.n	9001502c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90014ffc:	1e48      	subs	r0, r1, #1
90014ffe:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
90015002:	4298      	cmp	r0, r3
90015004:	d312      	bcc.n	9001502c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90015006:	2400      	movs	r4, #0
90015008:	428c      	cmp	r4, r1
9001500a:	d20f      	bcs.n	9001502c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001500c:	1860      	adds	r0, r4, r1
9001500e:	1040      	asrs	r0, r0, #1
90015010:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
90015014:	0085      	lsls	r5, r0, #2
90015016:	42b3      	cmp	r3, r6
90015018:	d902      	bls.n	90015020 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001501a:	3001      	adds	r0, #1
9001501c:	b284      	uxth	r4, r0
9001501e:	e7f3      	b.n	90015008 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015020:	d201      	bcs.n	90015026 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
90015022:	b281      	uxth	r1, r0
90015024:	e7f0      	b.n	90015008 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90015026:	442a      	add	r2, r5
90015028:	8850      	ldrh	r0, [r2, #2]
9001502a:	bd70      	pop	{r4, r5, r6, pc}
9001502c:	2000      	movs	r0, #0
9001502e:	e7fc      	b.n	9001502a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90015030 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90015030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015034:	6c45      	ldr	r5, [r0, #68]	; 0x44
90015036:	4604      	mov	r4, r0
90015038:	260b      	movs	r6, #11
9001503a:	886f      	ldrh	r7, [r5, #2]
9001503c:	087f      	lsrs	r7, r7, #1
9001503e:	3e01      	subs	r6, #1
90015040:	d013      	beq.n	9001506a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90015042:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90015044:	462a      	mov	r2, r5
90015046:	4639      	mov	r1, r7
90015048:	4620      	mov	r0, r4
9001504a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001504e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90015052:	4643      	mov	r3, r8
90015054:	f7ff ffce 	bl	90014ff4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90015058:	b138      	cbz	r0, 9001506a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001505a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001505e:	4642      	mov	r2, r8
90015060:	4620      	mov	r0, r4
90015062:	f7ff ff93 	bl	90014f8c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
90015066:	2800      	cmp	r0, #0
90015068:	d1e9      	bne.n	9001503e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

90015070 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
90015070:	b570      	push	{r4, r5, r6, lr}
90015072:	694a      	ldr	r2, [r1, #20]
90015074:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90015076:	684b      	ldr	r3, [r1, #4]
90015078:	1b54      	subs	r4, r2, r5
9001507a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001507c:	f000 8106 	beq.w	9001528c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
90015080:	1b9b      	subs	r3, r3, r6
90015082:	d003      	beq.n	9001508c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90015084:	4363      	muls	r3, r4
90015086:	2210      	movs	r2, #16
90015088:	fb93 f3f2 	sdiv	r3, r3, r2
9001508c:	680c      	ldr	r4, [r1, #0]
9001508e:	698a      	ldr	r2, [r1, #24]
90015090:	1b65      	subs	r5, r4, r5
90015092:	f000 80fd 	beq.w	90015290 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
90015096:	1b92      	subs	r2, r2, r6
90015098:	d003      	beq.n	900150a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001509a:	436a      	muls	r2, r5
9001509c:	2410      	movs	r4, #16
9001509e:	fb92 f2f4 	sdiv	r2, r2, r4
900150a2:	1a9b      	subs	r3, r3, r2
900150a4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 900152cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
900150a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900150ac:	460a      	mov	r2, r1
900150ae:	ee07 3a90 	vmov	s15, r3
900150b2:	f100 040c 	add.w	r4, r0, #12
900150b6:	4603      	mov	r3, r0
900150b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900150bc:	ee67 7a84 	vmul.f32	s15, s15, s8
900150c0:	ee87 3a27 	vdiv.f32	s6, s14, s15
900150c4:	eeb1 6a43 	vneg.f32	s12, s6
900150c8:	edd2 7a02 	vldr	s15, [r2, #8]
900150cc:	3214      	adds	r2, #20
900150ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
900150d2:	ece3 6a01 	vstmia	r3!, {s13}
900150d6:	429c      	cmp	r4, r3
900150d8:	ed52 7a02 	vldr	s15, [r2, #-8]
900150dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
900150e0:	edc3 7a02 	vstr	s15, [r3, #8]
900150e4:	ed52 7a01 	vldr	s15, [r2, #-4]
900150e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
900150ec:	edc3 7a05 	vstr	s15, [r3, #20]
900150f0:	d1ea      	bne.n	900150c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
900150f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900150f4:	698b      	ldr	r3, [r1, #24]
900150f6:	edd0 4a02 	vldr	s9, [r0, #8]
900150fa:	1a9b      	subs	r3, r3, r2
900150fc:	edd0 3a00 	vldr	s7, [r0]
90015100:	edd0 6a01 	vldr	s13, [r0, #4]
90015104:	ee07 3a90 	vmov	s15, r3
90015108:	684b      	ldr	r3, [r1, #4]
9001510a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001510e:	ed90 5a05 	vldr	s10, [r0, #20]
90015112:	1a9b      	subs	r3, r3, r2
90015114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90015118:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001511c:	ed90 2a03 	vldr	s4, [r0, #12]
90015120:	ee07 3a10 	vmov	s14, r3
90015124:	edd0 5a04 	vldr	s11, [r0, #16]
90015128:	ee67 7a84 	vmul.f32	s15, s15, s8
9001512c:	ed90 1a07 	vldr	s2, [r0, #28]
90015130:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015134:	edd0 2a06 	vldr	s5, [r0, #24]
90015138:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001513c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
90015140:	ee27 7a04 	vmul.f32	s14, s14, s8
90015144:	ee32 5a45 	vsub.f32	s10, s4, s10
90015148:	eee6 7a87 	vfma.f32	s15, s13, s14
9001514c:	ee67 7a83 	vmul.f32	s15, s15, s6
90015150:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
90015154:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90015156:	694a      	ldr	r2, [r1, #20]
90015158:	1b13      	subs	r3, r2, r4
9001515a:	ee07 3a10 	vmov	s14, r3
9001515e:	680b      	ldr	r3, [r1, #0]
90015160:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015164:	1b1b      	subs	r3, r3, r4
90015166:	ee27 7a04 	vmul.f32	s14, s14, s8
9001516a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001516e:	ee07 3a10 	vmov	s14, r3
90015172:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015176:	ee27 7a04 	vmul.f32	s14, s14, s8
9001517a:	eee6 4a87 	vfma.f32	s9, s13, s14
9001517e:	ee64 4a86 	vmul.f32	s9, s9, s12
90015182:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
90015186:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90015188:	698b      	ldr	r3, [r1, #24]
9001518a:	1a9b      	subs	r3, r3, r2
9001518c:	ee06 3a90 	vmov	s13, r3
90015190:	684b      	ldr	r3, [r1, #4]
90015192:	1a9b      	subs	r3, r3, r2
90015194:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90015198:	ee07 3a10 	vmov	s14, r3
9001519c:	ee66 6a84 	vmul.f32	s13, s13, s8
900151a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900151a4:	ee65 6a66 	vnmul.f32	s13, s10, s13
900151a8:	ee27 7a04 	vmul.f32	s14, s14, s8
900151ac:	eee5 6a87 	vfma.f32	s13, s11, s14
900151b0:	ee66 6a83 	vmul.f32	s13, s13, s6
900151b4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
900151b8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
900151ba:	694a      	ldr	r2, [r1, #20]
900151bc:	1b13      	subs	r3, r2, r4
900151be:	ee07 3a10 	vmov	s14, r3
900151c2:	680b      	ldr	r3, [r1, #0]
900151c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900151c8:	1b1b      	subs	r3, r3, r4
900151ca:	ee27 7a04 	vmul.f32	s14, s14, s8
900151ce:	ee25 5a47 	vnmul.f32	s10, s10, s14
900151d2:	ee07 3a10 	vmov	s14, r3
900151d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900151da:	ee27 7a04 	vmul.f32	s14, s14, s8
900151de:	eea5 5a87 	vfma.f32	s10, s11, s14
900151e2:	edd0 5a08 	vldr	s11, [r0, #32]
900151e6:	ee31 1a65 	vsub.f32	s2, s2, s11
900151ea:	ee72 5ae5 	vsub.f32	s11, s5, s11
900151ee:	ee25 5a06 	vmul.f32	s10, s10, s12
900151f2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
900151f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900151f8:	698b      	ldr	r3, [r1, #24]
900151fa:	1a9b      	subs	r3, r3, r2
900151fc:	ee07 3a10 	vmov	s14, r3
90015200:	684b      	ldr	r3, [r1, #4]
90015202:	1a9b      	subs	r3, r3, r2
90015204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90015208:	ee01 3a90 	vmov	s3, r3
9001520c:	ee27 7a04 	vmul.f32	s14, s14, s8
90015210:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90015214:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90015218:	ee61 1a84 	vmul.f32	s3, s3, s8
9001521c:	eea1 7a21 	vfma.f32	s14, s2, s3
90015220:	ee27 7a03 	vmul.f32	s14, s14, s6
90015224:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90015228:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001522a:	694a      	ldr	r2, [r1, #20]
9001522c:	1b13      	subs	r3, r2, r4
9001522e:	ee03 3a10 	vmov	s6, r3
90015232:	680b      	ldr	r3, [r1, #0]
90015234:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90015238:	1b1b      	subs	r3, r3, r4
9001523a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001523e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
90015242:	ee03 3a10 	vmov	s6, r3
90015246:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001524a:	ee23 4a04 	vmul.f32	s8, s6, s8
9001524e:	eee1 5a04 	vfma.f32	s11, s2, s8
90015252:	ee25 6a86 	vmul.f32	s12, s11, s12
90015256:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001525a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001525e:	eee3 5aa6 	vfma.f32	s11, s7, s13
90015262:	eef5 5ac0 	vcmpe.f32	s11, #0.0
90015266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001526a:	dd13      	ble.n	90015294 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001526c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015270:	ee62 7ae7 	vnmul.f32	s15, s5, s15
90015274:	63c3      	str	r3, [r0, #60]	; 0x3c
90015276:	eee3 7a87 	vfma.f32	s15, s7, s14
9001527a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90015282:	dd15      	ble.n	900152b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
90015284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015288:	6403      	str	r3, [r0, #64]	; 0x40
9001528a:	bd70      	pop	{r4, r5, r6, pc}
9001528c:	4623      	mov	r3, r4
9001528e:	e6fd      	b.n	9001508c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90015290:	462a      	mov	r2, r5
90015292:	e706      	b.n	900150a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90015294:	d502      	bpl.n	9001529c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
90015296:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001529a:	e7e9      	b.n	90015270 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001529c:	ee22 2a64 	vnmul.f32	s4, s4, s9
900152a0:	eea3 2a85 	vfma.f32	s4, s7, s10
900152a4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
900152a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900152ac:	dade      	bge.n	9001526c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
900152ae:	e7f2      	b.n	90015296 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
900152b0:	d502      	bpl.n	900152b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
900152b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
900152b6:	e7e7      	b.n	90015288 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
900152b8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
900152bc:	eee3 4a86 	vfma.f32	s9, s7, s12
900152c0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
900152c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900152c8:	dadc      	bge.n	90015284 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
900152ca:	e7f2      	b.n	900152b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
900152cc:	3d800000 	.word	0x3d800000

900152d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
900152d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900152d4:	2714      	movs	r7, #20
900152d6:	435f      	muls	r7, r3
900152d8:	eb02 0c07 	add.w	ip, r2, r7
900152dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
900152e0:	f115 0e0f 	adds.w	lr, r5, #15
900152e4:	f100 80a2 	bmi.w	9001542c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
900152e8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
900152ec:	9c08      	ldr	r4, [sp, #32]
900152ee:	2614      	movs	r6, #20
900152f0:	f8c0 e014 	str.w	lr, [r0, #20]
900152f4:	4366      	muls	r6, r4
900152f6:	eb02 0806 	add.w	r8, r2, r6
900152fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
900152fe:	f115 040f 	adds.w	r4, r5, #15
90015302:	f100 809f 	bmi.w	90015444 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
90015306:	1124      	asrs	r4, r4, #4
90015308:	eba4 040e 	sub.w	r4, r4, lr
9001530c:	6184      	str	r4, [r0, #24]
9001530e:	2c00      	cmp	r4, #0
90015310:	f000 808a 	beq.w	90015428 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
90015314:	f8dc 9004 	ldr.w	r9, [ip, #4]
90015318:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001531c:	5995      	ldr	r5, [r2, r6]
9001531e:	eba4 0809 	sub.w	r8, r4, r9
90015322:	59d4      	ldr	r4, [r2, r7]
90015324:	eba5 0a04 	sub.w	sl, r5, r4
90015328:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001532c:	ea4f 150a 	mov.w	r5, sl, lsl #4
90015330:	fb0e fe05 	mul.w	lr, lr, r5
90015334:	fb0a ee19 	mls	lr, sl, r9, lr
90015338:	fb08 e404 	mla	r4, r8, r4, lr
9001533c:	3c01      	subs	r4, #1
9001533e:	19a4      	adds	r4, r4, r6
90015340:	f100 808c 	bmi.w	9001545c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
90015344:	fb94 fef6 	sdiv	lr, r4, r6
90015348:	fb06 441e 	mls	r4, r6, lr, r4
9001534c:	f8c0 e000 	str.w	lr, [r0]
90015350:	6104      	str	r4, [r0, #16]
90015352:	2d00      	cmp	r5, #0
90015354:	f2c0 8095 	blt.w	90015482 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
90015358:	fb95 f4f6 	sdiv	r4, r5, r6
9001535c:	fb06 5514 	mls	r5, r6, r4, r5
90015360:	6044      	str	r4, [r0, #4]
90015362:	6085      	str	r5, [r0, #8]
90015364:	60c6      	str	r6, [r0, #12]
90015366:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001536a:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001536e:	6945      	ldr	r5, [r0, #20]
90015370:	59d2      	ldr	r2, [r2, r7]
90015372:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
90015376:	eddf 6a4b 	vldr	s13, [pc, #300]	; 900154a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001537a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001537e:	ee07 4a10 	vmov	s14, r4
90015382:	6804      	ldr	r4, [r0, #0]
90015384:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
90015388:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001538c:	ee07 2a90 	vmov	s15, r2
90015390:	ee27 7a26 	vmul.f32	s14, s14, s13
90015394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90015398:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001539c:	edd3 6a00 	vldr	s13, [r3]
900153a0:	eee6 6a07 	vfma.f32	s13, s12, s14
900153a4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
900153a8:	eee6 6a27 	vfma.f32	s13, s12, s15
900153ac:	edc0 6a07 	vstr	s13, [r0, #28]
900153b0:	edd0 6a01 	vldr	s13, [r0, #4]
900153b4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
900153b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900153bc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
900153c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
900153c4:	ed80 6a08 	vstr	s12, [r0, #32]
900153c8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
900153ca:	6242      	str	r2, [r0, #36]	; 0x24
900153cc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
900153d0:	ed93 6a03 	vldr	s12, [r3, #12]
900153d4:	eea5 6a87 	vfma.f32	s12, s11, s14
900153d8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
900153dc:	eea5 6aa7 	vfma.f32	s12, s11, s15
900153e0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
900153e4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
900153e8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
900153ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
900153f0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
900153f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900153f6:	6302      	str	r2, [r0, #48]	; 0x30
900153f8:	ed93 6a06 	vldr	s12, [r3, #24]
900153fc:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
90015400:	eea5 6a87 	vfma.f32	s12, s11, s14
90015404:	eeb0 7a46 	vmov.f32	s14, s12
90015408:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001540c:	eea6 7a27 	vfma.f32	s14, s12, s15
90015410:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90015414:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90015418:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001541c:	eee6 7a87 	vfma.f32	s15, s13, s14
90015420:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
90015424:	6b4b      	ldr	r3, [r1, #52]	; 0x34
90015426:	63c3      	str	r3, [r0, #60]	; 0x3c
90015428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001542c:	2410      	movs	r4, #16
9001542e:	f1c5 0501 	rsb	r5, r5, #1
90015432:	fb9e fef4 	sdiv	lr, lr, r4
90015436:	f015 050f 	ands.w	r5, r5, #15
9001543a:	bf18      	it	ne
9001543c:	2501      	movne	r5, #1
9001543e:	ebae 0e05 	sub.w	lr, lr, r5
90015442:	e753      	b.n	900152ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
90015444:	f04f 0910 	mov.w	r9, #16
90015448:	f1c5 0501 	rsb	r5, r5, #1
9001544c:	fb94 f4f9 	sdiv	r4, r4, r9
90015450:	f015 050f 	ands.w	r5, r5, #15
90015454:	bf18      	it	ne
90015456:	2501      	movne	r5, #1
90015458:	1b64      	subs	r4, r4, r5
9001545a:	e755      	b.n	90015308 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001545c:	4264      	negs	r4, r4
9001545e:	fb94 fef6 	sdiv	lr, r4, r6
90015462:	f1ce 0800 	rsb	r8, lr, #0
90015466:	fb06 441e 	mls	r4, r6, lr, r4
9001546a:	f8c0 8000 	str.w	r8, [r0]
9001546e:	6104      	str	r4, [r0, #16]
90015470:	2c00      	cmp	r4, #0
90015472:	f43f af6e 	beq.w	90015352 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
90015476:	ea6f 0e0e 	mvn.w	lr, lr
9001547a:	1b34      	subs	r4, r6, r4
9001547c:	f8c0 e000 	str.w	lr, [r0]
90015480:	e766      	b.n	90015350 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
90015482:	426d      	negs	r5, r5
90015484:	fb95 f4f6 	sdiv	r4, r5, r6
90015488:	f1c4 0e00 	rsb	lr, r4, #0
9001548c:	fb06 5514 	mls	r5, r6, r4, r5
90015490:	f8c0 e004 	str.w	lr, [r0, #4]
90015494:	6085      	str	r5, [r0, #8]
90015496:	2d00      	cmp	r5, #0
90015498:	f43f af64 	beq.w	90015364 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
9001549c:	43e4      	mvns	r4, r4
9001549e:	1b75      	subs	r5, r6, r5
900154a0:	6044      	str	r4, [r0, #4]
900154a2:	e75e      	b.n	90015362 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
900154a4:	3d800000 	.word	0x3d800000

900154a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
900154a8:	4b01      	ldr	r3, [pc, #4]	; (900154b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
900154aa:	6018      	str	r0, [r3, #0]
900154ac:	4770      	bx	lr
900154ae:	bf00      	nop
900154b0:	24026544 	.word	0x24026544

900154b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
900154b4:	4b06      	ldr	r3, [pc, #24]	; (900154d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
900154b6:	881a      	ldrh	r2, [r3, #0]
900154b8:	4282      	cmp	r2, r0
900154ba:	d807      	bhi.n	900154cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
900154bc:	4b05      	ldr	r3, [pc, #20]	; (900154d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
900154be:	881b      	ldrh	r3, [r3, #0]
900154c0:	4413      	add	r3, r2
900154c2:	4298      	cmp	r0, r3
900154c4:	bfac      	ite	ge
900154c6:	2000      	movge	r0, #0
900154c8:	2001      	movlt	r0, #1
900154ca:	4770      	bx	lr
900154cc:	2000      	movs	r0, #0
900154ce:	4770      	bx	lr
900154d0:	24026564 	.word	0x24026564
900154d4:	24026568 	.word	0x24026568

900154d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
900154d8:	b508      	push	{r3, lr}
900154da:	4601      	mov	r1, r0
900154dc:	f7ff ffea 	bl	900154b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
900154e0:	b118      	cbz	r0, 900154ea <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
900154e2:	4b02      	ldr	r3, [pc, #8]	; (900154ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
900154e4:	681b      	ldr	r3, [r3, #0]
900154e6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
900154ea:	bd08      	pop	{r3, pc}
900154ec:	24026548 	.word	0x24026548

900154f0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
900154f0:	b5f0      	push	{r4, r5, r6, r7, lr}
900154f2:	4c24      	ldr	r4, [pc, #144]	; (90015584 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
900154f4:	6823      	ldr	r3, [r4, #0]
900154f6:	2b00      	cmp	r3, #0
900154f8:	d042      	beq.n	90015580 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
900154fa:	4a23      	ldr	r2, [pc, #140]	; (90015588 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
900154fc:	4d23      	ldr	r5, [pc, #140]	; (9001558c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
900154fe:	8811      	ldrh	r1, [r2, #0]
90015500:	f8b5 c000 	ldrh.w	ip, [r5]
90015504:	4822      	ldr	r0, [pc, #136]	; (90015590 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90015506:	4461      	add	r1, ip
90015508:	1c4a      	adds	r2, r1, #1
9001550a:	008f      	lsls	r7, r1, #2
9001550c:	f022 0201 	bic.w	r2, r2, #1
90015510:	19de      	adds	r6, r3, r7
90015512:	0412      	lsls	r2, r2, #16
90015514:	6006      	str	r6, [r0, #0]
90015516:	4e1f      	ldr	r6, [pc, #124]	; (90015594 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90015518:	0c12      	lsrs	r2, r2, #16
9001551a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001551e:	19da      	adds	r2, r3, r7
90015520:	6032      	str	r2, [r6, #0]
90015522:	220e      	movs	r2, #14
90015524:	fb02 f20c 	mul.w	r2, r2, ip
90015528:	3203      	adds	r2, #3
9001552a:	f022 0203 	bic.w	r2, r2, #3
9001552e:	443a      	add	r2, r7
90015530:	4f19      	ldr	r7, [pc, #100]	; (90015598 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
90015532:	4413      	add	r3, r2
90015534:	603b      	str	r3, [r7, #0]
90015536:	2300      	movs	r3, #0
90015538:	4f18      	ldr	r7, [pc, #96]	; (9001559c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001553a:	469c      	mov	ip, r3
9001553c:	803b      	strh	r3, [r7, #0]
9001553e:	4f18      	ldr	r7, [pc, #96]	; (900155a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90015540:	683f      	ldr	r7, [r7, #0]
90015542:	1aba      	subs	r2, r7, r2
90015544:	4f17      	ldr	r7, [pc, #92]	; (900155a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
90015546:	603a      	str	r2, [r7, #0]
90015548:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001554c:	4a16      	ldr	r2, [pc, #88]	; (900155a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001554e:	8013      	strh	r3, [r2, #0]
90015550:	428b      	cmp	r3, r1
90015552:	d10d      	bne.n	90015570 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
90015554:	882d      	ldrh	r5, [r5, #0]
90015556:	2300      	movs	r3, #0
90015558:	6830      	ldr	r0, [r6, #0]
9001555a:	240e      	movs	r4, #14
9001555c:	429d      	cmp	r5, r3
9001555e:	d90f      	bls.n	90015580 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90015560:	fb04 0203 	mla	r2, r4, r3, r0
90015564:	3301      	adds	r3, #1
90015566:	7b11      	ldrb	r1, [r2, #12]
90015568:	f36f 1145 	bfc	r1, #5, #1
9001556c:	7311      	strb	r1, [r2, #12]
9001556e:	e7f5      	b.n	9001555c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
90015570:	6822      	ldr	r2, [r4, #0]
90015572:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
90015576:	6802      	ldr	r2, [r0, #0]
90015578:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001557c:	3301      	adds	r3, #1
9001557e:	e7e7      	b.n	90015550 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
90015580:	bdf0      	pop	{r4, r5, r6, r7, pc}
90015582:	bf00      	nop
90015584:	24026548 	.word	0x24026548
90015588:	24026564 	.word	0x24026564
9001558c:	24026568 	.word	0x24026568
90015590:	2402655c 	.word	0x2402655c
90015594:	2402654c 	.word	0x2402654c
90015598:	24026554 	.word	0x24026554
9001559c:	24026566 	.word	0x24026566
900155a0:	24026550 	.word	0x24026550
900155a4:	24026560 	.word	0x24026560
900155a8:	24026558 	.word	0x24026558

900155ac <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
900155ac:	4b06      	ldr	r3, [pc, #24]	; (900155c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
900155ae:	681b      	ldr	r3, [r3, #0]
900155b0:	b943      	cbnz	r3, 900155c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900155b2:	b139      	cbz	r1, 900155c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900155b4:	4b05      	ldr	r3, [pc, #20]	; (900155cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
900155b6:	801a      	strh	r2, [r3, #0]
900155b8:	4b05      	ldr	r3, [pc, #20]	; (900155d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
900155ba:	6019      	str	r1, [r3, #0]
900155bc:	4b05      	ldr	r3, [pc, #20]	; (900155d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
900155be:	6018      	str	r0, [r3, #0]
900155c0:	f7ff bf96 	b.w	900154f0 <_ZN8touchgfx6Bitmap10clearCacheEv>
900155c4:	4770      	bx	lr
900155c6:	bf00      	nop
900155c8:	24026554 	.word	0x24026554
900155cc:	24026568 	.word	0x24026568
900155d0:	24026550 	.word	0x24026550
900155d4:	24026548 	.word	0x24026548

900155d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
900155d8:	b470      	push	{r4, r5, r6}
900155da:	4c07      	ldr	r4, [pc, #28]	; (900155f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
900155dc:	4605      	mov	r5, r0
900155de:	4610      	mov	r0, r2
900155e0:	9a03      	ldr	r2, [sp, #12]
900155e2:	6826      	ldr	r6, [r4, #0]
900155e4:	b936      	cbnz	r6, 900155f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
900155e6:	6025      	str	r5, [r4, #0]
900155e8:	4c04      	ldr	r4, [pc, #16]	; (900155fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
900155ea:	8021      	strh	r1, [r4, #0]
900155ec:	4619      	mov	r1, r3
900155ee:	bc70      	pop	{r4, r5, r6}
900155f0:	f7ff bfdc 	b.w	900155ac <_ZN8touchgfx6Bitmap8setCacheEPtmm>
900155f4:	bc70      	pop	{r4, r5, r6}
900155f6:	4770      	bx	lr
900155f8:	2402656c 	.word	0x2402656c
900155fc:	24026564 	.word	0x24026564

90015600 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90015600:	4a12      	ldr	r2, [pc, #72]	; (9001564c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90015602:	8803      	ldrh	r3, [r0, #0]
90015604:	8812      	ldrh	r2, [r2, #0]
90015606:	4293      	cmp	r3, r2
90015608:	d207      	bcs.n	9001561a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001560a:	4a11      	ldr	r2, [pc, #68]	; (90015650 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001560c:	2114      	movs	r1, #20
9001560e:	6812      	ldr	r2, [r2, #0]
90015610:	fb01 2303 	mla	r3, r1, r3, r2
90015614:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90015618:	4770      	bx	lr
9001561a:	490e      	ldr	r1, [pc, #56]	; (90015654 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001561c:	8809      	ldrh	r1, [r1, #0]
9001561e:	4411      	add	r1, r2
90015620:	428b      	cmp	r3, r1
90015622:	da04      	bge.n	9001562e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90015624:	1a9b      	subs	r3, r3, r2
90015626:	4a0c      	ldr	r2, [pc, #48]	; (90015658 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90015628:	210e      	movs	r1, #14
9001562a:	6812      	ldr	r2, [r2, #0]
9001562c:	e7f0      	b.n	90015610 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001562e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015632:	4293      	cmp	r3, r2
90015634:	d108      	bne.n	90015648 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
90015636:	4b09      	ldr	r3, [pc, #36]	; (9001565c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
90015638:	781b      	ldrb	r3, [r3, #0]
9001563a:	b91b      	cbnz	r3, 90015644 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001563c:	4b08      	ldr	r3, [pc, #32]	; (90015660 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001563e:	f9b3 0000 	ldrsh.w	r0, [r3]
90015642:	4770      	bx	lr
90015644:	4b07      	ldr	r3, [pc, #28]	; (90015664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
90015646:	e7fa      	b.n	9001563e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
90015648:	2000      	movs	r0, #0
9001564a:	4770      	bx	lr
9001564c:	24026564 	.word	0x24026564
90015650:	2402656c 	.word	0x2402656c
90015654:	24026568 	.word	0x24026568
90015658:	2402654c 	.word	0x2402654c
9001565c:	240264dc 	.word	0x240264dc
90015660:	240264de 	.word	0x240264de
90015664:	240264e0 	.word	0x240264e0

90015668 <_ZNK8touchgfx6Bitmap9getHeightEv>:
90015668:	4a12      	ldr	r2, [pc, #72]	; (900156b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001566a:	8803      	ldrh	r3, [r0, #0]
9001566c:	8812      	ldrh	r2, [r2, #0]
9001566e:	4293      	cmp	r3, r2
90015670:	d207      	bcs.n	90015682 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
90015672:	4a11      	ldr	r2, [pc, #68]	; (900156b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
90015674:	2114      	movs	r1, #20
90015676:	6812      	ldr	r2, [r2, #0]
90015678:	fb01 2303 	mla	r3, r1, r3, r2
9001567c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
90015680:	4770      	bx	lr
90015682:	490e      	ldr	r1, [pc, #56]	; (900156bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
90015684:	8809      	ldrh	r1, [r1, #0]
90015686:	4411      	add	r1, r2
90015688:	428b      	cmp	r3, r1
9001568a:	da04      	bge.n	90015696 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
9001568c:	1a9b      	subs	r3, r3, r2
9001568e:	4a0c      	ldr	r2, [pc, #48]	; (900156c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90015690:	210e      	movs	r1, #14
90015692:	6812      	ldr	r2, [r2, #0]
90015694:	e7f0      	b.n	90015678 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
90015696:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001569a:	4293      	cmp	r3, r2
9001569c:	d108      	bne.n	900156b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001569e:	4b09      	ldr	r3, [pc, #36]	; (900156c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
900156a0:	781b      	ldrb	r3, [r3, #0]
900156a2:	b91b      	cbnz	r3, 900156ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
900156a4:	4b08      	ldr	r3, [pc, #32]	; (900156c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
900156a6:	f9b3 0000 	ldrsh.w	r0, [r3]
900156aa:	4770      	bx	lr
900156ac:	4b07      	ldr	r3, [pc, #28]	; (900156cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
900156ae:	e7fa      	b.n	900156a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
900156b0:	2000      	movs	r0, #0
900156b2:	4770      	bx	lr
900156b4:	24026564 	.word	0x24026564
900156b8:	2402656c 	.word	0x2402656c
900156bc:	24026568 	.word	0x24026568
900156c0:	2402654c 	.word	0x2402654c
900156c4:	240264dc 	.word	0x240264dc
900156c8:	240264e0 	.word	0x240264e0
900156cc:	240264de 	.word	0x240264de

900156d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
900156d0:	4a1f      	ldr	r2, [pc, #124]	; (90015750 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
900156d2:	b510      	push	{r4, lr}
900156d4:	880b      	ldrh	r3, [r1, #0]
900156d6:	8812      	ldrh	r2, [r2, #0]
900156d8:	4293      	cmp	r3, r2
900156da:	d213      	bcs.n	90015704 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
900156dc:	4a1d      	ldr	r2, [pc, #116]	; (90015754 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
900156de:	2114      	movs	r1, #20
900156e0:	6812      	ldr	r2, [r2, #0]
900156e2:	fb01 2303 	mla	r3, r1, r3, r2
900156e6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
900156ea:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
900156ee:	8a1a      	ldrh	r2, [r3, #16]
900156f0:	8a5b      	ldrh	r3, [r3, #18]
900156f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
900156f6:	8004      	strh	r4, [r0, #0]
900156f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
900156fc:	8041      	strh	r1, [r0, #2]
900156fe:	8082      	strh	r2, [r0, #4]
90015700:	80c3      	strh	r3, [r0, #6]
90015702:	e00e      	b.n	90015722 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90015704:	4914      	ldr	r1, [pc, #80]	; (90015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
90015706:	8809      	ldrh	r1, [r1, #0]
90015708:	4411      	add	r1, r2
9001570a:	428b      	cmp	r3, r1
9001570c:	da0a      	bge.n	90015724 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001570e:	1a9b      	subs	r3, r3, r2
90015710:	4a12      	ldr	r2, [pc, #72]	; (9001575c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90015712:	210e      	movs	r1, #14
90015714:	6812      	ldr	r2, [r2, #0]
90015716:	fb01 2303 	mla	r3, r1, r3, r2
9001571a:	681a      	ldr	r2, [r3, #0]
9001571c:	6002      	str	r2, [r0, #0]
9001571e:	685a      	ldr	r2, [r3, #4]
90015720:	6042      	str	r2, [r0, #4]
90015722:	bd10      	pop	{r4, pc}
90015724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015728:	4293      	cmp	r3, r2
9001572a:	d10b      	bne.n	90015744 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001572c:	4b0c      	ldr	r3, [pc, #48]	; (90015760 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001572e:	f9b3 1000 	ldrsh.w	r1, [r3]
90015732:	4b0c      	ldr	r3, [pc, #48]	; (90015764 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
90015734:	8081      	strh	r1, [r0, #4]
90015736:	f9b3 2000 	ldrsh.w	r2, [r3]
9001573a:	2300      	movs	r3, #0
9001573c:	80c2      	strh	r2, [r0, #6]
9001573e:	8003      	strh	r3, [r0, #0]
90015740:	8043      	strh	r3, [r0, #2]
90015742:	e7ee      	b.n	90015722 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90015744:	2300      	movs	r3, #0
90015746:	8003      	strh	r3, [r0, #0]
90015748:	8043      	strh	r3, [r0, #2]
9001574a:	8083      	strh	r3, [r0, #4]
9001574c:	e7d8      	b.n	90015700 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001574e:	bf00      	nop
90015750:	24026564 	.word	0x24026564
90015754:	2402656c 	.word	0x2402656c
90015758:	24026568 	.word	0x24026568
9001575c:	2402654c 	.word	0x2402654c
90015760:	240264d8 	.word	0x240264d8
90015764:	240264da 	.word	0x240264da

90015768 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
90015768:	4a17      	ldr	r2, [pc, #92]	; (900157c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001576a:	8803      	ldrh	r3, [r0, #0]
9001576c:	8812      	ldrh	r2, [r2, #0]
9001576e:	4293      	cmp	r3, r2
90015770:	d213      	bcs.n	9001579a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
90015772:	4a16      	ldr	r2, [pc, #88]	; (900157cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
90015774:	2114      	movs	r1, #20
90015776:	6812      	ldr	r2, [r2, #0]
90015778:	fb01 2303 	mla	r3, r1, r3, r2
9001577c:	8a1a      	ldrh	r2, [r3, #16]
9001577e:	8919      	ldrh	r1, [r3, #8]
90015780:	f3c2 020c 	ubfx	r2, r2, #0, #13
90015784:	428a      	cmp	r2, r1
90015786:	db1d      	blt.n	900157c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90015788:	8a58      	ldrh	r0, [r3, #18]
9001578a:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001578e:	895b      	ldrh	r3, [r3, #10]
90015790:	4298      	cmp	r0, r3
90015792:	bfac      	ite	ge
90015794:	2000      	movge	r0, #0
90015796:	2001      	movlt	r0, #1
90015798:	4770      	bx	lr
9001579a:	490d      	ldr	r1, [pc, #52]	; (900157d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001579c:	8809      	ldrh	r1, [r1, #0]
9001579e:	4411      	add	r1, r2
900157a0:	428b      	cmp	r3, r1
900157a2:	da0d      	bge.n	900157c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
900157a4:	1a9b      	subs	r3, r3, r2
900157a6:	4a0b      	ldr	r2, [pc, #44]	; (900157d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
900157a8:	210e      	movs	r1, #14
900157aa:	6812      	ldr	r2, [r2, #0]
900157ac:	fb01 2303 	mla	r3, r1, r3, r2
900157b0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
900157b4:	891a      	ldrh	r2, [r3, #8]
900157b6:	4291      	cmp	r1, r2
900157b8:	db04      	blt.n	900157c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
900157ba:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
900157be:	e7e6      	b.n	9001578e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
900157c0:	2000      	movs	r0, #0
900157c2:	4770      	bx	lr
900157c4:	2001      	movs	r0, #1
900157c6:	4770      	bx	lr
900157c8:	24026564 	.word	0x24026564
900157cc:	2402656c 	.word	0x2402656c
900157d0:	24026568 	.word	0x24026568
900157d4:	2402654c 	.word	0x2402654c

900157d8 <_ZNK8touchgfx6Bitmap7getDataEv>:
900157d8:	4a12      	ldr	r2, [pc, #72]	; (90015824 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
900157da:	8803      	ldrh	r3, [r0, #0]
900157dc:	8811      	ldrh	r1, [r2, #0]
900157de:	428b      	cmp	r3, r1
900157e0:	d20b      	bcs.n	900157fa <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
900157e2:	4a11      	ldr	r2, [pc, #68]	; (90015828 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
900157e4:	6812      	ldr	r2, [r2, #0]
900157e6:	b112      	cbz	r2, 900157ee <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
900157e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
900157ec:	b9c0      	cbnz	r0, 90015820 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
900157ee:	4a0f      	ldr	r2, [pc, #60]	; (9001582c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
900157f0:	6811      	ldr	r1, [r2, #0]
900157f2:	2214      	movs	r2, #20
900157f4:	4353      	muls	r3, r2
900157f6:	58c8      	ldr	r0, [r1, r3]
900157f8:	4770      	bx	lr
900157fa:	4a0d      	ldr	r2, [pc, #52]	; (90015830 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
900157fc:	8812      	ldrh	r2, [r2, #0]
900157fe:	440a      	add	r2, r1
90015800:	4293      	cmp	r3, r2
90015802:	da04      	bge.n	9001580e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
90015804:	4a08      	ldr	r2, [pc, #32]	; (90015828 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90015806:	6812      	ldr	r2, [r2, #0]
90015808:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001580c:	4770      	bx	lr
9001580e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015812:	4293      	cmp	r3, r2
90015814:	d103      	bne.n	9001581e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
90015816:	4b07      	ldr	r3, [pc, #28]	; (90015834 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90015818:	681b      	ldr	r3, [r3, #0]
9001581a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001581c:	4770      	bx	lr
9001581e:	2000      	movs	r0, #0
90015820:	4770      	bx	lr
90015822:	bf00      	nop
90015824:	24026564 	.word	0x24026564
90015828:	24026548 	.word	0x24026548
9001582c:	2402656c 	.word	0x2402656c
90015830:	24026568 	.word	0x24026568
90015834:	240264e4 	.word	0x240264e4

90015838 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
90015838:	4b24      	ldr	r3, [pc, #144]	; (900158cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001583a:	8802      	ldrh	r2, [r0, #0]
9001583c:	8818      	ldrh	r0, [r3, #0]
9001583e:	4282      	cmp	r2, r0
90015840:	d221      	bcs.n	90015886 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
90015842:	4b23      	ldr	r3, [pc, #140]	; (900158d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
90015844:	6819      	ldr	r1, [r3, #0]
90015846:	2314      	movs	r3, #20
90015848:	fb03 1302 	mla	r3, r3, r2, r1
9001584c:	6858      	ldr	r0, [r3, #4]
9001584e:	2800      	cmp	r0, #0
90015850:	d03a      	beq.n	900158c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90015852:	4920      	ldr	r1, [pc, #128]	; (900158d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90015854:	6809      	ldr	r1, [r1, #0]
90015856:	2900      	cmp	r1, #0
90015858:	d036      	beq.n	900158c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001585a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001585e:	2900      	cmp	r1, #0
90015860:	d032      	beq.n	900158c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90015862:	891a      	ldrh	r2, [r3, #8]
90015864:	8958      	ldrh	r0, [r3, #10]
90015866:	4350      	muls	r0, r2
90015868:	7c5a      	ldrb	r2, [r3, #17]
9001586a:	7cdb      	ldrb	r3, [r3, #19]
9001586c:	0952      	lsrs	r2, r2, #5
9001586e:	f3c3 1342 	ubfx	r3, r3, #5, #3
90015872:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90015876:	2b0b      	cmp	r3, #11
90015878:	bf18      	it	ne
9001587a:	0040      	lslne	r0, r0, #1
9001587c:	3003      	adds	r0, #3
9001587e:	f020 0003 	bic.w	r0, r0, #3
90015882:	4408      	add	r0, r1
90015884:	4770      	bx	lr
90015886:	4b14      	ldr	r3, [pc, #80]	; (900158d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
90015888:	881b      	ldrh	r3, [r3, #0]
9001588a:	4403      	add	r3, r0
9001588c:	429a      	cmp	r2, r3
9001588e:	da1a      	bge.n	900158c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90015890:	4b12      	ldr	r3, [pc, #72]	; (900158dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
90015892:	1a10      	subs	r0, r2, r0
90015894:	210e      	movs	r1, #14
90015896:	681b      	ldr	r3, [r3, #0]
90015898:	fb01 3000 	mla	r0, r1, r0, r3
9001589c:	7b03      	ldrb	r3, [r0, #12]
9001589e:	f003 031f 	and.w	r3, r3, #31
900158a2:	2b0b      	cmp	r3, #11
900158a4:	d10b      	bne.n	900158be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
900158a6:	8903      	ldrh	r3, [r0, #8]
900158a8:	8940      	ldrh	r0, [r0, #10]
900158aa:	4358      	muls	r0, r3
900158ac:	4b09      	ldr	r3, [pc, #36]	; (900158d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
900158ae:	3003      	adds	r0, #3
900158b0:	6819      	ldr	r1, [r3, #0]
900158b2:	f020 0303 	bic.w	r3, r0, #3
900158b6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
900158ba:	4418      	add	r0, r3
900158bc:	4770      	bx	lr
900158be:	2b0d      	cmp	r3, #13
900158c0:	d101      	bne.n	900158c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900158c2:	300d      	adds	r0, #13
900158c4:	4770      	bx	lr
900158c6:	2000      	movs	r0, #0
900158c8:	4770      	bx	lr
900158ca:	bf00      	nop
900158cc:	24026564 	.word	0x24026564
900158d0:	2402656c 	.word	0x2402656c
900158d4:	24026548 	.word	0x24026548
900158d8:	24026568 	.word	0x24026568
900158dc:	2402654c 	.word	0x2402654c

900158e0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
900158e0:	4a17      	ldr	r2, [pc, #92]	; (90015940 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
900158e2:	b510      	push	{r4, lr}
900158e4:	8803      	ldrh	r3, [r0, #0]
900158e6:	8812      	ldrh	r2, [r2, #0]
900158e8:	4293      	cmp	r3, r2
900158ea:	d20c      	bcs.n	90015906 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
900158ec:	4a15      	ldr	r2, [pc, #84]	; (90015944 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
900158ee:	2114      	movs	r1, #20
900158f0:	6812      	ldr	r2, [r2, #0]
900158f2:	fb01 2303 	mla	r3, r1, r3, r2
900158f6:	7c58      	ldrb	r0, [r3, #17]
900158f8:	0942      	lsrs	r2, r0, #5
900158fa:	7cd8      	ldrb	r0, [r3, #19]
900158fc:	f3c0 1042 	ubfx	r0, r0, #5, #3
90015900:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
90015904:	bd10      	pop	{r4, pc}
90015906:	4910      	ldr	r1, [pc, #64]	; (90015948 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90015908:	8809      	ldrh	r1, [r1, #0]
9001590a:	4411      	add	r1, r2
9001590c:	428b      	cmp	r3, r1
9001590e:	da09      	bge.n	90015924 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90015910:	1a9b      	subs	r3, r3, r2
90015912:	4a0e      	ldr	r2, [pc, #56]	; (9001594c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
90015914:	210e      	movs	r1, #14
90015916:	6812      	ldr	r2, [r2, #0]
90015918:	fb01 2303 	mla	r3, r1, r3, r2
9001591c:	7b18      	ldrb	r0, [r3, #12]
9001591e:	f000 001f 	and.w	r0, r0, #31
90015922:	e7ef      	b.n	90015904 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90015924:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90015928:	4293      	cmp	r3, r2
9001592a:	d106      	bne.n	9001593a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001592c:	f7fa fb2a 	bl	9000ff84 <_ZN8touchgfx3HAL3lcdEv>
90015930:	6803      	ldr	r3, [r0, #0]
90015932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90015936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015938:	4718      	bx	r3
9001593a:	2000      	movs	r0, #0
9001593c:	e7e2      	b.n	90015904 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001593e:	bf00      	nop
90015940:	24026564 	.word	0x24026564
90015944:	2402656c 	.word	0x2402656c
90015948:	24026568 	.word	0x24026568
9001594c:	2402654c 	.word	0x2402654c

90015950 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90015950:	2010      	movs	r0, #16
90015952:	4770      	bx	lr

90015954 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
90015954:	4b02      	ldr	r3, [pc, #8]	; (90015960 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
90015956:	8818      	ldrh	r0, [r3, #0]
90015958:	0040      	lsls	r0, r0, #1
9001595a:	b280      	uxth	r0, r0
9001595c:	4770      	bx	lr
9001595e:	bf00      	nop
90015960:	240264de 	.word	0x240264de

90015964 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
90015964:	2bff      	cmp	r3, #255	; 0xff
90015966:	d050      	beq.n	90015a0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
90015968:	2a0b      	cmp	r2, #11
9001596a:	d04a      	beq.n	90015a02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001596c:	d80e      	bhi.n	9001598c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001596e:	2a03      	cmp	r2, #3
90015970:	d03f      	beq.n	900159f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
90015972:	d804      	bhi.n	9001597e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
90015974:	2a01      	cmp	r2, #1
90015976:	d03e      	beq.n	900159f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
90015978:	d93f      	bls.n	900159fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001597a:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001597c:	4770      	bx	lr
9001597e:	2a09      	cmp	r2, #9
90015980:	d03f      	beq.n	90015a02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90015982:	d83c      	bhi.n	900159fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
90015984:	2a08      	cmp	r2, #8
90015986:	d03a      	beq.n	900159fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
90015988:	2000      	movs	r0, #0
9001598a:	4770      	bx	lr
9001598c:	2a2f      	cmp	r2, #47	; 0x2f
9001598e:	d024      	beq.n	900159da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
90015990:	d80d      	bhi.n	900159ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
90015992:	2a2d      	cmp	r2, #45	; 0x2d
90015994:	d014      	beq.n	900159c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
90015996:	d826      	bhi.n	900159e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
90015998:	2a2c      	cmp	r2, #44	; 0x2c
9001599a:	d1f5      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001599c:	684b      	ldr	r3, [r1, #4]
9001599e:	781b      	ldrb	r3, [r3, #0]
900159a0:	2b01      	cmp	r3, #1
900159a2:	d018      	beq.n	900159d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
900159a4:	d323      	bcc.n	900159ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
900159a6:	2b02      	cmp	r3, #2
900159a8:	d1ee      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900159aa:	6880      	ldr	r0, [r0, #8]
900159ac:	4770      	bx	lr
900159ae:	2a31      	cmp	r2, #49	; 0x31
900159b0:	d004      	beq.n	900159bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
900159b2:	d328      	bcc.n	90015a06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900159b4:	2a32      	cmp	r2, #50	; 0x32
900159b6:	d026      	beq.n	90015a06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900159b8:	2a33      	cmp	r2, #51	; 0x33
900159ba:	d1e5      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900159bc:	6f00      	ldr	r0, [r0, #112]	; 0x70
900159be:	4770      	bx	lr
900159c0:	684b      	ldr	r3, [r1, #4]
900159c2:	781b      	ldrb	r3, [r3, #0]
900159c4:	2b01      	cmp	r3, #1
900159c6:	d004      	beq.n	900159d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
900159c8:	d30b      	bcc.n	900159e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
900159ca:	2b02      	cmp	r3, #2
900159cc:	d1dc      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900159ce:	6900      	ldr	r0, [r0, #16]
900159d0:	4770      	bx	lr
900159d2:	6a00      	ldr	r0, [r0, #32]
900159d4:	4770      	bx	lr
900159d6:	6980      	ldr	r0, [r0, #24]
900159d8:	4770      	bx	lr
900159da:	684b      	ldr	r3, [r1, #4]
900159dc:	781b      	ldrb	r3, [r3, #0]
900159de:	2b00      	cmp	r3, #0
900159e0:	d1d2      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900159e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
900159e4:	4770      	bx	lr
900159e6:	684b      	ldr	r3, [r1, #4]
900159e8:	781b      	ldrb	r3, [r3, #0]
900159ea:	2b00      	cmp	r3, #0
900159ec:	d1cc      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900159ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
900159f0:	4770      	bx	lr
900159f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
900159f4:	4770      	bx	lr
900159f6:	6d00      	ldr	r0, [r0, #80]	; 0x50
900159f8:	4770      	bx	lr
900159fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
900159fc:	4770      	bx	lr
900159fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
90015a00:	4770      	bx	lr
90015a02:	6e00      	ldr	r0, [r0, #96]	; 0x60
90015a04:	4770      	bx	lr
90015a06:	6e80      	ldr	r0, [r0, #104]	; 0x68
90015a08:	4770      	bx	lr
90015a0a:	2a0b      	cmp	r2, #11
90015a0c:	d049      	beq.n	90015aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90015a0e:	d80e      	bhi.n	90015a2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90015a10:	2a03      	cmp	r2, #3
90015a12:	d040      	beq.n	90015a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
90015a14:	d804      	bhi.n	90015a20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
90015a16:	2a01      	cmp	r2, #1
90015a18:	d03f      	beq.n	90015a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
90015a1a:	d940      	bls.n	90015a9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
90015a1c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90015a1e:	4770      	bx	lr
90015a20:	2a09      	cmp	r2, #9
90015a22:	d03e      	beq.n	90015aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90015a24:	d801      	bhi.n	90015a2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
90015a26:	2a08      	cmp	r2, #8
90015a28:	d1ae      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a2a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
90015a2c:	4770      	bx	lr
90015a2e:	2a2f      	cmp	r2, #47	; 0x2f
90015a30:	d024      	beq.n	90015a7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
90015a32:	d80d      	bhi.n	90015a50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
90015a34:	2a2d      	cmp	r2, #45	; 0x2d
90015a36:	d014      	beq.n	90015a62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
90015a38:	d826      	bhi.n	90015a88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
90015a3a:	2a2c      	cmp	r2, #44	; 0x2c
90015a3c:	d1a4      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a3e:	684b      	ldr	r3, [r1, #4]
90015a40:	781b      	ldrb	r3, [r3, #0]
90015a42:	2b01      	cmp	r3, #1
90015a44:	d018      	beq.n	90015a78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
90015a46:	d324      	bcc.n	90015a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
90015a48:	2b02      	cmp	r3, #2
90015a4a:	d19d      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a4c:	68c0      	ldr	r0, [r0, #12]
90015a4e:	4770      	bx	lr
90015a50:	2a31      	cmp	r2, #49	; 0x31
90015a52:	d004      	beq.n	90015a5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
90015a54:	d327      	bcc.n	90015aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90015a56:	2a32      	cmp	r2, #50	; 0x32
90015a58:	d025      	beq.n	90015aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90015a5a:	2a33      	cmp	r2, #51	; 0x33
90015a5c:	d194      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a5e:	6f40      	ldr	r0, [r0, #116]	; 0x74
90015a60:	4770      	bx	lr
90015a62:	684b      	ldr	r3, [r1, #4]
90015a64:	781b      	ldrb	r3, [r3, #0]
90015a66:	2b01      	cmp	r3, #1
90015a68:	d004      	beq.n	90015a74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
90015a6a:	d30b      	bcc.n	90015a84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
90015a6c:	2b02      	cmp	r3, #2
90015a6e:	d18b      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a70:	6940      	ldr	r0, [r0, #20]
90015a72:	4770      	bx	lr
90015a74:	6a40      	ldr	r0, [r0, #36]	; 0x24
90015a76:	4770      	bx	lr
90015a78:	69c0      	ldr	r0, [r0, #28]
90015a7a:	4770      	bx	lr
90015a7c:	684b      	ldr	r3, [r1, #4]
90015a7e:	781b      	ldrb	r3, [r3, #0]
90015a80:	2b00      	cmp	r3, #0
90015a82:	d181      	bne.n	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a84:	6b40      	ldr	r0, [r0, #52]	; 0x34
90015a86:	4770      	bx	lr
90015a88:	684b      	ldr	r3, [r1, #4]
90015a8a:	781b      	ldrb	r3, [r3, #0]
90015a8c:	2b00      	cmp	r3, #0
90015a8e:	f47f af7b 	bne.w	90015988 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90015a92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
90015a94:	4770      	bx	lr
90015a96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
90015a98:	4770      	bx	lr
90015a9a:	6d40      	ldr	r0, [r0, #84]	; 0x54
90015a9c:	4770      	bx	lr
90015a9e:	6c40      	ldr	r0, [r0, #68]	; 0x44
90015aa0:	4770      	bx	lr
90015aa2:	6e40      	ldr	r0, [r0, #100]	; 0x64
90015aa4:	4770      	bx	lr
90015aa6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
90015aa8:	4770      	bx	lr

90015aaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90015aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015aae:	b087      	sub	sp, #28
90015ab0:	9815      	ldr	r0, [sp, #84]	; 0x54
90015ab2:	9205      	str	r2, [sp, #20]
90015ab4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90015ab8:	9101      	str	r1, [sp, #4]
90015aba:	9202      	str	r2, [sp, #8]
90015abc:	6841      	ldr	r1, [r0, #4]
90015abe:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90015ac2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90015ac6:	fb01 2404 	mla	r4, r1, r4, r2
90015aca:	6802      	ldr	r2, [r0, #0]
90015acc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90015ad0:	f8de 2000 	ldr.w	r2, [lr]
90015ad4:	9203      	str	r2, [sp, #12]
90015ad6:	f8de 2004 	ldr.w	r2, [lr, #4]
90015ada:	3204      	adds	r2, #4
90015adc:	9204      	str	r2, [sp, #16]
90015ade:	9a02      	ldr	r2, [sp, #8]
90015ae0:	43d6      	mvns	r6, r2
90015ae2:	b2f6      	uxtb	r6, r6
90015ae4:	9a01      	ldr	r2, [sp, #4]
90015ae6:	2a00      	cmp	r2, #0
90015ae8:	dc03      	bgt.n	90015af2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90015aea:	9a05      	ldr	r2, [sp, #20]
90015aec:	2a00      	cmp	r2, #0
90015aee:	f340 8129 	ble.w	90015d44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90015af2:	9a11      	ldr	r2, [sp, #68]	; 0x44
90015af4:	f9be c008 	ldrsh.w	ip, [lr, #8]
90015af8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90015afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
90015afe:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90015b02:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90015b06:	2b00      	cmp	r3, #0
90015b08:	dd0e      	ble.n	90015b28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90015b0a:	1408      	asrs	r0, r1, #16
90015b0c:	d405      	bmi.n	90015b1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90015b0e:	4560      	cmp	r0, ip
90015b10:	da03      	bge.n	90015b1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90015b12:	1410      	asrs	r0, r2, #16
90015b14:	d401      	bmi.n	90015b1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90015b16:	42b8      	cmp	r0, r7
90015b18:	db07      	blt.n	90015b2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90015b1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
90015b1c:	3b01      	subs	r3, #1
90015b1e:	3402      	adds	r4, #2
90015b20:	4401      	add	r1, r0
90015b22:	9814      	ldr	r0, [sp, #80]	; 0x50
90015b24:	4402      	add	r2, r0
90015b26:	e7ee      	b.n	90015b06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90015b28:	d071      	beq.n	90015c0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90015b2a:	1e58      	subs	r0, r3, #1
90015b2c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90015b2e:	fb05 1500 	mla	r5, r5, r0, r1
90015b32:	142d      	asrs	r5, r5, #16
90015b34:	d45f      	bmi.n	90015bf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90015b36:	4565      	cmp	r5, ip
90015b38:	da5d      	bge.n	90015bf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90015b3a:	9d14      	ldr	r5, [sp, #80]	; 0x50
90015b3c:	fb05 2000 	mla	r0, r5, r0, r2
90015b40:	1400      	asrs	r0, r0, #16
90015b42:	d458      	bmi.n	90015bf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90015b44:	42b8      	cmp	r0, r7
90015b46:	da56      	bge.n	90015bf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90015b48:	4699      	mov	r9, r3
90015b4a:	46a2      	mov	sl, r4
90015b4c:	f8bd b008 	ldrh.w	fp, [sp, #8]
90015b50:	f1b9 0f00 	cmp.w	r9, #0
90015b54:	dd57      	ble.n	90015c06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
90015b56:	ea4f 4c22 	mov.w	ip, r2, asr #16
90015b5a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90015b5e:	9803      	ldr	r0, [sp, #12]
90015b60:	140d      	asrs	r5, r1, #16
90015b62:	f109 39ff 	add.w	r9, r9, #4294967295
90015b66:	fb07 000c 	mla	r0, r7, ip, r0
90015b6a:	5d40      	ldrb	r0, [r0, r5]
90015b6c:	9d04      	ldr	r5, [sp, #16]
90015b6e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90015b72:	f8ba 5000 	ldrh.w	r5, [sl]
90015b76:	ea4f 2c20 	mov.w	ip, r0, asr #8
90015b7a:	122f      	asrs	r7, r5, #8
90015b7c:	ea4f 08e5 	mov.w	r8, r5, asr #3
90015b80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90015b84:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90015b88:	00ed      	lsls	r5, r5, #3
90015b8a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90015b8e:	fb17 f706 	smulbb	r7, r7, r6
90015b92:	b2ed      	uxtb	r5, r5
90015b94:	fb18 f806 	smulbb	r8, r8, r6
90015b98:	fb0c 7c0b 	mla	ip, ip, fp, r7
90015b9c:	10c7      	asrs	r7, r0, #3
90015b9e:	fb15 f506 	smulbb	r5, r5, r6
90015ba2:	00c0      	lsls	r0, r0, #3
90015ba4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90015ba8:	fa1f fc8c 	uxth.w	ip, ip
90015bac:	b2c0      	uxtb	r0, r0
90015bae:	fb07 870b 	mla	r7, r7, fp, r8
90015bb2:	fb00 500b 	mla	r0, r0, fp, r5
90015bb6:	f10c 0501 	add.w	r5, ip, #1
90015bba:	b2bf      	uxth	r7, r7
90015bbc:	b280      	uxth	r0, r0
90015bbe:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90015bc2:	f107 0801 	add.w	r8, r7, #1
90015bc6:	1c45      	adds	r5, r0, #1
90015bc8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
90015bcc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90015bd0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90015bd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
90015bd6:	ea4f 1858 	mov.w	r8, r8, lsr #5
90015bda:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90015bde:	4401      	add	r1, r0
90015be0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90015be4:	9814      	ldr	r0, [sp, #80]	; 0x50
90015be6:	ea45 0c0c 	orr.w	ip, r5, ip
90015bea:	4402      	add	r2, r0
90015bec:	ea4c 0c08 	orr.w	ip, ip, r8
90015bf0:	f82a cb02 	strh.w	ip, [sl], #2
90015bf4:	e7ac      	b.n	90015b50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90015bf6:	f04f 0800 	mov.w	r8, #0
90015bfa:	f8bd a008 	ldrh.w	sl, [sp, #8]
90015bfe:	eb03 0008 	add.w	r0, r3, r8
90015c02:	2800      	cmp	r0, #0
90015c04:	dc41      	bgt.n	90015c8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90015c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90015c0a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90015c0e:	9b01      	ldr	r3, [sp, #4]
90015c10:	2b00      	cmp	r3, #0
90015c12:	f340 8097 	ble.w	90015d44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90015c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90015c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015c1c:	ee30 0a04 	vadd.f32	s0, s0, s8
90015c20:	ee70 0aa4 	vadd.f32	s1, s1, s9
90015c24:	eef0 6a62 	vmov.f32	s13, s5
90015c28:	eec7 7a00 	vdiv.f32	s15, s14, s0
90015c2c:	ee31 1a05 	vadd.f32	s2, s2, s10
90015c30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90015c34:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90015c38:	eef0 6a43 	vmov.f32	s13, s6
90015c3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90015c40:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90015c44:	ee20 7aa7 	vmul.f32	s14, s1, s15
90015c48:	ee61 7a27 	vmul.f32	s15, s2, s15
90015c4c:	ee77 2a62 	vsub.f32	s5, s14, s5
90015c50:	ee37 3ac3 	vsub.f32	s6, s15, s6
90015c54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90015c58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90015c5c:	ee12 2a90 	vmov	r2, s5
90015c60:	eef0 2a47 	vmov.f32	s5, s14
90015c64:	fb92 f3f3 	sdiv	r3, r2, r3
90015c68:	ee13 2a10 	vmov	r2, s6
90015c6c:	9313      	str	r3, [sp, #76]	; 0x4c
90015c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015c70:	eeb0 3a67 	vmov.f32	s6, s15
90015c74:	fb92 f3f3 	sdiv	r3, r2, r3
90015c78:	9314      	str	r3, [sp, #80]	; 0x50
90015c7a:	9b01      	ldr	r3, [sp, #4]
90015c7c:	9a05      	ldr	r2, [sp, #20]
90015c7e:	3b01      	subs	r3, #1
90015c80:	9301      	str	r3, [sp, #4]
90015c82:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015c84:	bf08      	it	eq
90015c86:	4613      	moveq	r3, r2
90015c88:	e72c      	b.n	90015ae4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90015c8a:	140f      	asrs	r7, r1, #16
90015c8c:	d453      	bmi.n	90015d36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90015c8e:	f8de 5008 	ldr.w	r5, [lr, #8]
90015c92:	42bd      	cmp	r5, r7
90015c94:	dd4f      	ble.n	90015d36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90015c96:	ea5f 4c22 	movs.w	ip, r2, asr #16
90015c9a:	d44c      	bmi.n	90015d36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90015c9c:	f8de 000c 	ldr.w	r0, [lr, #12]
90015ca0:	4560      	cmp	r0, ip
90015ca2:	dd48      	ble.n	90015d36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90015ca4:	9803      	ldr	r0, [sp, #12]
90015ca6:	b22d      	sxth	r5, r5
90015ca8:	fb0c 0505 	mla	r5, ip, r5, r0
90015cac:	5de8      	ldrb	r0, [r5, r7]
90015cae:	9d04      	ldr	r5, [sp, #16]
90015cb0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90015cb4:	f06f 0501 	mvn.w	r5, #1
90015cb8:	fb05 fb08 	mul.w	fp, r5, r8
90015cbc:	ea4f 2c20 	mov.w	ip, r0, asr #8
90015cc0:	f834 500b 	ldrh.w	r5, [r4, fp]
90015cc4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90015cc8:	122f      	asrs	r7, r5, #8
90015cca:	ea4f 09e5 	mov.w	r9, r5, asr #3
90015cce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90015cd2:	00ed      	lsls	r5, r5, #3
90015cd4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90015cd8:	fb17 f706 	smulbb	r7, r7, r6
90015cdc:	b2ed      	uxtb	r5, r5
90015cde:	fb19 f906 	smulbb	r9, r9, r6
90015ce2:	fb0c 7c0a 	mla	ip, ip, sl, r7
90015ce6:	10c7      	asrs	r7, r0, #3
90015ce8:	fb15 f506 	smulbb	r5, r5, r6
90015cec:	00c0      	lsls	r0, r0, #3
90015cee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90015cf2:	fa1f fc8c 	uxth.w	ip, ip
90015cf6:	b2c0      	uxtb	r0, r0
90015cf8:	fb07 970a 	mla	r7, r7, sl, r9
90015cfc:	fb00 500a 	mla	r0, r0, sl, r5
90015d00:	f10c 0501 	add.w	r5, ip, #1
90015d04:	b2bf      	uxth	r7, r7
90015d06:	b280      	uxth	r0, r0
90015d08:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90015d0c:	f107 0901 	add.w	r9, r7, #1
90015d10:	1c45      	adds	r5, r0, #1
90015d12:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90015d16:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90015d1a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90015d1e:	ea4f 1959 	mov.w	r9, r9, lsr #5
90015d22:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90015d26:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90015d2a:	ea45 0c0c 	orr.w	ip, r5, ip
90015d2e:	ea4c 0c09 	orr.w	ip, ip, r9
90015d32:	f824 c00b 	strh.w	ip, [r4, fp]
90015d36:	9813      	ldr	r0, [sp, #76]	; 0x4c
90015d38:	f108 38ff 	add.w	r8, r8, #4294967295
90015d3c:	4401      	add	r1, r0
90015d3e:	9814      	ldr	r0, [sp, #80]	; 0x50
90015d40:	4402      	add	r2, r0
90015d42:	e75c      	b.n	90015bfe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90015d44:	b007      	add	sp, #28
90015d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90015d4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90015d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015d4e:	b085      	sub	sp, #20
90015d50:	4693      	mov	fp, r2
90015d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90015d56:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90015d58:	9d16      	ldr	r5, [sp, #88]	; 0x58
90015d5a:	6870      	ldr	r0, [r6, #4]
90015d5c:	9100      	str	r1, [sp, #0]
90015d5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90015d62:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90015d66:	fb00 2404 	mla	r4, r0, r4, r2
90015d6a:	6832      	ldr	r2, [r6, #0]
90015d6c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90015d70:	682a      	ldr	r2, [r5, #0]
90015d72:	9201      	str	r2, [sp, #4]
90015d74:	686a      	ldr	r2, [r5, #4]
90015d76:	3204      	adds	r2, #4
90015d78:	9202      	str	r2, [sp, #8]
90015d7a:	9a00      	ldr	r2, [sp, #0]
90015d7c:	2a00      	cmp	r2, #0
90015d7e:	dc03      	bgt.n	90015d88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90015d80:	f1bb 0f00 	cmp.w	fp, #0
90015d84:	f340 80a0 	ble.w	90015ec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
90015d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90015d8a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90015d8e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90015d92:	9a10      	ldr	r2, [sp, #64]	; 0x40
90015d94:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90015d98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90015d9c:	2b00      	cmp	r3, #0
90015d9e:	dd0c      	ble.n	90015dba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90015da0:	1406      	asrs	r6, r0, #16
90015da2:	d405      	bmi.n	90015db0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90015da4:	454e      	cmp	r6, r9
90015da6:	da03      	bge.n	90015db0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90015da8:	1416      	asrs	r6, r2, #16
90015daa:	d401      	bmi.n	90015db0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90015dac:	4546      	cmp	r6, r8
90015dae:	db05      	blt.n	90015dbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90015db0:	4470      	add	r0, lr
90015db2:	4462      	add	r2, ip
90015db4:	3b01      	subs	r3, #1
90015db6:	3402      	adds	r4, #2
90015db8:	e7f0      	b.n	90015d9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90015dba:	d00f      	beq.n	90015ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90015dbc:	1e5e      	subs	r6, r3, #1
90015dbe:	fb0e 0706 	mla	r7, lr, r6, r0
90015dc2:	143f      	asrs	r7, r7, #16
90015dc4:	d541      	bpl.n	90015e4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
90015dc6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90015dca:	4698      	mov	r8, r3
90015dcc:	9603      	str	r6, [sp, #12]
90015dce:	f1b8 0f00 	cmp.w	r8, #0
90015dd2:	dc59      	bgt.n	90015e88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90015dd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90015dd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90015ddc:	9b00      	ldr	r3, [sp, #0]
90015dde:	2b00      	cmp	r3, #0
90015de0:	dd72      	ble.n	90015ec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
90015de2:	ee30 0a04 	vadd.f32	s0, s0, s8
90015de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90015de8:	ee70 0aa4 	vadd.f32	s1, s1, s9
90015dec:	eeb0 6a62 	vmov.f32	s12, s5
90015df0:	eec6 7a80 	vdiv.f32	s15, s13, s0
90015df4:	ee31 1a05 	vadd.f32	s2, s2, s10
90015df8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90015dfc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90015e00:	eeb0 6a43 	vmov.f32	s12, s6
90015e04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90015e08:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90015e0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90015e10:	ee61 7a27 	vmul.f32	s15, s2, s15
90015e14:	ee77 2a62 	vsub.f32	s5, s14, s5
90015e18:	ee37 3ac3 	vsub.f32	s6, s15, s6
90015e1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90015e20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90015e24:	ee12 2a90 	vmov	r2, s5
90015e28:	eef0 2a47 	vmov.f32	s5, s14
90015e2c:	fb92 fef3 	sdiv	lr, r2, r3
90015e30:	ee13 2a10 	vmov	r2, s6
90015e34:	eeb0 3a67 	vmov.f32	s6, s15
90015e38:	fb92 fcf3 	sdiv	ip, r2, r3
90015e3c:	9b00      	ldr	r3, [sp, #0]
90015e3e:	3b01      	subs	r3, #1
90015e40:	9300      	str	r3, [sp, #0]
90015e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90015e44:	bf08      	it	eq
90015e46:	465b      	moveq	r3, fp
90015e48:	e797      	b.n	90015d7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90015e4a:	454f      	cmp	r7, r9
90015e4c:	dabb      	bge.n	90015dc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90015e4e:	fb0c 2606 	mla	r6, ip, r6, r2
90015e52:	1436      	asrs	r6, r6, #16
90015e54:	d4b7      	bmi.n	90015dc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90015e56:	4546      	cmp	r6, r8
90015e58:	dab5      	bge.n	90015dc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90015e5a:	461e      	mov	r6, r3
90015e5c:	46a0      	mov	r8, r4
90015e5e:	2e00      	cmp	r6, #0
90015e60:	ddb8      	ble.n	90015dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90015e62:	1417      	asrs	r7, r2, #16
90015e64:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90015e68:	9901      	ldr	r1, [sp, #4]
90015e6a:	ea4f 4920 	mov.w	r9, r0, asr #16
90015e6e:	4462      	add	r2, ip
90015e70:	4470      	add	r0, lr
90015e72:	fb0a 1707 	mla	r7, sl, r7, r1
90015e76:	9902      	ldr	r1, [sp, #8]
90015e78:	3e01      	subs	r6, #1
90015e7a:	f817 7009 	ldrb.w	r7, [r7, r9]
90015e7e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90015e82:	f828 7b02 	strh.w	r7, [r8], #2
90015e86:	e7ea      	b.n	90015e5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
90015e88:	ea5f 4920 	movs.w	r9, r0, asr #16
90015e8c:	d417      	bmi.n	90015ebe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90015e8e:	68ae      	ldr	r6, [r5, #8]
90015e90:	454e      	cmp	r6, r9
90015e92:	dd14      	ble.n	90015ebe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90015e94:	ea5f 4a22 	movs.w	sl, r2, asr #16
90015e98:	d411      	bmi.n	90015ebe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90015e9a:	68ef      	ldr	r7, [r5, #12]
90015e9c:	4557      	cmp	r7, sl
90015e9e:	dd0e      	ble.n	90015ebe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90015ea0:	9f01      	ldr	r7, [sp, #4]
90015ea2:	b236      	sxth	r6, r6
90015ea4:	f06f 0101 	mvn.w	r1, #1
90015ea8:	fb0a 7606 	mla	r6, sl, r6, r7
90015eac:	9f02      	ldr	r7, [sp, #8]
90015eae:	f816 6009 	ldrb.w	r6, [r6, r9]
90015eb2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90015eb6:	fb01 f608 	mul.w	r6, r1, r8
90015eba:	9903      	ldr	r1, [sp, #12]
90015ebc:	538f      	strh	r7, [r1, r6]
90015ebe:	4470      	add	r0, lr
90015ec0:	4462      	add	r2, ip
90015ec2:	f108 38ff 	add.w	r8, r8, #4294967295
90015ec6:	e782      	b.n	90015dce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90015ec8:	b005      	add	sp, #20
90015eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90015ece <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90015ece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015ed2:	b087      	sub	sp, #28
90015ed4:	9c15      	ldr	r4, [sp, #84]	; 0x54
90015ed6:	9205      	str	r2, [sp, #20]
90015ed8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90015edc:	9102      	str	r1, [sp, #8]
90015ede:	9203      	str	r2, [sp, #12]
90015ee0:	6861      	ldr	r1, [r4, #4]
90015ee2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90015ee6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90015eea:	fb01 2000 	mla	r0, r1, r0, r2
90015eee:	6822      	ldr	r2, [r4, #0]
90015ef0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
90015ef4:	9200      	str	r2, [sp, #0]
90015ef6:	f8dc 2000 	ldr.w	r2, [ip]
90015efa:	9204      	str	r2, [sp, #16]
90015efc:	f8dc 2004 	ldr.w	r2, [ip, #4]
90015f00:	3204      	adds	r2, #4
90015f02:	9201      	str	r2, [sp, #4]
90015f04:	9a03      	ldr	r2, [sp, #12]
90015f06:	43d5      	mvns	r5, r2
90015f08:	b2ed      	uxtb	r5, r5
90015f0a:	9a02      	ldr	r2, [sp, #8]
90015f0c:	2a00      	cmp	r2, #0
90015f0e:	dc03      	bgt.n	90015f18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90015f10:	9a05      	ldr	r2, [sp, #20]
90015f12:	2a00      	cmp	r2, #0
90015f14:	f340 812c 	ble.w	90016170 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90015f18:	9a11      	ldr	r2, [sp, #68]	; 0x44
90015f1a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90015f1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90015f22:	9a12      	ldr	r2, [sp, #72]	; 0x48
90015f24:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90015f28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90015f2c:	2b00      	cmp	r3, #0
90015f2e:	dd10      	ble.n	90015f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90015f30:	140c      	asrs	r4, r1, #16
90015f32:	d405      	bmi.n	90015f40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90015f34:	4574      	cmp	r4, lr
90015f36:	da03      	bge.n	90015f40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90015f38:	1414      	asrs	r4, r2, #16
90015f3a:	d401      	bmi.n	90015f40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90015f3c:	42bc      	cmp	r4, r7
90015f3e:	db09      	blt.n	90015f54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90015f40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90015f42:	3b01      	subs	r3, #1
90015f44:	9800      	ldr	r0, [sp, #0]
90015f46:	4421      	add	r1, r4
90015f48:	9c14      	ldr	r4, [sp, #80]	; 0x50
90015f4a:	3002      	adds	r0, #2
90015f4c:	4422      	add	r2, r4
90015f4e:	9000      	str	r0, [sp, #0]
90015f50:	e7ec      	b.n	90015f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90015f52:	d071      	beq.n	90016038 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
90015f54:	1e5c      	subs	r4, r3, #1
90015f56:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90015f58:	fb06 1604 	mla	r6, r6, r4, r1
90015f5c:	1436      	asrs	r6, r6, #16
90015f5e:	d45d      	bmi.n	9001601c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90015f60:	4576      	cmp	r6, lr
90015f62:	da5b      	bge.n	9001601c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90015f64:	9e14      	ldr	r6, [sp, #80]	; 0x50
90015f66:	fb06 2404 	mla	r4, r6, r4, r2
90015f6a:	1424      	asrs	r4, r4, #16
90015f6c:	d456      	bmi.n	9001601c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90015f6e:	42bc      	cmp	r4, r7
90015f70:	da54      	bge.n	9001601c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90015f72:	4698      	mov	r8, r3
90015f74:	f8dd 9000 	ldr.w	r9, [sp]
90015f78:	f8bd a00c 	ldrh.w	sl, [sp, #12]
90015f7c:	f1b8 0f00 	cmp.w	r8, #0
90015f80:	dd54      	ble.n	9001602c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90015f82:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90015f86:	1414      	asrs	r4, r2, #16
90015f88:	9804      	ldr	r0, [sp, #16]
90015f8a:	140e      	asrs	r6, r1, #16
90015f8c:	f108 38ff 	add.w	r8, r8, #4294967295
90015f90:	fb07 0404 	mla	r4, r7, r4, r0
90015f94:	9801      	ldr	r0, [sp, #4]
90015f96:	f814 e006 	ldrb.w	lr, [r4, r6]
90015f9a:	f8b9 4000 	ldrh.w	r4, [r9]
90015f9e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90015fa2:	1227      	asrs	r7, r4, #8
90015fa4:	eb00 0b0e 	add.w	fp, r0, lr
90015fa8:	f810 e00e 	ldrb.w	lr, [r0, lr]
90015fac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90015fb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
90015fb2:	f89b 6002 	ldrb.w	r6, [fp, #2]
90015fb6:	f89b b001 	ldrb.w	fp, [fp, #1]
90015fba:	4401      	add	r1, r0
90015fbc:	fb16 f60a 	smulbb	r6, r6, sl
90015fc0:	9814      	ldr	r0, [sp, #80]	; 0x50
90015fc2:	fb1b fb0a 	smulbb	fp, fp, sl
90015fc6:	fb07 6705 	mla	r7, r7, r5, r6
90015fca:	10e6      	asrs	r6, r4, #3
90015fcc:	00e4      	lsls	r4, r4, #3
90015fce:	4402      	add	r2, r0
90015fd0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90015fd4:	b2bf      	uxth	r7, r7
90015fd6:	b2e4      	uxtb	r4, r4
90015fd8:	fb06 b605 	mla	r6, r6, r5, fp
90015fdc:	fb14 f405 	smulbb	r4, r4, r5
90015fe0:	b2b6      	uxth	r6, r6
90015fe2:	fb0e 4e0a 	mla	lr, lr, sl, r4
90015fe6:	1c7c      	adds	r4, r7, #1
90015fe8:	f106 0b01 	add.w	fp, r6, #1
90015fec:	fa1f fe8e 	uxth.w	lr, lr
90015ff0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90015ff4:	f10e 0401 	add.w	r4, lr, #1
90015ff8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90015ffc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016000:	eb04 241e 	add.w	r4, r4, lr, lsr #8
90016004:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90016008:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001600c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90016010:	4327      	orrs	r7, r4
90016012:	ea47 070b 	orr.w	r7, r7, fp
90016016:	f829 7b02 	strh.w	r7, [r9], #2
9001601a:	e7af      	b.n	90015f7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001601c:	f04f 0e00 	mov.w	lr, #0
90016020:	f8bd 900c 	ldrh.w	r9, [sp, #12]
90016024:	eb03 040e 	add.w	r4, r3, lr
90016028:	2c00      	cmp	r4, #0
9001602a:	dc43      	bgt.n	900160b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001602c:	9a00      	ldr	r2, [sp, #0]
9001602e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016032:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90016036:	9300      	str	r3, [sp, #0]
90016038:	9b02      	ldr	r3, [sp, #8]
9001603a:	2b00      	cmp	r3, #0
9001603c:	f340 8098 	ble.w	90016170 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90016040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90016044:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016046:	ee30 0a04 	vadd.f32	s0, s0, s8
9001604a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001604e:	eef0 6a62 	vmov.f32	s13, s5
90016052:	eec7 7a00 	vdiv.f32	s15, s14, s0
90016056:	ee31 1a05 	vadd.f32	s2, s2, s10
9001605a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001605e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90016062:	eef0 6a43 	vmov.f32	s13, s6
90016066:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001606a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001606e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016072:	ee61 7a27 	vmul.f32	s15, s2, s15
90016076:	ee77 2a62 	vsub.f32	s5, s14, s5
9001607a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001607e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016082:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016086:	ee12 2a90 	vmov	r2, s5
9001608a:	eef0 2a47 	vmov.f32	s5, s14
9001608e:	fb92 f3f3 	sdiv	r3, r2, r3
90016092:	ee13 2a10 	vmov	r2, s6
90016096:	9313      	str	r3, [sp, #76]	; 0x4c
90016098:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001609a:	eeb0 3a67 	vmov.f32	s6, s15
9001609e:	fb92 f3f3 	sdiv	r3, r2, r3
900160a2:	9314      	str	r3, [sp, #80]	; 0x50
900160a4:	9b02      	ldr	r3, [sp, #8]
900160a6:	9a05      	ldr	r2, [sp, #20]
900160a8:	3b01      	subs	r3, #1
900160aa:	9302      	str	r3, [sp, #8]
900160ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
900160ae:	bf08      	it	eq
900160b0:	4613      	moveq	r3, r2
900160b2:	e72a      	b.n	90015f0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900160b4:	140f      	asrs	r7, r1, #16
900160b6:	d454      	bmi.n	90016162 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900160b8:	f8dc 6008 	ldr.w	r6, [ip, #8]
900160bc:	42be      	cmp	r6, r7
900160be:	dd50      	ble.n	90016162 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900160c0:	ea5f 4822 	movs.w	r8, r2, asr #16
900160c4:	d44d      	bmi.n	90016162 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900160c6:	f8dc 400c 	ldr.w	r4, [ip, #12]
900160ca:	4544      	cmp	r4, r8
900160cc:	dd49      	ble.n	90016162 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900160ce:	9c04      	ldr	r4, [sp, #16]
900160d0:	b236      	sxth	r6, r6
900160d2:	f06f 0001 	mvn.w	r0, #1
900160d6:	fb08 4606 	mla	r6, r8, r6, r4
900160da:	9c01      	ldr	r4, [sp, #4]
900160dc:	fb00 fa0e 	mul.w	sl, r0, lr
900160e0:	9800      	ldr	r0, [sp, #0]
900160e2:	f816 8007 	ldrb.w	r8, [r6, r7]
900160e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
900160ea:	eb04 0b08 	add.w	fp, r4, r8
900160ee:	f830 400a 	ldrh.w	r4, [r0, sl]
900160f2:	9801      	ldr	r0, [sp, #4]
900160f4:	f89b 6002 	ldrb.w	r6, [fp, #2]
900160f8:	1227      	asrs	r7, r4, #8
900160fa:	f89b b001 	ldrb.w	fp, [fp, #1]
900160fe:	fb16 f609 	smulbb	r6, r6, r9
90016102:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016106:	f810 8008 	ldrb.w	r8, [r0, r8]
9001610a:	fb1b fb09 	smulbb	fp, fp, r9
9001610e:	fb07 6705 	mla	r7, r7, r5, r6
90016112:	10e6      	asrs	r6, r4, #3
90016114:	00e4      	lsls	r4, r4, #3
90016116:	9800      	ldr	r0, [sp, #0]
90016118:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001611c:	b2bf      	uxth	r7, r7
9001611e:	b2e4      	uxtb	r4, r4
90016120:	fb06 b605 	mla	r6, r6, r5, fp
90016124:	fb14 f405 	smulbb	r4, r4, r5
90016128:	b2b6      	uxth	r6, r6
9001612a:	fb08 4809 	mla	r8, r8, r9, r4
9001612e:	1c7c      	adds	r4, r7, #1
90016130:	f106 0b01 	add.w	fp, r6, #1
90016134:	fa1f f888 	uxth.w	r8, r8
90016138:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001613c:	f108 0401 	add.w	r4, r8, #1
90016140:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90016144:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90016148:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001614c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90016150:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90016154:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90016158:	4327      	orrs	r7, r4
9001615a:	ea47 070b 	orr.w	r7, r7, fp
9001615e:	f820 700a 	strh.w	r7, [r0, sl]
90016162:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016164:	f10e 3eff 	add.w	lr, lr, #4294967295
90016168:	4401      	add	r1, r0
9001616a:	9814      	ldr	r0, [sp, #80]	; 0x50
9001616c:	4402      	add	r2, r0
9001616e:	e759      	b.n	90016024 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90016170:	b007      	add	sp, #28
90016172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90016178 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001617c:	b085      	sub	sp, #20
9001617e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016182:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90016184:	9d16      	ldr	r5, [sp, #88]	; 0x58
90016186:	9203      	str	r2, [sp, #12]
90016188:	6870      	ldr	r0, [r6, #4]
9001618a:	686f      	ldr	r7, [r5, #4]
9001618c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
90016190:	3704      	adds	r7, #4
90016192:	9101      	str	r1, [sp, #4]
90016194:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90016198:	fb00 2404 	mla	r4, r0, r4, r2
9001619c:	6832      	ldr	r2, [r6, #0]
9001619e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900161a2:	682a      	ldr	r2, [r5, #0]
900161a4:	9202      	str	r2, [sp, #8]
900161a6:	9a01      	ldr	r2, [sp, #4]
900161a8:	2a00      	cmp	r2, #0
900161aa:	dc03      	bgt.n	900161b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900161ac:	9a03      	ldr	r2, [sp, #12]
900161ae:	2a00      	cmp	r2, #0
900161b0:	f340 80cc 	ble.w	9001634c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
900161b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900161b6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900161ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900161be:	9a10      	ldr	r2, [sp, #64]	; 0x40
900161c0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900161c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900161c8:	2b00      	cmp	r3, #0
900161ca:	dd0d      	ble.n	900161e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900161cc:	1406      	asrs	r6, r0, #16
900161ce:	d405      	bmi.n	900161dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
900161d0:	454e      	cmp	r6, r9
900161d2:	da03      	bge.n	900161dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
900161d4:	1416      	asrs	r6, r2, #16
900161d6:	d401      	bmi.n	900161dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
900161d8:	4546      	cmp	r6, r8
900161da:	db06      	blt.n	900161ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900161dc:	9e12      	ldr	r6, [sp, #72]	; 0x48
900161de:	4460      	add	r0, ip
900161e0:	3b01      	subs	r3, #1
900161e2:	3402      	adds	r4, #2
900161e4:	4432      	add	r2, r6
900161e6:	e7ef      	b.n	900161c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
900161e8:	d00f      	beq.n	9001620a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900161ea:	1e5e      	subs	r6, r3, #1
900161ec:	fb0c 0e06 	mla	lr, ip, r6, r0
900161f0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
900161f4:	d543      	bpl.n	9001627e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
900161f6:	4698      	mov	r8, r3
900161f8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
900161fc:	f1b8 0f00 	cmp.w	r8, #0
90016200:	dc71      	bgt.n	900162e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90016202:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016206:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001620a:	9b01      	ldr	r3, [sp, #4]
9001620c:	2b00      	cmp	r3, #0
9001620e:	f340 809d 	ble.w	9001634c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90016212:	ee30 0a04 	vadd.f32	s0, s0, s8
90016216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016218:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001621c:	eeb0 6a62 	vmov.f32	s12, s5
90016220:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016224:	ee31 1a05 	vadd.f32	s2, s2, s10
90016228:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001622c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016230:	eeb0 6a43 	vmov.f32	s12, s6
90016234:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016238:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001623c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016240:	ee61 7a27 	vmul.f32	s15, s2, s15
90016244:	ee77 2a62 	vsub.f32	s5, s14, s5
90016248:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001624c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016250:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016254:	ee12 2a90 	vmov	r2, s5
90016258:	eef0 2a47 	vmov.f32	s5, s14
9001625c:	fb92 fcf3 	sdiv	ip, r2, r3
90016260:	ee13 2a10 	vmov	r2, s6
90016264:	eeb0 3a67 	vmov.f32	s6, s15
90016268:	fb92 f3f3 	sdiv	r3, r2, r3
9001626c:	9312      	str	r3, [sp, #72]	; 0x48
9001626e:	9b01      	ldr	r3, [sp, #4]
90016270:	9a03      	ldr	r2, [sp, #12]
90016272:	3b01      	subs	r3, #1
90016274:	9301      	str	r3, [sp, #4]
90016276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016278:	bf08      	it	eq
9001627a:	4613      	moveq	r3, r2
9001627c:	e793      	b.n	900161a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001627e:	45ce      	cmp	lr, r9
90016280:	dab9      	bge.n	900161f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016282:	9912      	ldr	r1, [sp, #72]	; 0x48
90016284:	fb01 2606 	mla	r6, r1, r6, r2
90016288:	1436      	asrs	r6, r6, #16
9001628a:	d4b4      	bmi.n	900161f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001628c:	4546      	cmp	r6, r8
9001628e:	dab2      	bge.n	900161f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90016290:	4698      	mov	r8, r3
90016292:	46a2      	mov	sl, r4
90016294:	f1b8 0f00 	cmp.w	r8, #0
90016298:	ddb3      	ble.n	90016202 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001629a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001629e:	1416      	asrs	r6, r2, #16
900162a0:	9902      	ldr	r1, [sp, #8]
900162a2:	ea4f 4e20 	mov.w	lr, r0, asr #16
900162a6:	f108 38ff 	add.w	r8, r8, #4294967295
900162aa:	4460      	add	r0, ip
900162ac:	fb09 1606 	mla	r6, r9, r6, r1
900162b0:	4928      	ldr	r1, [pc, #160]	; (90016354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
900162b2:	f816 e00e 	ldrb.w	lr, [r6, lr]
900162b6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
900162ba:	eb07 0b0e 	add.w	fp, r7, lr
900162be:	f89b 6001 	ldrb.w	r6, [fp, #1]
900162c2:	f89b 9002 	ldrb.w	r9, [fp, #2]
900162c6:	00f6      	lsls	r6, r6, #3
900162c8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
900162cc:	9912      	ldr	r1, [sp, #72]	; 0x48
900162ce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900162d2:	440a      	add	r2, r1
900162d4:	ea49 0606 	orr.w	r6, r9, r6
900162d8:	f817 900e 	ldrb.w	r9, [r7, lr]
900162dc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
900162e0:	f82a 6b02 	strh.w	r6, [sl], #2
900162e4:	e7d6      	b.n	90016294 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
900162e6:	ea5f 4920 	movs.w	r9, r0, asr #16
900162ea:	d429      	bmi.n	90016340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900162ec:	68ae      	ldr	r6, [r5, #8]
900162ee:	454e      	cmp	r6, r9
900162f0:	dd26      	ble.n	90016340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900162f2:	ea5f 4b22 	movs.w	fp, r2, asr #16
900162f6:	d423      	bmi.n	90016340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900162f8:	68e9      	ldr	r1, [r5, #12]
900162fa:	4559      	cmp	r1, fp
900162fc:	dd20      	ble.n	90016340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900162fe:	fa0f fe86 	sxth.w	lr, r6
90016302:	9902      	ldr	r1, [sp, #8]
90016304:	fb0b 1e0e 	mla	lr, fp, lr, r1
90016308:	f06f 0101 	mvn.w	r1, #1
9001630c:	f81e e009 	ldrb.w	lr, [lr, r9]
90016310:	fb01 f908 	mul.w	r9, r1, r8
90016314:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90016318:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001631c:	eb07 060e 	add.w	r6, r7, lr
90016320:	f896 b002 	ldrb.w	fp, [r6, #2]
90016324:	7876      	ldrb	r6, [r6, #1]
90016326:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001632a:	00f6      	lsls	r6, r6, #3
9001632c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90016330:	ea4b 0606 	orr.w	r6, fp, r6
90016334:	f817 b00e 	ldrb.w	fp, [r7, lr]
90016338:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001633c:	f82a 6009 	strh.w	r6, [sl, r9]
90016340:	9912      	ldr	r1, [sp, #72]	; 0x48
90016342:	4460      	add	r0, ip
90016344:	f108 38ff 	add.w	r8, r8, #4294967295
90016348:	440a      	add	r2, r1
9001634a:	e757      	b.n	900161fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001634c:	b005      	add	sp, #20
9001634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016352:	bf00      	nop
90016354:	fffff800 	.word	0xfffff800

90016358 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001635c:	b087      	sub	sp, #28
9001635e:	468b      	mov	fp, r1
90016360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016364:	9815      	ldr	r0, [sp, #84]	; 0x54
90016366:	9204      	str	r2, [sp, #16]
90016368:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001636c:	6841      	ldr	r1, [r0, #4]
9001636e:	9205      	str	r2, [sp, #20]
90016370:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90016374:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90016378:	fb01 2404 	mla	r4, r1, r4, r2
9001637c:	6802      	ldr	r2, [r0, #0]
9001637e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016382:	f8dc 2000 	ldr.w	r2, [ip]
90016386:	9201      	str	r2, [sp, #4]
90016388:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001638c:	3204      	adds	r2, #4
9001638e:	9202      	str	r2, [sp, #8]
90016390:	f1bb 0f00 	cmp.w	fp, #0
90016394:	dc03      	bgt.n	9001639e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90016396:	9a04      	ldr	r2, [sp, #16]
90016398:	2a00      	cmp	r2, #0
9001639a:	f340 8138 	ble.w	9001660e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001639e:	9a11      	ldr	r2, [sp, #68]	; 0x44
900163a0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
900163a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900163a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
900163aa:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
900163ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900163b2:	2b00      	cmp	r3, #0
900163b4:	dd0e      	ble.n	900163d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900163b6:	1402      	asrs	r2, r0, #16
900163b8:	d405      	bmi.n	900163c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900163ba:	42ba      	cmp	r2, r7
900163bc:	da03      	bge.n	900163c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900163be:	140a      	asrs	r2, r1, #16
900163c0:	d401      	bmi.n	900163c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900163c2:	42b2      	cmp	r2, r6
900163c4:	db07      	blt.n	900163d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900163c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900163c8:	3b01      	subs	r3, #1
900163ca:	3402      	adds	r4, #2
900163cc:	4410      	add	r0, r2
900163ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
900163d0:	4411      	add	r1, r2
900163d2:	e7ee      	b.n	900163b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
900163d4:	d019      	beq.n	9001640a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
900163d6:	1e5a      	subs	r2, r3, #1
900163d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900163da:	fb05 0502 	mla	r5, r5, r2, r0
900163de:	142d      	asrs	r5, r5, #16
900163e0:	d409      	bmi.n	900163f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900163e2:	42bd      	cmp	r5, r7
900163e4:	da07      	bge.n	900163f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900163e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
900163e8:	fb05 1202 	mla	r2, r5, r2, r1
900163ec:	1412      	asrs	r2, r2, #16
900163ee:	d402      	bmi.n	900163f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900163f0:	42b2      	cmp	r2, r6
900163f2:	f2c0 80ac 	blt.w	9001654e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
900163f6:	f04f 0e00 	mov.w	lr, #0
900163fa:	eb03 020e 	add.w	r2, r3, lr
900163fe:	2a00      	cmp	r2, #0
90016400:	dc3e      	bgt.n	90016480 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90016402:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016406:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001640a:	f1bb 0f00 	cmp.w	fp, #0
9001640e:	f340 80fe 	ble.w	9001660e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90016412:	ee30 0a04 	vadd.f32	s0, s0, s8
90016416:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016418:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001641c:	f1bb 0b01 	subs.w	fp, fp, #1
90016420:	eeb0 6a62 	vmov.f32	s12, s5
90016424:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016428:	ee31 1a05 	vadd.f32	s2, s2, s10
9001642c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016430:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90016434:	eeb0 6a43 	vmov.f32	s12, s6
90016438:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001643c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90016440:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016444:	ee61 7a27 	vmul.f32	s15, s2, s15
90016448:	ee77 2a62 	vsub.f32	s5, s14, s5
9001644c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016450:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016454:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016458:	ee12 2a90 	vmov	r2, s5
9001645c:	eef0 2a47 	vmov.f32	s5, s14
90016460:	fb92 f3f3 	sdiv	r3, r2, r3
90016464:	ee13 2a10 	vmov	r2, s6
90016468:	9313      	str	r3, [sp, #76]	; 0x4c
9001646a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001646c:	eeb0 3a67 	vmov.f32	s6, s15
90016470:	fb92 f3f3 	sdiv	r3, r2, r3
90016474:	9a04      	ldr	r2, [sp, #16]
90016476:	9314      	str	r3, [sp, #80]	; 0x50
90016478:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001647a:	bf08      	it	eq
9001647c:	4613      	moveq	r3, r2
9001647e:	e787      	b.n	90016390 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90016480:	1406      	asrs	r6, r0, #16
90016482:	d45d      	bmi.n	90016540 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016484:	f8dc 5008 	ldr.w	r5, [ip, #8]
90016488:	42b5      	cmp	r5, r6
9001648a:	dd59      	ble.n	90016540 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001648c:	140f      	asrs	r7, r1, #16
9001648e:	d457      	bmi.n	90016540 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016490:	f8dc 200c 	ldr.w	r2, [ip, #12]
90016494:	42ba      	cmp	r2, r7
90016496:	dd53      	ble.n	90016540 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90016498:	9a01      	ldr	r2, [sp, #4]
9001649a:	b22d      	sxth	r5, r5
9001649c:	fb07 2505 	mla	r5, r7, r5, r2
900164a0:	5daa      	ldrb	r2, [r5, r6]
900164a2:	9d02      	ldr	r5, [sp, #8]
900164a4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
900164a8:	0e2e      	lsrs	r6, r5, #24
900164aa:	d049      	beq.n	90016540 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900164ac:	f06f 0201 	mvn.w	r2, #1
900164b0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900164b4:	fb02 f20e 	mul.w	r2, r2, lr
900164b8:	f834 8002 	ldrh.w	r8, [r4, r2]
900164bc:	9203      	str	r2, [sp, #12]
900164be:	9a05      	ldr	r2, [sp, #20]
900164c0:	ea4f 2728 	mov.w	r7, r8, asr #8
900164c4:	4356      	muls	r6, r2
900164c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900164ca:	1c72      	adds	r2, r6, #1
900164cc:	eb02 2226 	add.w	r2, r2, r6, asr #8
900164d0:	f3c5 4607 	ubfx	r6, r5, #16, #8
900164d4:	b2ed      	uxtb	r5, r5
900164d6:	1212      	asrs	r2, r2, #8
900164d8:	fa1f f982 	uxth.w	r9, r2
900164dc:	43d2      	mvns	r2, r2
900164de:	fb16 f609 	smulbb	r6, r6, r9
900164e2:	b2d2      	uxtb	r2, r2
900164e4:	fb15 f509 	smulbb	r5, r5, r9
900164e8:	fb07 6702 	mla	r7, r7, r2, r6
900164ec:	ea4f 06e8 	mov.w	r6, r8, asr #3
900164f0:	fb1a fa09 	smulbb	sl, sl, r9
900164f4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900164f8:	b2bf      	uxth	r7, r7
900164fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900164fe:	fa5f f888 	uxtb.w	r8, r8
90016502:	fb06 a602 	mla	r6, r6, r2, sl
90016506:	fb08 5502 	mla	r5, r8, r2, r5
9001650a:	1c7a      	adds	r2, r7, #1
9001650c:	b2b6      	uxth	r6, r6
9001650e:	b2ad      	uxth	r5, r5
90016510:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90016514:	9a03      	ldr	r2, [sp, #12]
90016516:	f105 0a01 	add.w	sl, r5, #1
9001651a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001651e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016522:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016526:	ea4a 0707 	orr.w	r7, sl, r7
9001652a:	f106 0a01 	add.w	sl, r6, #1
9001652e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016532:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016536:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001653a:	ea47 070a 	orr.w	r7, r7, sl
9001653e:	52a7      	strh	r7, [r4, r2]
90016540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016542:	f10e 3eff 	add.w	lr, lr, #4294967295
90016546:	4410      	add	r0, r2
90016548:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001654a:	4411      	add	r1, r2
9001654c:	e755      	b.n	900163fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001654e:	f04f 0800 	mov.w	r8, #0
90016552:	eba3 0208 	sub.w	r2, r3, r8
90016556:	2a00      	cmp	r2, #0
90016558:	f77f af53 	ble.w	90016402 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001655c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
90016560:	140a      	asrs	r2, r1, #16
90016562:	9f01      	ldr	r7, [sp, #4]
90016564:	1405      	asrs	r5, r0, #16
90016566:	fb06 7202 	mla	r2, r6, r2, r7
9001656a:	5d52      	ldrb	r2, [r2, r5]
9001656c:	9d02      	ldr	r5, [sp, #8]
9001656e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90016572:	0e2e      	lsrs	r6, r5, #24
90016574:	d044      	beq.n	90016600 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
90016576:	9a05      	ldr	r2, [sp, #20]
90016578:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001657c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90016580:	4356      	muls	r6, r2
90016582:	ea4f 272e 	mov.w	r7, lr, asr #8
90016586:	1c72      	adds	r2, r6, #1
90016588:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001658c:	eb02 2226 	add.w	r2, r2, r6, asr #8
90016590:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016594:	b2ed      	uxtb	r5, r5
90016596:	1212      	asrs	r2, r2, #8
90016598:	fa1f f982 	uxth.w	r9, r2
9001659c:	43d2      	mvns	r2, r2
9001659e:	fb16 f609 	smulbb	r6, r6, r9
900165a2:	b2d2      	uxtb	r2, r2
900165a4:	fb15 f509 	smulbb	r5, r5, r9
900165a8:	fb07 6702 	mla	r7, r7, r2, r6
900165ac:	ea4f 06ee 	mov.w	r6, lr, asr #3
900165b0:	fb1a fa09 	smulbb	sl, sl, r9
900165b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900165b8:	b2bf      	uxth	r7, r7
900165ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900165be:	fa5f fe8e 	uxtb.w	lr, lr
900165c2:	fb06 a602 	mla	r6, r6, r2, sl
900165c6:	fb0e 5502 	mla	r5, lr, r2, r5
900165ca:	1c7a      	adds	r2, r7, #1
900165cc:	b2b6      	uxth	r6, r6
900165ce:	b2ad      	uxth	r5, r5
900165d0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
900165d4:	f105 0a01 	add.w	sl, r5, #1
900165d8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900165dc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900165e0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900165e4:	ea4a 0707 	orr.w	r7, sl, r7
900165e8:	f106 0a01 	add.w	sl, r6, #1
900165ec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900165f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900165f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900165f8:	ea47 070a 	orr.w	r7, r7, sl
900165fc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90016600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90016602:	f108 0801 	add.w	r8, r8, #1
90016606:	4410      	add	r0, r2
90016608:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001660a:	4411      	add	r1, r2
9001660c:	e7a1      	b.n	90016552 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001660e:	b007      	add	sp, #28
90016610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016618:	b085      	sub	sp, #20
9001661a:	468b      	mov	fp, r1
9001661c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016620:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016622:	9203      	str	r2, [sp, #12]
90016624:	6841      	ldr	r1, [r0, #4]
90016626:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001662a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001662e:	fb01 2404 	mla	r4, r1, r4, r2
90016632:	6802      	ldr	r2, [r0, #0]
90016634:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016638:	f8de 2000 	ldr.w	r2, [lr]
9001663c:	9200      	str	r2, [sp, #0]
9001663e:	f8de 2004 	ldr.w	r2, [lr, #4]
90016642:	3204      	adds	r2, #4
90016644:	9201      	str	r2, [sp, #4]
90016646:	f1bb 0f00 	cmp.w	fp, #0
9001664a:	dc03      	bgt.n	90016654 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001664c:	9a03      	ldr	r2, [sp, #12]
9001664e:	2a00      	cmp	r2, #0
90016650:	f340 8153 	ble.w	900168fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90016654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90016656:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001665a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001665e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016660:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90016664:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016668:	2b00      	cmp	r3, #0
9001666a:	dd0e      	ble.n	9001668a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001666c:	1408      	asrs	r0, r1, #16
9001666e:	d405      	bmi.n	9001667c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016670:	42b8      	cmp	r0, r7
90016672:	da03      	bge.n	9001667c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016674:	1410      	asrs	r0, r2, #16
90016676:	d401      	bmi.n	9001667c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016678:	42b0      	cmp	r0, r6
9001667a:	db07      	blt.n	9001668c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001667c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001667e:	3b01      	subs	r3, #1
90016680:	3402      	adds	r4, #2
90016682:	4401      	add	r1, r0
90016684:	9812      	ldr	r0, [sp, #72]	; 0x48
90016686:	4402      	add	r2, r0
90016688:	e7ee      	b.n	90016668 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001668a:	d017      	beq.n	900166bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001668c:	1e58      	subs	r0, r3, #1
9001668e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90016690:	fb05 1500 	mla	r5, r5, r0, r1
90016694:	142d      	asrs	r5, r5, #16
90016696:	d409      	bmi.n	900166ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016698:	42bd      	cmp	r5, r7
9001669a:	da07      	bge.n	900166ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001669c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001669e:	fb05 2000 	mla	r0, r5, r0, r2
900166a2:	1400      	asrs	r0, r0, #16
900166a4:	d402      	bmi.n	900166ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900166a6:	42b0      	cmp	r0, r6
900166a8:	f2c0 80bc 	blt.w	90016824 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
900166ac:	2600      	movs	r6, #0
900166ae:	1998      	adds	r0, r3, r6
900166b0:	2800      	cmp	r0, #0
900166b2:	dc3e      	bgt.n	90016732 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
900166b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900166b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900166bc:	f1bb 0f00 	cmp.w	fp, #0
900166c0:	f340 811b 	ble.w	900168fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
900166c4:	ee30 0a04 	vadd.f32	s0, s0, s8
900166c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900166ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
900166ce:	f1bb 0b01 	subs.w	fp, fp, #1
900166d2:	eeb0 6a62 	vmov.f32	s12, s5
900166d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
900166da:	ee31 1a05 	vadd.f32	s2, s2, s10
900166de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900166e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900166e6:	eeb0 6a43 	vmov.f32	s12, s6
900166ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900166ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900166f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900166f6:	ee61 7a27 	vmul.f32	s15, s2, s15
900166fa:	ee77 2a62 	vsub.f32	s5, s14, s5
900166fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016702:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016706:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001670a:	ee12 2a90 	vmov	r2, s5
9001670e:	eef0 2a47 	vmov.f32	s5, s14
90016712:	fb92 f3f3 	sdiv	r3, r2, r3
90016716:	ee13 2a10 	vmov	r2, s6
9001671a:	9311      	str	r3, [sp, #68]	; 0x44
9001671c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001671e:	eeb0 3a67 	vmov.f32	s6, s15
90016722:	fb92 f3f3 	sdiv	r3, r2, r3
90016726:	9a03      	ldr	r2, [sp, #12]
90016728:	9312      	str	r3, [sp, #72]	; 0x48
9001672a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001672c:	bf08      	it	eq
9001672e:	4613      	moveq	r3, r2
90016730:	e789      	b.n	90016646 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90016732:	140f      	asrs	r7, r1, #16
90016734:	d426      	bmi.n	90016784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016736:	f8de 5008 	ldr.w	r5, [lr, #8]
9001673a:	42bd      	cmp	r5, r7
9001673c:	dd22      	ble.n	90016784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001673e:	ea5f 4c22 	movs.w	ip, r2, asr #16
90016742:	d41f      	bmi.n	90016784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016744:	f8de 000c 	ldr.w	r0, [lr, #12]
90016748:	4560      	cmp	r0, ip
9001674a:	dd1b      	ble.n	90016784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001674c:	9800      	ldr	r0, [sp, #0]
9001674e:	b22d      	sxth	r5, r5
90016750:	fb0c 0505 	mla	r5, ip, r5, r0
90016754:	5de8      	ldrb	r0, [r5, r7]
90016756:	9d01      	ldr	r5, [sp, #4]
90016758:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001675c:	0e07      	lsrs	r7, r0, #24
9001675e:	2fff      	cmp	r7, #255	; 0xff
90016760:	d116      	bne.n	90016790 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90016762:	f06f 0501 	mvn.w	r5, #1
90016766:	fb05 f706 	mul.w	r7, r5, r6
9001676a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001676e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90016772:	0945      	lsrs	r5, r0, #5
90016774:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90016778:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001677c:	ea4c 0505 	orr.w	r5, ip, r5
90016780:	4305      	orrs	r5, r0
90016782:	53e5      	strh	r5, [r4, r7]
90016784:	9811      	ldr	r0, [sp, #68]	; 0x44
90016786:	3e01      	subs	r6, #1
90016788:	4401      	add	r1, r0
9001678a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001678c:	4402      	add	r2, r0
9001678e:	e78e      	b.n	900166ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90016790:	b2fd      	uxtb	r5, r7
90016792:	2f00      	cmp	r7, #0
90016794:	d0f6      	beq.n	90016784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016796:	f06f 0701 	mvn.w	r7, #1
9001679a:	fa1f f985 	uxth.w	r9, r5
9001679e:	43ed      	mvns	r5, r5
900167a0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
900167a4:	4377      	muls	r7, r6
900167a6:	fb1a fa09 	smulbb	sl, sl, r9
900167aa:	b2ed      	uxtb	r5, r5
900167ac:	f834 8007 	ldrh.w	r8, [r4, r7]
900167b0:	9702      	str	r7, [sp, #8]
900167b2:	f3c0 4707 	ubfx	r7, r0, #16, #8
900167b6:	ea4f 2c28 	mov.w	ip, r8, asr #8
900167ba:	fb17 f709 	smulbb	r7, r7, r9
900167be:	b2c0      	uxtb	r0, r0
900167c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900167c4:	fb10 f009 	smulbb	r0, r0, r9
900167c8:	fb0c 7c05 	mla	ip, ip, r5, r7
900167cc:	ea4f 07e8 	mov.w	r7, r8, asr #3
900167d0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900167d4:	fa1f fc8c 	uxth.w	ip, ip
900167d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900167dc:	fa5f f888 	uxtb.w	r8, r8
900167e0:	fb07 a705 	mla	r7, r7, r5, sl
900167e4:	fb08 0005 	mla	r0, r8, r5, r0
900167e8:	f10c 0501 	add.w	r5, ip, #1
900167ec:	b2bf      	uxth	r7, r7
900167ee:	b280      	uxth	r0, r0
900167f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900167f4:	f100 0a01 	add.w	sl, r0, #1
900167f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900167fc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90016800:	9802      	ldr	r0, [sp, #8]
90016802:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016806:	ea4a 0c0c 	orr.w	ip, sl, ip
9001680a:	f107 0a01 	add.w	sl, r7, #1
9001680e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90016812:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016816:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001681a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001681e:	f824 c000 	strh.w	ip, [r4, r0]
90016822:	e7af      	b.n	90016784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90016824:	f04f 0800 	mov.w	r8, #0
90016828:	eba3 0008 	sub.w	r0, r3, r8
9001682c:	2800      	cmp	r0, #0
9001682e:	f77f af41 	ble.w	900166b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90016832:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90016836:	1410      	asrs	r0, r2, #16
90016838:	9f00      	ldr	r7, [sp, #0]
9001683a:	140d      	asrs	r5, r1, #16
9001683c:	fb06 7000 	mla	r0, r6, r0, r7
90016840:	5d40      	ldrb	r0, [r0, r5]
90016842:	9d01      	ldr	r5, [sp, #4]
90016844:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90016848:	0e2e      	lsrs	r6, r5, #24
9001684a:	2eff      	cmp	r6, #255	; 0xff
9001684c:	d112      	bne.n	90016874 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001684e:	482c      	ldr	r0, [pc, #176]	; (90016900 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90016850:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90016854:	0968      	lsrs	r0, r5, #5
90016856:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001685a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001685e:	4330      	orrs	r0, r6
90016860:	4328      	orrs	r0, r5
90016862:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
90016866:	9811      	ldr	r0, [sp, #68]	; 0x44
90016868:	f108 0801 	add.w	r8, r8, #1
9001686c:	4401      	add	r1, r0
9001686e:	9812      	ldr	r0, [sp, #72]	; 0x48
90016870:	4402      	add	r2, r0
90016872:	e7d9      	b.n	90016828 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90016874:	b2f0      	uxtb	r0, r6
90016876:	2e00      	cmp	r6, #0
90016878:	d0f5      	beq.n	90016866 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001687a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001687e:	fa1f f980 	uxth.w	r9, r0
90016882:	f3c5 4607 	ubfx	r6, r5, #16, #8
90016886:	43c0      	mvns	r0, r0
90016888:	ea4f 272c 	mov.w	r7, ip, asr #8
9001688c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90016890:	fb16 f609 	smulbb	r6, r6, r9
90016894:	b2c0      	uxtb	r0, r0
90016896:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001689a:	b2ed      	uxtb	r5, r5
9001689c:	fb1a fa09 	smulbb	sl, sl, r9
900168a0:	fb07 6700 	mla	r7, r7, r0, r6
900168a4:	ea4f 06ec 	mov.w	r6, ip, asr #3
900168a8:	fb15 f509 	smulbb	r5, r5, r9
900168ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900168b0:	b2bf      	uxth	r7, r7
900168b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900168b6:	fa5f fc8c 	uxtb.w	ip, ip
900168ba:	fb06 a600 	mla	r6, r6, r0, sl
900168be:	fb0c 5500 	mla	r5, ip, r0, r5
900168c2:	1c78      	adds	r0, r7, #1
900168c4:	b2b6      	uxth	r6, r6
900168c6:	b2ad      	uxth	r5, r5
900168c8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
900168cc:	f105 0a01 	add.w	sl, r5, #1
900168d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900168d4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900168d8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900168dc:	ea4a 0707 	orr.w	r7, sl, r7
900168e0:	f106 0a01 	add.w	sl, r6, #1
900168e4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900168e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900168ec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900168f0:	ea47 070a 	orr.w	r7, r7, sl
900168f4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
900168f8:	e7b5      	b.n	90016866 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
900168fa:	b005      	add	sp, #20
900168fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016900:	fffff800 	.word	0xfffff800

90016904 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016908:	b087      	sub	sp, #28
9001690a:	468b      	mov	fp, r1
9001690c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016910:	9c15      	ldr	r4, [sp, #84]	; 0x54
90016912:	9204      	str	r2, [sp, #16]
90016914:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90016918:	6861      	ldr	r1, [r4, #4]
9001691a:	9205      	str	r2, [sp, #20]
9001691c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90016920:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90016924:	fb01 2000 	mla	r0, r1, r0, r2
90016928:	6822      	ldr	r2, [r4, #0]
9001692a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001692e:	f8de 2000 	ldr.w	r2, [lr]
90016932:	9201      	str	r2, [sp, #4]
90016934:	f8de 2004 	ldr.w	r2, [lr, #4]
90016938:	9202      	str	r2, [sp, #8]
9001693a:	f1bb 0f00 	cmp.w	fp, #0
9001693e:	dc03      	bgt.n	90016948 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90016940:	9a04      	ldr	r2, [sp, #16]
90016942:	2a00      	cmp	r2, #0
90016944:	f340 8142 	ble.w	90016bcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90016948:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001694a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001694e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016952:	9a12      	ldr	r2, [sp, #72]	; 0x48
90016954:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90016958:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001695c:	2b00      	cmp	r3, #0
9001695e:	dd0e      	ble.n	9001697e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90016960:	140c      	asrs	r4, r1, #16
90016962:	d405      	bmi.n	90016970 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90016964:	42bc      	cmp	r4, r7
90016966:	da03      	bge.n	90016970 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90016968:	1414      	asrs	r4, r2, #16
9001696a:	d401      	bmi.n	90016970 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001696c:	42b4      	cmp	r4, r6
9001696e:	db07      	blt.n	90016980 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90016970:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90016972:	3b01      	subs	r3, #1
90016974:	3002      	adds	r0, #2
90016976:	4421      	add	r1, r4
90016978:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001697a:	4422      	add	r2, r4
9001697c:	e7ee      	b.n	9001695c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001697e:	d019      	beq.n	900169b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90016980:	1e5c      	subs	r4, r3, #1
90016982:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90016984:	fb05 1504 	mla	r5, r5, r4, r1
90016988:	142d      	asrs	r5, r5, #16
9001698a:	d409      	bmi.n	900169a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001698c:	42bd      	cmp	r5, r7
9001698e:	da07      	bge.n	900169a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90016990:	9d14      	ldr	r5, [sp, #80]	; 0x50
90016992:	fb05 2404 	mla	r4, r5, r4, r2
90016996:	1424      	asrs	r4, r4, #16
90016998:	d402      	bmi.n	900169a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001699a:	42b4      	cmp	r4, r6
9001699c:	f2c0 80b1 	blt.w	90016b02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
900169a0:	f04f 0800 	mov.w	r8, #0
900169a4:	eb03 0408 	add.w	r4, r3, r8
900169a8:	2c00      	cmp	r4, #0
900169aa:	dc3e      	bgt.n	90016a2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
900169ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900169b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900169b4:	f1bb 0f00 	cmp.w	fp, #0
900169b8:	f340 8108 	ble.w	90016bcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900169bc:	ee30 0a04 	vadd.f32	s0, s0, s8
900169c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900169c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900169c6:	f1bb 0b01 	subs.w	fp, fp, #1
900169ca:	eeb0 6a62 	vmov.f32	s12, s5
900169ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
900169d2:	ee31 1a05 	vadd.f32	s2, s2, s10
900169d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900169da:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900169de:	eeb0 6a43 	vmov.f32	s12, s6
900169e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900169e6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900169ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
900169ee:	ee61 7a27 	vmul.f32	s15, s2, s15
900169f2:	ee77 2a62 	vsub.f32	s5, s14, s5
900169f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
900169fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900169fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016a02:	ee12 2a90 	vmov	r2, s5
90016a06:	eef0 2a47 	vmov.f32	s5, s14
90016a0a:	fb92 f3f3 	sdiv	r3, r2, r3
90016a0e:	ee13 2a10 	vmov	r2, s6
90016a12:	9313      	str	r3, [sp, #76]	; 0x4c
90016a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016a16:	eeb0 3a67 	vmov.f32	s6, s15
90016a1a:	fb92 f3f3 	sdiv	r3, r2, r3
90016a1e:	9a04      	ldr	r2, [sp, #16]
90016a20:	9314      	str	r3, [sp, #80]	; 0x50
90016a22:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016a24:	bf08      	it	eq
90016a26:	4613      	moveq	r3, r2
90016a28:	e787      	b.n	9001693a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
90016a2a:	140e      	asrs	r6, r1, #16
90016a2c:	d462      	bmi.n	90016af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90016a2e:	f8de 5008 	ldr.w	r5, [lr, #8]
90016a32:	42b5      	cmp	r5, r6
90016a34:	dd5e      	ble.n	90016af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90016a36:	1417      	asrs	r7, r2, #16
90016a38:	d45c      	bmi.n	90016af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90016a3a:	f8de 400c 	ldr.w	r4, [lr, #12]
90016a3e:	42bc      	cmp	r4, r7
90016a40:	dd58      	ble.n	90016af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90016a42:	b22d      	sxth	r5, r5
90016a44:	9c02      	ldr	r4, [sp, #8]
90016a46:	fb07 6505 	mla	r5, r7, r5, r6
90016a4a:	5d66      	ldrb	r6, [r4, r5]
90016a4c:	2e00      	cmp	r6, #0
90016a4e:	d051      	beq.n	90016af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90016a50:	9c01      	ldr	r4, [sp, #4]
90016a52:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
90016a56:	f06f 0401 	mvn.w	r4, #1
90016a5a:	fb04 f408 	mul.w	r4, r4, r8
90016a5e:	ea4f 2c29 	mov.w	ip, r9, asr #8
90016a62:	5b05      	ldrh	r5, [r0, r4]
90016a64:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016a68:	9403      	str	r4, [sp, #12]
90016a6a:	9c05      	ldr	r4, [sp, #20]
90016a6c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90016a70:	4366      	muls	r6, r4
90016a72:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90016a76:	1c74      	adds	r4, r6, #1
90016a78:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90016a7c:	122e      	asrs	r6, r5, #8
90016a7e:	1224      	asrs	r4, r4, #8
90016a80:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90016a84:	00ed      	lsls	r5, r5, #3
90016a86:	b2a7      	uxth	r7, r4
90016a88:	43e4      	mvns	r4, r4
90016a8a:	b2ed      	uxtb	r5, r5
90016a8c:	b2e4      	uxtb	r4, r4
90016a8e:	fb16 f604 	smulbb	r6, r6, r4
90016a92:	fb15 f504 	smulbb	r5, r5, r4
90016a96:	fb0c 6c07 	mla	ip, ip, r7, r6
90016a9a:	ea4f 06e9 	mov.w	r6, r9, asr #3
90016a9e:	fb1a fa04 	smulbb	sl, sl, r4
90016aa2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
90016aa6:	fa1f fc8c 	uxth.w	ip, ip
90016aaa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016aae:	fa5f f989 	uxtb.w	r9, r9
90016ab2:	fb06 a607 	mla	r6, r6, r7, sl
90016ab6:	f10c 0401 	add.w	r4, ip, #1
90016aba:	fb09 5507 	mla	r5, r9, r7, r5
90016abe:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90016ac2:	9c03      	ldr	r4, [sp, #12]
90016ac4:	b2ad      	uxth	r5, r5
90016ac6:	b2b6      	uxth	r6, r6
90016ac8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016acc:	f105 0a01 	add.w	sl, r5, #1
90016ad0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016ad4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016ad8:	ea4a 0c0c 	orr.w	ip, sl, ip
90016adc:	f106 0a01 	add.w	sl, r6, #1
90016ae0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016ae4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016ae8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016aec:	ea4c 0c0a 	orr.w	ip, ip, sl
90016af0:	f820 c004 	strh.w	ip, [r0, r4]
90016af4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90016af6:	f108 38ff 	add.w	r8, r8, #4294967295
90016afa:	4421      	add	r1, r4
90016afc:	9c14      	ldr	r4, [sp, #80]	; 0x50
90016afe:	4422      	add	r2, r4
90016b00:	e750      	b.n	900169a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90016b02:	f04f 0900 	mov.w	r9, #0
90016b06:	eba3 0409 	sub.w	r4, r3, r9
90016b0a:	2c00      	cmp	r4, #0
90016b0c:	f77f af4e 	ble.w	900169ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90016b10:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90016b14:	140d      	asrs	r5, r1, #16
90016b16:	1414      	asrs	r4, r2, #16
90016b18:	fb06 5404 	mla	r4, r6, r4, r5
90016b1c:	9d02      	ldr	r5, [sp, #8]
90016b1e:	5d2e      	ldrb	r6, [r5, r4]
90016b20:	2e00      	cmp	r6, #0
90016b22:	d04c      	beq.n	90016bbe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90016b24:	9d01      	ldr	r5, [sp, #4]
90016b26:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
90016b2a:	9c05      	ldr	r4, [sp, #20]
90016b2c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90016b30:	ea4f 2c28 	mov.w	ip, r8, asr #8
90016b34:	4366      	muls	r6, r4
90016b36:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90016b3a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016b3e:	1c74      	adds	r4, r6, #1
90016b40:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90016b44:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90016b48:	122e      	asrs	r6, r5, #8
90016b4a:	1224      	asrs	r4, r4, #8
90016b4c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90016b50:	00ed      	lsls	r5, r5, #3
90016b52:	b2a7      	uxth	r7, r4
90016b54:	43e4      	mvns	r4, r4
90016b56:	b2ed      	uxtb	r5, r5
90016b58:	b2e4      	uxtb	r4, r4
90016b5a:	fb16 f604 	smulbb	r6, r6, r4
90016b5e:	fb15 f504 	smulbb	r5, r5, r4
90016b62:	fb0c 6c07 	mla	ip, ip, r7, r6
90016b66:	ea4f 06e8 	mov.w	r6, r8, asr #3
90016b6a:	fb1a fa04 	smulbb	sl, sl, r4
90016b6e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90016b72:	fa1f fc8c 	uxth.w	ip, ip
90016b76:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016b7a:	fa5f f888 	uxtb.w	r8, r8
90016b7e:	fb06 a607 	mla	r6, r6, r7, sl
90016b82:	f10c 0401 	add.w	r4, ip, #1
90016b86:	fb08 5507 	mla	r5, r8, r7, r5
90016b8a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90016b8e:	b2ad      	uxth	r5, r5
90016b90:	b2b6      	uxth	r6, r6
90016b92:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016b96:	f105 0a01 	add.w	sl, r5, #1
90016b9a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016b9e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016ba2:	ea4a 0c0c 	orr.w	ip, sl, ip
90016ba6:	f106 0a01 	add.w	sl, r6, #1
90016baa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016bae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016bb2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016bb6:	ea4c 0c0a 	orr.w	ip, ip, sl
90016bba:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
90016bbe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90016bc0:	f109 0901 	add.w	r9, r9, #1
90016bc4:	4421      	add	r1, r4
90016bc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
90016bc8:	4422      	add	r2, r4
90016bca:	e79c      	b.n	90016b06 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
90016bcc:	b007      	add	sp, #28
90016bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016bd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016bd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016bd6:	b085      	sub	sp, #20
90016bd8:	468b      	mov	fp, r1
90016bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90016bde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90016be0:	9203      	str	r2, [sp, #12]
90016be2:	6861      	ldr	r1, [r4, #4]
90016be4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90016be8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
90016bec:	fb01 2000 	mla	r0, r1, r0, r2
90016bf0:	6822      	ldr	r2, [r4, #0]
90016bf2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90016bf6:	f8d8 2000 	ldr.w	r2, [r8]
90016bfa:	9200      	str	r2, [sp, #0]
90016bfc:	f8d8 2004 	ldr.w	r2, [r8, #4]
90016c00:	9201      	str	r2, [sp, #4]
90016c02:	f1bb 0f00 	cmp.w	fp, #0
90016c06:	dc03      	bgt.n	90016c10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90016c08:	9a03      	ldr	r2, [sp, #12]
90016c0a:	2a00      	cmp	r2, #0
90016c0c:	f340 8146 	ble.w	90016e9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90016c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90016c12:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90016c16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016c1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016c1c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90016c20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016c24:	2b00      	cmp	r3, #0
90016c26:	dd0e      	ble.n	90016c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90016c28:	140c      	asrs	r4, r1, #16
90016c2a:	d405      	bmi.n	90016c38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90016c2c:	42bc      	cmp	r4, r7
90016c2e:	da03      	bge.n	90016c38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90016c30:	1414      	asrs	r4, r2, #16
90016c32:	d401      	bmi.n	90016c38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90016c34:	42b4      	cmp	r4, r6
90016c36:	db07      	blt.n	90016c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90016c38:	9c11      	ldr	r4, [sp, #68]	; 0x44
90016c3a:	3b01      	subs	r3, #1
90016c3c:	3002      	adds	r0, #2
90016c3e:	4421      	add	r1, r4
90016c40:	9c12      	ldr	r4, [sp, #72]	; 0x48
90016c42:	4422      	add	r2, r4
90016c44:	e7ee      	b.n	90016c24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90016c46:	d017      	beq.n	90016c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90016c48:	1e5c      	subs	r4, r3, #1
90016c4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90016c4c:	fb05 1504 	mla	r5, r5, r4, r1
90016c50:	142d      	asrs	r5, r5, #16
90016c52:	d409      	bmi.n	90016c68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90016c54:	42bd      	cmp	r5, r7
90016c56:	da07      	bge.n	90016c68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90016c58:	9d12      	ldr	r5, [sp, #72]	; 0x48
90016c5a:	fb05 2404 	mla	r4, r5, r4, r2
90016c5e:	1424      	asrs	r4, r4, #16
90016c60:	d402      	bmi.n	90016c68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90016c62:	42b4      	cmp	r4, r6
90016c64:	f2c0 80b3 	blt.w	90016dce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90016c68:	2600      	movs	r6, #0
90016c6a:	199c      	adds	r4, r3, r6
90016c6c:	2c00      	cmp	r4, #0
90016c6e:	dc3e      	bgt.n	90016cee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90016c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016c74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90016c78:	f1bb 0f00 	cmp.w	fp, #0
90016c7c:	f340 810e 	ble.w	90016e9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90016c80:	ee30 0a04 	vadd.f32	s0, s0, s8
90016c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016c86:	ee70 0aa4 	vadd.f32	s1, s1, s9
90016c8a:	f1bb 0b01 	subs.w	fp, fp, #1
90016c8e:	eeb0 6a62 	vmov.f32	s12, s5
90016c92:	eec6 7a80 	vdiv.f32	s15, s13, s0
90016c96:	ee31 1a05 	vadd.f32	s2, s2, s10
90016c9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016c9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90016ca2:	eeb0 6a43 	vmov.f32	s12, s6
90016ca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90016caa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90016cae:	ee20 7aa7 	vmul.f32	s14, s1, s15
90016cb2:	ee61 7a27 	vmul.f32	s15, s2, s15
90016cb6:	ee77 2a62 	vsub.f32	s5, s14, s5
90016cba:	ee37 3ac3 	vsub.f32	s6, s15, s6
90016cbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90016cc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90016cc6:	ee12 2a90 	vmov	r2, s5
90016cca:	eef0 2a47 	vmov.f32	s5, s14
90016cce:	fb92 f3f3 	sdiv	r3, r2, r3
90016cd2:	ee13 2a10 	vmov	r2, s6
90016cd6:	9311      	str	r3, [sp, #68]	; 0x44
90016cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016cda:	eeb0 3a67 	vmov.f32	s6, s15
90016cde:	fb92 f3f3 	sdiv	r3, r2, r3
90016ce2:	9a03      	ldr	r2, [sp, #12]
90016ce4:	9312      	str	r3, [sp, #72]	; 0x48
90016ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016ce8:	bf08      	it	eq
90016cea:	4613      	moveq	r3, r2
90016cec:	e789      	b.n	90016c02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90016cee:	140f      	asrs	r7, r1, #16
90016cf0:	d418      	bmi.n	90016d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90016cf2:	f8d8 5008 	ldr.w	r5, [r8, #8]
90016cf6:	42bd      	cmp	r5, r7
90016cf8:	dd14      	ble.n	90016d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90016cfa:	ea5f 4c22 	movs.w	ip, r2, asr #16
90016cfe:	d411      	bmi.n	90016d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90016d00:	f8d8 400c 	ldr.w	r4, [r8, #12]
90016d04:	4564      	cmp	r4, ip
90016d06:	dd0d      	ble.n	90016d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90016d08:	b22d      	sxth	r5, r5
90016d0a:	9c01      	ldr	r4, [sp, #4]
90016d0c:	fb0c 7505 	mla	r5, ip, r5, r7
90016d10:	5d64      	ldrb	r4, [r4, r5]
90016d12:	2cff      	cmp	r4, #255	; 0xff
90016d14:	d10c      	bne.n	90016d30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90016d16:	9c00      	ldr	r4, [sp, #0]
90016d18:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
90016d1c:	f06f 0401 	mvn.w	r4, #1
90016d20:	4374      	muls	r4, r6
90016d22:	5305      	strh	r5, [r0, r4]
90016d24:	9c11      	ldr	r4, [sp, #68]	; 0x44
90016d26:	3e01      	subs	r6, #1
90016d28:	4421      	add	r1, r4
90016d2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
90016d2c:	4422      	add	r2, r4
90016d2e:	e79c      	b.n	90016c6a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90016d30:	2c00      	cmp	r4, #0
90016d32:	d0f7      	beq.n	90016d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90016d34:	9f00      	ldr	r7, [sp, #0]
90016d36:	fa1f fc84 	uxth.w	ip, r4
90016d3a:	43e4      	mvns	r4, r4
90016d3c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90016d40:	f06f 0501 	mvn.w	r5, #1
90016d44:	b2e4      	uxtb	r4, r4
90016d46:	4375      	muls	r5, r6
90016d48:	ea4f 2e29 	mov.w	lr, r9, asr #8
90016d4c:	9502      	str	r5, [sp, #8]
90016d4e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90016d52:	5b45      	ldrh	r5, [r0, r5]
90016d54:	122f      	asrs	r7, r5, #8
90016d56:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90016d5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016d5e:	00ed      	lsls	r5, r5, #3
90016d60:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90016d64:	fb17 f704 	smulbb	r7, r7, r4
90016d68:	b2ed      	uxtb	r5, r5
90016d6a:	fb1a fa04 	smulbb	sl, sl, r4
90016d6e:	fb0e 7e0c 	mla	lr, lr, ip, r7
90016d72:	ea4f 07e9 	mov.w	r7, r9, asr #3
90016d76:	fb15 f504 	smulbb	r5, r5, r4
90016d7a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
90016d7e:	fa1f fe8e 	uxth.w	lr, lr
90016d82:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90016d86:	fa5f f989 	uxtb.w	r9, r9
90016d8a:	fb07 a70c 	mla	r7, r7, ip, sl
90016d8e:	f10e 0401 	add.w	r4, lr, #1
90016d92:	fb09 550c 	mla	r5, r9, ip, r5
90016d96:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
90016d9a:	9c02      	ldr	r4, [sp, #8]
90016d9c:	b2ad      	uxth	r5, r5
90016d9e:	b2bf      	uxth	r7, r7
90016da0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90016da4:	f105 0a01 	add.w	sl, r5, #1
90016da8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016dac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016db0:	ea4a 0e0e 	orr.w	lr, sl, lr
90016db4:	f107 0a01 	add.w	sl, r7, #1
90016db8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90016dbc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016dc0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016dc4:	ea4e 0e0a 	orr.w	lr, lr, sl
90016dc8:	f820 e004 	strh.w	lr, [r0, r4]
90016dcc:	e7aa      	b.n	90016d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90016dce:	f04f 0900 	mov.w	r9, #0
90016dd2:	eba3 0409 	sub.w	r4, r3, r9
90016dd6:	2c00      	cmp	r4, #0
90016dd8:	f77f af4a 	ble.w	90016c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016ddc:	1414      	asrs	r4, r2, #16
90016dde:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90016de2:	140d      	asrs	r5, r1, #16
90016de4:	fb06 5504 	mla	r5, r6, r4, r5
90016de8:	9c01      	ldr	r4, [sp, #4]
90016dea:	5d64      	ldrb	r4, [r4, r5]
90016dec:	2cff      	cmp	r4, #255	; 0xff
90016dee:	d10b      	bne.n	90016e08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90016df0:	9c00      	ldr	r4, [sp, #0]
90016df2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
90016df6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
90016dfa:	9c11      	ldr	r4, [sp, #68]	; 0x44
90016dfc:	f109 0901 	add.w	r9, r9, #1
90016e00:	4421      	add	r1, r4
90016e02:	9c12      	ldr	r4, [sp, #72]	; 0x48
90016e04:	4422      	add	r2, r4
90016e06:	e7e4      	b.n	90016dd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90016e08:	2c00      	cmp	r4, #0
90016e0a:	d0f6      	beq.n	90016dfa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90016e0c:	9e00      	ldr	r6, [sp, #0]
90016e0e:	b2a7      	uxth	r7, r4
90016e10:	43e4      	mvns	r4, r4
90016e12:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
90016e16:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90016e1a:	b2e4      	uxtb	r4, r4
90016e1c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90016e20:	122e      	asrs	r6, r5, #8
90016e22:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90016e26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016e2a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90016e2e:	00ed      	lsls	r5, r5, #3
90016e30:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90016e34:	fb16 f604 	smulbb	r6, r6, r4
90016e38:	b2ed      	uxtb	r5, r5
90016e3a:	fb1a fa04 	smulbb	sl, sl, r4
90016e3e:	fb0c 6c07 	mla	ip, ip, r7, r6
90016e42:	ea4f 06ee 	mov.w	r6, lr, asr #3
90016e46:	fb15 f504 	smulbb	r5, r5, r4
90016e4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90016e4e:	fa1f fc8c 	uxth.w	ip, ip
90016e52:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90016e56:	fa5f fe8e 	uxtb.w	lr, lr
90016e5a:	fb06 a607 	mla	r6, r6, r7, sl
90016e5e:	f10c 0401 	add.w	r4, ip, #1
90016e62:	fb0e 5507 	mla	r5, lr, r7, r5
90016e66:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90016e6a:	b2ad      	uxth	r5, r5
90016e6c:	b2b6      	uxth	r6, r6
90016e6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016e72:	f105 0a01 	add.w	sl, r5, #1
90016e76:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90016e7a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90016e7e:	ea4a 0c0c 	orr.w	ip, sl, ip
90016e82:	f106 0a01 	add.w	sl, r6, #1
90016e86:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90016e8a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90016e8e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90016e92:	ea4c 0c0a 	orr.w	ip, ip, sl
90016e96:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
90016e9a:	e7ae      	b.n	90016dfa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90016e9c:	b005      	add	sp, #20
90016e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016ea2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90016ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016ea6:	b085      	sub	sp, #20
90016ea8:	9813      	ldr	r0, [sp, #76]	; 0x4c
90016eaa:	9203      	str	r2, [sp, #12]
90016eac:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
90016eb0:	9100      	str	r1, [sp, #0]
90016eb2:	9201      	str	r2, [sp, #4]
90016eb4:	6841      	ldr	r1, [r0, #4]
90016eb6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90016eba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90016ebe:	fb01 2404 	mla	r4, r1, r4, r2
90016ec2:	6802      	ldr	r2, [r0, #0]
90016ec4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90016ec8:	f8de 2000 	ldr.w	r2, [lr]
90016ecc:	9202      	str	r2, [sp, #8]
90016ece:	9a01      	ldr	r2, [sp, #4]
90016ed0:	43d6      	mvns	r6, r2
90016ed2:	b2f6      	uxtb	r6, r6
90016ed4:	9a00      	ldr	r2, [sp, #0]
90016ed6:	2a00      	cmp	r2, #0
90016ed8:	dc03      	bgt.n	90016ee2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90016eda:	9a03      	ldr	r2, [sp, #12]
90016edc:	2a00      	cmp	r2, #0
90016ede:	f340 8124 	ble.w	9001712a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90016ee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90016ee4:	f9be c008 	ldrsh.w	ip, [lr, #8]
90016ee8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90016eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016eee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90016ef2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90016ef6:	2b00      	cmp	r3, #0
90016ef8:	dd0e      	ble.n	90016f18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90016efa:	1408      	asrs	r0, r1, #16
90016efc:	d405      	bmi.n	90016f0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016efe:	4560      	cmp	r0, ip
90016f00:	da03      	bge.n	90016f0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016f02:	1410      	asrs	r0, r2, #16
90016f04:	d401      	bmi.n	90016f0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90016f06:	42b8      	cmp	r0, r7
90016f08:	db07      	blt.n	90016f1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90016f0a:	9811      	ldr	r0, [sp, #68]	; 0x44
90016f0c:	3b01      	subs	r3, #1
90016f0e:	3402      	adds	r4, #2
90016f10:	4401      	add	r1, r0
90016f12:	9812      	ldr	r0, [sp, #72]	; 0x48
90016f14:	4402      	add	r2, r0
90016f16:	e7ee      	b.n	90016ef6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90016f18:	d06e      	beq.n	90016ff8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90016f1a:	1e58      	subs	r0, r3, #1
90016f1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
90016f1e:	fb05 1500 	mla	r5, r5, r0, r1
90016f22:	142d      	asrs	r5, r5, #16
90016f24:	d45c      	bmi.n	90016fe0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90016f26:	4565      	cmp	r5, ip
90016f28:	da5a      	bge.n	90016fe0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90016f2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
90016f2c:	fb05 2000 	mla	r0, r5, r0, r2
90016f30:	1400      	asrs	r0, r0, #16
90016f32:	d455      	bmi.n	90016fe0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90016f34:	42b8      	cmp	r0, r7
90016f36:	da53      	bge.n	90016fe0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90016f38:	4699      	mov	r9, r3
90016f3a:	46a2      	mov	sl, r4
90016f3c:	f8bd b004 	ldrh.w	fp, [sp, #4]
90016f40:	f1b9 0f00 	cmp.w	r9, #0
90016f44:	dd54      	ble.n	90016ff0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90016f46:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90016f4a:	140d      	asrs	r5, r1, #16
90016f4c:	1410      	asrs	r0, r2, #16
90016f4e:	f109 39ff 	add.w	r9, r9, #4294967295
90016f52:	fb07 5000 	mla	r0, r7, r0, r5
90016f56:	9d02      	ldr	r5, [sp, #8]
90016f58:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90016f5c:	f8ba 5000 	ldrh.w	r5, [sl]
90016f60:	ea4f 2c20 	mov.w	ip, r0, asr #8
90016f64:	122f      	asrs	r7, r5, #8
90016f66:	ea4f 08e5 	mov.w	r8, r5, asr #3
90016f6a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90016f6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90016f72:	00ed      	lsls	r5, r5, #3
90016f74:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90016f78:	fb17 f706 	smulbb	r7, r7, r6
90016f7c:	b2ed      	uxtb	r5, r5
90016f7e:	fb18 f806 	smulbb	r8, r8, r6
90016f82:	fb0c 7c0b 	mla	ip, ip, fp, r7
90016f86:	10c7      	asrs	r7, r0, #3
90016f88:	fb15 f506 	smulbb	r5, r5, r6
90016f8c:	00c0      	lsls	r0, r0, #3
90016f8e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90016f92:	fa1f fc8c 	uxth.w	ip, ip
90016f96:	b2c0      	uxtb	r0, r0
90016f98:	fb07 870b 	mla	r7, r7, fp, r8
90016f9c:	fb00 500b 	mla	r0, r0, fp, r5
90016fa0:	f10c 0501 	add.w	r5, ip, #1
90016fa4:	b2bf      	uxth	r7, r7
90016fa6:	b280      	uxth	r0, r0
90016fa8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90016fac:	f107 0801 	add.w	r8, r7, #1
90016fb0:	1c45      	adds	r5, r0, #1
90016fb2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
90016fb6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90016fba:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90016fbe:	9811      	ldr	r0, [sp, #68]	; 0x44
90016fc0:	ea4f 1858 	mov.w	r8, r8, lsr #5
90016fc4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90016fc8:	4401      	add	r1, r0
90016fca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90016fce:	9812      	ldr	r0, [sp, #72]	; 0x48
90016fd0:	ea45 0c0c 	orr.w	ip, r5, ip
90016fd4:	4402      	add	r2, r0
90016fd6:	ea4c 0c08 	orr.w	ip, ip, r8
90016fda:	f82a cb02 	strh.w	ip, [sl], #2
90016fde:	e7af      	b.n	90016f40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90016fe0:	f04f 0800 	mov.w	r8, #0
90016fe4:	f8bd a004 	ldrh.w	sl, [sp, #4]
90016fe8:	eb03 0008 	add.w	r0, r3, r8
90016fec:	2800      	cmp	r0, #0
90016fee:	dc41      	bgt.n	90017074 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90016ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90016ff4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016ff8:	9b00      	ldr	r3, [sp, #0]
90016ffa:	2b00      	cmp	r3, #0
90016ffc:	f340 8095 	ble.w	9001712a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90017000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90017004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017006:	ee30 0a04 	vadd.f32	s0, s0, s8
9001700a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001700e:	eef0 6a62 	vmov.f32	s13, s5
90017012:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017016:	ee31 1a05 	vadd.f32	s2, s2, s10
9001701a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001701e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
90017022:	eef0 6a43 	vmov.f32	s13, s6
90017026:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001702a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001702e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017032:	ee61 7a27 	vmul.f32	s15, s2, s15
90017036:	ee77 2a62 	vsub.f32	s5, s14, s5
9001703a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001703e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017042:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017046:	ee12 2a90 	vmov	r2, s5
9001704a:	eef0 2a47 	vmov.f32	s5, s14
9001704e:	fb92 f3f3 	sdiv	r3, r2, r3
90017052:	ee13 2a10 	vmov	r2, s6
90017056:	9311      	str	r3, [sp, #68]	; 0x44
90017058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001705a:	eeb0 3a67 	vmov.f32	s6, s15
9001705e:	fb92 f3f3 	sdiv	r3, r2, r3
90017062:	9312      	str	r3, [sp, #72]	; 0x48
90017064:	9b00      	ldr	r3, [sp, #0]
90017066:	9a03      	ldr	r2, [sp, #12]
90017068:	3b01      	subs	r3, #1
9001706a:	9300      	str	r3, [sp, #0]
9001706c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001706e:	bf08      	it	eq
90017070:	4613      	moveq	r3, r2
90017072:	e72f      	b.n	90016ed4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90017074:	140f      	asrs	r7, r1, #16
90017076:	d451      	bmi.n	9001711c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90017078:	f8de 5008 	ldr.w	r5, [lr, #8]
9001707c:	42bd      	cmp	r5, r7
9001707e:	dd4d      	ble.n	9001711c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90017080:	ea5f 4c22 	movs.w	ip, r2, asr #16
90017084:	d44a      	bmi.n	9001711c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90017086:	f8de 000c 	ldr.w	r0, [lr, #12]
9001708a:	4560      	cmp	r0, ip
9001708c:	dd46      	ble.n	9001711c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001708e:	b22d      	sxth	r5, r5
90017090:	9802      	ldr	r0, [sp, #8]
90017092:	fb0c 7505 	mla	r5, ip, r5, r7
90017096:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001709a:	f06f 0501 	mvn.w	r5, #1
9001709e:	fb05 fb08 	mul.w	fp, r5, r8
900170a2:	ea4f 2c20 	mov.w	ip, r0, asr #8
900170a6:	f834 500b 	ldrh.w	r5, [r4, fp]
900170aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900170ae:	122f      	asrs	r7, r5, #8
900170b0:	ea4f 09e5 	mov.w	r9, r5, asr #3
900170b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900170b8:	00ed      	lsls	r5, r5, #3
900170ba:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900170be:	fb17 f706 	smulbb	r7, r7, r6
900170c2:	b2ed      	uxtb	r5, r5
900170c4:	fb19 f906 	smulbb	r9, r9, r6
900170c8:	fb0c 7c0a 	mla	ip, ip, sl, r7
900170cc:	10c7      	asrs	r7, r0, #3
900170ce:	fb15 f506 	smulbb	r5, r5, r6
900170d2:	00c0      	lsls	r0, r0, #3
900170d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900170d8:	fa1f fc8c 	uxth.w	ip, ip
900170dc:	b2c0      	uxtb	r0, r0
900170de:	fb07 970a 	mla	r7, r7, sl, r9
900170e2:	fb00 500a 	mla	r0, r0, sl, r5
900170e6:	f10c 0501 	add.w	r5, ip, #1
900170ea:	b2bf      	uxth	r7, r7
900170ec:	b280      	uxth	r0, r0
900170ee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900170f2:	f107 0901 	add.w	r9, r7, #1
900170f6:	1c45      	adds	r5, r0, #1
900170f8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
900170fc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017100:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90017104:	ea4f 1959 	mov.w	r9, r9, lsr #5
90017108:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001710c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90017110:	ea45 0c0c 	orr.w	ip, r5, ip
90017114:	ea4c 0c09 	orr.w	ip, ip, r9
90017118:	f824 c00b 	strh.w	ip, [r4, fp]
9001711c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001711e:	f108 38ff 	add.w	r8, r8, #4294967295
90017122:	4401      	add	r1, r0
90017124:	9812      	ldr	r0, [sp, #72]	; 0x48
90017126:	4402      	add	r2, r0
90017128:	e75e      	b.n	90016fe8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001712a:	b005      	add	sp, #20
9001712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017130 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017134:	b085      	sub	sp, #20
90017136:	4693      	mov	fp, r2
90017138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001713c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001713e:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017140:	6870      	ldr	r0, [r6, #4]
90017142:	9101      	str	r1, [sp, #4]
90017144:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017148:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001714c:	fb00 2404 	mla	r4, r0, r4, r2
90017150:	6832      	ldr	r2, [r6, #0]
90017152:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017156:	682a      	ldr	r2, [r5, #0]
90017158:	9202      	str	r2, [sp, #8]
9001715a:	9a01      	ldr	r2, [sp, #4]
9001715c:	2a00      	cmp	r2, #0
9001715e:	dc03      	bgt.n	90017168 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90017160:	f1bb 0f00 	cmp.w	fp, #0
90017164:	f340 809a 	ble.w	9001729c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90017168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001716a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001716e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017172:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017174:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017178:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001717c:	2b00      	cmp	r3, #0
9001717e:	dd0c      	ble.n	9001719a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
90017180:	1406      	asrs	r6, r0, #16
90017182:	d405      	bmi.n	90017190 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017184:	454e      	cmp	r6, r9
90017186:	da03      	bge.n	90017190 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90017188:	1416      	asrs	r6, r2, #16
9001718a:	d401      	bmi.n	90017190 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001718c:	4546      	cmp	r6, r8
9001718e:	db05      	blt.n	9001719c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90017190:	4470      	add	r0, lr
90017192:	4462      	add	r2, ip
90017194:	3b01      	subs	r3, #1
90017196:	3402      	adds	r4, #2
90017198:	e7f0      	b.n	9001717c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001719a:	d00f      	beq.n	900171bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001719c:	1e5e      	subs	r6, r3, #1
9001719e:	fb0e 0706 	mla	r7, lr, r6, r0
900171a2:	143f      	asrs	r7, r7, #16
900171a4:	d541      	bpl.n	9001722a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
900171a6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900171aa:	4698      	mov	r8, r3
900171ac:	9603      	str	r6, [sp, #12]
900171ae:	f1b8 0f00 	cmp.w	r8, #0
900171b2:	dc56      	bgt.n	90017262 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
900171b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900171b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900171bc:	9b01      	ldr	r3, [sp, #4]
900171be:	2b00      	cmp	r3, #0
900171c0:	dd6c      	ble.n	9001729c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
900171c2:	ee30 0a04 	vadd.f32	s0, s0, s8
900171c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900171c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
900171cc:	eeb0 6a62 	vmov.f32	s12, s5
900171d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
900171d4:	ee31 1a05 	vadd.f32	s2, s2, s10
900171d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900171dc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900171e0:	eeb0 6a43 	vmov.f32	s12, s6
900171e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900171e8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900171ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
900171f0:	ee61 7a27 	vmul.f32	s15, s2, s15
900171f4:	ee77 2a62 	vsub.f32	s5, s14, s5
900171f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
900171fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017200:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017204:	ee12 2a90 	vmov	r2, s5
90017208:	eef0 2a47 	vmov.f32	s5, s14
9001720c:	fb92 fef3 	sdiv	lr, r2, r3
90017210:	ee13 2a10 	vmov	r2, s6
90017214:	eeb0 3a67 	vmov.f32	s6, s15
90017218:	fb92 fcf3 	sdiv	ip, r2, r3
9001721c:	9b01      	ldr	r3, [sp, #4]
9001721e:	3b01      	subs	r3, #1
90017220:	9301      	str	r3, [sp, #4]
90017222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017224:	bf08      	it	eq
90017226:	465b      	moveq	r3, fp
90017228:	e797      	b.n	9001715a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001722a:	454f      	cmp	r7, r9
9001722c:	dabb      	bge.n	900171a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001722e:	fb0c 2606 	mla	r6, ip, r6, r2
90017232:	1436      	asrs	r6, r6, #16
90017234:	d4b7      	bmi.n	900171a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017236:	4546      	cmp	r6, r8
90017238:	dab5      	bge.n	900171a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001723a:	461e      	mov	r6, r3
9001723c:	46a0      	mov	r8, r4
9001723e:	2e00      	cmp	r6, #0
90017240:	ddb8      	ble.n	900171b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017242:	1417      	asrs	r7, r2, #16
90017244:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90017248:	ea4f 4920 	mov.w	r9, r0, asr #16
9001724c:	9902      	ldr	r1, [sp, #8]
9001724e:	4470      	add	r0, lr
90017250:	4462      	add	r2, ip
90017252:	fb0a 9707 	mla	r7, sl, r7, r9
90017256:	3e01      	subs	r6, #1
90017258:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001725c:	f828 7b02 	strh.w	r7, [r8], #2
90017260:	e7ed      	b.n	9001723e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
90017262:	ea5f 4920 	movs.w	r9, r0, asr #16
90017266:	d414      	bmi.n	90017292 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90017268:	68ae      	ldr	r6, [r5, #8]
9001726a:	454e      	cmp	r6, r9
9001726c:	dd11      	ble.n	90017292 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001726e:	ea5f 4a22 	movs.w	sl, r2, asr #16
90017272:	d40e      	bmi.n	90017292 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90017274:	68ef      	ldr	r7, [r5, #12]
90017276:	4557      	cmp	r7, sl
90017278:	dd0b      	ble.n	90017292 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001727a:	b236      	sxth	r6, r6
9001727c:	f06f 0101 	mvn.w	r1, #1
90017280:	9f02      	ldr	r7, [sp, #8]
90017282:	fb0a 9606 	mla	r6, sl, r6, r9
90017286:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001728a:	fb01 f608 	mul.w	r6, r1, r8
9001728e:	9903      	ldr	r1, [sp, #12]
90017290:	538f      	strh	r7, [r1, r6]
90017292:	4470      	add	r0, lr
90017294:	4462      	add	r2, ip
90017296:	f108 38ff 	add.w	r8, r8, #4294967295
9001729a:	e788      	b.n	900171ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001729c:	b005      	add	sp, #20
9001729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900172a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900172a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900172a6:	b087      	sub	sp, #28
900172a8:	468b      	mov	fp, r1
900172aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900172ae:	9815      	ldr	r0, [sp, #84]	; 0x54
900172b0:	9203      	str	r2, [sp, #12]
900172b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900172b6:	6841      	ldr	r1, [r0, #4]
900172b8:	9204      	str	r2, [sp, #16]
900172ba:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
900172be:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
900172c2:	fb01 2505 	mla	r5, r1, r5, r2
900172c6:	6802      	ldr	r2, [r0, #0]
900172c8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
900172cc:	f8d9 2000 	ldr.w	r2, [r9]
900172d0:	9201      	str	r2, [sp, #4]
900172d2:	f1bb 0f00 	cmp.w	fp, #0
900172d6:	dc03      	bgt.n	900172e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900172d8:	9a03      	ldr	r2, [sp, #12]
900172da:	2a00      	cmp	r2, #0
900172dc:	f340 8158 	ble.w	90017590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
900172e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
900172e2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
900172e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900172ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
900172ec:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
900172f0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900172f4:	2b00      	cmp	r3, #0
900172f6:	dd0e      	ble.n	90017316 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
900172f8:	1402      	asrs	r2, r0, #16
900172fa:	d405      	bmi.n	90017308 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900172fc:	42ba      	cmp	r2, r7
900172fe:	da03      	bge.n	90017308 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017300:	140a      	asrs	r2, r1, #16
90017302:	d401      	bmi.n	90017308 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017304:	42b2      	cmp	r2, r6
90017306:	db07      	blt.n	90017318 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90017308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001730a:	3b01      	subs	r3, #1
9001730c:	3502      	adds	r5, #2
9001730e:	4410      	add	r0, r2
90017310:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017312:	4411      	add	r1, r2
90017314:	e7ee      	b.n	900172f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90017316:	d017      	beq.n	90017348 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017318:	1e5a      	subs	r2, r3, #1
9001731a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001731c:	fb04 0402 	mla	r4, r4, r2, r0
90017320:	1424      	asrs	r4, r4, #16
90017322:	d409      	bmi.n	90017338 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017324:	42bc      	cmp	r4, r7
90017326:	da07      	bge.n	90017338 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017328:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001732a:	fb04 1202 	mla	r2, r4, r2, r1
9001732e:	1412      	asrs	r2, r2, #16
90017330:	d402      	bmi.n	90017338 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90017332:	42b2      	cmp	r2, r6
90017334:	f2c0 80bf 	blt.w	900174b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90017338:	2700      	movs	r7, #0
9001733a:	19da      	adds	r2, r3, r7
9001733c:	2a00      	cmp	r2, #0
9001733e:	dc3e      	bgt.n	900173be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017344:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90017348:	f1bb 0f00 	cmp.w	fp, #0
9001734c:	f340 8120 	ble.w	90017590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90017350:	ee30 0a04 	vadd.f32	s0, s0, s8
90017354:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017356:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001735a:	f1bb 0b01 	subs.w	fp, fp, #1
9001735e:	eeb0 6a62 	vmov.f32	s12, s5
90017362:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017366:	ee31 1a05 	vadd.f32	s2, s2, s10
9001736a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001736e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017372:	eeb0 6a43 	vmov.f32	s12, s6
90017376:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001737a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001737e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017382:	ee61 7a27 	vmul.f32	s15, s2, s15
90017386:	ee77 2a62 	vsub.f32	s5, s14, s5
9001738a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001738e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017392:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017396:	ee12 2a90 	vmov	r2, s5
9001739a:	eef0 2a47 	vmov.f32	s5, s14
9001739e:	fb92 f3f3 	sdiv	r3, r2, r3
900173a2:	ee13 2a10 	vmov	r2, s6
900173a6:	9313      	str	r3, [sp, #76]	; 0x4c
900173a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900173aa:	eeb0 3a67 	vmov.f32	s6, s15
900173ae:	fb92 f3f3 	sdiv	r3, r2, r3
900173b2:	9a03      	ldr	r2, [sp, #12]
900173b4:	9314      	str	r3, [sp, #80]	; 0x50
900173b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
900173b8:	bf08      	it	eq
900173ba:	4613      	moveq	r3, r2
900173bc:	e789      	b.n	900172d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
900173be:	1406      	asrs	r6, r0, #16
900173c0:	d42d      	bmi.n	9001741e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900173c2:	f8d9 4008 	ldr.w	r4, [r9, #8]
900173c6:	42b4      	cmp	r4, r6
900173c8:	dd29      	ble.n	9001741e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900173ca:	ea5f 4c21 	movs.w	ip, r1, asr #16
900173ce:	d426      	bmi.n	9001741e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900173d0:	f8d9 200c 	ldr.w	r2, [r9, #12]
900173d4:	4562      	cmp	r2, ip
900173d6:	dd22      	ble.n	9001741e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900173d8:	b224      	sxth	r4, r4
900173da:	9a01      	ldr	r2, [sp, #4]
900173dc:	fb0c 6404 	mla	r4, ip, r4, r6
900173e0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
900173e4:	0e22      	lsrs	r2, r4, #24
900173e6:	d01a      	beq.n	9001741e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900173e8:	9e04      	ldr	r6, [sp, #16]
900173ea:	4372      	muls	r2, r6
900173ec:	1c56      	adds	r6, r2, #1
900173ee:	eb06 2222 	add.w	r2, r6, r2, asr #8
900173f2:	0a26      	lsrs	r6, r4, #8
900173f4:	1212      	asrs	r2, r2, #8
900173f6:	9605      	str	r6, [sp, #20]
900173f8:	2aff      	cmp	r2, #255	; 0xff
900173fa:	d116      	bne.n	9001742a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
900173fc:	f06f 0201 	mvn.w	r2, #1
90017400:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90017404:	fb02 fc07 	mul.w	ip, r2, r7
90017408:	0962      	lsrs	r2, r4, #5
9001740a:	f026 0607 	bic.w	r6, r6, #7
9001740e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90017412:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017416:	4316      	orrs	r6, r2
90017418:	4326      	orrs	r6, r4
9001741a:	f825 600c 	strh.w	r6, [r5, ip]
9001741e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017420:	3f01      	subs	r7, #1
90017422:	4410      	add	r0, r2
90017424:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017426:	4411      	add	r1, r2
90017428:	e787      	b.n	9001733a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001742a:	f06f 0601 	mvn.w	r6, #1
9001742e:	fa1f fa82 	uxth.w	sl, r2
90017432:	f3c4 4c07 	ubfx	ip, r4, #16, #8
90017436:	43d2      	mvns	r2, r2
90017438:	437e      	muls	r6, r7
9001743a:	b2e4      	uxtb	r4, r4
9001743c:	fb1c fc0a 	smulbb	ip, ip, sl
90017440:	b2d2      	uxtb	r2, r2
90017442:	f835 8006 	ldrh.w	r8, [r5, r6]
90017446:	fb14 f40a 	smulbb	r4, r4, sl
9001744a:	9602      	str	r6, [sp, #8]
9001744c:	ea4f 2e28 	mov.w	lr, r8, asr #8
90017450:	f89d 6014 	ldrb.w	r6, [sp, #20]
90017454:	fb16 f60a 	smulbb	r6, r6, sl
90017458:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001745c:	fb0e ce02 	mla	lr, lr, r2, ip
90017460:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90017464:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90017468:	fa1f fe8e 	uxth.w	lr, lr
9001746c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90017470:	fa5f f888 	uxtb.w	r8, r8
90017474:	fb0c 6c02 	mla	ip, ip, r2, r6
90017478:	fb08 4402 	mla	r4, r8, r2, r4
9001747c:	f10e 0201 	add.w	r2, lr, #1
90017480:	fa1f fc8c 	uxth.w	ip, ip
90017484:	b2a4      	uxth	r4, r4
90017486:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001748a:	9a02      	ldr	r2, [sp, #8]
9001748c:	1c66      	adds	r6, r4, #1
9001748e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90017492:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90017496:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001749a:	ea46 0e0e 	orr.w	lr, r6, lr
9001749e:	f10c 0601 	add.w	r6, ip, #1
900174a2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
900174a6:	0976      	lsrs	r6, r6, #5
900174a8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900174ac:	ea4e 0e06 	orr.w	lr, lr, r6
900174b0:	f825 e002 	strh.w	lr, [r5, r2]
900174b4:	e7b3      	b.n	9001741e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900174b6:	f04f 0800 	mov.w	r8, #0
900174ba:	eba3 0208 	sub.w	r2, r3, r8
900174be:	2a00      	cmp	r2, #0
900174c0:	f77f af3e 	ble.w	90017340 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900174c4:	1404      	asrs	r4, r0, #16
900174c6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
900174ca:	140a      	asrs	r2, r1, #16
900174cc:	fb06 4202 	mla	r2, r6, r2, r4
900174d0:	9c01      	ldr	r4, [sp, #4]
900174d2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
900174d6:	0e22      	lsrs	r2, r4, #24
900174d8:	d015      	beq.n	90017506 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
900174da:	9e04      	ldr	r6, [sp, #16]
900174dc:	4372      	muls	r2, r6
900174de:	1c56      	adds	r6, r2, #1
900174e0:	eb06 2222 	add.w	r2, r6, r2, asr #8
900174e4:	0a26      	lsrs	r6, r4, #8
900174e6:	1212      	asrs	r2, r2, #8
900174e8:	2aff      	cmp	r2, #255	; 0xff
900174ea:	d113      	bne.n	90017514 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900174ec:	0962      	lsrs	r2, r4, #5
900174ee:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
900174f2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
900174f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900174fa:	f026 0607 	bic.w	r6, r6, #7
900174fe:	4316      	orrs	r6, r2
90017500:	4326      	orrs	r6, r4
90017502:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90017506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017508:	f108 0801 	add.w	r8, r8, #1
9001750c:	4410      	add	r0, r2
9001750e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017510:	4411      	add	r1, r2
90017512:	e7d2      	b.n	900174ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
90017514:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90017518:	fa1f fa82 	uxth.w	sl, r2
9001751c:	f3c4 4707 	ubfx	r7, r4, #16, #8
90017520:	43d2      	mvns	r2, r2
90017522:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017526:	fb17 f70a 	smulbb	r7, r7, sl
9001752a:	b2d2      	uxtb	r2, r2
9001752c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017530:	b2e4      	uxtb	r4, r4
90017532:	b2f6      	uxtb	r6, r6
90017534:	fb0c 7c02 	mla	ip, ip, r2, r7
90017538:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001753c:	fb14 f40a 	smulbb	r4, r4, sl
90017540:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017544:	fa1f fc8c 	uxth.w	ip, ip
90017548:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001754c:	fb16 f60a 	smulbb	r6, r6, sl
90017550:	fa5f fe8e 	uxtb.w	lr, lr
90017554:	fb0e 4402 	mla	r4, lr, r2, r4
90017558:	fb07 6702 	mla	r7, r7, r2, r6
9001755c:	f10c 0201 	add.w	r2, ip, #1
90017560:	b2a4      	uxth	r4, r4
90017562:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90017566:	1c66      	adds	r6, r4, #1
90017568:	b2bf      	uxth	r7, r7
9001756a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001756e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90017572:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90017576:	ea46 0c0c 	orr.w	ip, r6, ip
9001757a:	1c7e      	adds	r6, r7, #1
9001757c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
90017580:	0976      	lsrs	r6, r6, #5
90017582:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017586:	ea4c 0c06 	orr.w	ip, ip, r6
9001758a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
9001758e:	e7ba      	b.n	90017506 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90017590:	b007      	add	sp, #28
90017592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017598 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001759c:	b085      	sub	sp, #20
9001759e:	468b      	mov	fp, r1
900175a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900175a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
900175a6:	9203      	str	r2, [sp, #12]
900175a8:	6841      	ldr	r1, [r0, #4]
900175aa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
900175ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900175b2:	fb01 2404 	mla	r4, r1, r4, r2
900175b6:	6802      	ldr	r2, [r0, #0]
900175b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900175bc:	f8d8 2000 	ldr.w	r2, [r8]
900175c0:	9201      	str	r2, [sp, #4]
900175c2:	f1bb 0f00 	cmp.w	fp, #0
900175c6:	dc03      	bgt.n	900175d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900175c8:	9a03      	ldr	r2, [sp, #12]
900175ca:	2a00      	cmp	r2, #0
900175cc:	f340 814f 	ble.w	9001786e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
900175d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900175d2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
900175d6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900175da:	9a10      	ldr	r2, [sp, #64]	; 0x40
900175dc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
900175e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900175e4:	2b00      	cmp	r3, #0
900175e6:	dd0e      	ble.n	90017606 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900175e8:	1408      	asrs	r0, r1, #16
900175ea:	d405      	bmi.n	900175f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900175ec:	42b8      	cmp	r0, r7
900175ee:	da03      	bge.n	900175f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900175f0:	1410      	asrs	r0, r2, #16
900175f2:	d401      	bmi.n	900175f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900175f4:	42b0      	cmp	r0, r6
900175f6:	db07      	blt.n	90017608 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900175f8:	9811      	ldr	r0, [sp, #68]	; 0x44
900175fa:	3b01      	subs	r3, #1
900175fc:	3402      	adds	r4, #2
900175fe:	4401      	add	r1, r0
90017600:	9812      	ldr	r0, [sp, #72]	; 0x48
90017602:	4402      	add	r2, r0
90017604:	e7ee      	b.n	900175e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90017606:	d017      	beq.n	90017638 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017608:	1e58      	subs	r0, r3, #1
9001760a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001760c:	fb05 1500 	mla	r5, r5, r0, r1
90017610:	142d      	asrs	r5, r5, #16
90017612:	d409      	bmi.n	90017628 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017614:	42bd      	cmp	r5, r7
90017616:	da07      	bge.n	90017628 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017618:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001761a:	fb05 2000 	mla	r0, r5, r0, r2
9001761e:	1400      	asrs	r0, r0, #16
90017620:	d402      	bmi.n	90017628 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90017622:	42b0      	cmp	r0, r6
90017624:	f2c0 80ba 	blt.w	9001779c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90017628:	2600      	movs	r6, #0
9001762a:	1998      	adds	r0, r3, r6
9001762c:	2800      	cmp	r0, #0
9001762e:	dc3e      	bgt.n	900176ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90017630:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017634:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017638:	f1bb 0f00 	cmp.w	fp, #0
9001763c:	f340 8117 	ble.w	9001786e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90017640:	ee30 0a04 	vadd.f32	s0, s0, s8
90017644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017646:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001764a:	f1bb 0b01 	subs.w	fp, fp, #1
9001764e:	eeb0 6a62 	vmov.f32	s12, s5
90017652:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017656:	ee31 1a05 	vadd.f32	s2, s2, s10
9001765a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001765e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017662:	eeb0 6a43 	vmov.f32	s12, s6
90017666:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001766a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001766e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017672:	ee61 7a27 	vmul.f32	s15, s2, s15
90017676:	ee77 2a62 	vsub.f32	s5, s14, s5
9001767a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001767e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017682:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017686:	ee12 2a90 	vmov	r2, s5
9001768a:	eef0 2a47 	vmov.f32	s5, s14
9001768e:	fb92 f3f3 	sdiv	r3, r2, r3
90017692:	ee13 2a10 	vmov	r2, s6
90017696:	9311      	str	r3, [sp, #68]	; 0x44
90017698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001769a:	eeb0 3a67 	vmov.f32	s6, s15
9001769e:	fb92 f3f3 	sdiv	r3, r2, r3
900176a2:	9a03      	ldr	r2, [sp, #12]
900176a4:	9312      	str	r3, [sp, #72]	; 0x48
900176a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900176a8:	bf08      	it	eq
900176aa:	4613      	moveq	r3, r2
900176ac:	e789      	b.n	900175c2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
900176ae:	140f      	asrs	r7, r1, #16
900176b0:	d424      	bmi.n	900176fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900176b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
900176b6:	42bd      	cmp	r5, r7
900176b8:	dd20      	ble.n	900176fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900176ba:	ea5f 4c22 	movs.w	ip, r2, asr #16
900176be:	d41d      	bmi.n	900176fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900176c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
900176c4:	4560      	cmp	r0, ip
900176c6:	dd19      	ble.n	900176fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900176c8:	b22d      	sxth	r5, r5
900176ca:	9801      	ldr	r0, [sp, #4]
900176cc:	fb0c 7505 	mla	r5, ip, r5, r7
900176d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
900176d4:	0e07      	lsrs	r7, r0, #24
900176d6:	2fff      	cmp	r7, #255	; 0xff
900176d8:	d116      	bne.n	90017708 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900176da:	f06f 0501 	mvn.w	r5, #1
900176de:	fb05 f706 	mul.w	r7, r5, r6
900176e2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
900176e6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
900176ea:	0945      	lsrs	r5, r0, #5
900176ec:	f3c0 00c4 	ubfx	r0, r0, #3, #5
900176f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900176f4:	ea4c 0505 	orr.w	r5, ip, r5
900176f8:	4305      	orrs	r5, r0
900176fa:	53e5      	strh	r5, [r4, r7]
900176fc:	9811      	ldr	r0, [sp, #68]	; 0x44
900176fe:	3e01      	subs	r6, #1
90017700:	4401      	add	r1, r0
90017702:	9812      	ldr	r0, [sp, #72]	; 0x48
90017704:	4402      	add	r2, r0
90017706:	e790      	b.n	9001762a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017708:	b2fd      	uxtb	r5, r7
9001770a:	2f00      	cmp	r7, #0
9001770c:	d0f6      	beq.n	900176fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001770e:	f06f 0701 	mvn.w	r7, #1
90017712:	fa1f f985 	uxth.w	r9, r5
90017716:	43ed      	mvns	r5, r5
90017718:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001771c:	4377      	muls	r7, r6
9001771e:	fb1a fa09 	smulbb	sl, sl, r9
90017722:	b2ed      	uxtb	r5, r5
90017724:	f834 e007 	ldrh.w	lr, [r4, r7]
90017728:	9702      	str	r7, [sp, #8]
9001772a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001772e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017732:	fb17 f709 	smulbb	r7, r7, r9
90017736:	b2c0      	uxtb	r0, r0
90017738:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001773c:	fb10 f009 	smulbb	r0, r0, r9
90017740:	fb0c 7c05 	mla	ip, ip, r5, r7
90017744:	ea4f 07ee 	mov.w	r7, lr, asr #3
90017748:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001774c:	fa1f fc8c 	uxth.w	ip, ip
90017750:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017754:	fa5f fe8e 	uxtb.w	lr, lr
90017758:	fb07 a705 	mla	r7, r7, r5, sl
9001775c:	fb0e 0005 	mla	r0, lr, r5, r0
90017760:	f10c 0501 	add.w	r5, ip, #1
90017764:	b2bf      	uxth	r7, r7
90017766:	b280      	uxth	r0, r0
90017768:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001776c:	f100 0a01 	add.w	sl, r0, #1
90017770:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017774:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90017778:	9802      	ldr	r0, [sp, #8]
9001777a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001777e:	ea4a 0c0c 	orr.w	ip, sl, ip
90017782:	f107 0a01 	add.w	sl, r7, #1
90017786:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001778a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001778e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017792:	ea4c 0c0a 	orr.w	ip, ip, sl
90017796:	f824 c000 	strh.w	ip, [r4, r0]
9001779a:	e7af      	b.n	900176fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001779c:	f04f 0e00 	mov.w	lr, #0
900177a0:	eba3 000e 	sub.w	r0, r3, lr
900177a4:	2800      	cmp	r0, #0
900177a6:	f77f af43 	ble.w	90017630 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900177aa:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
900177ae:	140d      	asrs	r5, r1, #16
900177b0:	1410      	asrs	r0, r2, #16
900177b2:	fb06 5000 	mla	r0, r6, r0, r5
900177b6:	9d01      	ldr	r5, [sp, #4]
900177b8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
900177bc:	0e2e      	lsrs	r6, r5, #24
900177be:	2eff      	cmp	r6, #255	; 0xff
900177c0:	d112      	bne.n	900177e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
900177c2:	482c      	ldr	r0, [pc, #176]	; (90017874 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
900177c4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
900177c8:	0968      	lsrs	r0, r5, #5
900177ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900177ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900177d2:	4330      	orrs	r0, r6
900177d4:	4328      	orrs	r0, r5
900177d6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
900177da:	9811      	ldr	r0, [sp, #68]	; 0x44
900177dc:	f10e 0e01 	add.w	lr, lr, #1
900177e0:	4401      	add	r1, r0
900177e2:	9812      	ldr	r0, [sp, #72]	; 0x48
900177e4:	4402      	add	r2, r0
900177e6:	e7db      	b.n	900177a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
900177e8:	b2f0      	uxtb	r0, r6
900177ea:	2e00      	cmp	r6, #0
900177ec:	d0f5      	beq.n	900177da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900177ee:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
900177f2:	fa1f f980 	uxth.w	r9, r0
900177f6:	f3c5 4607 	ubfx	r6, r5, #16, #8
900177fa:	43c0      	mvns	r0, r0
900177fc:	ea4f 272c 	mov.w	r7, ip, asr #8
90017800:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90017804:	fb16 f609 	smulbb	r6, r6, r9
90017808:	b2c0      	uxtb	r0, r0
9001780a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001780e:	b2ed      	uxtb	r5, r5
90017810:	fb1a fa09 	smulbb	sl, sl, r9
90017814:	fb07 6700 	mla	r7, r7, r0, r6
90017818:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001781c:	fb15 f509 	smulbb	r5, r5, r9
90017820:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90017824:	b2bf      	uxth	r7, r7
90017826:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001782a:	fa5f fc8c 	uxtb.w	ip, ip
9001782e:	fb06 a600 	mla	r6, r6, r0, sl
90017832:	fb0c 5500 	mla	r5, ip, r0, r5
90017836:	1c78      	adds	r0, r7, #1
90017838:	b2b6      	uxth	r6, r6
9001783a:	b2ad      	uxth	r5, r5
9001783c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90017840:	f105 0a01 	add.w	sl, r5, #1
90017844:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017848:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001784c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017850:	ea4a 0707 	orr.w	r7, sl, r7
90017854:	f106 0a01 	add.w	sl, r6, #1
90017858:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001785c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017860:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017864:	ea47 070a 	orr.w	r7, r7, sl
90017868:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001786c:	e7b5      	b.n	900177da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001786e:	b005      	add	sp, #20
90017870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017874:	fffff800 	.word	0xfffff800

90017878 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001787c:	b087      	sub	sp, #28
9001787e:	468b      	mov	fp, r1
90017880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017884:	9815      	ldr	r0, [sp, #84]	; 0x54
90017886:	9203      	str	r2, [sp, #12]
90017888:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001788c:	6841      	ldr	r1, [r0, #4]
9001788e:	9204      	str	r2, [sp, #16]
90017890:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90017894:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017898:	fb01 2404 	mla	r4, r1, r4, r2
9001789c:	6802      	ldr	r2, [r0, #0]
9001789e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900178a2:	f8d9 2008 	ldr.w	r2, [r9, #8]
900178a6:	3201      	adds	r2, #1
900178a8:	f022 0201 	bic.w	r2, r2, #1
900178ac:	9200      	str	r2, [sp, #0]
900178ae:	f8d9 2000 	ldr.w	r2, [r9]
900178b2:	9201      	str	r2, [sp, #4]
900178b4:	f1bb 0f00 	cmp.w	fp, #0
900178b8:	dc03      	bgt.n	900178c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900178ba:	9a03      	ldr	r2, [sp, #12]
900178bc:	2a00      	cmp	r2, #0
900178be:	f340 816a 	ble.w	90017b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900178c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
900178c4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
900178c8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900178cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
900178ce:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
900178d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900178d6:	2b00      	cmp	r3, #0
900178d8:	dd0e      	ble.n	900178f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900178da:	1402      	asrs	r2, r0, #16
900178dc:	d405      	bmi.n	900178ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900178de:	42ba      	cmp	r2, r7
900178e0:	da03      	bge.n	900178ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900178e2:	140a      	asrs	r2, r1, #16
900178e4:	d401      	bmi.n	900178ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900178e6:	42b2      	cmp	r2, r6
900178e8:	db07      	blt.n	900178fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900178ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900178ec:	3b01      	subs	r3, #1
900178ee:	3402      	adds	r4, #2
900178f0:	4410      	add	r0, r2
900178f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
900178f4:	4411      	add	r1, r2
900178f6:	e7ee      	b.n	900178d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
900178f8:	d017      	beq.n	9001792a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
900178fa:	1e5a      	subs	r2, r3, #1
900178fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900178fe:	fb05 0502 	mla	r5, r5, r2, r0
90017902:	142d      	asrs	r5, r5, #16
90017904:	d409      	bmi.n	9001791a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90017906:	42bd      	cmp	r5, r7
90017908:	da07      	bge.n	9001791a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001790a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001790c:	fb05 1202 	mla	r2, r5, r2, r1
90017910:	1412      	asrs	r2, r2, #16
90017912:	d402      	bmi.n	9001791a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90017914:	42b2      	cmp	r2, r6
90017916:	f2c0 80c8 	blt.w	90017aaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001791a:	2700      	movs	r7, #0
9001791c:	19da      	adds	r2, r3, r7
9001791e:	2a00      	cmp	r2, #0
90017920:	dc3e      	bgt.n	900179a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90017922:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017926:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001792a:	f1bb 0f00 	cmp.w	fp, #0
9001792e:	f340 8132 	ble.w	90017b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90017932:	ee30 0a04 	vadd.f32	s0, s0, s8
90017936:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017938:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001793c:	f1bb 0b01 	subs.w	fp, fp, #1
90017940:	eeb0 6a62 	vmov.f32	s12, s5
90017944:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017948:	ee31 1a05 	vadd.f32	s2, s2, s10
9001794c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017950:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017954:	eeb0 6a43 	vmov.f32	s12, s6
90017958:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001795c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90017960:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017964:	ee61 7a27 	vmul.f32	s15, s2, s15
90017968:	ee77 2a62 	vsub.f32	s5, s14, s5
9001796c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017970:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017974:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017978:	ee12 2a90 	vmov	r2, s5
9001797c:	eef0 2a47 	vmov.f32	s5, s14
90017980:	fb92 f3f3 	sdiv	r3, r2, r3
90017984:	ee13 2a10 	vmov	r2, s6
90017988:	9313      	str	r3, [sp, #76]	; 0x4c
9001798a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001798c:	eeb0 3a67 	vmov.f32	s6, s15
90017990:	fb92 f3f3 	sdiv	r3, r2, r3
90017994:	9a03      	ldr	r2, [sp, #12]
90017996:	9314      	str	r3, [sp, #80]	; 0x50
90017998:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001799a:	bf08      	it	eq
9001799c:	4613      	moveq	r3, r2
9001799e:	e789      	b.n	900178b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900179a0:	1405      	asrs	r5, r0, #16
900179a2:	d436      	bmi.n	90017a12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900179a4:	f8d9 2008 	ldr.w	r2, [r9, #8]
900179a8:	42aa      	cmp	r2, r5
900179aa:	dd32      	ble.n	90017a12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900179ac:	140e      	asrs	r6, r1, #16
900179ae:	d430      	bmi.n	90017a12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900179b0:	f8d9 200c 	ldr.w	r2, [r9, #12]
900179b4:	42b2      	cmp	r2, r6
900179b6:	dd2c      	ble.n	90017a12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900179b8:	9a00      	ldr	r2, [sp, #0]
900179ba:	fb06 5502 	mla	r5, r6, r2, r5
900179be:	9e01      	ldr	r6, [sp, #4]
900179c0:	086a      	lsrs	r2, r5, #1
900179c2:	5cb2      	ldrb	r2, [r6, r2]
900179c4:	07ee      	lsls	r6, r5, #31
900179c6:	bf54      	ite	pl
900179c8:	f002 020f 	andpl.w	r2, r2, #15
900179cc:	1112      	asrmi	r2, r2, #4
900179ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900179d2:	b2d2      	uxtb	r2, r2
900179d4:	b1ea      	cbz	r2, 90017a12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900179d6:	9d04      	ldr	r5, [sp, #16]
900179d8:	436a      	muls	r2, r5
900179da:	1c55      	adds	r5, r2, #1
900179dc:	eb05 2222 	add.w	r2, r5, r2, asr #8
900179e0:	4d6e      	ldr	r5, [pc, #440]	; (90017b9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
900179e2:	1212      	asrs	r2, r2, #8
900179e4:	682d      	ldr	r5, [r5, #0]
900179e6:	2aff      	cmp	r2, #255	; 0xff
900179e8:	ea4f 2615 	mov.w	r6, r5, lsr #8
900179ec:	9605      	str	r6, [sp, #20]
900179ee:	d116      	bne.n	90017a1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
900179f0:	f06f 0201 	mvn.w	r2, #1
900179f4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
900179f8:	fb02 fc07 	mul.w	ip, r2, r7
900179fc:	096a      	lsrs	r2, r5, #5
900179fe:	f026 0607 	bic.w	r6, r6, #7
90017a02:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90017a06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017a0a:	4316      	orrs	r6, r2
90017a0c:	432e      	orrs	r6, r5
90017a0e:	f824 600c 	strh.w	r6, [r4, ip]
90017a12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017a14:	3f01      	subs	r7, #1
90017a16:	4410      	add	r0, r2
90017a18:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017a1a:	4411      	add	r1, r2
90017a1c:	e77e      	b.n	9001791c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
90017a1e:	f06f 0601 	mvn.w	r6, #1
90017a22:	fa1f fa82 	uxth.w	sl, r2
90017a26:	f3c5 4c07 	ubfx	ip, r5, #16, #8
90017a2a:	43d2      	mvns	r2, r2
90017a2c:	437e      	muls	r6, r7
90017a2e:	b2ed      	uxtb	r5, r5
90017a30:	fb1c fc0a 	smulbb	ip, ip, sl
90017a34:	b2d2      	uxtb	r2, r2
90017a36:	f834 8006 	ldrh.w	r8, [r4, r6]
90017a3a:	fb15 f50a 	smulbb	r5, r5, sl
90017a3e:	9602      	str	r6, [sp, #8]
90017a40:	ea4f 2e28 	mov.w	lr, r8, asr #8
90017a44:	f89d 6014 	ldrb.w	r6, [sp, #20]
90017a48:	fb16 f60a 	smulbb	r6, r6, sl
90017a4c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90017a50:	fb0e ce02 	mla	lr, lr, r2, ip
90017a54:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90017a58:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90017a5c:	fa1f fe8e 	uxth.w	lr, lr
90017a60:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90017a64:	fa5f f888 	uxtb.w	r8, r8
90017a68:	fb0c 6c02 	mla	ip, ip, r2, r6
90017a6c:	fb08 5502 	mla	r5, r8, r2, r5
90017a70:	f10e 0201 	add.w	r2, lr, #1
90017a74:	fa1f fc8c 	uxth.w	ip, ip
90017a78:	b2ad      	uxth	r5, r5
90017a7a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90017a7e:	9a02      	ldr	r2, [sp, #8]
90017a80:	1c6e      	adds	r6, r5, #1
90017a82:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90017a86:	eb06 2615 	add.w	r6, r6, r5, lsr #8
90017a8a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90017a8e:	ea46 0e0e 	orr.w	lr, r6, lr
90017a92:	f10c 0601 	add.w	r6, ip, #1
90017a96:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90017a9a:	0976      	lsrs	r6, r6, #5
90017a9c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017aa0:	ea4e 0e06 	orr.w	lr, lr, r6
90017aa4:	f824 e002 	strh.w	lr, [r4, r2]
90017aa8:	e7b3      	b.n	90017a12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90017aaa:	f04f 0800 	mov.w	r8, #0
90017aae:	eba3 0208 	sub.w	r2, r3, r8
90017ab2:	2a00      	cmp	r2, #0
90017ab4:	f77f af35 	ble.w	90017922 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90017ab8:	1402      	asrs	r2, r0, #16
90017aba:	9e00      	ldr	r6, [sp, #0]
90017abc:	140d      	asrs	r5, r1, #16
90017abe:	fb06 2505 	mla	r5, r6, r5, r2
90017ac2:	9e01      	ldr	r6, [sp, #4]
90017ac4:	086a      	lsrs	r2, r5, #1
90017ac6:	07ed      	lsls	r5, r5, #31
90017ac8:	5cb2      	ldrb	r2, [r6, r2]
90017aca:	bf54      	ite	pl
90017acc:	f002 020f 	andpl.w	r2, r2, #15
90017ad0:	1112      	asrmi	r2, r2, #4
90017ad2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90017ad6:	b2d2      	uxtb	r2, r2
90017ad8:	b1c2      	cbz	r2, 90017b0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017ada:	9d04      	ldr	r5, [sp, #16]
90017adc:	436a      	muls	r2, r5
90017ade:	1c55      	adds	r5, r2, #1
90017ae0:	eb05 2222 	add.w	r2, r5, r2, asr #8
90017ae4:	4d2d      	ldr	r5, [pc, #180]	; (90017b9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90017ae6:	1212      	asrs	r2, r2, #8
90017ae8:	682e      	ldr	r6, [r5, #0]
90017aea:	2aff      	cmp	r2, #255	; 0xff
90017aec:	ea4f 2516 	mov.w	r5, r6, lsr #8
90017af0:	d113      	bne.n	90017b1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017af2:	0972      	lsrs	r2, r6, #5
90017af4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90017af8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
90017afc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017b00:	f025 0507 	bic.w	r5, r5, #7
90017b04:	4315      	orrs	r5, r2
90017b06:	4335      	orrs	r5, r6
90017b08:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
90017b0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017b0e:	f108 0801 	add.w	r8, r8, #1
90017b12:	4410      	add	r0, r2
90017b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017b16:	4411      	add	r1, r2
90017b18:	e7c9      	b.n	90017aae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90017b1a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90017b1e:	fa1f fa82 	uxth.w	sl, r2
90017b22:	f3c6 4707 	ubfx	r7, r6, #16, #8
90017b26:	43d2      	mvns	r2, r2
90017b28:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90017b2c:	fb17 f70a 	smulbb	r7, r7, sl
90017b30:	b2d2      	uxtb	r2, r2
90017b32:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017b36:	b2f6      	uxtb	r6, r6
90017b38:	b2ed      	uxtb	r5, r5
90017b3a:	fb0c 7c02 	mla	ip, ip, r2, r7
90017b3e:	ea4f 07ee 	mov.w	r7, lr, asr #3
90017b42:	fb16 f60a 	smulbb	r6, r6, sl
90017b46:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017b4a:	fa1f fc8c 	uxth.w	ip, ip
90017b4e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017b52:	fb15 f50a 	smulbb	r5, r5, sl
90017b56:	fa5f fe8e 	uxtb.w	lr, lr
90017b5a:	fb0e 6602 	mla	r6, lr, r2, r6
90017b5e:	fb07 5702 	mla	r7, r7, r2, r5
90017b62:	f10c 0201 	add.w	r2, ip, #1
90017b66:	b2b6      	uxth	r6, r6
90017b68:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90017b6c:	1c75      	adds	r5, r6, #1
90017b6e:	b2bf      	uxth	r7, r7
90017b70:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017b74:	eb05 2516 	add.w	r5, r5, r6, lsr #8
90017b78:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90017b7c:	ea45 0c0c 	orr.w	ip, r5, ip
90017b80:	1c7d      	adds	r5, r7, #1
90017b82:	eb05 2517 	add.w	r5, r5, r7, lsr #8
90017b86:	096d      	lsrs	r5, r5, #5
90017b88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90017b8c:	ea4c 0c05 	orr.w	ip, ip, r5
90017b90:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
90017b94:	e7ba      	b.n	90017b0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017b96:	b007      	add	sp, #28
90017b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017b9c:	240264ec 	.word	0x240264ec

90017ba0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017ba4:	b087      	sub	sp, #28
90017ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017baa:	f8df 8308 	ldr.w	r8, [pc, #776]	; 90017eb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
90017bae:	9815      	ldr	r0, [sp, #84]	; 0x54
90017bb0:	9101      	str	r1, [sp, #4]
90017bb2:	9205      	str	r2, [sp, #20]
90017bb4:	6841      	ldr	r1, [r0, #4]
90017bb6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
90017bba:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017bbe:	fb01 2404 	mla	r4, r1, r4, r2
90017bc2:	6802      	ldr	r2, [r0, #0]
90017bc4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017bc8:	f8db 2008 	ldr.w	r2, [fp, #8]
90017bcc:	3201      	adds	r2, #1
90017bce:	f022 0201 	bic.w	r2, r2, #1
90017bd2:	9202      	str	r2, [sp, #8]
90017bd4:	f8db 2000 	ldr.w	r2, [fp]
90017bd8:	9203      	str	r2, [sp, #12]
90017bda:	9a01      	ldr	r2, [sp, #4]
90017bdc:	2a00      	cmp	r2, #0
90017bde:	dc03      	bgt.n	90017be8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90017be0:	9a05      	ldr	r2, [sp, #20]
90017be2:	2a00      	cmp	r2, #0
90017be4:	f340 8162 	ble.w	90017eac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90017be8:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017bea:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
90017bee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017bf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017bf4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
90017bf8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017bfc:	2b00      	cmp	r3, #0
90017bfe:	dd0e      	ble.n	90017c1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017c00:	1402      	asrs	r2, r0, #16
90017c02:	d405      	bmi.n	90017c10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017c04:	42ba      	cmp	r2, r7
90017c06:	da03      	bge.n	90017c10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017c08:	140a      	asrs	r2, r1, #16
90017c0a:	d401      	bmi.n	90017c10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017c0c:	42b2      	cmp	r2, r6
90017c0e:	db07      	blt.n	90017c20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90017c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017c12:	3b01      	subs	r3, #1
90017c14:	3402      	adds	r4, #2
90017c16:	4410      	add	r0, r2
90017c18:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017c1a:	4411      	add	r1, r2
90017c1c:	e7ee      	b.n	90017bfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90017c1e:	d017      	beq.n	90017c50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90017c20:	1e5a      	subs	r2, r3, #1
90017c22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017c24:	fb05 0502 	mla	r5, r5, r2, r0
90017c28:	142d      	asrs	r5, r5, #16
90017c2a:	d409      	bmi.n	90017c40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017c2c:	42bd      	cmp	r5, r7
90017c2e:	da07      	bge.n	90017c40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017c30:	9d14      	ldr	r5, [sp, #80]	; 0x50
90017c32:	fb05 1202 	mla	r2, r5, r2, r1
90017c36:	1412      	asrs	r2, r2, #16
90017c38:	d402      	bmi.n	90017c40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90017c3a:	42b2      	cmp	r2, r6
90017c3c:	f2c0 80c3 	blt.w	90017dc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
90017c40:	2500      	movs	r5, #0
90017c42:	195a      	adds	r2, r3, r5
90017c44:	2a00      	cmp	r2, #0
90017c46:	dc3f      	bgt.n	90017cc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90017c48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017c4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017c50:	9b01      	ldr	r3, [sp, #4]
90017c52:	2b00      	cmp	r3, #0
90017c54:	f340 812a 	ble.w	90017eac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90017c58:	ee30 0a04 	vadd.f32	s0, s0, s8
90017c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017c5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017c62:	eeb0 6a62 	vmov.f32	s12, s5
90017c66:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017c6a:	ee31 1a05 	vadd.f32	s2, s2, s10
90017c6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017c72:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017c76:	eeb0 6a43 	vmov.f32	s12, s6
90017c7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017c7e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90017c82:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017c86:	ee61 7a27 	vmul.f32	s15, s2, s15
90017c8a:	ee77 2a62 	vsub.f32	s5, s14, s5
90017c8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017c92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017c96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017c9a:	ee12 2a90 	vmov	r2, s5
90017c9e:	eef0 2a47 	vmov.f32	s5, s14
90017ca2:	fb92 f3f3 	sdiv	r3, r2, r3
90017ca6:	ee13 2a10 	vmov	r2, s6
90017caa:	9313      	str	r3, [sp, #76]	; 0x4c
90017cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017cae:	eeb0 3a67 	vmov.f32	s6, s15
90017cb2:	fb92 f3f3 	sdiv	r3, r2, r3
90017cb6:	9314      	str	r3, [sp, #80]	; 0x50
90017cb8:	9b01      	ldr	r3, [sp, #4]
90017cba:	9a05      	ldr	r2, [sp, #20]
90017cbc:	3b01      	subs	r3, #1
90017cbe:	9301      	str	r3, [sp, #4]
90017cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017cc2:	bf08      	it	eq
90017cc4:	4613      	moveq	r3, r2
90017cc6:	e788      	b.n	90017bda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90017cc8:	1406      	asrs	r6, r0, #16
90017cca:	d42c      	bmi.n	90017d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90017ccc:	f8db 2008 	ldr.w	r2, [fp, #8]
90017cd0:	42b2      	cmp	r2, r6
90017cd2:	dd28      	ble.n	90017d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90017cd4:	140f      	asrs	r7, r1, #16
90017cd6:	d426      	bmi.n	90017d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90017cd8:	f8db 200c 	ldr.w	r2, [fp, #12]
90017cdc:	42ba      	cmp	r2, r7
90017cde:	dd22      	ble.n	90017d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90017ce0:	9a02      	ldr	r2, [sp, #8]
90017ce2:	fb07 6602 	mla	r6, r7, r2, r6
90017ce6:	9f03      	ldr	r7, [sp, #12]
90017ce8:	0872      	lsrs	r2, r6, #1
90017cea:	07f6      	lsls	r6, r6, #31
90017cec:	5cba      	ldrb	r2, [r7, r2]
90017cee:	bf54      	ite	pl
90017cf0:	f002 020f 	andpl.w	r2, r2, #15
90017cf4:	1112      	asrmi	r2, r2, #4
90017cf6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90017cfa:	b2d2      	uxtb	r2, r2
90017cfc:	2aff      	cmp	r2, #255	; 0xff
90017cfe:	d118      	bne.n	90017d32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
90017d00:	f06f 0601 	mvn.w	r6, #1
90017d04:	f8d8 2000 	ldr.w	r2, [r8]
90017d08:	fb06 f705 	mul.w	r7, r6, r5
90017d0c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
90017d10:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
90017d14:	0956      	lsrs	r6, r2, #5
90017d16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90017d1a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017d1e:	ea4c 0606 	orr.w	r6, ip, r6
90017d22:	4316      	orrs	r6, r2
90017d24:	53e6      	strh	r6, [r4, r7]
90017d26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017d28:	3d01      	subs	r5, #1
90017d2a:	4410      	add	r0, r2
90017d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017d2e:	4411      	add	r1, r2
90017d30:	e787      	b.n	90017c42 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90017d32:	2a00      	cmp	r2, #0
90017d34:	d0f7      	beq.n	90017d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90017d36:	f06f 0601 	mvn.w	r6, #1
90017d3a:	f8d8 c000 	ldr.w	ip, [r8]
90017d3e:	fa1f f982 	uxth.w	r9, r2
90017d42:	43d2      	mvns	r2, r2
90017d44:	436e      	muls	r6, r5
90017d46:	f3cc 2a07 	ubfx	sl, ip, #8, #8
90017d4a:	b2d2      	uxtb	r2, r2
90017d4c:	f834 e006 	ldrh.w	lr, [r4, r6]
90017d50:	fb1a fa09 	smulbb	sl, sl, r9
90017d54:	9604      	str	r6, [sp, #16]
90017d56:	f3cc 4607 	ubfx	r6, ip, #16, #8
90017d5a:	ea4f 272e 	mov.w	r7, lr, asr #8
90017d5e:	fb16 f609 	smulbb	r6, r6, r9
90017d62:	fa5f fc8c 	uxtb.w	ip, ip
90017d66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017d6a:	fb1c fc09 	smulbb	ip, ip, r9
90017d6e:	fb07 6702 	mla	r7, r7, r2, r6
90017d72:	ea4f 06ee 	mov.w	r6, lr, asr #3
90017d76:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90017d7a:	b2bf      	uxth	r7, r7
90017d7c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017d80:	fa5f fe8e 	uxtb.w	lr, lr
90017d84:	fb06 a602 	mla	r6, r6, r2, sl
90017d88:	fb0e cc02 	mla	ip, lr, r2, ip
90017d8c:	1c7a      	adds	r2, r7, #1
90017d8e:	b2b6      	uxth	r6, r6
90017d90:	fa1f fc8c 	uxth.w	ip, ip
90017d94:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90017d98:	9a04      	ldr	r2, [sp, #16]
90017d9a:	f10c 0a01 	add.w	sl, ip, #1
90017d9e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017da2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
90017da6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017daa:	ea4a 0707 	orr.w	r7, sl, r7
90017dae:	f106 0a01 	add.w	sl, r6, #1
90017db2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90017db6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017dba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017dbe:	ea47 070a 	orr.w	r7, r7, sl
90017dc2:	52a7      	strh	r7, [r4, r2]
90017dc4:	e7af      	b.n	90017d26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90017dc6:	f04f 0e00 	mov.w	lr, #0
90017dca:	eba3 020e 	sub.w	r2, r3, lr
90017dce:	2a00      	cmp	r2, #0
90017dd0:	f77f af3a 	ble.w	90017c48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90017dd4:	1402      	asrs	r2, r0, #16
90017dd6:	9e02      	ldr	r6, [sp, #8]
90017dd8:	140d      	asrs	r5, r1, #16
90017dda:	fb06 2505 	mla	r5, r6, r5, r2
90017dde:	9e03      	ldr	r6, [sp, #12]
90017de0:	086a      	lsrs	r2, r5, #1
90017de2:	07ed      	lsls	r5, r5, #31
90017de4:	5cb2      	ldrb	r2, [r6, r2]
90017de6:	bf54      	ite	pl
90017de8:	f002 020f 	andpl.w	r2, r2, #15
90017dec:	1112      	asrmi	r2, r2, #4
90017dee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90017df2:	b2d2      	uxtb	r2, r2
90017df4:	2aff      	cmp	r2, #255	; 0xff
90017df6:	d115      	bne.n	90017e24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
90017df8:	f8d8 5000 	ldr.w	r5, [r8]
90017dfc:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
90017e00:	ea02 2615 	and.w	r6, r2, r5, lsr #8
90017e04:	096a      	lsrs	r2, r5, #5
90017e06:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90017e0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90017e0e:	4332      	orrs	r2, r6
90017e10:	432a      	orrs	r2, r5
90017e12:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
90017e16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017e18:	f10e 0e01 	add.w	lr, lr, #1
90017e1c:	4410      	add	r0, r2
90017e1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017e20:	4411      	add	r1, r2
90017e22:	e7d2      	b.n	90017dca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90017e24:	2a00      	cmp	r2, #0
90017e26:	d0f6      	beq.n	90017e16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90017e28:	f8d8 7000 	ldr.w	r7, [r8]
90017e2c:	fa1f f982 	uxth.w	r9, r2
90017e30:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90017e34:	43d2      	mvns	r2, r2
90017e36:	f3c7 4507 	ubfx	r5, r7, #16, #8
90017e3a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
90017e3e:	ea4f 262c 	mov.w	r6, ip, asr #8
90017e42:	fb15 f509 	smulbb	r5, r5, r9
90017e46:	b2d2      	uxtb	r2, r2
90017e48:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90017e4c:	b2ff      	uxtb	r7, r7
90017e4e:	fb1a fa09 	smulbb	sl, sl, r9
90017e52:	fb06 5602 	mla	r6, r6, r2, r5
90017e56:	ea4f 05ec 	mov.w	r5, ip, asr #3
90017e5a:	fb17 f709 	smulbb	r7, r7, r9
90017e5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90017e62:	b2b6      	uxth	r6, r6
90017e64:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90017e68:	fa5f fc8c 	uxtb.w	ip, ip
90017e6c:	fb05 a502 	mla	r5, r5, r2, sl
90017e70:	fb0c 7702 	mla	r7, ip, r2, r7
90017e74:	1c72      	adds	r2, r6, #1
90017e76:	b2ad      	uxth	r5, r5
90017e78:	b2bf      	uxth	r7, r7
90017e7a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90017e7e:	f107 0a01 	add.w	sl, r7, #1
90017e82:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90017e86:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90017e8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90017e8e:	ea4a 0606 	orr.w	r6, sl, r6
90017e92:	f105 0a01 	add.w	sl, r5, #1
90017e96:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90017e9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90017e9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90017ea2:	ea46 060a 	orr.w	r6, r6, sl
90017ea6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
90017eaa:	e7b4      	b.n	90017e16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90017eac:	b007      	add	sp, #28
90017eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017eb2:	bf00      	nop
90017eb4:	240264ec 	.word	0x240264ec

90017eb8 <_ZN8touchgfx8LCD16bppD1Ev>:
90017eb8:	4770      	bx	lr

90017eba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
90017eba:	4770      	bx	lr

90017ebc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
90017ebc:	4770      	bx	lr

90017ebe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
90017ebe:	4770      	bx	lr

90017ec0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
90017ec0:	4770      	bx	lr

90017ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90017ec2:	4770      	bx	lr

90017ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90017ec4:	4770      	bx	lr

90017ec6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90017ec6:	4770      	bx	lr

90017ec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90017ec8:	4770      	bx	lr

90017eca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90017eca:	4770      	bx	lr

90017ecc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
90017ecc:	4770      	bx	lr

90017ece <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90017ece:	4770      	bx	lr

90017ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
90017ed0:	4770      	bx	lr

90017ed2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90017ed2:	4770      	bx	lr

90017ed4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90017ed4:	4770      	bx	lr

90017ed6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90017ed6:	4770      	bx	lr

90017ed8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
90017ed8:	4770      	bx	lr

90017eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90017eda:	4770      	bx	lr

90017edc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90017edc:	4770      	bx	lr

90017ede <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90017ede:	4770      	bx	lr

90017ee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90017ee0:	4770      	bx	lr

90017ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
90017ee2:	4770      	bx	lr

90017ee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
90017ee4:	4770      	bx	lr

90017ee6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
90017ee6:	4770      	bx	lr

90017ee8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
90017ee8:	4770      	bx	lr

90017eea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90017eea:	4770      	bx	lr

90017eec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
90017eec:	4770      	bx	lr

90017eee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90017eee:	4770      	bx	lr

90017ef0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90017ef0:	4770      	bx	lr

90017ef2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
90017ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90017ef6:	b088      	sub	sp, #32
90017ef8:	4606      	mov	r6, r0
90017efa:	4688      	mov	r8, r1
90017efc:	4691      	mov	r9, r2
90017efe:	ac08      	add	r4, sp, #32
90017f00:	f824 3d0c 	strh.w	r3, [r4, #-12]!
90017f04:	4620      	mov	r0, r4
90017f06:	f7fd fc67 	bl	900157d8 <_ZNK8touchgfx6Bitmap7getDataEv>
90017f0a:	6833      	ldr	r3, [r6, #0]
90017f0c:	4605      	mov	r5, r0
90017f0e:	4620      	mov	r0, r4
90017f10:	699f      	ldr	r7, [r3, #24]
90017f12:	f7fd fb75 	bl	90015600 <_ZNK8touchgfx6Bitmap8getWidthEv>
90017f16:	4682      	mov	sl, r0
90017f18:	4620      	mov	r0, r4
90017f1a:	f7fd fba5 	bl	90015668 <_ZNK8touchgfx6Bitmap9getHeightEv>
90017f1e:	9500      	str	r5, [sp, #0]
90017f20:	464b      	mov	r3, r9
90017f22:	4642      	mov	r2, r8
90017f24:	4631      	mov	r1, r6
90017f26:	e9cd a001 	strd	sl, r0, [sp, #4]
90017f2a:	a806      	add	r0, sp, #24
90017f2c:	47b8      	blx	r7
90017f2e:	4628      	mov	r0, r5
90017f30:	b008      	add	sp, #32
90017f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

90017f38 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
90017f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90017f3c:	2300      	movs	r3, #0
90017f3e:	9300      	str	r3, [sp, #0]
90017f40:	4b3d      	ldr	r3, [pc, #244]	; (90018038 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
90017f42:	781b      	ldrb	r3, [r3, #0]
90017f44:	2b00      	cmp	r3, #0
90017f46:	d137      	bne.n	90017fb8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
90017f48:	4a3c      	ldr	r2, [pc, #240]	; (9001803c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90017f4a:	f9b2 2000 	ldrsh.w	r2, [r2]
90017f4e:	f8ad 2004 	strh.w	r2, [sp, #4]
90017f52:	2b00      	cmp	r3, #0
90017f54:	d132      	bne.n	90017fbc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
90017f56:	4b3a      	ldr	r3, [pc, #232]	; (90018040 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90017f58:	f9b3 3000 	ldrsh.w	r3, [r3]
90017f5c:	ac02      	add	r4, sp, #8
90017f5e:	6808      	ldr	r0, [r1, #0]
90017f60:	f8ad 3006 	strh.w	r3, [sp, #6]
90017f64:	ab02      	add	r3, sp, #8
90017f66:	6849      	ldr	r1, [r1, #4]
90017f68:	4d36      	ldr	r5, [pc, #216]	; (90018044 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
90017f6a:	c303      	stmia	r3!, {r0, r1}
90017f6c:	4669      	mov	r1, sp
90017f6e:	4620      	mov	r0, r4
90017f70:	f7fa fd3a 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90017f74:	4668      	mov	r0, sp
90017f76:	f7fa fd0f 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90017f7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90017f7e:	f8bd 2000 	ldrh.w	r2, [sp]
90017f82:	462f      	mov	r7, r5
90017f84:	6828      	ldr	r0, [r5, #0]
90017f86:	4413      	add	r3, r2
90017f88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90017f8c:	f8ad 3008 	strh.w	r3, [sp, #8]
90017f90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90017f94:	4413      	add	r3, r2
90017f96:	f8ad 300a 	strh.w	r3, [sp, #10]
90017f9a:	6803      	ldr	r3, [r0, #0]
90017f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017f9e:	4798      	blx	r3
90017fa0:	f010 0f01 	tst.w	r0, #1
90017fa4:	d00c      	beq.n	90017fc0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
90017fa6:	6828      	ldr	r0, [r5, #0]
90017fa8:	6803      	ldr	r3, [r0, #0]
90017faa:	e894 0006 	ldmia.w	r4, {r1, r2}
90017fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90017fb0:	4798      	blx	r3
90017fb2:	b004      	add	sp, #16
90017fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90017fb8:	4a21      	ldr	r2, [pc, #132]	; (90018040 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90017fba:	e7c6      	b.n	90017f4a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
90017fbc:	4b1f      	ldr	r3, [pc, #124]	; (9001803c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90017fbe:	e7cb      	b.n	90017f58 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
90017fc0:	6838      	ldr	r0, [r7, #0]
90017fc2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90017fc6:	6803      	ldr	r3, [r0, #0]
90017fc8:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
90017fcc:	ea4f 0848 	mov.w	r8, r8, lsl #1
90017fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90017fd2:	4798      	blx	r3
90017fd4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
90017fd8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90017fdc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
90017fe0:	fb16 3602 	smlabb	r6, r6, r2, r3
90017fe4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90017fe8:	6838      	ldr	r0, [r7, #0]
90017fea:	6803      	ldr	r3, [r0, #0]
90017fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017fee:	4798      	blx	r3
90017ff0:	4a12      	ldr	r2, [pc, #72]	; (9001803c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90017ff2:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
90017ff6:	8813      	ldrh	r3, [r2, #0]
90017ff8:	4691      	mov	r9, r2
90017ffa:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
90017ffe:	435d      	muls	r5, r3
90018000:	fb03 1404 	mla	r4, r3, r4, r1
90018004:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90018008:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001800c:	6838      	ldr	r0, [r7, #0]
9001800e:	42ac      	cmp	r4, r5
90018010:	6803      	ldr	r3, [r0, #0]
90018012:	d20e      	bcs.n	90018032 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90018014:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
90018018:	4632      	mov	r2, r6
9001801a:	4643      	mov	r3, r8
9001801c:	4621      	mov	r1, r4
9001801e:	47d0      	blx	sl
90018020:	f8b9 3000 	ldrh.w	r3, [r9]
90018024:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018028:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001802c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90018030:	e7ec      	b.n	9001800c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
90018032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018034:	4798      	blx	r3
90018036:	e7bc      	b.n	90017fb2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90018038:	240264dc 	.word	0x240264dc
9001803c:	240264de 	.word	0x240264de
90018040:	240264e0 	.word	0x240264e0
90018044:	240264e4 	.word	0x240264e4

90018048 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90018048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001804c:	b08b      	sub	sp, #44	; 0x2c
9001804e:	460f      	mov	r7, r1
90018050:	4616      	mov	r6, r2
90018052:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
90018056:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001805a:	f1bb 0f00 	cmp.w	fp, #0
9001805e:	d049      	beq.n	900180f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90018060:	6810      	ldr	r0, [r2, #0]
90018062:	ad06      	add	r5, sp, #24
90018064:	6851      	ldr	r1, [r2, #4]
90018066:	c503      	stmia	r5!, {r0, r1}
90018068:	6818      	ldr	r0, [r3, #0]
9001806a:	ad08      	add	r5, sp, #32
9001806c:	6859      	ldr	r1, [r3, #4]
9001806e:	c503      	stmia	r5!, {r0, r1}
90018070:	a806      	add	r0, sp, #24
90018072:	f7fa fc91 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018076:	4631      	mov	r1, r6
90018078:	a808      	add	r0, sp, #32
9001807a:	f7fa fcb5 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001807e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
90018082:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
90018086:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001808a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001808e:	fb16 2103 	smlabb	r1, r6, r3, r2
90018092:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
90018096:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001809a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001809e:	4f5f      	ldr	r7, [pc, #380]	; (9001821c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
900180a0:	440a      	add	r2, r1
900180a2:	6838      	ldr	r0, [r7, #0]
900180a4:	46b9      	mov	r9, r7
900180a6:	f8ad 2020 	strh.w	r2, [sp, #32]
900180aa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
900180ae:	4413      	add	r3, r2
900180b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900180b4:	6803      	ldr	r3, [r0, #0]
900180b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900180b8:	4798      	blx	r3
900180ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
900180be:	d01c      	beq.n	900180fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
900180c0:	f010 0f04 	tst.w	r0, #4
900180c4:	d01d      	beq.n	90018102 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
900180c6:	f8d9 0000 	ldr.w	r0, [r9]
900180ca:	2700      	movs	r7, #0
900180cc:	b2ad      	uxth	r5, r5
900180ce:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
900180d2:	6801      	ldr	r1, [r0, #0]
900180d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
900180d8:	f8cd b00c 	str.w	fp, [sp, #12]
900180dc:	9501      	str	r5, [sp, #4]
900180de:	e9cd 4704 	strd	r4, r7, [sp, #16]
900180e2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
900180e6:	9402      	str	r4, [sp, #8]
900180e8:	fa1f f488 	uxth.w	r4, r8
900180ec:	9400      	str	r4, [sp, #0]
900180ee:	6c4c      	ldr	r4, [r1, #68]	; 0x44
900180f0:	4631      	mov	r1, r6
900180f2:	47a0      	blx	r4
900180f4:	b00b      	add	sp, #44	; 0x2c
900180f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900180fa:	b914      	cbnz	r4, 90018102 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
900180fc:	f010 0f01 	tst.w	r0, #1
90018100:	e7e0      	b.n	900180c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
90018102:	f8d9 0000 	ldr.w	r0, [r9]
90018106:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001810a:	6803      	ldr	r3, [r0, #0]
9001810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001810e:	4798      	blx	r3
90018110:	4b43      	ldr	r3, [pc, #268]	; (90018220 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
90018112:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
90018116:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001811a:	881a      	ldrh	r2, [r3, #0]
9001811c:	469a      	mov	sl, r3
9001811e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
90018122:	fb05 f502 	mul.w	r5, r5, r2
90018126:	fb02 1404 	mla	r4, r2, r4, r1
9001812a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001812e:	d059      	beq.n	900181e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
90018130:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
90018134:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90018138:	fa1f f28b 	uxth.w	r2, fp
9001813c:	469e      	mov	lr, r3
9001813e:	fa1f f989 	uxth.w	r9, r9
90018142:	42ac      	cmp	r4, r5
90018144:	d264      	bcs.n	90018210 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90018146:	eb04 0a07 	add.w	sl, r4, r7
9001814a:	4554      	cmp	r4, sl
9001814c:	d23d      	bcs.n	900181ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001814e:	8821      	ldrh	r1, [r4, #0]
90018150:	f836 3b02 	ldrh.w	r3, [r6], #2
90018154:	1208      	asrs	r0, r1, #8
90018156:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001815a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001815e:	ea4f 0be1 	mov.w	fp, r1, asr #3
90018162:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018166:	00c9      	lsls	r1, r1, #3
90018168:	fb10 f009 	smulbb	r0, r0, r9
9001816c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90018170:	b2c9      	uxtb	r1, r1
90018172:	fb0c 0c02 	mla	ip, ip, r2, r0
90018176:	10d8      	asrs	r0, r3, #3
90018178:	fb1b fb09 	smulbb	fp, fp, r9
9001817c:	00db      	lsls	r3, r3, #3
9001817e:	fa1f fc8c 	uxth.w	ip, ip
90018182:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90018186:	fb11 f109 	smulbb	r1, r1, r9
9001818a:	b2db      	uxtb	r3, r3
9001818c:	fb00 b002 	mla	r0, r0, r2, fp
90018190:	f10c 0b01 	add.w	fp, ip, #1
90018194:	fb03 1302 	mla	r3, r3, r2, r1
90018198:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001819c:	b29b      	uxth	r3, r3
9001819e:	b280      	uxth	r0, r0
900181a0:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
900181a4:	f103 0c01 	add.w	ip, r3, #1
900181a8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900181ac:	1c43      	adds	r3, r0, #1
900181ae:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900181b2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900181b6:	0940      	lsrs	r0, r0, #5
900181b8:	ea4c 0c0b 	orr.w	ip, ip, fp
900181bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900181c0:	ea4c 0c00 	orr.w	ip, ip, r0
900181c4:	f824 cb02 	strh.w	ip, [r4], #2
900181c8:	e7bf      	b.n	9001814a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
900181ca:	f8be 3000 	ldrh.w	r3, [lr]
900181ce:	eba3 0308 	sub.w	r3, r3, r8
900181d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900181d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
900181da:	eba3 0308 	sub.w	r3, r3, r8
900181de:	eb06 0643 	add.w	r6, r6, r3, lsl #1
900181e2:	e7ae      	b.n	90018142 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
900181e4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
900181e8:	f8d9 0000 	ldr.w	r0, [r9]
900181ec:	42ac      	cmp	r4, r5
900181ee:	6803      	ldr	r3, [r0, #0]
900181f0:	d20e      	bcs.n	90018210 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
900181f2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
900181f6:	4632      	mov	r2, r6
900181f8:	463b      	mov	r3, r7
900181fa:	4621      	mov	r1, r4
900181fc:	47c0      	blx	r8
900181fe:	f8ba 3000 	ldrh.w	r3, [sl]
90018202:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018206:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001820a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001820e:	e7eb      	b.n	900181e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90018210:	4b02      	ldr	r3, [pc, #8]	; (9001821c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90018212:	6818      	ldr	r0, [r3, #0]
90018214:	6803      	ldr	r3, [r0, #0]
90018216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018218:	4798      	blx	r3
9001821a:	e76b      	b.n	900180f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001821c:	240264e4 	.word	0x240264e4
90018220:	240264de 	.word	0x240264de

90018224 <_ZN8touchgfx8LCD16bppD0Ev>:
90018224:	b510      	push	{r4, lr}
90018226:	4604      	mov	r4, r0
90018228:	2178      	movs	r1, #120	; 0x78
9001822a:	f008 ffca 	bl	900211c2 <_ZdlPvj>
9001822e:	4620      	mov	r0, r4
90018230:	bd10      	pop	{r4, pc}

90018232 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90018232:	b510      	push	{r4, lr}
90018234:	4604      	mov	r4, r0
90018236:	2104      	movs	r1, #4
90018238:	f008 ffc3 	bl	900211c2 <_ZdlPvj>
9001823c:	4620      	mov	r0, r4
9001823e:	bd10      	pop	{r4, pc}

90018240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90018240:	b510      	push	{r4, lr}
90018242:	4604      	mov	r4, r0
90018244:	2104      	movs	r1, #4
90018246:	f008 ffbc 	bl	900211c2 <_ZdlPvj>
9001824a:	4620      	mov	r0, r4
9001824c:	bd10      	pop	{r4, pc}

9001824e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001824e:	b510      	push	{r4, lr}
90018250:	4604      	mov	r4, r0
90018252:	2104      	movs	r1, #4
90018254:	f008 ffb5 	bl	900211c2 <_ZdlPvj>
90018258:	4620      	mov	r0, r4
9001825a:	bd10      	pop	{r4, pc}

9001825c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001825c:	b510      	push	{r4, lr}
9001825e:	4604      	mov	r4, r0
90018260:	2104      	movs	r1, #4
90018262:	f008 ffae 	bl	900211c2 <_ZdlPvj>
90018266:	4620      	mov	r0, r4
90018268:	bd10      	pop	{r4, pc}

9001826a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001826a:	b510      	push	{r4, lr}
9001826c:	4604      	mov	r4, r0
9001826e:	2104      	movs	r1, #4
90018270:	f008 ffa7 	bl	900211c2 <_ZdlPvj>
90018274:	4620      	mov	r0, r4
90018276:	bd10      	pop	{r4, pc}

90018278 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
90018278:	b510      	push	{r4, lr}
9001827a:	4604      	mov	r4, r0
9001827c:	2104      	movs	r1, #4
9001827e:	f008 ffa0 	bl	900211c2 <_ZdlPvj>
90018282:	4620      	mov	r0, r4
90018284:	bd10      	pop	{r4, pc}

90018286 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
90018286:	b510      	push	{r4, lr}
90018288:	4604      	mov	r4, r0
9001828a:	2104      	movs	r1, #4
9001828c:	f008 ff99 	bl	900211c2 <_ZdlPvj>
90018290:	4620      	mov	r0, r4
90018292:	bd10      	pop	{r4, pc}

90018294 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
90018294:	b510      	push	{r4, lr}
90018296:	4604      	mov	r4, r0
90018298:	2104      	movs	r1, #4
9001829a:	f008 ff92 	bl	900211c2 <_ZdlPvj>
9001829e:	4620      	mov	r0, r4
900182a0:	bd10      	pop	{r4, pc}

900182a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
900182a2:	b510      	push	{r4, lr}
900182a4:	4604      	mov	r4, r0
900182a6:	2104      	movs	r1, #4
900182a8:	f008 ff8b 	bl	900211c2 <_ZdlPvj>
900182ac:	4620      	mov	r0, r4
900182ae:	bd10      	pop	{r4, pc}

900182b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
900182b0:	b510      	push	{r4, lr}
900182b2:	4604      	mov	r4, r0
900182b4:	2104      	movs	r1, #4
900182b6:	f008 ff84 	bl	900211c2 <_ZdlPvj>
900182ba:	4620      	mov	r0, r4
900182bc:	bd10      	pop	{r4, pc}

900182be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
900182be:	b510      	push	{r4, lr}
900182c0:	4604      	mov	r4, r0
900182c2:	2104      	movs	r1, #4
900182c4:	f008 ff7d 	bl	900211c2 <_ZdlPvj>
900182c8:	4620      	mov	r0, r4
900182ca:	bd10      	pop	{r4, pc}

900182cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
900182cc:	b510      	push	{r4, lr}
900182ce:	4604      	mov	r4, r0
900182d0:	2104      	movs	r1, #4
900182d2:	f008 ff76 	bl	900211c2 <_ZdlPvj>
900182d6:	4620      	mov	r0, r4
900182d8:	bd10      	pop	{r4, pc}

900182da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
900182da:	b510      	push	{r4, lr}
900182dc:	4604      	mov	r4, r0
900182de:	2104      	movs	r1, #4
900182e0:	f008 ff6f 	bl	900211c2 <_ZdlPvj>
900182e4:	4620      	mov	r0, r4
900182e6:	bd10      	pop	{r4, pc}

900182e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
900182e8:	b510      	push	{r4, lr}
900182ea:	4604      	mov	r4, r0
900182ec:	2104      	movs	r1, #4
900182ee:	f008 ff68 	bl	900211c2 <_ZdlPvj>
900182f2:	4620      	mov	r0, r4
900182f4:	bd10      	pop	{r4, pc}

900182f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
900182f6:	b510      	push	{r4, lr}
900182f8:	4604      	mov	r4, r0
900182fa:	2104      	movs	r1, #4
900182fc:	f008 ff61 	bl	900211c2 <_ZdlPvj>
90018300:	4620      	mov	r0, r4
90018302:	bd10      	pop	{r4, pc}

90018304 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018304:	b510      	push	{r4, lr}
90018306:	4604      	mov	r4, r0
90018308:	2104      	movs	r1, #4
9001830a:	f008 ff5a 	bl	900211c2 <_ZdlPvj>
9001830e:	4620      	mov	r0, r4
90018310:	bd10      	pop	{r4, pc}

90018312 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90018312:	b510      	push	{r4, lr}
90018314:	4604      	mov	r4, r0
90018316:	2104      	movs	r1, #4
90018318:	f008 ff53 	bl	900211c2 <_ZdlPvj>
9001831c:	4620      	mov	r0, r4
9001831e:	bd10      	pop	{r4, pc}

90018320 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90018320:	b510      	push	{r4, lr}
90018322:	4604      	mov	r4, r0
90018324:	2104      	movs	r1, #4
90018326:	f008 ff4c 	bl	900211c2 <_ZdlPvj>
9001832a:	4620      	mov	r0, r4
9001832c:	bd10      	pop	{r4, pc}

9001832e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001832e:	b510      	push	{r4, lr}
90018330:	4604      	mov	r4, r0
90018332:	2104      	movs	r1, #4
90018334:	f008 ff45 	bl	900211c2 <_ZdlPvj>
90018338:	4620      	mov	r0, r4
9001833a:	bd10      	pop	{r4, pc}

9001833c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001833c:	b510      	push	{r4, lr}
9001833e:	4604      	mov	r4, r0
90018340:	2104      	movs	r1, #4
90018342:	f008 ff3e 	bl	900211c2 <_ZdlPvj>
90018346:	4620      	mov	r0, r4
90018348:	bd10      	pop	{r4, pc}

9001834a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001834a:	b510      	push	{r4, lr}
9001834c:	4604      	mov	r4, r0
9001834e:	2104      	movs	r1, #4
90018350:	f008 ff37 	bl	900211c2 <_ZdlPvj>
90018354:	4620      	mov	r0, r4
90018356:	bd10      	pop	{r4, pc}

90018358 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90018358:	b510      	push	{r4, lr}
9001835a:	4604      	mov	r4, r0
9001835c:	2104      	movs	r1, #4
9001835e:	f008 ff30 	bl	900211c2 <_ZdlPvj>
90018362:	4620      	mov	r0, r4
90018364:	bd10      	pop	{r4, pc}

90018366 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90018366:	b510      	push	{r4, lr}
90018368:	4604      	mov	r4, r0
9001836a:	2104      	movs	r1, #4
9001836c:	f008 ff29 	bl	900211c2 <_ZdlPvj>
90018370:	4620      	mov	r0, r4
90018372:	bd10      	pop	{r4, pc}

90018374 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90018374:	b510      	push	{r4, lr}
90018376:	4604      	mov	r4, r0
90018378:	2104      	movs	r1, #4
9001837a:	f008 ff22 	bl	900211c2 <_ZdlPvj>
9001837e:	4620      	mov	r0, r4
90018380:	bd10      	pop	{r4, pc}

90018382 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90018382:	b510      	push	{r4, lr}
90018384:	4604      	mov	r4, r0
90018386:	2104      	movs	r1, #4
90018388:	f008 ff1b 	bl	900211c2 <_ZdlPvj>
9001838c:	4620      	mov	r0, r4
9001838e:	bd10      	pop	{r4, pc}

90018390 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
90018390:	b510      	push	{r4, lr}
90018392:	4604      	mov	r4, r0
90018394:	2104      	movs	r1, #4
90018396:	f008 ff14 	bl	900211c2 <_ZdlPvj>
9001839a:	4620      	mov	r0, r4
9001839c:	bd10      	pop	{r4, pc}

9001839e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001839e:	b510      	push	{r4, lr}
900183a0:	4604      	mov	r4, r0
900183a2:	2104      	movs	r1, #4
900183a4:	f008 ff0d 	bl	900211c2 <_ZdlPvj>
900183a8:	4620      	mov	r0, r4
900183aa:	bd10      	pop	{r4, pc}

900183ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
900183ac:	b510      	push	{r4, lr}
900183ae:	4604      	mov	r4, r0
900183b0:	2104      	movs	r1, #4
900183b2:	f008 ff06 	bl	900211c2 <_ZdlPvj>
900183b6:	4620      	mov	r0, r4
900183b8:	bd10      	pop	{r4, pc}
	...

900183bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
900183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900183c0:	b091      	sub	sp, #68	; 0x44
900183c2:	469b      	mov	fp, r3
900183c4:	4616      	mov	r6, r2
900183c6:	f9b3 2000 	ldrsh.w	r2, [r3]
900183ca:	f10d 0828 	add.w	r8, sp, #40	; 0x28
900183ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
900183d2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
900183d6:	4604      	mov	r4, r0
900183d8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
900183dc:	4640      	mov	r0, r8
900183de:	460d      	mov	r5, r1
900183e0:	4659      	mov	r1, fp
900183e2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
900183e6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900183ea:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
900183ee:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
900183f2:	f7f7 fae9 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900183f6:	4631      	mov	r1, r6
900183f8:	4640      	mov	r0, r8
900183fa:	f7f7 fae5 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900183fe:	4b74      	ldr	r3, [pc, #464]	; (900185d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
90018400:	8818      	ldrh	r0, [r3, #0]
90018402:	4b74      	ldr	r3, [pc, #464]	; (900185d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
90018404:	b202      	sxth	r2, r0
90018406:	8819      	ldrh	r1, [r3, #0]
90018408:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001840c:	b20e      	sxth	r6, r1
9001840e:	2b00      	cmp	r3, #0
90018410:	da07      	bge.n	90018422 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
90018412:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90018416:	4463      	add	r3, ip
90018418:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001841c:	2300      	movs	r3, #0
9001841e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
90018422:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90018426:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001842a:	1ad2      	subs	r2, r2, r3
9001842c:	4594      	cmp	ip, r2
9001842e:	bfc4      	itt	gt
90018430:	1ac2      	subgt	r2, r0, r3
90018432:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
90018436:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001843a:	2a00      	cmp	r2, #0
9001843c:	da07      	bge.n	9001844e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001843e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
90018442:	4462      	add	r2, ip
90018444:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90018448:	2200      	movs	r2, #0
9001844a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001844e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90018452:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
90018456:	eba6 060a 	sub.w	r6, r6, sl
9001845a:	42b2      	cmp	r2, r6
9001845c:	bfc4      	itt	gt
9001845e:	eba1 020a 	subgt.w	r2, r1, sl
90018462:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
90018466:	4a5c      	ldr	r2, [pc, #368]	; (900185d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
90018468:	7812      	ldrb	r2, [r2, #0]
9001846a:	b9a2      	cbnz	r2, 90018496 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001846c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
90018470:	4286      	cmp	r6, r0
90018472:	4640      	mov	r0, r8
90018474:	9303      	str	r3, [sp, #12]
90018476:	bf14      	ite	ne
90018478:	2600      	movne	r6, #0
9001847a:	2601      	moveq	r6, #1
9001847c:	f7f7 fae7 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90018480:	9b03      	ldr	r3, [sp, #12]
90018482:	b160      	cbz	r0, 9001849e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
90018484:	2300      	movs	r3, #0
90018486:	8023      	strh	r3, [r4, #0]
90018488:	8063      	strh	r3, [r4, #2]
9001848a:	80a3      	strh	r3, [r4, #4]
9001848c:	4620      	mov	r0, r4
9001848e:	80e3      	strh	r3, [r4, #6]
90018490:	b011      	add	sp, #68	; 0x44
90018492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018496:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001849a:	428e      	cmp	r6, r1
9001849c:	e7e9      	b.n	90018472 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001849e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
900184a2:	a90e      	add	r1, sp, #56	; 0x38
900184a4:	900e      	str	r0, [sp, #56]	; 0x38
900184a6:	a80c      	add	r0, sp, #48	; 0x30
900184a8:	9205      	str	r2, [sp, #20]
900184aa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
900184ae:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
900184b2:	9206      	str	r2, [sp, #24]
900184b4:	f8bb 2000 	ldrh.w	r2, [fp]
900184b8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
900184bc:	1a9b      	subs	r3, r3, r2
900184be:	b21b      	sxth	r3, r3
900184c0:	9303      	str	r3, [sp, #12]
900184c2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900184c6:	f8df b118 	ldr.w	fp, [pc, #280]	; 900185e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
900184ca:	ebaa 0a03 	sub.w	sl, sl, r3
900184ce:	fa0f f38a 	sxth.w	r3, sl
900184d2:	9304      	str	r3, [sp, #16]
900184d4:	9b03      	ldr	r3, [sp, #12]
900184d6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
900184da:	9b04      	ldr	r3, [sp, #16]
900184dc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
900184e0:	9b05      	ldr	r3, [sp, #20]
900184e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
900184e6:	9b06      	ldr	r3, [sp, #24]
900184e8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900184ec:	f7fa fa7c 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900184f0:	4640      	mov	r0, r8
900184f2:	f7fa fa51 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900184f6:	a80e      	add	r0, sp, #56	; 0x38
900184f8:	f7fa fa4e 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900184fc:	4b37      	ldr	r3, [pc, #220]	; (900185dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
900184fe:	4628      	mov	r0, r5
90018500:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
90018504:	881b      	ldrh	r3, [r3, #0]
90018506:	9307      	str	r3, [sp, #28]
90018508:	682b      	ldr	r3, [r5, #0]
9001850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001850c:	4798      	blx	r3
9001850e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
90018512:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
90018516:	4681      	mov	r9, r0
90018518:	f8db 0000 	ldr.w	r0, [fp]
9001851c:	fb1a 3305 	smlabb	r3, sl, r5, r3
90018520:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90018522:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90018526:	6803      	ldr	r3, [r0, #0]
90018528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001852a:	4798      	blx	r3
9001852c:	4607      	mov	r7, r0
9001852e:	f8db 0000 	ldr.w	r0, [fp]
90018532:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
90018536:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001853a:	6803      	ldr	r3, [r0, #0]
9001853c:	9109      	str	r1, [sp, #36]	; 0x24
9001853e:	9208      	str	r2, [sp, #32]
90018540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018542:	4798      	blx	r3
90018544:	f010 0f01 	tst.w	r0, #1
90018548:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001854c:	d012      	beq.n	90018574 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001854e:	f8db 0000 	ldr.w	r0, [fp]
90018552:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
90018556:	6803      	ldr	r3, [r0, #0]
90018558:	9200      	str	r2, [sp, #0]
9001855a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001855c:	462b      	mov	r3, r5
9001855e:	e898 0006 	ldmia.w	r8, {r1, r2}
90018562:	47b0      	blx	r6
90018564:	9b03      	ldr	r3, [sp, #12]
90018566:	8023      	strh	r3, [r4, #0]
90018568:	9b04      	ldr	r3, [sp, #16]
9001856a:	8063      	strh	r3, [r4, #2]
9001856c:	9b05      	ldr	r3, [sp, #20]
9001856e:	80a3      	strh	r3, [r4, #4]
90018570:	9b06      	ldr	r3, [sp, #24]
90018572:	e78b      	b.n	9001848c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
90018574:	fb09 f202 	mul.w	r2, r9, r2
90018578:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001857c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90018580:	440f      	add	r7, r1
90018582:	b166      	cbz	r6, 9001859e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
90018584:	9a07      	ldr	r2, [sp, #28]
90018586:	4592      	cmp	sl, r2
90018588:	d109      	bne.n	9001859e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001858a:	f8db 0000 	ldr.w	r0, [fp]
9001858e:	fb09 f303 	mul.w	r3, r9, r3
90018592:	4629      	mov	r1, r5
90018594:	6802      	ldr	r2, [r0, #0]
90018596:	6b56      	ldr	r6, [r2, #52]	; 0x34
90018598:	463a      	mov	r2, r7
9001859a:	47b0      	blx	r6
9001859c:	e7e2      	b.n	90018564 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001859e:	fb0a f303 	mul.w	r3, sl, r3
900185a2:	ea4f 064a 	mov.w	r6, sl, lsl #1
900185a6:	f8df b038 	ldr.w	fp, [pc, #56]	; 900185e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
900185aa:	eb05 0843 	add.w	r8, r5, r3, lsl #1
900185ae:	4545      	cmp	r5, r8
900185b0:	d2d8      	bcs.n	90018564 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
900185b2:	f8db 0000 	ldr.w	r0, [fp]
900185b6:	4629      	mov	r1, r5
900185b8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
900185bc:	4435      	add	r5, r6
900185be:	6802      	ldr	r2, [r0, #0]
900185c0:	005b      	lsls	r3, r3, #1
900185c2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
900185c6:	463a      	mov	r2, r7
900185c8:	47d0      	blx	sl
900185ca:	444f      	add	r7, r9
900185cc:	e7ef      	b.n	900185ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
900185ce:	bf00      	nop
900185d0:	240264d8 	.word	0x240264d8
900185d4:	240264da 	.word	0x240264da
900185d8:	240264dc 	.word	0x240264dc
900185dc:	240264de 	.word	0x240264de
900185e0:	240264e4 	.word	0x240264e4

900185e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
900185e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900185e6:	4606      	mov	r6, r0
900185e8:	b087      	sub	sp, #28
900185ea:	460c      	mov	r4, r1
900185ec:	4617      	mov	r7, r2
900185ee:	461d      	mov	r5, r3
900185f0:	b333      	cbz	r3, 90018640 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
900185f2:	4608      	mov	r0, r1
900185f4:	f7f7 fa2b 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
900185f8:	bb10      	cbnz	r0, 90018640 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
900185fa:	6820      	ldr	r0, [r4, #0]
900185fc:	ab04      	add	r3, sp, #16
900185fe:	6861      	ldr	r1, [r4, #4]
90018600:	4c1b      	ldr	r4, [pc, #108]	; (90018670 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
90018602:	c303      	stmia	r3!, {r0, r1}
90018604:	a804      	add	r0, sp, #16
90018606:	f7fa f9c7 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001860a:	6820      	ldr	r0, [r4, #0]
9001860c:	6803      	ldr	r3, [r0, #0]
9001860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018610:	4798      	blx	r3
90018612:	2dff      	cmp	r5, #255	; 0xff
90018614:	d016      	beq.n	90018644 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
90018616:	f010 0f08 	tst.w	r0, #8
9001861a:	6820      	ldr	r0, [r4, #0]
9001861c:	d015      	beq.n	9001864a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001861e:	2400      	movs	r4, #0
90018620:	6801      	ldr	r1, [r0, #0]
90018622:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90018626:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001862a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001862e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
90018632:	9401      	str	r4, [sp, #4]
90018634:	f8bd 4014 	ldrh.w	r4, [sp, #20]
90018638:	9400      	str	r4, [sp, #0]
9001863a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001863c:	4639      	mov	r1, r7
9001863e:	47a0      	blx	r4
90018640:	b007      	add	sp, #28
90018642:	bdf0      	pop	{r4, r5, r6, r7, pc}
90018644:	f010 0f02 	tst.w	r0, #2
90018648:	e7e7      	b.n	9001861a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001864a:	6803      	ldr	r3, [r0, #0]
9001864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001864e:	4798      	blx	r3
90018650:	4b08      	ldr	r3, [pc, #32]	; (90018674 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
90018652:	4601      	mov	r1, r0
90018654:	4630      	mov	r0, r6
90018656:	881a      	ldrh	r2, [r3, #0]
90018658:	6833      	ldr	r3, [r6, #0]
9001865a:	e9cd 7500 	strd	r7, r5, [sp]
9001865e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90018660:	ab04      	add	r3, sp, #16
90018662:	47a8      	blx	r5
90018664:	6820      	ldr	r0, [r4, #0]
90018666:	6803      	ldr	r3, [r0, #0]
90018668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001866a:	4798      	blx	r3
9001866c:	e7e8      	b.n	90018640 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001866e:	bf00      	nop
90018670:	240264e4 	.word	0x240264e4
90018674:	240264de 	.word	0x240264de

90018678 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
90018678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001867c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
90018680:	4688      	mov	r8, r1
90018682:	4614      	mov	r4, r2
90018684:	461d      	mov	r5, r3
90018686:	9e08      	ldr	r6, [sp, #32]
90018688:	2f00      	cmp	r7, #0
9001868a:	f000 80ab 	beq.w	900187e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001868e:	4618      	mov	r0, r3
90018690:	f7f7 f9dd 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
90018694:	2800      	cmp	r0, #0
90018696:	f040 80a5 	bne.w	900187e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001869a:	f9b5 1000 	ldrsh.w	r1, [r5]
9001869e:	2fff      	cmp	r7, #255	; 0xff
900186a0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
900186a4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
900186a8:	fb04 1303 	mla	r3, r4, r3, r1
900186ac:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
900186b0:	eba4 0200 	sub.w	r2, r4, r0
900186b4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
900186b8:	fb04 f505 	mul.w	r5, r4, r5
900186bc:	ea4f 2816 	mov.w	r8, r6, lsr #8
900186c0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
900186c4:	d04a      	beq.n	9001875c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
900186c6:	b2bc      	uxth	r4, r7
900186c8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
900186cc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
900186d0:	fa5f f788 	uxtb.w	r7, r8
900186d4:	b2f3      	uxtb	r3, r6
900186d6:	0040      	lsls	r0, r0, #1
900186d8:	fb0e fe04 	mul.w	lr, lr, r4
900186dc:	4367      	muls	r7, r4
900186de:	ea4f 0842 	mov.w	r8, r2, lsl #1
900186e2:	4363      	muls	r3, r4
900186e4:	fa1f fc8c 	uxth.w	ip, ip
900186e8:	42a9      	cmp	r1, r5
900186ea:	d27b      	bcs.n	900187e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
900186ec:	eb01 0900 	add.w	r9, r1, r0
900186f0:	4549      	cmp	r1, r9
900186f2:	d231      	bcs.n	90018758 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
900186f4:	880a      	ldrh	r2, [r1, #0]
900186f6:	1214      	asrs	r4, r2, #8
900186f8:	10d6      	asrs	r6, r2, #3
900186fa:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
900186fe:	00d2      	lsls	r2, r2, #3
90018700:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018704:	b2d2      	uxtb	r2, r2
90018706:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001870a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001870e:	fb14 f40c 	smulbb	r4, r4, ip
90018712:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
90018716:	fb12 f20c 	smulbb	r2, r2, ip
9001871a:	fb16 f60c 	smulbb	r6, r6, ip
9001871e:	4474      	add	r4, lr
90018720:	441a      	add	r2, r3
90018722:	b2a4      	uxth	r4, r4
90018724:	443e      	add	r6, r7
90018726:	b292      	uxth	r2, r2
90018728:	f104 0a01 	add.w	sl, r4, #1
9001872c:	b2b6      	uxth	r6, r6
9001872e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
90018732:	f102 0a01 	add.w	sl, r2, #1
90018736:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001873a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001873e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90018742:	4322      	orrs	r2, r4
90018744:	1c74      	adds	r4, r6, #1
90018746:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001874a:	0976      	lsrs	r6, r6, #5
9001874c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90018750:	4332      	orrs	r2, r6
90018752:	f821 2b02 	strh.w	r2, [r1], #2
90018756:	e7cb      	b.n	900186f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
90018758:	4441      	add	r1, r8
9001875a:	e7c5      	b.n	900186e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001875c:	0973      	lsrs	r3, r6, #5
9001875e:	4f22      	ldr	r7, [pc, #136]	; (900187e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
90018760:	f3c6 06c4 	ubfx	r6, r6, #3, #5
90018764:	ea08 0707 	and.w	r7, r8, r7
90018768:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001876c:	433b      	orrs	r3, r7
9001876e:	07e7      	lsls	r7, r4, #31
90018770:	ea43 0306 	orr.w	r3, r3, r6
90018774:	b29b      	uxth	r3, r3
90018776:	d50b      	bpl.n	90018790 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
90018778:	0040      	lsls	r0, r0, #1
9001877a:	0052      	lsls	r2, r2, #1
9001877c:	42a9      	cmp	r1, r5
9001877e:	d231      	bcs.n	900187e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
90018780:	180c      	adds	r4, r1, r0
90018782:	42a1      	cmp	r1, r4
90018784:	d202      	bcs.n	9001878c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
90018786:	f821 3b02 	strh.w	r3, [r1], #2
9001878a:	e7fa      	b.n	90018782 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001878c:	4411      	add	r1, r2
9001878e:	e7f5      	b.n	9001877c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
90018790:	078e      	lsls	r6, r1, #30
90018792:	d008      	beq.n	900187a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
90018794:	0066      	lsls	r6, r4, #1
90018796:	460a      	mov	r2, r1
90018798:	42aa      	cmp	r2, r5
9001879a:	d202      	bcs.n	900187a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001879c:	8013      	strh	r3, [r2, #0]
9001879e:	4432      	add	r2, r6
900187a0:	e7fa      	b.n	90018798 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
900187a2:	3102      	adds	r1, #2
900187a4:	3801      	subs	r0, #1
900187a6:	07c2      	lsls	r2, r0, #31
900187a8:	d50b      	bpl.n	900187c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
900187aa:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
900187ae:	0066      	lsls	r6, r4, #1
900187b0:	3a01      	subs	r2, #1
900187b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
900187b6:	42aa      	cmp	r2, r5
900187b8:	d202      	bcs.n	900187c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
900187ba:	8013      	strh	r3, [r2, #0]
900187bc:	4432      	add	r2, r6
900187be:	e7fa      	b.n	900187b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
900187c0:	3801      	subs	r0, #1
900187c2:	b178      	cbz	r0, 900187e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
900187c4:	1040      	asrs	r0, r0, #1
900187c6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
900187ca:	0080      	lsls	r0, r0, #2
900187cc:	0064      	lsls	r4, r4, #1
900187ce:	42a9      	cmp	r1, r5
900187d0:	d208      	bcs.n	900187e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
900187d2:	180e      	adds	r6, r1, r0
900187d4:	460a      	mov	r2, r1
900187d6:	42b2      	cmp	r2, r6
900187d8:	d202      	bcs.n	900187e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
900187da:	f842 3b04 	str.w	r3, [r2], #4
900187de:	e7fa      	b.n	900187d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
900187e0:	4421      	add	r1, r4
900187e2:	e7f4      	b.n	900187ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
900187e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900187e8:	00fff800 	.word	0x00fff800

900187ec <_ZN8touchgfx8LCD16bppC1Ev>:
900187ec:	2200      	movs	r2, #0
900187ee:	4910      	ldr	r1, [pc, #64]	; (90018830 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
900187f0:	6042      	str	r2, [r0, #4]
900187f2:	6001      	str	r1, [r0, #0]
900187f4:	e9c0 2202 	strd	r2, r2, [r0, #8]
900187f8:	e9c0 2204 	strd	r2, r2, [r0, #16]
900187fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
90018800:	e9c0 2208 	strd	r2, r2, [r0, #32]
90018804:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
90018808:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001880c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
90018810:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
90018814:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
90018818:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001881c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
90018820:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
90018824:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
90018828:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001882c:	4770      	bx	lr
9001882e:	bf00      	nop
90018830:	900253b0 	.word	0x900253b0

90018834 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
90018834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018838:	b08d      	sub	sp, #52	; 0x34
9001883a:	460d      	mov	r5, r1
9001883c:	4604      	mov	r4, r0
9001883e:	4699      	mov	r9, r3
90018840:	6808      	ldr	r0, [r1, #0]
90018842:	ab08      	add	r3, sp, #32
90018844:	6849      	ldr	r1, [r1, #4]
90018846:	c303      	stmia	r3!, {r0, r1}
90018848:	6810      	ldr	r0, [r2, #0]
9001884a:	ab0a      	add	r3, sp, #40	; 0x28
9001884c:	6851      	ldr	r1, [r2, #4]
9001884e:	c303      	stmia	r3!, {r0, r1}
90018850:	a808      	add	r0, sp, #32
90018852:	f7fa f8a1 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018856:	4629      	mov	r1, r5
90018858:	a80a      	add	r0, sp, #40	; 0x28
9001885a:	4d67      	ldr	r5, [pc, #412]	; (900189f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001885c:	f7fa f8c4 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018860:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
90018864:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
90018868:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001886c:	6828      	ldr	r0, [r5, #0]
9001886e:	fb11 2103 	smlabb	r1, r1, r3, r2
90018872:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
90018876:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001887a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001887e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
90018882:	440a      	add	r2, r1
90018884:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90018888:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001888c:	4413      	add	r3, r2
9001888e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018892:	6803      	ldr	r3, [r0, #0]
90018894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018896:	4798      	blx	r3
90018898:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001889c:	d119      	bne.n	900188d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001889e:	f010 0f20 	tst.w	r0, #32
900188a2:	6828      	ldr	r0, [r5, #0]
900188a4:	d018      	beq.n	900188d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
900188a6:	2500      	movs	r5, #0
900188a8:	6801      	ldr	r1, [r0, #0]
900188aa:	b2b6      	uxth	r6, r6
900188ac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
900188b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
900188b4:	9601      	str	r6, [sp, #4]
900188b6:	e9cd 9503 	strd	r9, r5, [sp, #12]
900188ba:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
900188be:	9502      	str	r5, [sp, #8]
900188c0:	fa1f f588 	uxth.w	r5, r8
900188c4:	9500      	str	r5, [sp, #0]
900188c6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
900188c8:	4621      	mov	r1, r4
900188ca:	47a8      	blx	r5
900188cc:	b00d      	add	sp, #52	; 0x34
900188ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900188d2:	f010 0f40 	tst.w	r0, #64	; 0x40
900188d6:	e7e4      	b.n	900188a2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
900188d8:	6803      	ldr	r3, [r0, #0]
900188da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900188dc:	4798      	blx	r3
900188de:	4947      	ldr	r1, [pc, #284]	; (900189fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
900188e0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
900188e4:	880b      	ldrh	r3, [r1, #0]
900188e6:	468a      	mov	sl, r1
900188e8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
900188ec:	fb03 5202 	mla	r2, r3, r2, r5
900188f0:	4373      	muls	r3, r6
900188f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
900188f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900188fa:	9307      	str	r3, [sp, #28]
900188fc:	ea4f 0348 	mov.w	r3, r8, lsl #1
90018900:	9306      	str	r3, [sp, #24]
90018902:	9b07      	ldr	r3, [sp, #28]
90018904:	4298      	cmp	r0, r3
90018906:	d270      	bcs.n	900189ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
90018908:	9b06      	ldr	r3, [sp, #24]
9001890a:	4621      	mov	r1, r4
9001890c:	eb00 0b03 	add.w	fp, r0, r3
90018910:	4558      	cmp	r0, fp
90018912:	d25d      	bcs.n	900189d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
90018914:	f851 4b04 	ldr.w	r4, [r1], #4
90018918:	0e23      	lsrs	r3, r4, #24
9001891a:	d014      	beq.n	90018946 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001891c:	2bff      	cmp	r3, #255	; 0xff
9001891e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
90018922:	d112      	bne.n	9001894a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
90018924:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90018928:	d10f      	bne.n	9001894a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001892a:	0963      	lsrs	r3, r4, #5
9001892c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90018930:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90018934:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90018938:	f02c 0c07 	bic.w	ip, ip, #7
9001893c:	ea43 0c0c 	orr.w	ip, r3, ip
90018940:	ea4c 0404 	orr.w	r4, ip, r4
90018944:	8004      	strh	r4, [r0, #0]
90018946:	3002      	adds	r0, #2
90018948:	e7e2      	b.n	90018910 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001894a:	fb09 f303 	mul.w	r3, r9, r3
9001894e:	8807      	ldrh	r7, [r0, #0]
90018950:	f3c4 4e07 	ubfx	lr, r4, #16, #8
90018954:	fa5f fc8c 	uxtb.w	ip, ip
90018958:	1c5a      	adds	r2, r3, #1
9001895a:	123e      	asrs	r6, r7, #8
9001895c:	10fd      	asrs	r5, r7, #3
9001895e:	eb02 2223 	add.w	r2, r2, r3, asr #8
90018962:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018966:	00ff      	lsls	r7, r7, #3
90018968:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001896c:	1212      	asrs	r2, r2, #8
9001896e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
90018972:	b293      	uxth	r3, r2
90018974:	43d2      	mvns	r2, r2
90018976:	b2ff      	uxtb	r7, r7
90018978:	fb1e fe03 	smulbb	lr, lr, r3
9001897c:	b2d2      	uxtb	r2, r2
9001897e:	fb1c fc03 	smulbb	ip, ip, r3
90018982:	b2e4      	uxtb	r4, r4
90018984:	fb06 e602 	mla	r6, r6, r2, lr
90018988:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001898c:	fb14 f403 	smulbb	r4, r4, r3
90018990:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
90018994:	b2b6      	uxth	r6, r6
90018996:	fb05 c502 	mla	r5, r5, r2, ip
9001899a:	fb07 4702 	mla	r7, r7, r2, r4
9001899e:	f106 0e01 	add.w	lr, r6, #1
900189a2:	b2ad      	uxth	r5, r5
900189a4:	b2bf      	uxth	r7, r7
900189a6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
900189aa:	f105 0c01 	add.w	ip, r5, #1
900189ae:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
900189b2:	1c7e      	adds	r6, r7, #1
900189b4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
900189b8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
900189bc:	096d      	lsrs	r5, r5, #5
900189be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900189c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900189c6:	ea46 060e 	orr.w	r6, r6, lr
900189ca:	432e      	orrs	r6, r5
900189cc:	8006      	strh	r6, [r0, #0]
900189ce:	e7ba      	b.n	90018946 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
900189d0:	f8ba 3000 	ldrh.w	r3, [sl]
900189d4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
900189d8:	eba3 0308 	sub.w	r3, r3, r8
900189dc:	eba4 0408 	sub.w	r4, r4, r8
900189e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900189e4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
900189e8:	e78b      	b.n	90018902 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
900189ea:	4b03      	ldr	r3, [pc, #12]	; (900189f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
900189ec:	6818      	ldr	r0, [r3, #0]
900189ee:	6803      	ldr	r3, [r0, #0]
900189f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900189f2:	4798      	blx	r3
900189f4:	e76a      	b.n	900188cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
900189f6:	bf00      	nop
900189f8:	240264e4 	.word	0x240264e4
900189fc:	240264de 	.word	0x240264de

90018a00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
90018a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90018a04:	b085      	sub	sp, #20
90018a06:	6810      	ldr	r0, [r2, #0]
90018a08:	460c      	mov	r4, r1
90018a0a:	6851      	ldr	r1, [r2, #4]
90018a0c:	466d      	mov	r5, sp
90018a0e:	4616      	mov	r6, r2
90018a10:	c503      	stmia	r5!, {r0, r1}
90018a12:	6818      	ldr	r0, [r3, #0]
90018a14:	6859      	ldr	r1, [r3, #4]
90018a16:	c503      	stmia	r5!, {r0, r1}
90018a18:	4668      	mov	r0, sp
90018a1a:	4d2e      	ldr	r5, [pc, #184]	; (90018ad4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
90018a1c:	f7f9 ffbc 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018a20:	4631      	mov	r1, r6
90018a22:	a802      	add	r0, sp, #8
90018a24:	4e2c      	ldr	r6, [pc, #176]	; (90018ad8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
90018a26:	f7f9 ffdf 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018a2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
90018a2e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
90018a32:	f8bd 1004 	ldrh.w	r1, [sp, #4]
90018a36:	6828      	ldr	r0, [r5, #0]
90018a38:	fb11 2103 	smlabb	r1, r1, r3, r2
90018a3c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90018a40:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
90018a44:	eb04 0481 	add.w	r4, r4, r1, lsl #2
90018a48:	f8bd 1000 	ldrh.w	r1, [sp]
90018a4c:	440a      	add	r2, r1
90018a4e:	f8ad 2008 	strh.w	r2, [sp, #8]
90018a52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90018a56:	4413      	add	r3, r2
90018a58:	f8ad 300a 	strh.w	r3, [sp, #10]
90018a5c:	6803      	ldr	r3, [r0, #0]
90018a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018a60:	4798      	blx	r3
90018a62:	8833      	ldrh	r3, [r6, #0]
90018a64:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
90018a68:	ea4f 0c47 	mov.w	ip, r7, lsl #1
90018a6c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
90018a70:	f8df e068 	ldr.w	lr, [pc, #104]	; 90018adc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
90018a74:	fb03 1202 	mla	r2, r3, r2, r1
90018a78:	fb08 f303 	mul.w	r3, r8, r3
90018a7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90018a80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90018a84:	4298      	cmp	r0, r3
90018a86:	d21d      	bcs.n	90018ac4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
90018a88:	eb00 080c 	add.w	r8, r0, ip
90018a8c:	4540      	cmp	r0, r8
90018a8e:	d20f      	bcs.n	90018ab0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
90018a90:	f854 1b04 	ldr.w	r1, [r4], #4
90018a94:	ea4f 1951 	mov.w	r9, r1, lsr #5
90018a98:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
90018a9c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90018aa0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90018aa4:	ea42 0209 	orr.w	r2, r2, r9
90018aa8:	430a      	orrs	r2, r1
90018aaa:	f820 2b02 	strh.w	r2, [r0], #2
90018aae:	e7ed      	b.n	90018a8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
90018ab0:	8832      	ldrh	r2, [r6, #0]
90018ab2:	1bd2      	subs	r2, r2, r7
90018ab4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90018ab8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
90018abc:	1bd2      	subs	r2, r2, r7
90018abe:	eb04 0482 	add.w	r4, r4, r2, lsl #2
90018ac2:	e7df      	b.n	90018a84 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
90018ac4:	6828      	ldr	r0, [r5, #0]
90018ac6:	6803      	ldr	r3, [r0, #0]
90018ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018aca:	4798      	blx	r3
90018acc:	b005      	add	sp, #20
90018ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90018ad2:	bf00      	nop
90018ad4:	240264e4 	.word	0x240264e4
90018ad8:	240264de 	.word	0x240264de
90018adc:	fffff800 	.word	0xfffff800

90018ae0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
90018ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90018ae4:	b08e      	sub	sp, #56	; 0x38
90018ae6:	460e      	mov	r6, r1
90018ae8:	4604      	mov	r4, r0
90018aea:	461d      	mov	r5, r3
90018aec:	6808      	ldr	r0, [r1, #0]
90018aee:	ab0a      	add	r3, sp, #40	; 0x28
90018af0:	6849      	ldr	r1, [r1, #4]
90018af2:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 90018cc8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
90018af6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 90018ccc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
90018afa:	c303      	stmia	r3!, {r0, r1}
90018afc:	6810      	ldr	r0, [r2, #0]
90018afe:	ab0c      	add	r3, sp, #48	; 0x30
90018b00:	6851      	ldr	r1, [r2, #4]
90018b02:	c303      	stmia	r3!, {r0, r1}
90018b04:	a80a      	add	r0, sp, #40	; 0x28
90018b06:	f7f9 ff47 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018b0a:	4631      	mov	r1, r6
90018b0c:	a80c      	add	r0, sp, #48	; 0x30
90018b0e:	f7f9 ff6b 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018b12:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
90018b16:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90018b1a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90018b1e:	f8d8 0000 	ldr.w	r0, [r8]
90018b22:	fb11 2103 	smlabb	r1, r1, r3, r2
90018b26:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
90018b2a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
90018b2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90018b32:	440c      	add	r4, r1
90018b34:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
90018b38:	440a      	add	r2, r1
90018b3a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
90018b3e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
90018b42:	4413      	add	r3, r2
90018b44:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90018b48:	6803      	ldr	r3, [r0, #0]
90018b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018b4c:	4798      	blx	r3
90018b4e:	2dff      	cmp	r5, #255	; 0xff
90018b50:	d124      	bne.n	90018b9c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
90018b52:	f010 0f01 	tst.w	r0, #1
90018b56:	f8d8 0000 	ldr.w	r0, [r8]
90018b5a:	d022      	beq.n	90018ba2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
90018b5c:	2100      	movs	r1, #0
90018b5e:	f04f 0e01 	mov.w	lr, #1
90018b62:	f8d0 c000 	ldr.w	ip, [r0]
90018b66:	b2b6      	uxth	r6, r6
90018b68:	f8cd e018 	str.w	lr, [sp, #24]
90018b6c:	b2bf      	uxth	r7, r7
90018b6e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90018b72:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90018b76:	e9cd 1107 	strd	r1, r1, [sp, #28]
90018b7a:	f8b9 e000 	ldrh.w	lr, [r9]
90018b7e:	9503      	str	r5, [sp, #12]
90018b80:	9601      	str	r6, [sp, #4]
90018b82:	9700      	str	r7, [sp, #0]
90018b84:	e9cd 1e04 	strd	r1, lr, [sp, #16]
90018b88:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90018b8c:	9102      	str	r1, [sp, #8]
90018b8e:	4621      	mov	r1, r4
90018b90:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
90018b94:	47a8      	blx	r5
90018b96:	b00e      	add	sp, #56	; 0x38
90018b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90018b9c:	f010 0f04 	tst.w	r0, #4
90018ba0:	e7d9      	b.n	90018b56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
90018ba2:	6803      	ldr	r3, [r0, #0]
90018ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018ba6:	4798      	blx	r3
90018ba8:	f8b9 3000 	ldrh.w	r3, [r9]
90018bac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
90018bb0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
90018bb4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
90018bb8:	435e      	muls	r6, r3
90018bba:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
90018bbe:	2dff      	cmp	r5, #255	; 0xff
90018bc0:	fb03 1202 	mla	r2, r3, r2, r1
90018bc4:	ebac 0c07 	sub.w	ip, ip, r7
90018bc8:	eba3 0707 	sub.w	r7, r3, r7
90018bcc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90018bd0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90018bd4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90018bd8:	ea4f 0747 	mov.w	r7, r7, lsl #1
90018bdc:	d049      	beq.n	90018c72 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
90018bde:	43eb      	mvns	r3, r5
90018be0:	fa1f f985 	uxth.w	r9, r5
90018be4:	b2db      	uxtb	r3, r3
90018be6:	42b0      	cmp	r0, r6
90018be8:	d266      	bcs.n	90018cb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
90018bea:	eb00 0a0e 	add.w	sl, r0, lr
90018bee:	4550      	cmp	r0, sl
90018bf0:	4621      	mov	r1, r4
90018bf2:	f104 0403 	add.w	r4, r4, #3
90018bf6:	d25b      	bcs.n	90018cb0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
90018bf8:	8802      	ldrh	r2, [r0, #0]
90018bfa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
90018bfe:	ea4f 2822 	mov.w	r8, r2, asr #8
90018c02:	fb11 f109 	smulbb	r1, r1, r9
90018c06:	10d5      	asrs	r5, r2, #3
90018c08:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
90018c0c:	00d2      	lsls	r2, r2, #3
90018c0e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90018c12:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
90018c16:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
90018c1a:	fb08 1803 	mla	r8, r8, r3, r1
90018c1e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
90018c22:	b2d2      	uxtb	r2, r2
90018c24:	fb11 f109 	smulbb	r1, r1, r9
90018c28:	fa1f f888 	uxth.w	r8, r8
90018c2c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
90018c30:	fb05 1503 	mla	r5, r5, r3, r1
90018c34:	f814 1c03 	ldrb.w	r1, [r4, #-3]
90018c38:	fb11 f109 	smulbb	r1, r1, r9
90018c3c:	b2ad      	uxth	r5, r5
90018c3e:	fb02 1203 	mla	r2, r2, r3, r1
90018c42:	f108 0101 	add.w	r1, r8, #1
90018c46:	b292      	uxth	r2, r2
90018c48:	eb01 2818 	add.w	r8, r1, r8, lsr #8
90018c4c:	1c51      	adds	r1, r2, #1
90018c4e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
90018c52:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90018c56:	1c69      	adds	r1, r5, #1
90018c58:	eb01 2515 	add.w	r5, r1, r5, lsr #8
90018c5c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90018c60:	096d      	lsrs	r5, r5, #5
90018c62:	ea42 0208 	orr.w	r2, r2, r8
90018c66:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90018c6a:	432a      	orrs	r2, r5
90018c6c:	f820 2b02 	strh.w	r2, [r0], #2
90018c70:	e7bd      	b.n	90018bee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
90018c72:	4a14      	ldr	r2, [pc, #80]	; (90018cc4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
90018c74:	42b0      	cmp	r0, r6
90018c76:	d21f      	bcs.n	90018cb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
90018c78:	eb00 050e 	add.w	r5, r0, lr
90018c7c:	42a8      	cmp	r0, r5
90018c7e:	4621      	mov	r1, r4
90018c80:	f104 0403 	add.w	r4, r4, #3
90018c84:	d210      	bcs.n	90018ca8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
90018c86:	f814 3c02 	ldrb.w	r3, [r4, #-2]
90018c8a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
90018c8e:	00db      	lsls	r3, r3, #3
90018c90:	ea02 2101 	and.w	r1, r2, r1, lsl #8
90018c94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90018c98:	430b      	orrs	r3, r1
90018c9a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
90018c9e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
90018ca2:	f820 3b02 	strh.w	r3, [r0], #2
90018ca6:	e7e9      	b.n	90018c7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
90018ca8:	4438      	add	r0, r7
90018caa:	eb01 040c 	add.w	r4, r1, ip
90018cae:	e7e1      	b.n	90018c74 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
90018cb0:	4438      	add	r0, r7
90018cb2:	eb01 040c 	add.w	r4, r1, ip
90018cb6:	e796      	b.n	90018be6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
90018cb8:	4b03      	ldr	r3, [pc, #12]	; (90018cc8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
90018cba:	6818      	ldr	r0, [r3, #0]
90018cbc:	6803      	ldr	r3, [r0, #0]
90018cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018cc0:	4798      	blx	r3
90018cc2:	e768      	b.n	90018b96 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
90018cc4:	fffff800 	.word	0xfffff800
90018cc8:	240264e4 	.word	0x240264e4
90018ccc:	240264de 	.word	0x240264de

90018cd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
90018cd0:	b4f0      	push	{r4, r5, r6, r7}
90018cd2:	4616      	mov	r6, r2
90018cd4:	461c      	mov	r4, r3
90018cd6:	460d      	mov	r5, r1
90018cd8:	9a04      	ldr	r2, [sp, #16]
90018cda:	2e01      	cmp	r6, #1
90018cdc:	f89d 3014 	ldrb.w	r3, [sp, #20]
90018ce0:	f89d 7018 	ldrb.w	r7, [sp, #24]
90018ce4:	d012      	beq.n	90018d0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
90018ce6:	d303      	bcc.n	90018cf0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
90018ce8:	2e02      	cmp	r6, #2
90018cea:	d00a      	beq.n	90018d02 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
90018cec:	bcf0      	pop	{r4, r5, r6, r7}
90018cee:	4770      	bx	lr
90018cf0:	6805      	ldr	r5, [r0, #0]
90018cf2:	e9cd 3704 	strd	r3, r7, [sp, #16]
90018cf6:	68ed      	ldr	r5, [r5, #12]
90018cf8:	4613      	mov	r3, r2
90018cfa:	4622      	mov	r2, r4
90018cfc:	46ac      	mov	ip, r5
90018cfe:	bcf0      	pop	{r4, r5, r6, r7}
90018d00:	4760      	bx	ip
90018d02:	4621      	mov	r1, r4
90018d04:	4628      	mov	r0, r5
90018d06:	bcf0      	pop	{r4, r5, r6, r7}
90018d08:	f7ff bd94 	b.w	90018834 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
90018d0c:	4621      	mov	r1, r4
90018d0e:	4628      	mov	r0, r5
90018d10:	bcf0      	pop	{r4, r5, r6, r7}
90018d12:	f7ff bee5 	b.w	90018ae0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

90018d18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
90018d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018d1c:	b093      	sub	sp, #76	; 0x4c
90018d1e:	4681      	mov	r9, r0
90018d20:	4688      	mov	r8, r1
90018d22:	6810      	ldr	r0, [r2, #0]
90018d24:	6851      	ldr	r1, [r2, #4]
90018d26:	ac0e      	add	r4, sp, #56	; 0x38
90018d28:	4616      	mov	r6, r2
90018d2a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
90018d2e:	4f6b      	ldr	r7, [pc, #428]	; (90018edc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
90018d30:	c403      	stmia	r4!, {r0, r1}
90018d32:	6818      	ldr	r0, [r3, #0]
90018d34:	ac10      	add	r4, sp, #64	; 0x40
90018d36:	6859      	ldr	r1, [r3, #4]
90018d38:	c403      	stmia	r4!, {r0, r1}
90018d3a:	a80e      	add	r0, sp, #56	; 0x38
90018d3c:	f7f9 fe2c 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018d40:	4631      	mov	r1, r6
90018d42:	a810      	add	r0, sp, #64	; 0x40
90018d44:	4e66      	ldr	r6, [pc, #408]	; (90018ee0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
90018d46:	f7f9 fe4f 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018d4a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
90018d4e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
90018d52:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
90018d56:	6830      	ldr	r0, [r6, #0]
90018d58:	fb11 2103 	smlabb	r1, r1, r3, r2
90018d5c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
90018d60:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
90018d64:	4489      	add	r9, r1
90018d66:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
90018d6a:	440a      	add	r2, r1
90018d6c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
90018d70:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
90018d74:	4413      	add	r3, r2
90018d76:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
90018d7a:	6803      	ldr	r3, [r0, #0]
90018d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90018d7e:	4798      	blx	r3
90018d80:	f010 0f80 	tst.w	r0, #128	; 0x80
90018d84:	6830      	ldr	r0, [r6, #0]
90018d86:	d01d      	beq.n	90018dc4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
90018d88:	2200      	movs	r2, #0
90018d8a:	6801      	ldr	r1, [r0, #0]
90018d8c:	b2a4      	uxth	r4, r4
90018d8e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90018d92:	b2ad      	uxth	r5, r5
90018d94:	e9cd 2208 	strd	r2, r2, [sp, #32]
90018d98:	220b      	movs	r2, #11
90018d9a:	9207      	str	r2, [sp, #28]
90018d9c:	883a      	ldrh	r2, [r7, #0]
90018d9e:	9502      	str	r5, [sp, #8]
90018da0:	9206      	str	r2, [sp, #24]
90018da2:	2201      	movs	r2, #1
90018da4:	9401      	str	r4, [sp, #4]
90018da6:	e9cd a204 	strd	sl, r2, [sp, #16]
90018daa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
90018dae:	9203      	str	r2, [sp, #12]
90018db0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
90018db4:	9200      	str	r2, [sp, #0]
90018db6:	4642      	mov	r2, r8
90018db8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
90018dba:	4649      	mov	r1, r9
90018dbc:	47a0      	blx	r4
90018dbe:	b013      	add	sp, #76	; 0x4c
90018dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018dc4:	6803      	ldr	r3, [r0, #0]
90018dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018dc8:	4798      	blx	r3
90018dca:	883b      	ldrh	r3, [r7, #0]
90018dcc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
90018dd0:	f04f 0e04 	mov.w	lr, #4
90018dd4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
90018dd8:	435d      	muls	r5, r3
90018dda:	fb03 1202 	mla	r2, r3, r2, r1
90018dde:	eb00 0042 	add.w	r0, r0, r2, lsl #1
90018de2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
90018de6:	920c      	str	r2, [sp, #48]	; 0x30
90018de8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
90018dec:	1b12      	subs	r2, r2, r4
90018dee:	920d      	str	r2, [sp, #52]	; 0x34
90018df0:	0062      	lsls	r2, r4, #1
90018df2:	1b1c      	subs	r4, r3, r4
90018df4:	920a      	str	r2, [sp, #40]	; 0x28
90018df6:	0063      	lsls	r3, r4, #1
90018df8:	930b      	str	r3, [sp, #44]	; 0x2c
90018dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90018dfc:	4298      	cmp	r0, r3
90018dfe:	d266      	bcs.n	90018ece <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
90018e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90018e02:	eb00 0b03 	add.w	fp, r0, r3
90018e06:	4558      	cmp	r0, fp
90018e08:	d25c      	bcs.n	90018ec4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
90018e0a:	f819 3b01 	ldrb.w	r3, [r9], #1
90018e0e:	fb1e e303 	smlabb	r3, lr, r3, lr
90018e12:	f858 2003 	ldr.w	r2, [r8, r3]
90018e16:	0e11      	lsrs	r1, r2, #24
90018e18:	d012      	beq.n	90018e40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
90018e1a:	29ff      	cmp	r1, #255	; 0xff
90018e1c:	ea4f 2712 	mov.w	r7, r2, lsr #8
90018e20:	d110      	bne.n	90018e44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
90018e22:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
90018e26:	d10d      	bne.n	90018e44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
90018e28:	0953      	lsrs	r3, r2, #5
90018e2a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
90018e2e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90018e32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90018e36:	f027 0707 	bic.w	r7, r7, #7
90018e3a:	431f      	orrs	r7, r3
90018e3c:	433a      	orrs	r2, r7
90018e3e:	8002      	strh	r2, [r0, #0]
90018e40:	3002      	adds	r0, #2
90018e42:	e7e0      	b.n	90018e06 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
90018e44:	fb0a f101 	mul.w	r1, sl, r1
90018e48:	8806      	ldrh	r6, [r0, #0]
90018e4a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
90018e4e:	b2d2      	uxtb	r2, r2
90018e50:	1c4b      	adds	r3, r1, #1
90018e52:	1235      	asrs	r5, r6, #8
90018e54:	10f4      	asrs	r4, r6, #3
90018e56:	eb03 2321 	add.w	r3, r3, r1, asr #8
90018e5a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90018e5e:	00f6      	lsls	r6, r6, #3
90018e60:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
90018e64:	121b      	asrs	r3, r3, #8
90018e66:	b2f6      	uxtb	r6, r6
90018e68:	b299      	uxth	r1, r3
90018e6a:	43db      	mvns	r3, r3
90018e6c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
90018e70:	fb1c fc01 	smulbb	ip, ip, r1
90018e74:	b2db      	uxtb	r3, r3
90018e76:	fb12 f201 	smulbb	r2, r2, r1
90018e7a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
90018e7e:	fb05 c503 	mla	r5, r5, r3, ip
90018e82:	b2ff      	uxtb	r7, r7
90018e84:	fb06 2203 	mla	r2, r6, r3, r2
90018e88:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
90018e8c:	fb17 f701 	smulbb	r7, r7, r1
90018e90:	b2ad      	uxth	r5, r5
90018e92:	b292      	uxth	r2, r2
90018e94:	fb04 7403 	mla	r4, r4, r3, r7
90018e98:	f105 0c01 	add.w	ip, r5, #1
90018e9c:	1c57      	adds	r7, r2, #1
90018e9e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90018ea2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90018ea6:	b2a4      	uxth	r4, r4
90018ea8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90018eac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90018eb0:	433d      	orrs	r5, r7
90018eb2:	1c67      	adds	r7, r4, #1
90018eb4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
90018eb8:	0964      	lsrs	r4, r4, #5
90018eba:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90018ebe:	4325      	orrs	r5, r4
90018ec0:	8005      	strh	r5, [r0, #0]
90018ec2:	e7bd      	b.n	90018e40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
90018ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90018ec6:	4418      	add	r0, r3
90018ec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90018eca:	4499      	add	r9, r3
90018ecc:	e795      	b.n	90018dfa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
90018ece:	4b04      	ldr	r3, [pc, #16]	; (90018ee0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
90018ed0:	6818      	ldr	r0, [r3, #0]
90018ed2:	6803      	ldr	r3, [r0, #0]
90018ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90018ed6:	4798      	blx	r3
90018ed8:	e771      	b.n	90018dbe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
90018eda:	bf00      	nop
90018edc:	240264de 	.word	0x240264de
90018ee0:	240264e4 	.word	0x240264e4

90018ee4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
90018ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018ee8:	b087      	sub	sp, #28
90018eea:	4680      	mov	r8, r0
90018eec:	460d      	mov	r5, r1
90018eee:	4614      	mov	r4, r2
90018ef0:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
90018ef4:	2e00      	cmp	r6, #0
90018ef6:	f000 80b9 	beq.w	9001906c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
90018efa:	6810      	ldr	r0, [r2, #0]
90018efc:	af02      	add	r7, sp, #8
90018efe:	6851      	ldr	r1, [r2, #4]
90018f00:	c703      	stmia	r7!, {r0, r1}
90018f02:	6818      	ldr	r0, [r3, #0]
90018f04:	af04      	add	r7, sp, #16
90018f06:	6859      	ldr	r1, [r3, #4]
90018f08:	c703      	stmia	r7!, {r0, r1}
90018f0a:	a802      	add	r0, sp, #8
90018f0c:	f7f9 fd44 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018f10:	4621      	mov	r1, r4
90018f12:	a804      	add	r0, sp, #16
90018f14:	f7f9 fd68 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018f18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90018f1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90018f20:	f8bd 400c 	ldrh.w	r4, [sp, #12]
90018f24:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
90018f28:	fb14 2103 	smlabb	r1, r4, r3, r2
90018f2c:	eb08 0401 	add.w	r4, r8, r1
90018f30:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90018f34:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
90018f38:	440a      	add	r2, r1
90018f3a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
90018f3e:	f8ad 2010 	strh.w	r2, [sp, #16]
90018f42:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90018f46:	4413      	add	r3, r2
90018f48:	f8ad 3012 	strh.w	r3, [sp, #18]
90018f4c:	4b49      	ldr	r3, [pc, #292]	; (90019074 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
90018f4e:	6818      	ldr	r0, [r3, #0]
90018f50:	6803      	ldr	r3, [r0, #0]
90018f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018f54:	4798      	blx	r3
90018f56:	4b48      	ldr	r3, [pc, #288]	; (90019078 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
90018f58:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
90018f5c:	2eff      	cmp	r6, #255	; 0xff
90018f5e:	881a      	ldrh	r2, [r3, #0]
90018f60:	f9bd c010 	ldrsh.w	ip, [sp, #16]
90018f64:	fb02 c101 	mla	r1, r2, r1, ip
90018f68:	fb02 f207 	mul.w	r2, r2, r7
90018f6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
90018f70:	f105 0104 	add.w	r1, r5, #4
90018f74:	461d      	mov	r5, r3
90018f76:	d05a      	beq.n	9001902e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
90018f78:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
90018f7c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90018f80:	b2b6      	uxth	r6, r6
90018f82:	9301      	str	r3, [sp, #4]
90018f84:	fa1f fe8e 	uxth.w	lr, lr
90018f88:	4282      	cmp	r2, r0
90018f8a:	d96a      	bls.n	90019062 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
90018f8c:	eb00 0b0a 	add.w	fp, r0, sl
90018f90:	4583      	cmp	fp, r0
90018f92:	d940      	bls.n	90019016 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
90018f94:	8805      	ldrh	r5, [r0, #0]
90018f96:	f814 3b01 	ldrb.w	r3, [r4], #1
90018f9a:	122f      	asrs	r7, r5, #8
90018f9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
90018fa0:	ea4f 09e5 	mov.w	r9, r5, asr #3
90018fa4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018fa8:	00ed      	lsls	r5, r5, #3
90018faa:	ea4f 2c23 	mov.w	ip, r3, asr #8
90018fae:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90018fb2:	fb17 f70e 	smulbb	r7, r7, lr
90018fb6:	b2ed      	uxtb	r5, r5
90018fb8:	fb19 f90e 	smulbb	r9, r9, lr
90018fbc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018fc0:	fb15 f50e 	smulbb	r5, r5, lr
90018fc4:	fb0c 7c06 	mla	ip, ip, r6, r7
90018fc8:	10df      	asrs	r7, r3, #3
90018fca:	00db      	lsls	r3, r3, #3
90018fcc:	fa1f fc8c 	uxth.w	ip, ip
90018fd0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018fd4:	b2db      	uxtb	r3, r3
90018fd6:	fb07 9706 	mla	r7, r7, r6, r9
90018fda:	f10c 0901 	add.w	r9, ip, #1
90018fde:	fb03 5306 	mla	r3, r3, r6, r5
90018fe2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
90018fe6:	b29b      	uxth	r3, r3
90018fe8:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
90018fec:	b2bf      	uxth	r7, r7
90018fee:	f103 0c01 	add.w	ip, r3, #1
90018ff2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90018ff6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90018ffa:	ea4c 0c09 	orr.w	ip, ip, r9
90018ffe:	f107 0901 	add.w	r9, r7, #1
90019002:	eb09 2717 	add.w	r7, r9, r7, lsr #8
90019006:	097f      	lsrs	r7, r7, #5
90019008:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001900c:	ea4c 0c07 	orr.w	ip, ip, r7
90019010:	f820 cb02 	strh.w	ip, [r0], #2
90019014:	e7bc      	b.n	90018f90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
90019016:	9b01      	ldr	r3, [sp, #4]
90019018:	881b      	ldrh	r3, [r3, #0]
9001901a:	eba3 0308 	sub.w	r3, r3, r8
9001901e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019022:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90019026:	eba3 0308 	sub.w	r3, r3, r8
9001902a:	441c      	add	r4, r3
9001902c:	e7ac      	b.n	90018f88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001902e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90019032:	4282      	cmp	r2, r0
90019034:	d915      	bls.n	90019062 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
90019036:	eb00 060a 	add.w	r6, r0, sl
9001903a:	4286      	cmp	r6, r0
9001903c:	d906      	bls.n	9001904c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001903e:	f814 3b01 	ldrb.w	r3, [r4], #1
90019042:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
90019046:	f820 3b02 	strh.w	r3, [r0], #2
9001904a:	e7f6      	b.n	9001903a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001904c:	882b      	ldrh	r3, [r5, #0]
9001904e:	eba3 0308 	sub.w	r3, r3, r8
90019052:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019056:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001905a:	eba3 0308 	sub.w	r3, r3, r8
9001905e:	441c      	add	r4, r3
90019060:	e7e7      	b.n	90019032 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
90019062:	4b04      	ldr	r3, [pc, #16]	; (90019074 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
90019064:	6818      	ldr	r0, [r3, #0]
90019066:	6803      	ldr	r3, [r0, #0]
90019068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001906a:	4798      	blx	r3
9001906c:	b007      	add	sp, #28
9001906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019072:	bf00      	nop
90019074:	240264e4 	.word	0x240264e4
90019078:	240264de 	.word	0x240264de

9001907c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019080:	b091      	sub	sp, #68	; 0x44
90019082:	4680      	mov	r8, r0
90019084:	460f      	mov	r7, r1
90019086:	4614      	mov	r4, r2
90019088:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001908c:	2d00      	cmp	r5, #0
9001908e:	d051      	beq.n	90019134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
90019090:	6810      	ldr	r0, [r2, #0]
90019092:	ae0c      	add	r6, sp, #48	; 0x30
90019094:	6851      	ldr	r1, [r2, #4]
90019096:	f8df 9200 	ldr.w	r9, [pc, #512]	; 90019298 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001909a:	c603      	stmia	r6!, {r0, r1}
9001909c:	6818      	ldr	r0, [r3, #0]
9001909e:	ae0e      	add	r6, sp, #56	; 0x38
900190a0:	6859      	ldr	r1, [r3, #4]
900190a2:	c603      	stmia	r6!, {r0, r1}
900190a4:	a80c      	add	r0, sp, #48	; 0x30
900190a6:	f7f9 fc77 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900190aa:	4621      	mov	r1, r4
900190ac:	a80e      	add	r0, sp, #56	; 0x38
900190ae:	f7f9 fc9b 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900190b2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
900190b6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
900190ba:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
900190be:	f8d9 0000 	ldr.w	r0, [r9]
900190c2:	fb11 2103 	smlabb	r1, r1, r3, r2
900190c6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
900190ca:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
900190ce:	eb08 0401 	add.w	r4, r8, r1
900190d2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
900190d6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001929c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
900190da:	440a      	add	r2, r1
900190dc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
900190e0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
900190e4:	4413      	add	r3, r2
900190e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
900190ea:	6803      	ldr	r3, [r0, #0]
900190ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900190ee:	4798      	blx	r3
900190f0:	f010 0f80 	tst.w	r0, #128	; 0x80
900190f4:	f8d9 0000 	ldr.w	r0, [r9]
900190f8:	d01f      	beq.n	9001913a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
900190fa:	2200      	movs	r2, #0
900190fc:	6801      	ldr	r1, [r0, #0]
900190fe:	b2b6      	uxth	r6, r6
90019100:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90019104:	e9cd 2208 	strd	r2, r2, [sp, #32]
90019108:	220b      	movs	r2, #11
9001910a:	9207      	str	r2, [sp, #28]
9001910c:	f8b8 2000 	ldrh.w	r2, [r8]
90019110:	9601      	str	r6, [sp, #4]
90019112:	9206      	str	r2, [sp, #24]
90019114:	2201      	movs	r2, #1
90019116:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001911a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001911e:	9203      	str	r2, [sp, #12]
90019120:	fa1f f28a 	uxth.w	r2, sl
90019124:	9202      	str	r2, [sp, #8]
90019126:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001912a:	9200      	str	r2, [sp, #0]
9001912c:	463a      	mov	r2, r7
9001912e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
90019130:	4621      	mov	r1, r4
90019132:	47a8      	blx	r5
90019134:	b011      	add	sp, #68	; 0x44
90019136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001913a:	6803      	ldr	r3, [r0, #0]
9001913c:	ea4f 0946 	mov.w	r9, r6, lsl #1
90019140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019142:	4798      	blx	r3
90019144:	f8b8 2000 	ldrh.w	r2, [r8]
90019148:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001914c:	2dff      	cmp	r5, #255	; 0xff
9001914e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
90019152:	fb0a fa02 	mul.w	sl, sl, r2
90019156:	fb02 1303 	mla	r3, r2, r3, r1
9001915a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001915e:	d062      	beq.n	90019226 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
90019160:	ea6f 0c05 	mvn.w	ip, r5
90019164:	eb00 034a 	add.w	r3, r0, sl, lsl #1
90019168:	b2ad      	uxth	r5, r5
9001916a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001916e:	fa5f fc8c 	uxtb.w	ip, ip
90019172:	930a      	str	r3, [sp, #40]	; 0x28
90019174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90019176:	4298      	cmp	r0, r3
90019178:	f080 8085 	bcs.w	90019286 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001917c:	eb00 0b09 	add.w	fp, r0, r9
90019180:	4558      	cmp	r0, fp
90019182:	d246      	bcs.n	90019212 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
90019184:	f814 eb01 	ldrb.w	lr, [r4], #1
90019188:	2303      	movs	r3, #3
9001918a:	2204      	movs	r2, #4
9001918c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
90019190:	8803      	ldrh	r3, [r0, #0]
90019192:	eb07 0a0e 	add.w	sl, r7, lr
90019196:	1219      	asrs	r1, r3, #8
90019198:	10da      	asrs	r2, r3, #3
9001919a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001919e:	f89a 8002 	ldrb.w	r8, [sl, #2]
900191a2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900191a6:	00db      	lsls	r3, r3, #3
900191a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900191ac:	fb18 f805 	smulbb	r8, r8, r5
900191b0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
900191b4:	fb1e fe05 	smulbb	lr, lr, r5
900191b8:	b2db      	uxtb	r3, r3
900191ba:	fb01 810c 	mla	r1, r1, ip, r8
900191be:	f89a 8001 	ldrb.w	r8, [sl, #1]
900191c2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
900191c6:	fb18 f805 	smulbb	r8, r8, r5
900191ca:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
900191ce:	b289      	uxth	r1, r1
900191d0:	fb02 820c 	mla	r2, r2, ip, r8
900191d4:	fb03 e30c 	mla	r3, r3, ip, lr
900191d8:	f101 0801 	add.w	r8, r1, #1
900191dc:	b292      	uxth	r2, r2
900191de:	b29b      	uxth	r3, r3
900191e0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
900191e4:	f102 0801 	add.w	r8, r2, #1
900191e8:	f103 0e01 	add.w	lr, r3, #1
900191ec:	eb08 2812 	add.w	r8, r8, r2, lsr #8
900191f0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
900191f4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
900191f8:	ea4f 1858 	mov.w	r8, r8, lsr #5
900191fc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
90019200:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90019204:	ea4e 0101 	orr.w	r1, lr, r1
90019208:	ea41 0108 	orr.w	r1, r1, r8
9001920c:	f820 1b02 	strh.w	r1, [r0], #2
90019210:	e7b6      	b.n	90019180 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
90019212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019214:	881b      	ldrh	r3, [r3, #0]
90019216:	1b9b      	subs	r3, r3, r6
90019218:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001921c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
90019220:	1b9b      	subs	r3, r3, r6
90019222:	441c      	add	r4, r3
90019224:	e7a6      	b.n	90019174 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
90019226:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001922a:	2203      	movs	r2, #3
9001922c:	2504      	movs	r5, #4
9001922e:	4919      	ldr	r1, [pc, #100]	; (90019294 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
90019230:	4550      	cmp	r0, sl
90019232:	d228      	bcs.n	90019286 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
90019234:	eb00 0c09 	add.w	ip, r0, r9
90019238:	4560      	cmp	r0, ip
9001923a:	4623      	mov	r3, r4
9001923c:	d219      	bcs.n	90019272 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001923e:	f893 e000 	ldrb.w	lr, [r3]
90019242:	3401      	adds	r4, #1
90019244:	fb12 5e0e 	smlabb	lr, r2, lr, r5
90019248:	eb07 0b0e 	add.w	fp, r7, lr
9001924c:	f817 e00e 	ldrb.w	lr, [r7, lr]
90019250:	f89b 3002 	ldrb.w	r3, [fp, #2]
90019254:	f89b b001 	ldrb.w	fp, [fp, #1]
90019258:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001925c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
90019260:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90019264:	ea43 030b 	orr.w	r3, r3, fp
90019268:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001926c:	f820 3b02 	strh.w	r3, [r0], #2
90019270:	e7e2      	b.n	90019238 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
90019272:	f8b8 3000 	ldrh.w	r3, [r8]
90019276:	1b9b      	subs	r3, r3, r6
90019278:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001927c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
90019280:	1b9b      	subs	r3, r3, r6
90019282:	441c      	add	r4, r3
90019284:	e7d4      	b.n	90019230 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
90019286:	4b04      	ldr	r3, [pc, #16]	; (90019298 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
90019288:	6818      	ldr	r0, [r3, #0]
9001928a:	6803      	ldr	r3, [r0, #0]
9001928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001928e:	4798      	blx	r3
90019290:	e750      	b.n	90019134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
90019292:	bf00      	nop
90019294:	fffff800 	.word	0xfffff800
90019298:	240264e4 	.word	0x240264e4
9001929c:	240264de 	.word	0x240264de

900192a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
900192a0:	b430      	push	{r4, r5}
900192a2:	780d      	ldrb	r5, [r1, #0]
900192a4:	f89d 4008 	ldrb.w	r4, [sp, #8]
900192a8:	2d01      	cmp	r5, #1
900192aa:	d00a      	beq.n	900192c2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
900192ac:	d305      	bcc.n	900192ba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
900192ae:	2d02      	cmp	r5, #2
900192b0:	d10b      	bne.n	900192ca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
900192b2:	9402      	str	r4, [sp, #8]
900192b4:	bc30      	pop	{r4, r5}
900192b6:	f7ff be15 	b.w	90018ee4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
900192ba:	9402      	str	r4, [sp, #8]
900192bc:	bc30      	pop	{r4, r5}
900192be:	f7ff bd2b 	b.w	90018d18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
900192c2:	9402      	str	r4, [sp, #8]
900192c4:	bc30      	pop	{r4, r5}
900192c6:	f7ff bed9 	b.w	9001907c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
900192ca:	bc30      	pop	{r4, r5}
900192cc:	4770      	bx	lr
	...

900192d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
900192d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900192d4:	b087      	sub	sp, #28
900192d6:	4604      	mov	r4, r0
900192d8:	460e      	mov	r6, r1
900192da:	6810      	ldr	r0, [r2, #0]
900192dc:	6851      	ldr	r1, [r2, #4]
900192de:	ad02      	add	r5, sp, #8
900192e0:	4617      	mov	r7, r2
900192e2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
900192e6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 90019518 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
900192ea:	c503      	stmia	r5!, {r0, r1}
900192ec:	6818      	ldr	r0, [r3, #0]
900192ee:	ad04      	add	r5, sp, #16
900192f0:	6859      	ldr	r1, [r3, #4]
900192f2:	c503      	stmia	r5!, {r0, r1}
900192f4:	a802      	add	r0, sp, #8
900192f6:	f7f9 fb4f 	bl	90012998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900192fa:	4639      	mov	r1, r7
900192fc:	a804      	add	r0, sp, #16
900192fe:	f7f9 fb73 	bl	900129e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019302:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90019306:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001930a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001930e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
90019312:	fb11 2103 	smlabb	r1, r1, r3, r2
90019316:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001931a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001931e:	440e      	add	r6, r1
90019320:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90019324:	440a      	add	r2, r1
90019326:	f8ad 2010 	strh.w	r2, [sp, #16]
9001932a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001932e:	4413      	add	r3, r2
90019330:	f8ad 3012 	strh.w	r3, [sp, #18]
90019334:	4b77      	ldr	r3, [pc, #476]	; (90019514 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
90019336:	6818      	ldr	r0, [r3, #0]
90019338:	6803      	ldr	r3, [r0, #0]
9001933a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001933c:	4798      	blx	r3
9001933e:	f8b9 b000 	ldrh.w	fp, [r9]
90019342:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019346:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001934a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001934e:	fb05 f50b 	mul.w	r5, r5, fp
90019352:	fb0b 2303 	mla	r3, fp, r3, r2
90019356:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001935a:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001935e:	9300      	str	r3, [sp, #0]
90019360:	d069      	beq.n	90019436 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
90019362:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
90019366:	4558      	cmp	r0, fp
90019368:	f080 80cc 	bcs.w	90019504 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001936c:	9b00      	ldr	r3, [sp, #0]
9001936e:	4631      	mov	r1, r6
90019370:	18c3      	adds	r3, r0, r3
90019372:	9301      	str	r3, [sp, #4]
90019374:	9b01      	ldr	r3, [sp, #4]
90019376:	4298      	cmp	r0, r3
90019378:	d24f      	bcs.n	9001941a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001937a:	f811 2b01 	ldrb.w	r2, [r1], #1
9001937e:	2a00      	cmp	r2, #0
90019380:	d048      	beq.n	90019414 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
90019382:	fb0a f202 	mul.w	r2, sl, r2
90019386:	1c53      	adds	r3, r2, #1
90019388:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001938c:	121b      	asrs	r3, r3, #8
9001938e:	d041      	beq.n	90019414 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
90019390:	8802      	ldrh	r2, [r0, #0]
90019392:	b29e      	uxth	r6, r3
90019394:	f8b4 c000 	ldrh.w	ip, [r4]
90019398:	43db      	mvns	r3, r3
9001939a:	1215      	asrs	r5, r2, #8
9001939c:	b2db      	uxtb	r3, r3
9001939e:	ea4f 272c 	mov.w	r7, ip, asr #8
900193a2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900193a6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
900193aa:	fb15 f503 	smulbb	r5, r5, r3
900193ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900193b2:	00d2      	lsls	r2, r2, #3
900193b4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
900193b8:	fb07 5706 	mla	r7, r7, r6, r5
900193bc:	ea4f 05ec 	mov.w	r5, ip, asr #3
900193c0:	b2d2      	uxtb	r2, r2
900193c2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900193c6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900193ca:	fb1e fe03 	smulbb	lr, lr, r3
900193ce:	b2bf      	uxth	r7, r7
900193d0:	fb12 f203 	smulbb	r2, r2, r3
900193d4:	fa5f fc8c 	uxtb.w	ip, ip
900193d8:	fb05 e506 	mla	r5, r5, r6, lr
900193dc:	f107 0e01 	add.w	lr, r7, #1
900193e0:	fb0c 2c06 	mla	ip, ip, r6, r2
900193e4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
900193e8:	fa1f fc8c 	uxth.w	ip, ip
900193ec:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
900193f0:	b2ad      	uxth	r5, r5
900193f2:	f10c 0701 	add.w	r7, ip, #1
900193f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900193fa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900193fe:	ea47 070e 	orr.w	r7, r7, lr
90019402:	f105 0e01 	add.w	lr, r5, #1
90019406:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001940a:	096d      	lsrs	r5, r5, #5
9001940c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019410:	432f      	orrs	r7, r5
90019412:	8007      	strh	r7, [r0, #0]
90019414:	3002      	adds	r0, #2
90019416:	3402      	adds	r4, #2
90019418:	e7ac      	b.n	90019374 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001941a:	f8b9 3000 	ldrh.w	r3, [r9]
9001941e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
90019422:	eba3 0308 	sub.w	r3, r3, r8
90019426:	eba6 0608 	sub.w	r6, r6, r8
9001942a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001942e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
90019432:	440e      	add	r6, r1
90019434:	e797      	b.n	90019366 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
90019436:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001943a:	42a8      	cmp	r0, r5
9001943c:	d262      	bcs.n	90019504 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001943e:	9b00      	ldr	r3, [sp, #0]
90019440:	4631      	mov	r1, r6
90019442:	eb00 0b03 	add.w	fp, r0, r3
90019446:	4558      	cmp	r0, fp
90019448:	d24e      	bcs.n	900194e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001944a:	f811 3b01 	ldrb.w	r3, [r1], #1
9001944e:	b12b      	cbz	r3, 9001945c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
90019450:	2bff      	cmp	r3, #255	; 0xff
90019452:	f8b4 e000 	ldrh.w	lr, [r4]
90019456:	d104      	bne.n	90019462 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
90019458:	f8a0 e000 	strh.w	lr, [r0]
9001945c:	3002      	adds	r0, #2
9001945e:	3402      	adds	r4, #2
90019460:	e7f1      	b.n	90019446 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
90019462:	8802      	ldrh	r2, [r0, #0]
90019464:	b29f      	uxth	r7, r3
90019466:	43db      	mvns	r3, r3
90019468:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001946c:	1216      	asrs	r6, r2, #8
9001946e:	b2db      	uxtb	r3, r3
90019470:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019474:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019478:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001947c:	00d2      	lsls	r2, r2, #3
9001947e:	fb16 f603 	smulbb	r6, r6, r3
90019482:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90019486:	b2d2      	uxtb	r2, r2
90019488:	fb0c 6c07 	mla	ip, ip, r7, r6
9001948c:	ea4f 06ee 	mov.w	r6, lr, asr #3
90019490:	fb1a fa03 	smulbb	sl, sl, r3
90019494:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019498:	fa1f fc8c 	uxth.w	ip, ip
9001949c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900194a0:	fb12 f303 	smulbb	r3, r2, r3
900194a4:	fa5f fe8e 	uxtb.w	lr, lr
900194a8:	fb06 a607 	mla	r6, r6, r7, sl
900194ac:	f10c 0201 	add.w	r2, ip, #1
900194b0:	fb0e 3307 	mla	r3, lr, r7, r3
900194b4:	b2b6      	uxth	r6, r6
900194b6:	b29b      	uxth	r3, r3
900194b8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
900194bc:	f106 0a01 	add.w	sl, r6, #1
900194c0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
900194c4:	f103 0c01 	add.w	ip, r3, #1
900194c8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
900194cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900194d0:	0976      	lsrs	r6, r6, #5
900194d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900194d6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900194da:	ea4c 0c02 	orr.w	ip, ip, r2
900194de:	ea4c 0c06 	orr.w	ip, ip, r6
900194e2:	f8a0 c000 	strh.w	ip, [r0]
900194e6:	e7b9      	b.n	9001945c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
900194e8:	f8b9 3000 	ldrh.w	r3, [r9]
900194ec:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
900194f0:	eba3 0308 	sub.w	r3, r3, r8
900194f4:	eba6 0608 	sub.w	r6, r6, r8
900194f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900194fc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
90019500:	440e      	add	r6, r1
90019502:	e79a      	b.n	9001943a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
90019504:	4b03      	ldr	r3, [pc, #12]	; (90019514 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
90019506:	6818      	ldr	r0, [r3, #0]
90019508:	6803      	ldr	r3, [r0, #0]
9001950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001950c:	4798      	blx	r3
9001950e:	b007      	add	sp, #28
90019510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019514:	240264e4 	.word	0x240264e4
90019518:	240264de 	.word	0x240264de

9001951c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019520:	b089      	sub	sp, #36	; 0x24
90019522:	4682      	mov	sl, r0
90019524:	460f      	mov	r7, r1
90019526:	4691      	mov	r9, r2
90019528:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001952c:	4698      	mov	r8, r3
9001952e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90019530:	2e00      	cmp	r6, #0
90019532:	d036      	beq.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019534:	4608      	mov	r0, r1
90019536:	f7fc f863 	bl	90015600 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001953a:	4605      	mov	r5, r0
9001953c:	4638      	mov	r0, r7
9001953e:	f7fc f893 	bl	90015668 <_ZNK8touchgfx6Bitmap9getHeightEv>
90019542:	f8ad 000e 	strh.w	r0, [sp, #14]
90019546:	4638      	mov	r0, r7
90019548:	f8ad 9008 	strh.w	r9, [sp, #8]
9001954c:	f8ad 500c 	strh.w	r5, [sp, #12]
90019550:	f8ad 800a 	strh.w	r8, [sp, #10]
90019554:	f7fc f940 	bl	900157d8 <_ZNK8touchgfx6Bitmap7getDataEv>
90019558:	4605      	mov	r5, r0
9001955a:	4638      	mov	r0, r7
9001955c:	f7fc f96c 	bl	90015838 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
90019560:	4681      	mov	r9, r0
90019562:	4638      	mov	r0, r7
90019564:	f7fc f9bc 	bl	900158e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
90019568:	280b      	cmp	r0, #11
9001956a:	d81a      	bhi.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001956c:	e8df f000 	tbb	[pc, r0]
90019570:	1906aebd 	.word	0x1906aebd
90019574:	19191919 	.word	0x19191919
90019578:	b5191919 	.word	0xb5191919
9001957c:	4bb0      	ldr	r3, [pc, #704]	; (90019840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001957e:	6818      	ldr	r0, [r3, #0]
90019580:	6803      	ldr	r3, [r0, #0]
90019582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019584:	4798      	blx	r3
90019586:	2eff      	cmp	r6, #255	; 0xff
90019588:	d121      	bne.n	900195ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001958a:	0683      	lsls	r3, r0, #26
9001958c:	d41f      	bmi.n	900195ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001958e:	4638      	mov	r0, r7
90019590:	f7fc f8ea 	bl	90015768 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90019594:	b940      	cbnz	r0, 900195a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
90019596:	4623      	mov	r3, r4
90019598:	aa02      	add	r2, sp, #8
9001959a:	4629      	mov	r1, r5
9001959c:	4650      	mov	r0, sl
9001959e:	f7ff fa2f 	bl	90018a00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
900195a2:	b009      	add	sp, #36	; 0x24
900195a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900195a8:	f10d 0818 	add.w	r8, sp, #24
900195ac:	4639      	mov	r1, r7
900195ae:	af04      	add	r7, sp, #16
900195b0:	4640      	mov	r0, r8
900195b2:	f7fc f88d 	bl	900156d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900195b6:	e898 0003 	ldmia.w	r8, {r0, r1}
900195ba:	e887 0003 	stmia.w	r7, {r0, r1}
900195be:	4638      	mov	r0, r7
900195c0:	4621      	mov	r1, r4
900195c2:	f7f6 fa01 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
900195c6:	4638      	mov	r0, r7
900195c8:	f7f6 fa41 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
900195cc:	b130      	cbz	r0, 900195dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
900195ce:	4633      	mov	r3, r6
900195d0:	4622      	mov	r2, r4
900195d2:	a902      	add	r1, sp, #8
900195d4:	4628      	mov	r0, r5
900195d6:	f7ff f92d 	bl	90018834 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
900195da:	e7e2      	b.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
900195dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
900195e0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
900195e4:	4293      	cmp	r3, r2
900195e6:	dd12      	ble.n	9001960e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
900195e8:	1a9b      	subs	r3, r3, r2
900195ea:	f9b4 0000 	ldrsh.w	r0, [r4]
900195ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900195f2:	f8ad 0018 	strh.w	r0, [sp, #24]
900195f6:	4628      	mov	r0, r5
900195f8:	f8ad 201a 	strh.w	r2, [sp, #26]
900195fc:	4642      	mov	r2, r8
900195fe:	f8ad 101c 	strh.w	r1, [sp, #28]
90019602:	a902      	add	r1, sp, #8
90019604:	f8ad 301e 	strh.w	r3, [sp, #30]
90019608:	4633      	mov	r3, r6
9001960a:	f7ff f913 	bl	90018834 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001960e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
90019612:	f9b4 2000 	ldrsh.w	r2, [r4]
90019616:	4293      	cmp	r3, r2
90019618:	dd12      	ble.n	90019640 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001961a:	1a9b      	subs	r3, r3, r2
9001961c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
90019620:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
90019624:	f8ad 2018 	strh.w	r2, [sp, #24]
90019628:	4642      	mov	r2, r8
9001962a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001962e:	4628      	mov	r0, r5
90019630:	f8ad 301c 	strh.w	r3, [sp, #28]
90019634:	23ff      	movs	r3, #255	; 0xff
90019636:	f8ad 101e 	strh.w	r1, [sp, #30]
9001963a:	a902      	add	r1, sp, #8
9001963c:	f7ff f8fa 	bl	90018834 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
90019640:	463b      	mov	r3, r7
90019642:	aa02      	add	r2, sp, #8
90019644:	4629      	mov	r1, r5
90019646:	4650      	mov	r0, sl
90019648:	f7ff f9da 	bl	90018a00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001964c:	88a2      	ldrh	r2, [r4, #4]
9001964e:	8823      	ldrh	r3, [r4, #0]
90019650:	f8bd 1014 	ldrh.w	r1, [sp, #20]
90019654:	4413      	add	r3, r2
90019656:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001965a:	440a      	add	r2, r1
9001965c:	b29b      	uxth	r3, r3
9001965e:	b292      	uxth	r2, r2
90019660:	b218      	sxth	r0, r3
90019662:	b211      	sxth	r1, r2
90019664:	4288      	cmp	r0, r1
90019666:	dd12      	ble.n	9001968e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
90019668:	1a9b      	subs	r3, r3, r2
9001966a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001966e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
90019672:	4642      	mov	r2, r8
90019674:	f8ad 1018 	strh.w	r1, [sp, #24]
90019678:	a902      	add	r1, sp, #8
9001967a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001967e:	23ff      	movs	r3, #255	; 0xff
90019680:	f8ad 001e 	strh.w	r0, [sp, #30]
90019684:	4628      	mov	r0, r5
90019686:	f8ad 601a 	strh.w	r6, [sp, #26]
9001968a:	f7ff f8d3 	bl	90018834 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001968e:	88e2      	ldrh	r2, [r4, #6]
90019690:	8863      	ldrh	r3, [r4, #2]
90019692:	f8bd 1016 	ldrh.w	r1, [sp, #22]
90019696:	4413      	add	r3, r2
90019698:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001969c:	440a      	add	r2, r1
9001969e:	b29b      	uxth	r3, r3
900196a0:	b292      	uxth	r2, r2
900196a2:	b218      	sxth	r0, r3
900196a4:	b211      	sxth	r1, r2
900196a6:	4288      	cmp	r0, r1
900196a8:	f77f af7b 	ble.w	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
900196ac:	1a9b      	subs	r3, r3, r2
900196ae:	f9b4 6000 	ldrsh.w	r6, [r4]
900196b2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
900196b6:	4642      	mov	r2, r8
900196b8:	f8ad 301e 	strh.w	r3, [sp, #30]
900196bc:	23ff      	movs	r3, #255	; 0xff
900196be:	f8ad 6018 	strh.w	r6, [sp, #24]
900196c2:	f8ad 101a 	strh.w	r1, [sp, #26]
900196c6:	f8ad 001c 	strh.w	r0, [sp, #28]
900196ca:	e782      	b.n	900195d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
900196cc:	4633      	mov	r3, r6
900196ce:	4622      	mov	r2, r4
900196d0:	a902      	add	r1, sp, #8
900196d2:	4628      	mov	r0, r5
900196d4:	f7ff fa04 	bl	90018ae0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
900196d8:	e763      	b.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
900196da:	9600      	str	r6, [sp, #0]
900196dc:	4623      	mov	r3, r4
900196de:	aa02      	add	r2, sp, #8
900196e0:	4649      	mov	r1, r9
900196e2:	4628      	mov	r0, r5
900196e4:	f7ff fddc 	bl	900192a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
900196e8:	e75b      	b.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
900196ea:	4638      	mov	r0, r7
900196ec:	f7fc f83c 	bl	90015768 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
900196f0:	b950      	cbnz	r0, 90019708 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
900196f2:	f8da 3000 	ldr.w	r3, [sl]
900196f6:	aa02      	add	r2, sp, #8
900196f8:	4629      	mov	r1, r5
900196fa:	e9cd 6000 	strd	r6, r0, [sp]
900196fe:	4650      	mov	r0, sl
90019700:	68de      	ldr	r6, [r3, #12]
90019702:	4623      	mov	r3, r4
90019704:	47b0      	blx	r6
90019706:	e74c      	b.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
90019708:	f10d 0818 	add.w	r8, sp, #24
9001970c:	4639      	mov	r1, r7
9001970e:	af04      	add	r7, sp, #16
90019710:	4640      	mov	r0, r8
90019712:	f7fb ffdd 	bl	900156d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90019716:	e898 0003 	ldmia.w	r8, {r0, r1}
9001971a:	e887 0003 	stmia.w	r7, {r0, r1}
9001971e:	4638      	mov	r0, r7
90019720:	4621      	mov	r1, r4
90019722:	f7f6 f951 	bl	9000f9c8 <_ZN8touchgfx4RectaNERKS0_>
90019726:	4638      	mov	r0, r7
90019728:	f7f6 f991 	bl	9000fa4e <_ZNK8touchgfx4Rect7isEmptyEv>
9001972c:	b138      	cbz	r0, 9001973e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001972e:	4623      	mov	r3, r4
90019730:	9600      	str	r6, [sp, #0]
90019732:	aa02      	add	r2, sp, #8
90019734:	4649      	mov	r1, r9
90019736:	4628      	mov	r0, r5
90019738:	f7ff fdca 	bl	900192d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001973c:	e731      	b.n	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001973e:	f8da 3000 	ldr.w	r3, [sl]
90019742:	aa02      	add	r2, sp, #8
90019744:	4629      	mov	r1, r5
90019746:	e9cd 6000 	strd	r6, r0, [sp]
9001974a:	4650      	mov	r0, sl
9001974c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
90019750:	463b      	mov	r3, r7
90019752:	47d8      	blx	fp
90019754:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90019758:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001975c:	4293      	cmp	r3, r2
9001975e:	dd13      	ble.n	90019788 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
90019760:	f9b4 0000 	ldrsh.w	r0, [r4]
90019764:	1a9b      	subs	r3, r3, r2
90019766:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001976a:	f8ad 0018 	strh.w	r0, [sp, #24]
9001976e:	4628      	mov	r0, r5
90019770:	f8ad 201a 	strh.w	r2, [sp, #26]
90019774:	aa02      	add	r2, sp, #8
90019776:	f8ad 101c 	strh.w	r1, [sp, #28]
9001977a:	4649      	mov	r1, r9
9001977c:	f8ad 301e 	strh.w	r3, [sp, #30]
90019780:	4643      	mov	r3, r8
90019782:	9600      	str	r6, [sp, #0]
90019784:	f7ff fda4 	bl	900192d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90019788:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001978c:	f9b4 2000 	ldrsh.w	r2, [r4]
90019790:	4293      	cmp	r3, r2
90019792:	dd13      	ble.n	900197bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
90019794:	1a9b      	subs	r3, r3, r2
90019796:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001979a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001979e:	f8ad 2018 	strh.w	r2, [sp, #24]
900197a2:	aa02      	add	r2, sp, #8
900197a4:	f8ad 001a 	strh.w	r0, [sp, #26]
900197a8:	4628      	mov	r0, r5
900197aa:	f8ad 301c 	strh.w	r3, [sp, #28]
900197ae:	4643      	mov	r3, r8
900197b0:	f8ad 101e 	strh.w	r1, [sp, #30]
900197b4:	4649      	mov	r1, r9
900197b6:	9600      	str	r6, [sp, #0]
900197b8:	f7ff fd8a 	bl	900192d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
900197bc:	88a2      	ldrh	r2, [r4, #4]
900197be:	8823      	ldrh	r3, [r4, #0]
900197c0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
900197c4:	4413      	add	r3, r2
900197c6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
900197ca:	440a      	add	r2, r1
900197cc:	b29b      	uxth	r3, r3
900197ce:	b292      	uxth	r2, r2
900197d0:	b218      	sxth	r0, r3
900197d2:	b211      	sxth	r1, r2
900197d4:	4288      	cmp	r0, r1
900197d6:	dd13      	ble.n	90019800 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
900197d8:	1a9b      	subs	r3, r3, r2
900197da:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
900197de:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
900197e2:	aa02      	add	r2, sp, #8
900197e4:	f8ad 1018 	strh.w	r1, [sp, #24]
900197e8:	4649      	mov	r1, r9
900197ea:	f8ad 301c 	strh.w	r3, [sp, #28]
900197ee:	4643      	mov	r3, r8
900197f0:	f8ad 001e 	strh.w	r0, [sp, #30]
900197f4:	4628      	mov	r0, r5
900197f6:	9600      	str	r6, [sp, #0]
900197f8:	f8ad 701a 	strh.w	r7, [sp, #26]
900197fc:	f7ff fd68 	bl	900192d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90019800:	88e2      	ldrh	r2, [r4, #6]
90019802:	8863      	ldrh	r3, [r4, #2]
90019804:	f8bd 1016 	ldrh.w	r1, [sp, #22]
90019808:	4413      	add	r3, r2
9001980a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001980e:	440a      	add	r2, r1
90019810:	b29b      	uxth	r3, r3
90019812:	b292      	uxth	r2, r2
90019814:	b218      	sxth	r0, r3
90019816:	b211      	sxth	r1, r2
90019818:	4288      	cmp	r0, r1
9001981a:	f77f aec2 	ble.w	900195a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001981e:	f9b4 7000 	ldrsh.w	r7, [r4]
90019822:	1a9b      	subs	r3, r3, r2
90019824:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019828:	f8ad 301e 	strh.w	r3, [sp, #30]
9001982c:	4643      	mov	r3, r8
9001982e:	f8ad 7018 	strh.w	r7, [sp, #24]
90019832:	f8ad 101a 	strh.w	r1, [sp, #26]
90019836:	f8ad 001c 	strh.w	r0, [sp, #28]
9001983a:	9600      	str	r6, [sp, #0]
9001983c:	e779      	b.n	90019732 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001983e:	bf00      	nop
90019840:	240264e4 	.word	0x240264e4

90019844 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
90019844:	b180      	cbz	r0, 90019868 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
90019846:	2903      	cmp	r1, #3
90019848:	d81c      	bhi.n	90019884 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001984a:	e8df f001 	tbb	[pc, r1]
9001984e:	1d02      	.short	0x1d02
90019850:	1f08      	.short	0x1f08
90019852:	4b10      	ldr	r3, [pc, #64]	; (90019894 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
90019854:	8818      	ldrh	r0, [r3, #0]
90019856:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001985a:	4240      	negs	r0, r0
9001985c:	4770      	bx	lr
9001985e:	4b0d      	ldr	r3, [pc, #52]	; (90019894 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
90019860:	8818      	ldrh	r0, [r3, #0]
90019862:	f3c0 000e 	ubfx	r0, r0, #0, #15
90019866:	4770      	bx	lr
90019868:	2903      	cmp	r1, #3
9001986a:	d80b      	bhi.n	90019884 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001986c:	a301      	add	r3, pc, #4	; (adr r3, 90019874 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001986e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
90019872:	bf00      	nop
90019874:	90019889 	.word	0x90019889
90019878:	9001985f 	.word	0x9001985f
9001987c:	9001988d 	.word	0x9001988d
90019880:	90019853 	.word	0x90019853
90019884:	2000      	movs	r0, #0
90019886:	4770      	bx	lr
90019888:	2001      	movs	r0, #1
9001988a:	4770      	bx	lr
9001988c:	f04f 30ff 	mov.w	r0, #4294967295
90019890:	4770      	bx	lr
90019892:	bf00      	nop
90019894:	240264de 	.word	0x240264de

90019898 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
90019898:	b180      	cbz	r0, 900198bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001989a:	2903      	cmp	r1, #3
9001989c:	d81c      	bhi.n	900198d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001989e:	e8df f001 	tbb	[pc, r1]
900198a2:	021d      	.short	0x021d
900198a4:	071f      	.short	0x071f
900198a6:	4b10      	ldr	r3, [pc, #64]	; (900198e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
900198a8:	8818      	ldrh	r0, [r3, #0]
900198aa:	f3c0 000e 	ubfx	r0, r0, #0, #15
900198ae:	4770      	bx	lr
900198b0:	4b0d      	ldr	r3, [pc, #52]	; (900198e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
900198b2:	8818      	ldrh	r0, [r3, #0]
900198b4:	f3c0 000e 	ubfx	r0, r0, #0, #15
900198b8:	4240      	negs	r0, r0
900198ba:	4770      	bx	lr
900198bc:	2903      	cmp	r1, #3
900198be:	d80b      	bhi.n	900198d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
900198c0:	a301      	add	r3, pc, #4	; (adr r3, 900198c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
900198c2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
900198c6:	bf00      	nop
900198c8:	900198a7 	.word	0x900198a7
900198cc:	900198e1 	.word	0x900198e1
900198d0:	900198b1 	.word	0x900198b1
900198d4:	900198dd 	.word	0x900198dd
900198d8:	2000      	movs	r0, #0
900198da:	4770      	bx	lr
900198dc:	2001      	movs	r0, #1
900198de:	4770      	bx	lr
900198e0:	f04f 30ff 	mov.w	r0, #4294967295
900198e4:	4770      	bx	lr
900198e6:	bf00      	nop
900198e8:	240264de 	.word	0x240264de

900198ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
900198ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900198f0:	b099      	sub	sp, #100	; 0x64
900198f2:	910b      	str	r1, [sp, #44]	; 0x2c
900198f4:	a914      	add	r1, sp, #80	; 0x50
900198f6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
900198fa:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
900198fe:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
90019902:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
90019906:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001990a:	e881 000c 	stmia.w	r1, {r2, r3}
9001990e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
90019912:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
90019916:	9309      	str	r3, [sp, #36]	; 0x24
90019918:	f891 900d 	ldrb.w	r9, [r1, #13]
9001991c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90019920:	ea4f 1749 	mov.w	r7, r9, lsl #5
90019924:	9310      	str	r3, [sp, #64]	; 0x40
90019926:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001992a:	930c      	str	r3, [sp, #48]	; 0x30
9001992c:	f407 7380 	and.w	r3, r7, #256	; 0x100
90019930:	798f      	ldrb	r7, [r1, #6]
90019932:	431f      	orrs	r7, r3
90019934:	f000 8195 	beq.w	90019c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
90019938:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001993c:	f409 7380 	and.w	r3, r9, #256	; 0x100
90019940:	f891 9007 	ldrb.w	r9, [r1, #7]
90019944:	ea59 0903 	orrs.w	r9, r9, r3
90019948:	f000 818b 	beq.w	90019c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001994c:	f991 3009 	ldrsb.w	r3, [r1, #9]
90019950:	b29b      	uxth	r3, r3
90019952:	2d00      	cmp	r5, #0
90019954:	f000 812e 	beq.w	90019bb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
90019958:	1aed      	subs	r5, r5, r3
9001995a:	b2ad      	uxth	r5, r5
9001995c:	042b      	lsls	r3, r5, #16
9001995e:	d502      	bpl.n	90019966 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
90019960:	1b64      	subs	r4, r4, r5
90019962:	2500      	movs	r5, #0
90019964:	b224      	sxth	r4, r4
90019966:	f9b2 1000 	ldrsh.w	r1, [r2]
9001996a:	a814      	add	r0, sp, #80	; 0x50
9001996c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90019970:	428c      	cmp	r4, r1
90019972:	b28b      	uxth	r3, r1
90019974:	bfbf      	itttt	lt
90019976:	18ed      	addlt	r5, r5, r3
90019978:	1b2c      	sublt	r4, r5, r4
9001997a:	b2a5      	uxthlt	r5, r4
9001997c:	460c      	movlt	r4, r1
9001997e:	8891      	ldrh	r1, [r2, #4]
90019980:	440b      	add	r3, r1
90019982:	4621      	mov	r1, r4
90019984:	b21b      	sxth	r3, r3
90019986:	930f      	str	r3, [sp, #60]	; 0x3c
90019988:	88d3      	ldrh	r3, [r2, #6]
9001998a:	8852      	ldrh	r2, [r2, #2]
9001998c:	4413      	add	r3, r2
9001998e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90019990:	b21b      	sxth	r3, r3
90019992:	930d      	str	r3, [sp, #52]	; 0x34
90019994:	4bbd      	ldr	r3, [pc, #756]	; (90019c8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
90019996:	f893 b000 	ldrb.w	fp, [r3]
9001999a:	f10b 3cff 	add.w	ip, fp, #4294967295
9001999e:	f1dc 0300 	rsbs	r3, ip, #0
900199a2:	eb43 030c 	adc.w	r3, r3, ip
900199a6:	930e      	str	r3, [sp, #56]	; 0x38
900199a8:	4653      	mov	r3, sl
900199aa:	f7f8 fe6f 	bl	9001268c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
900199ae:	4621      	mov	r1, r4
900199b0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
900199b4:	4653      	mov	r3, sl
900199b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
900199b8:	a814      	add	r0, sp, #80	; 0x50
900199ba:	f7f8 fe84 	bl	900126c6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
900199be:	a918      	add	r1, sp, #96	; 0x60
900199c0:	f821 0d02 	strh.w	r0, [r1, #-2]!
900199c4:	a817      	add	r0, sp, #92	; 0x5c
900199c6:	f7f8 ffa5 	bl	90012914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
900199ca:	f1ba 0f00 	cmp.w	sl, #0
900199ce:	f040 80f4 	bne.w	90019bba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
900199d2:	f1bb 0f01 	cmp.w	fp, #1
900199d6:	f040 80f8 	bne.w	90019bca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
900199da:	9b10      	ldr	r3, [sp, #64]	; 0x40
900199dc:	2b00      	cmp	r3, #0
900199de:	f040 8145 	bne.w	90019c6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
900199e2:	b2ba      	uxth	r2, r7
900199e4:	b905      	cbnz	r5, 900199e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
900199e6:	b16e      	cbz	r6, 90019a04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
900199e8:	fb06 5302 	mla	r3, r6, r2, r5
900199ec:	9828      	ldr	r0, [sp, #160]	; 0xa0
900199ee:	4631      	mov	r1, r6
900199f0:	fb08 f303 	mul.w	r3, r8, r3
900199f4:	f003 0607 	and.w	r6, r3, #7
900199f8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
900199fc:	9328      	str	r3, [sp, #160]	; 0xa0
900199fe:	eba9 0301 	sub.w	r3, r9, r1
90019a02:	930a      	str	r3, [sp, #40]	; 0x28
90019a04:	4651      	mov	r1, sl
90019a06:	980e      	ldr	r0, [sp, #56]	; 0x38
90019a08:	f7ff ff1c 	bl	90019844 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
90019a0c:	4681      	mov	r9, r0
90019a0e:	980e      	ldr	r0, [sp, #56]	; 0x38
90019a10:	f7ff ff42 	bl	90019898 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
90019a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019a16:	9909      	ldr	r1, [sp, #36]	; 0x24
90019a18:	4683      	mov	fp, r0
90019a1a:	eba3 0a01 	sub.w	sl, r3, r1
90019a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90019a20:	459a      	cmp	sl, r3
90019a22:	bfa8      	it	ge
90019a24:	469a      	movge	sl, r3
90019a26:	f1ba 0f00 	cmp.w	sl, #0
90019a2a:	f340 811a 	ble.w	90019c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
90019a2e:	1b64      	subs	r4, r4, r5
90019a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90019a32:	1b1c      	subs	r4, r3, r4
90019a34:	42bc      	cmp	r4, r7
90019a36:	bfd4      	ite	le
90019a38:	ebc5 0504 	rsble	r5, r5, r4
90019a3c:	ebc5 0507 	rsbgt	r5, r5, r7
90019a40:	2d00      	cmp	r5, #0
90019a42:	f340 810e 	ble.w	90019c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
90019a46:	1b52      	subs	r2, r2, r5
90019a48:	fb08 f302 	mul.w	r3, r8, r2
90019a4c:	930f      	str	r3, [sp, #60]	; 0x3c
90019a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019a50:	2b00      	cmp	r3, #0
90019a52:	f040 8116 	bne.w	90019c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
90019a56:	4b8e      	ldr	r3, [pc, #568]	; (90019c90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
90019a58:	6818      	ldr	r0, [r3, #0]
90019a5a:	6803      	ldr	r3, [r0, #0]
90019a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019a5e:	4798      	blx	r3
90019a60:	2301      	movs	r3, #1
90019a62:	4a8c      	ldr	r2, [pc, #560]	; (90019c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
90019a64:	fa03 f308 	lsl.w	r3, r3, r8
90019a68:	8811      	ldrh	r1, [r2, #0]
90019a6a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
90019a6e:	3b01      	subs	r3, #1
90019a70:	b2db      	uxtb	r3, r3
90019a72:	930e      	str	r3, [sp, #56]	; 0x38
90019a74:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
90019a78:	fb01 2303 	mla	r3, r1, r3, r2
90019a7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90019a80:	930a      	str	r3, [sp, #40]	; 0x28
90019a82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90019a84:	f3c3 4307 	ubfx	r3, r3, #16, #8
90019a88:	9313      	str	r3, [sp, #76]	; 0x4c
90019a8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90019a8c:	0a19      	lsrs	r1, r3, #8
90019a8e:	b2cb      	uxtb	r3, r1
90019a90:	9312      	str	r3, [sp, #72]	; 0x48
90019a92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90019a94:	b2db      	uxtb	r3, r3
90019a96:	9311      	str	r3, [sp, #68]	; 0x44
90019a98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90019a9a:	095a      	lsrs	r2, r3, #5
90019a9c:	4b7e      	ldr	r3, [pc, #504]	; (90019c98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
90019a9e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019aa2:	400b      	ands	r3, r1
90019aa4:	4313      	orrs	r3, r2
90019aa6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
90019aa8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90019aac:	4313      	orrs	r3, r2
90019aae:	b29b      	uxth	r3, r3
90019ab0:	9310      	str	r3, [sp, #64]	; 0x40
90019ab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90019ab4:	781a      	ldrb	r2, [r3, #0]
90019ab6:	ea4f 0349 	mov.w	r3, r9, lsl #1
90019aba:	fb05 b919 	mls	r9, r5, r9, fp
90019abe:	4132      	asrs	r2, r6
90019ac0:	fb03 fb05 	mul.w	fp, r3, r5
90019ac4:	930d      	str	r3, [sp, #52]	; 0x34
90019ac6:	b2d2      	uxtb	r2, r2
90019ac8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
90019acc:	f11a 3aff 	adds.w	sl, sl, #4294967295
90019ad0:	f0c0 80f5 	bcc.w	90019cbe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
90019ad4:	46ae      	mov	lr, r5
90019ad6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
90019ada:	f11e 3eff 	adds.w	lr, lr, #4294967295
90019ade:	f0c0 80dd 	bcc.w	90019c9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
90019ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019ae4:	4013      	ands	r3, r2
90019ae6:	d055      	beq.n	90019b94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
90019ae8:	20ff      	movs	r0, #255	; 0xff
90019aea:	990e      	ldr	r1, [sp, #56]	; 0x38
90019aec:	fb90 f1f1 	sdiv	r1, r0, r1
90019af0:	434b      	muls	r3, r1
90019af2:	2bfe      	cmp	r3, #254	; 0xfe
90019af4:	dd03      	ble.n	90019afe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
90019af6:	990c      	ldr	r1, [sp, #48]	; 0x30
90019af8:	4281      	cmp	r1, r0
90019afa:	f000 80c4 	beq.w	90019c86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
90019afe:	990c      	ldr	r1, [sp, #48]	; 0x30
90019b00:	f8bc 4000 	ldrh.w	r4, [ip]
90019b04:	fb11 f303 	smulbb	r3, r1, r3
90019b08:	1220      	asrs	r0, r4, #8
90019b0a:	b29b      	uxth	r3, r3
90019b0c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90019b10:	1c59      	adds	r1, r3, #1
90019b12:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
90019b16:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90019b1a:	10e1      	asrs	r1, r4, #3
90019b1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90019b20:	00e4      	lsls	r4, r4, #3
90019b22:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90019b26:	b29f      	uxth	r7, r3
90019b28:	43db      	mvns	r3, r3
90019b2a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
90019b2e:	b2db      	uxtb	r3, r3
90019b30:	b2e4      	uxtb	r4, r4
90019b32:	9309      	str	r3, [sp, #36]	; 0x24
90019b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90019b36:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
90019b3a:	fb13 f907 	smulbb	r9, r3, r7
90019b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90019b40:	fb00 9003 	mla	r0, r0, r3, r9
90019b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
90019b46:	fb13 f907 	smulbb	r9, r3, r7
90019b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90019b4c:	b280      	uxth	r0, r0
90019b4e:	fb01 9103 	mla	r1, r1, r3, r9
90019b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
90019b54:	fb13 f707 	smulbb	r7, r3, r7
90019b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
90019b5a:	b289      	uxth	r1, r1
90019b5c:	fb04 7403 	mla	r4, r4, r3, r7
90019b60:	1c43      	adds	r3, r0, #1
90019b62:	b2a4      	uxth	r4, r4
90019b64:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90019b68:	f104 0901 	add.w	r9, r4, #1
90019b6c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90019b70:	eb09 2914 	add.w	r9, r9, r4, lsr #8
90019b74:	f3c9 29c4 	ubfx	r9, r9, #11, #5
90019b78:	ea49 0000 	orr.w	r0, r9, r0
90019b7c:	f101 0901 	add.w	r9, r1, #1
90019b80:	eb09 2911 	add.w	r9, r9, r1, lsr #8
90019b84:	ea4f 1959 	mov.w	r9, r9, lsr #5
90019b88:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90019b8c:	ea40 0009 	orr.w	r0, r0, r9
90019b90:	f8ac 0000 	strh.w	r0, [ip]
90019b94:	4446      	add	r6, r8
90019b96:	b2b6      	uxth	r6, r6
90019b98:	2e07      	cmp	r6, #7
90019b9a:	bf89      	itett	hi
90019b9c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
90019b9e:	fa42 f208 	asrls.w	r2, r2, r8
90019ba2:	2600      	movhi	r6, #0
90019ba4:	785a      	ldrbhi	r2, [r3, #1]
90019ba6:	bf8a      	itet	hi
90019ba8:	3301      	addhi	r3, #1
90019baa:	b2d2      	uxtbls	r2, r2
90019bac:	9328      	strhi	r3, [sp, #160]	; 0xa0
90019bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90019bb0:	449c      	add	ip, r3
90019bb2:	e792      	b.n	90019ada <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
90019bb4:	441c      	add	r4, r3
90019bb6:	b224      	sxth	r4, r4
90019bb8:	e6d5      	b.n	90019966 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
90019bba:	f1ba 0f01 	cmp.w	sl, #1
90019bbe:	f47f af0c 	bne.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019bc2:	f1bb 0f01 	cmp.w	fp, #1
90019bc6:	f47f af08 	bne.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019bca:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 90019c90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
90019bce:	f8db 0000 	ldr.w	r0, [fp]
90019bd2:	6803      	ldr	r3, [r0, #0]
90019bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019bd6:	4798      	blx	r3
90019bd8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
90019bdc:	465a      	mov	r2, fp
90019bde:	d006      	beq.n	90019bee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
90019be0:	f1b8 0f04 	cmp.w	r8, #4
90019be4:	d140      	bne.n	90019c68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
90019be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019be8:	3300      	adds	r3, #0
90019bea:	bf18      	it	ne
90019bec:	2301      	movne	r3, #1
90019bee:	0580      	lsls	r0, r0, #22
90019bf0:	d56e      	bpl.n	90019cd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
90019bf2:	f1b8 0f08 	cmp.w	r8, #8
90019bf6:	d16b      	bne.n	90019cd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
90019bf8:	2b00      	cmp	r3, #0
90019bfa:	bf0c      	ite	eq
90019bfc:	f44f 7100 	moveq.w	r1, #512	; 0x200
90019c00:	f44f 7180 	movne.w	r1, #256	; 0x100
90019c04:	2d00      	cmp	r5, #0
90019c06:	f47f aee8 	bne.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019c0a:	2e00      	cmp	r6, #0
90019c0c:	f47f aee5 	bne.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019c10:	19e3      	adds	r3, r4, r7
90019c12:	980f      	ldr	r0, [sp, #60]	; 0x3c
90019c14:	4283      	cmp	r3, r0
90019c16:	f73f aee0 	bgt.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90019c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
90019c1e:	444b      	add	r3, r9
90019c20:	4283      	cmp	r3, r0
90019c22:	f73f aeda 	bgt.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019c26:	b2bf      	uxth	r7, r7
90019c28:	f1b8 0f08 	cmp.w	r8, #8
90019c2c:	6810      	ldr	r0, [r2, #0]
90019c2e:	f04f 0500 	mov.w	r5, #0
90019c32:	bf18      	it	ne
90019c34:	3701      	addne	r7, #1
90019c36:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
90019c3a:	6804      	ldr	r4, [r0, #0]
90019c3c:	bf18      	it	ne
90019c3e:	f027 0701 	bicne.w	r7, r7, #1
90019c42:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
90019c46:	e9cd 1505 	strd	r1, r5, [sp, #20]
90019c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
90019c4c:	bf18      	it	ne
90019c4e:	b2bf      	uxthne	r7, r7
90019c50:	9104      	str	r1, [sp, #16]
90019c52:	992a      	ldr	r1, [sp, #168]	; 0xa8
90019c54:	e9cd 7900 	strd	r7, r9, [sp]
90019c58:	e9cd 7102 	strd	r7, r1, [sp, #8]
90019c5c:	9928      	ldr	r1, [sp, #160]	; 0xa0
90019c5e:	6d64      	ldr	r4, [r4, #84]	; 0x54
90019c60:	47a0      	blx	r4
90019c62:	b019      	add	sp, #100	; 0x64
90019c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019c68:	2300      	movs	r3, #0
90019c6a:	e7c0      	b.n	90019bee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
90019c6c:	2208      	movs	r2, #8
90019c6e:	fb92 f3f8 	sdiv	r3, r2, r8
90019c72:	1e5a      	subs	r2, r3, #1
90019c74:	443a      	add	r2, r7
90019c76:	fb92 f2f3 	sdiv	r2, r2, r3
90019c7a:	fb12 f203 	smulbb	r2, r2, r3
90019c7e:	b292      	uxth	r2, r2
90019c80:	e6b0      	b.n	900199e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
90019c82:	980b      	ldr	r0, [sp, #44]	; 0x2c
90019c84:	e6ec      	b.n	90019a60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
90019c86:	9810      	ldr	r0, [sp, #64]	; 0x40
90019c88:	e782      	b.n	90019b90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
90019c8a:	bf00      	nop
90019c8c:	240264dc 	.word	0x240264dc
90019c90:	240264e4 	.word	0x240264e4
90019c94:	240264de 	.word	0x240264de
90019c98:	00fff800 	.word	0x00fff800
90019c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90019c9e:	b153      	cbz	r3, 90019cb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
90019ca0:	441e      	add	r6, r3
90019ca2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90019ca4:	b2b6      	uxth	r6, r6
90019ca6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
90019caa:	f006 0607 	and.w	r6, r6, #7
90019cae:	781a      	ldrb	r2, [r3, #0]
90019cb0:	9328      	str	r3, [sp, #160]	; 0xa0
90019cb2:	4132      	asrs	r2, r6
90019cb4:	b2d2      	uxtb	r2, r2
90019cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90019cb8:	445b      	add	r3, fp
90019cba:	930a      	str	r3, [sp, #40]	; 0x28
90019cbc:	e706      	b.n	90019acc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
90019cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90019cc0:	2b00      	cmp	r3, #0
90019cc2:	d1ce      	bne.n	90019c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
90019cc4:	4b05      	ldr	r3, [pc, #20]	; (90019cdc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
90019cc6:	6818      	ldr	r0, [r3, #0]
90019cc8:	6803      	ldr	r3, [r0, #0]
90019cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019ccc:	4798      	blx	r3
90019cce:	e7c8      	b.n	90019c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
90019cd0:	2b00      	cmp	r3, #0
90019cd2:	f43f ae82 	beq.w	900199da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
90019cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
90019cda:	e793      	b.n	90019c04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
90019cdc:	240264e4 	.word	0x240264e4

90019ce0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
90019ce0:	b538      	push	{r3, r4, r5, lr}
90019ce2:	4c15      	ldr	r4, [pc, #84]	; (90019d38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
90019ce4:	4605      	mov	r5, r0
90019ce6:	7823      	ldrb	r3, [r4, #0]
90019ce8:	f3bf 8f5b 	dmb	ish
90019cec:	07da      	lsls	r2, r3, #31
90019cee:	d40b      	bmi.n	90019d08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
90019cf0:	4620      	mov	r0, r4
90019cf2:	f007 fa68 	bl	900211c6 <__cxa_guard_acquire>
90019cf6:	b138      	cbz	r0, 90019d08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
90019cf8:	4620      	mov	r0, r4
90019cfa:	f007 fa70 	bl	900211de <__cxa_guard_release>
90019cfe:	4a0f      	ldr	r2, [pc, #60]	; (90019d3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
90019d00:	490f      	ldr	r1, [pc, #60]	; (90019d40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
90019d02:	4810      	ldr	r0, [pc, #64]	; (90019d44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
90019d04:	f007 fa58 	bl	900211b8 <__aeabi_atexit>
90019d08:	4c0f      	ldr	r4, [pc, #60]	; (90019d48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
90019d0a:	7823      	ldrb	r3, [r4, #0]
90019d0c:	f3bf 8f5b 	dmb	ish
90019d10:	07db      	lsls	r3, r3, #31
90019d12:	d40b      	bmi.n	90019d2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
90019d14:	4620      	mov	r0, r4
90019d16:	f007 fa56 	bl	900211c6 <__cxa_guard_acquire>
90019d1a:	b138      	cbz	r0, 90019d2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
90019d1c:	4620      	mov	r0, r4
90019d1e:	f007 fa5e 	bl	900211de <__cxa_guard_release>
90019d22:	4a06      	ldr	r2, [pc, #24]	; (90019d3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
90019d24:	4909      	ldr	r1, [pc, #36]	; (90019d4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
90019d26:	480a      	ldr	r0, [pc, #40]	; (90019d50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
90019d28:	f007 fa46 	bl	900211b8 <__aeabi_atexit>
90019d2c:	4b05      	ldr	r3, [pc, #20]	; (90019d44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
90019d2e:	612b      	str	r3, [r5, #16]
90019d30:	4b07      	ldr	r3, [pc, #28]	; (90019d50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
90019d32:	616b      	str	r3, [r5, #20]
90019d34:	bd38      	pop	{r3, r4, r5, pc}
90019d36:	bf00      	nop
90019d38:	240265b0 	.word	0x240265b0
90019d3c:	24000000 	.word	0x24000000
90019d40:	90017eed 	.word	0x90017eed
90019d44:	240000ac 	.word	0x240000ac
90019d48:	240265b4 	.word	0x240265b4
90019d4c:	90017eeb 	.word	0x90017eeb
90019d50:	240000b0 	.word	0x240000b0

90019d54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
90019d54:	b538      	push	{r3, r4, r5, lr}
90019d56:	4c15      	ldr	r4, [pc, #84]	; (90019dac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
90019d58:	4605      	mov	r5, r0
90019d5a:	7823      	ldrb	r3, [r4, #0]
90019d5c:	f3bf 8f5b 	dmb	ish
90019d60:	07da      	lsls	r2, r3, #31
90019d62:	d40b      	bmi.n	90019d7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
90019d64:	4620      	mov	r0, r4
90019d66:	f007 fa2e 	bl	900211c6 <__cxa_guard_acquire>
90019d6a:	b138      	cbz	r0, 90019d7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
90019d6c:	4620      	mov	r0, r4
90019d6e:	f007 fa36 	bl	900211de <__cxa_guard_release>
90019d72:	4a0f      	ldr	r2, [pc, #60]	; (90019db0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
90019d74:	490f      	ldr	r1, [pc, #60]	; (90019db4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
90019d76:	4810      	ldr	r0, [pc, #64]	; (90019db8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
90019d78:	f007 fa1e 	bl	900211b8 <__aeabi_atexit>
90019d7c:	4c0f      	ldr	r4, [pc, #60]	; (90019dbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
90019d7e:	7823      	ldrb	r3, [r4, #0]
90019d80:	f3bf 8f5b 	dmb	ish
90019d84:	07db      	lsls	r3, r3, #31
90019d86:	d40b      	bmi.n	90019da0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
90019d88:	4620      	mov	r0, r4
90019d8a:	f007 fa1c 	bl	900211c6 <__cxa_guard_acquire>
90019d8e:	b138      	cbz	r0, 90019da0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
90019d90:	4620      	mov	r0, r4
90019d92:	f007 fa24 	bl	900211de <__cxa_guard_release>
90019d96:	4a06      	ldr	r2, [pc, #24]	; (90019db0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
90019d98:	4909      	ldr	r1, [pc, #36]	; (90019dc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
90019d9a:	480a      	ldr	r0, [pc, #40]	; (90019dc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
90019d9c:	f007 fa0c 	bl	900211b8 <__aeabi_atexit>
90019da0:	4b05      	ldr	r3, [pc, #20]	; (90019db8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
90019da2:	60ab      	str	r3, [r5, #8]
90019da4:	4b07      	ldr	r3, [pc, #28]	; (90019dc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
90019da6:	60eb      	str	r3, [r5, #12]
90019da8:	bd38      	pop	{r3, r4, r5, pc}
90019daa:	bf00      	nop
90019dac:	24026588 	.word	0x24026588
90019db0:	24000000 	.word	0x24000000
90019db4:	90017ef1 	.word	0x90017ef1
90019db8:	24000084 	.word	0x24000084
90019dbc:	2402658c 	.word	0x2402658c
90019dc0:	90017eef 	.word	0x90017eef
90019dc4:	24000088 	.word	0x24000088

90019dc8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
90019dc8:	b510      	push	{r4, lr}
90019dca:	4604      	mov	r4, r0
90019dcc:	f7ff ff88 	bl	90019ce0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
90019dd0:	4620      	mov	r0, r4
90019dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019dd6:	f7ff bfbd 	b.w	90019d54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

90019ddc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
90019ddc:	b538      	push	{r3, r4, r5, lr}
90019dde:	4c15      	ldr	r4, [pc, #84]	; (90019e34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
90019de0:	4605      	mov	r5, r0
90019de2:	7823      	ldrb	r3, [r4, #0]
90019de4:	f3bf 8f5b 	dmb	ish
90019de8:	07da      	lsls	r2, r3, #31
90019dea:	d40b      	bmi.n	90019e04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
90019dec:	4620      	mov	r0, r4
90019dee:	f007 f9ea 	bl	900211c6 <__cxa_guard_acquire>
90019df2:	b138      	cbz	r0, 90019e04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
90019df4:	4620      	mov	r0, r4
90019df6:	f007 f9f2 	bl	900211de <__cxa_guard_release>
90019dfa:	4a0f      	ldr	r2, [pc, #60]	; (90019e38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
90019dfc:	490f      	ldr	r1, [pc, #60]	; (90019e3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
90019dfe:	4810      	ldr	r0, [pc, #64]	; (90019e40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
90019e00:	f007 f9da 	bl	900211b8 <__aeabi_atexit>
90019e04:	4c0f      	ldr	r4, [pc, #60]	; (90019e44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
90019e06:	7823      	ldrb	r3, [r4, #0]
90019e08:	f3bf 8f5b 	dmb	ish
90019e0c:	07db      	lsls	r3, r3, #31
90019e0e:	d40b      	bmi.n	90019e28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
90019e10:	4620      	mov	r0, r4
90019e12:	f007 f9d8 	bl	900211c6 <__cxa_guard_acquire>
90019e16:	b138      	cbz	r0, 90019e28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
90019e18:	4620      	mov	r0, r4
90019e1a:	f007 f9e0 	bl	900211de <__cxa_guard_release>
90019e1e:	4a06      	ldr	r2, [pc, #24]	; (90019e38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
90019e20:	4909      	ldr	r1, [pc, #36]	; (90019e48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
90019e22:	480a      	ldr	r0, [pc, #40]	; (90019e4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
90019e24:	f007 f9c8 	bl	900211b8 <__aeabi_atexit>
90019e28:	4b05      	ldr	r3, [pc, #20]	; (90019e40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
90019e2a:	622b      	str	r3, [r5, #32]
90019e2c:	4b07      	ldr	r3, [pc, #28]	; (90019e4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
90019e2e:	626b      	str	r3, [r5, #36]	; 0x24
90019e30:	bd38      	pop	{r3, r4, r5, pc}
90019e32:	bf00      	nop
90019e34:	240265b8 	.word	0x240265b8
90019e38:	24000000 	.word	0x24000000
90019e3c:	90017ee5 	.word	0x90017ee5
90019e40:	240000b4 	.word	0x240000b4
90019e44:	240265bc 	.word	0x240265bc
90019e48:	90017ee3 	.word	0x90017ee3
90019e4c:	240000b8 	.word	0x240000b8

90019e50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
90019e50:	b538      	push	{r3, r4, r5, lr}
90019e52:	4c15      	ldr	r4, [pc, #84]	; (90019ea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
90019e54:	4605      	mov	r5, r0
90019e56:	7823      	ldrb	r3, [r4, #0]
90019e58:	f3bf 8f5b 	dmb	ish
90019e5c:	07da      	lsls	r2, r3, #31
90019e5e:	d40b      	bmi.n	90019e78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
90019e60:	4620      	mov	r0, r4
90019e62:	f007 f9b0 	bl	900211c6 <__cxa_guard_acquire>
90019e66:	b138      	cbz	r0, 90019e78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
90019e68:	4620      	mov	r0, r4
90019e6a:	f007 f9b8 	bl	900211de <__cxa_guard_release>
90019e6e:	4a0f      	ldr	r2, [pc, #60]	; (90019eac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
90019e70:	490f      	ldr	r1, [pc, #60]	; (90019eb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
90019e72:	4810      	ldr	r0, [pc, #64]	; (90019eb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
90019e74:	f007 f9a0 	bl	900211b8 <__aeabi_atexit>
90019e78:	4c0f      	ldr	r4, [pc, #60]	; (90019eb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
90019e7a:	7823      	ldrb	r3, [r4, #0]
90019e7c:	f3bf 8f5b 	dmb	ish
90019e80:	07db      	lsls	r3, r3, #31
90019e82:	d40b      	bmi.n	90019e9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
90019e84:	4620      	mov	r0, r4
90019e86:	f007 f99e 	bl	900211c6 <__cxa_guard_acquire>
90019e8a:	b138      	cbz	r0, 90019e9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
90019e8c:	4620      	mov	r0, r4
90019e8e:	f007 f9a6 	bl	900211de <__cxa_guard_release>
90019e92:	4a06      	ldr	r2, [pc, #24]	; (90019eac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
90019e94:	4909      	ldr	r1, [pc, #36]	; (90019ebc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
90019e96:	480a      	ldr	r0, [pc, #40]	; (90019ec0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
90019e98:	f007 f98e 	bl	900211b8 <__aeabi_atexit>
90019e9c:	4b05      	ldr	r3, [pc, #20]	; (90019eb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
90019e9e:	61ab      	str	r3, [r5, #24]
90019ea0:	4b07      	ldr	r3, [pc, #28]	; (90019ec0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
90019ea2:	61eb      	str	r3, [r5, #28]
90019ea4:	bd38      	pop	{r3, r4, r5, pc}
90019ea6:	bf00      	nop
90019ea8:	24026590 	.word	0x24026590
90019eac:	24000000 	.word	0x24000000
90019eb0:	90017ee9 	.word	0x90017ee9
90019eb4:	2400008c 	.word	0x2400008c
90019eb8:	24026594 	.word	0x24026594
90019ebc:	90017ee7 	.word	0x90017ee7
90019ec0:	24000090 	.word	0x24000090

90019ec4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
90019ec4:	b510      	push	{r4, lr}
90019ec6:	4604      	mov	r4, r0
90019ec8:	f7ff ff88 	bl	90019ddc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
90019ecc:	4620      	mov	r0, r4
90019ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019ed2:	f7ff bfbd 	b.w	90019e50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

90019ed8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
90019ed8:	b538      	push	{r3, r4, r5, lr}
90019eda:	4c15      	ldr	r4, [pc, #84]	; (90019f30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
90019edc:	4605      	mov	r5, r0
90019ede:	7823      	ldrb	r3, [r4, #0]
90019ee0:	f3bf 8f5b 	dmb	ish
90019ee4:	07da      	lsls	r2, r3, #31
90019ee6:	d40b      	bmi.n	90019f00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
90019ee8:	4620      	mov	r0, r4
90019eea:	f007 f96c 	bl	900211c6 <__cxa_guard_acquire>
90019eee:	b138      	cbz	r0, 90019f00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
90019ef0:	4620      	mov	r0, r4
90019ef2:	f007 f974 	bl	900211de <__cxa_guard_release>
90019ef6:	4a0f      	ldr	r2, [pc, #60]	; (90019f34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
90019ef8:	490f      	ldr	r1, [pc, #60]	; (90019f38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
90019efa:	4810      	ldr	r0, [pc, #64]	; (90019f3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
90019efc:	f007 f95c 	bl	900211b8 <__aeabi_atexit>
90019f00:	4c0f      	ldr	r4, [pc, #60]	; (90019f40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
90019f02:	7823      	ldrb	r3, [r4, #0]
90019f04:	f3bf 8f5b 	dmb	ish
90019f08:	07db      	lsls	r3, r3, #31
90019f0a:	d40b      	bmi.n	90019f24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
90019f0c:	4620      	mov	r0, r4
90019f0e:	f007 f95a 	bl	900211c6 <__cxa_guard_acquire>
90019f12:	b138      	cbz	r0, 90019f24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
90019f14:	4620      	mov	r0, r4
90019f16:	f007 f962 	bl	900211de <__cxa_guard_release>
90019f1a:	4a06      	ldr	r2, [pc, #24]	; (90019f34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
90019f1c:	4909      	ldr	r1, [pc, #36]	; (90019f44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
90019f1e:	480a      	ldr	r0, [pc, #40]	; (90019f48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
90019f20:	f007 f94a 	bl	900211b8 <__aeabi_atexit>
90019f24:	4b05      	ldr	r3, [pc, #20]	; (90019f3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
90019f26:	632b      	str	r3, [r5, #48]	; 0x30
90019f28:	4b07      	ldr	r3, [pc, #28]	; (90019f48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
90019f2a:	636b      	str	r3, [r5, #52]	; 0x34
90019f2c:	bd38      	pop	{r3, r4, r5, pc}
90019f2e:	bf00      	nop
90019f30:	240265c8 	.word	0x240265c8
90019f34:	24000000 	.word	0x24000000
90019f38:	90017edd 	.word	0x90017edd
90019f3c:	240000c4 	.word	0x240000c4
90019f40:	240265cc 	.word	0x240265cc
90019f44:	90017edb 	.word	0x90017edb
90019f48:	240000c8 	.word	0x240000c8

90019f4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
90019f4c:	b538      	push	{r3, r4, r5, lr}
90019f4e:	4c15      	ldr	r4, [pc, #84]	; (90019fa4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
90019f50:	4605      	mov	r5, r0
90019f52:	7823      	ldrb	r3, [r4, #0]
90019f54:	f3bf 8f5b 	dmb	ish
90019f58:	07da      	lsls	r2, r3, #31
90019f5a:	d40b      	bmi.n	90019f74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
90019f5c:	4620      	mov	r0, r4
90019f5e:	f007 f932 	bl	900211c6 <__cxa_guard_acquire>
90019f62:	b138      	cbz	r0, 90019f74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
90019f64:	4620      	mov	r0, r4
90019f66:	f007 f93a 	bl	900211de <__cxa_guard_release>
90019f6a:	4a0f      	ldr	r2, [pc, #60]	; (90019fa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
90019f6c:	490f      	ldr	r1, [pc, #60]	; (90019fac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
90019f6e:	4810      	ldr	r0, [pc, #64]	; (90019fb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
90019f70:	f007 f922 	bl	900211b8 <__aeabi_atexit>
90019f74:	4c0f      	ldr	r4, [pc, #60]	; (90019fb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
90019f76:	7823      	ldrb	r3, [r4, #0]
90019f78:	f3bf 8f5b 	dmb	ish
90019f7c:	07db      	lsls	r3, r3, #31
90019f7e:	d40b      	bmi.n	90019f98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
90019f80:	4620      	mov	r0, r4
90019f82:	f007 f920 	bl	900211c6 <__cxa_guard_acquire>
90019f86:	b138      	cbz	r0, 90019f98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
90019f88:	4620      	mov	r0, r4
90019f8a:	f007 f928 	bl	900211de <__cxa_guard_release>
90019f8e:	4a06      	ldr	r2, [pc, #24]	; (90019fa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
90019f90:	4909      	ldr	r1, [pc, #36]	; (90019fb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
90019f92:	480a      	ldr	r0, [pc, #40]	; (90019fbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
90019f94:	f007 f910 	bl	900211b8 <__aeabi_atexit>
90019f98:	4b05      	ldr	r3, [pc, #20]	; (90019fb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
90019f9a:	62ab      	str	r3, [r5, #40]	; 0x28
90019f9c:	4b07      	ldr	r3, [pc, #28]	; (90019fbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
90019f9e:	62eb      	str	r3, [r5, #44]	; 0x2c
90019fa0:	bd38      	pop	{r3, r4, r5, pc}
90019fa2:	bf00      	nop
90019fa4:	24026598 	.word	0x24026598
90019fa8:	24000000 	.word	0x24000000
90019fac:	90017ee1 	.word	0x90017ee1
90019fb0:	24000094 	.word	0x24000094
90019fb4:	2402659c 	.word	0x2402659c
90019fb8:	90017edf 	.word	0x90017edf
90019fbc:	24000098 	.word	0x24000098

90019fc0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
90019fc0:	b510      	push	{r4, lr}
90019fc2:	4604      	mov	r4, r0
90019fc4:	f7ff ff88 	bl	90019ed8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
90019fc8:	4620      	mov	r0, r4
90019fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019fce:	f7ff bfbd 	b.w	90019f4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

90019fd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
90019fd4:	b538      	push	{r3, r4, r5, lr}
90019fd6:	4c15      	ldr	r4, [pc, #84]	; (9001a02c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
90019fd8:	4605      	mov	r5, r0
90019fda:	7823      	ldrb	r3, [r4, #0]
90019fdc:	f3bf 8f5b 	dmb	ish
90019fe0:	07da      	lsls	r2, r3, #31
90019fe2:	d40b      	bmi.n	90019ffc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
90019fe4:	4620      	mov	r0, r4
90019fe6:	f007 f8ee 	bl	900211c6 <__cxa_guard_acquire>
90019fea:	b138      	cbz	r0, 90019ffc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
90019fec:	4620      	mov	r0, r4
90019fee:	f007 f8f6 	bl	900211de <__cxa_guard_release>
90019ff2:	4a0f      	ldr	r2, [pc, #60]	; (9001a030 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
90019ff4:	490f      	ldr	r1, [pc, #60]	; (9001a034 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
90019ff6:	4810      	ldr	r0, [pc, #64]	; (9001a038 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
90019ff8:	f007 f8de 	bl	900211b8 <__aeabi_atexit>
90019ffc:	4c0f      	ldr	r4, [pc, #60]	; (9001a03c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
90019ffe:	7823      	ldrb	r3, [r4, #0]
9001a000:	f3bf 8f5b 	dmb	ish
9001a004:	07db      	lsls	r3, r3, #31
9001a006:	d40b      	bmi.n	9001a020 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001a008:	4620      	mov	r0, r4
9001a00a:	f007 f8dc 	bl	900211c6 <__cxa_guard_acquire>
9001a00e:	b138      	cbz	r0, 9001a020 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001a010:	4620      	mov	r0, r4
9001a012:	f007 f8e4 	bl	900211de <__cxa_guard_release>
9001a016:	4a06      	ldr	r2, [pc, #24]	; (9001a030 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001a018:	4909      	ldr	r1, [pc, #36]	; (9001a040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001a01a:	480a      	ldr	r0, [pc, #40]	; (9001a044 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001a01c:	f007 f8cc 	bl	900211b8 <__aeabi_atexit>
9001a020:	4b05      	ldr	r3, [pc, #20]	; (9001a038 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001a022:	652b      	str	r3, [r5, #80]	; 0x50
9001a024:	4b07      	ldr	r3, [pc, #28]	; (9001a044 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001a026:	656b      	str	r3, [r5, #84]	; 0x54
9001a028:	bd38      	pop	{r3, r4, r5, pc}
9001a02a:	bf00      	nop
9001a02c:	240265d0 	.word	0x240265d0
9001a030:	24000000 	.word	0x24000000
9001a034:	90017ecd 	.word	0x90017ecd
9001a038:	240000cc 	.word	0x240000cc
9001a03c:	240265d4 	.word	0x240265d4
9001a040:	90017ecb 	.word	0x90017ecb
9001a044:	240000d0 	.word	0x240000d0

9001a048 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001a048:	b538      	push	{r3, r4, r5, lr}
9001a04a:	4c15      	ldr	r4, [pc, #84]	; (9001a0a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001a04c:	4605      	mov	r5, r0
9001a04e:	7823      	ldrb	r3, [r4, #0]
9001a050:	f3bf 8f5b 	dmb	ish
9001a054:	07da      	lsls	r2, r3, #31
9001a056:	d40b      	bmi.n	9001a070 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001a058:	4620      	mov	r0, r4
9001a05a:	f007 f8b4 	bl	900211c6 <__cxa_guard_acquire>
9001a05e:	b138      	cbz	r0, 9001a070 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001a060:	4620      	mov	r0, r4
9001a062:	f007 f8bc 	bl	900211de <__cxa_guard_release>
9001a066:	4a0f      	ldr	r2, [pc, #60]	; (9001a0a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001a068:	490f      	ldr	r1, [pc, #60]	; (9001a0a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001a06a:	4810      	ldr	r0, [pc, #64]	; (9001a0ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001a06c:	f007 f8a4 	bl	900211b8 <__aeabi_atexit>
9001a070:	4c0f      	ldr	r4, [pc, #60]	; (9001a0b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001a072:	7823      	ldrb	r3, [r4, #0]
9001a074:	f3bf 8f5b 	dmb	ish
9001a078:	07db      	lsls	r3, r3, #31
9001a07a:	d40b      	bmi.n	9001a094 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001a07c:	4620      	mov	r0, r4
9001a07e:	f007 f8a2 	bl	900211c6 <__cxa_guard_acquire>
9001a082:	b138      	cbz	r0, 9001a094 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001a084:	4620      	mov	r0, r4
9001a086:	f007 f8aa 	bl	900211de <__cxa_guard_release>
9001a08a:	4a06      	ldr	r2, [pc, #24]	; (9001a0a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001a08c:	4909      	ldr	r1, [pc, #36]	; (9001a0b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001a08e:	480a      	ldr	r0, [pc, #40]	; (9001a0b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001a090:	f007 f892 	bl	900211b8 <__aeabi_atexit>
9001a094:	4b05      	ldr	r3, [pc, #20]	; (9001a0ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001a096:	64ab      	str	r3, [r5, #72]	; 0x48
9001a098:	4b07      	ldr	r3, [pc, #28]	; (9001a0b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001a09a:	64eb      	str	r3, [r5, #76]	; 0x4c
9001a09c:	bd38      	pop	{r3, r4, r5, pc}
9001a09e:	bf00      	nop
9001a0a0:	240265d8 	.word	0x240265d8
9001a0a4:	24000000 	.word	0x24000000
9001a0a8:	90017ed1 	.word	0x90017ed1
9001a0ac:	240000d4 	.word	0x240000d4
9001a0b0:	240265dc 	.word	0x240265dc
9001a0b4:	90017ecf 	.word	0x90017ecf
9001a0b8:	240000d8 	.word	0x240000d8

9001a0bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001a0bc:	b538      	push	{r3, r4, r5, lr}
9001a0be:	4c15      	ldr	r4, [pc, #84]	; (9001a114 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001a0c0:	4605      	mov	r5, r0
9001a0c2:	7823      	ldrb	r3, [r4, #0]
9001a0c4:	f3bf 8f5b 	dmb	ish
9001a0c8:	07da      	lsls	r2, r3, #31
9001a0ca:	d40b      	bmi.n	9001a0e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001a0cc:	4620      	mov	r0, r4
9001a0ce:	f007 f87a 	bl	900211c6 <__cxa_guard_acquire>
9001a0d2:	b138      	cbz	r0, 9001a0e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001a0d4:	4620      	mov	r0, r4
9001a0d6:	f007 f882 	bl	900211de <__cxa_guard_release>
9001a0da:	4a0f      	ldr	r2, [pc, #60]	; (9001a118 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001a0dc:	490f      	ldr	r1, [pc, #60]	; (9001a11c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001a0de:	4810      	ldr	r0, [pc, #64]	; (9001a120 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001a0e0:	f007 f86a 	bl	900211b8 <__aeabi_atexit>
9001a0e4:	4c0f      	ldr	r4, [pc, #60]	; (9001a124 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001a0e6:	7823      	ldrb	r3, [r4, #0]
9001a0e8:	f3bf 8f5b 	dmb	ish
9001a0ec:	07db      	lsls	r3, r3, #31
9001a0ee:	d40b      	bmi.n	9001a108 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001a0f0:	4620      	mov	r0, r4
9001a0f2:	f007 f868 	bl	900211c6 <__cxa_guard_acquire>
9001a0f6:	b138      	cbz	r0, 9001a108 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001a0f8:	4620      	mov	r0, r4
9001a0fa:	f007 f870 	bl	900211de <__cxa_guard_release>
9001a0fe:	4a06      	ldr	r2, [pc, #24]	; (9001a118 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001a100:	4909      	ldr	r1, [pc, #36]	; (9001a128 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001a102:	480a      	ldr	r0, [pc, #40]	; (9001a12c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001a104:	f007 f858 	bl	900211b8 <__aeabi_atexit>
9001a108:	4b05      	ldr	r3, [pc, #20]	; (9001a120 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001a10a:	642b      	str	r3, [r5, #64]	; 0x40
9001a10c:	4b07      	ldr	r3, [pc, #28]	; (9001a12c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001a10e:	646b      	str	r3, [r5, #68]	; 0x44
9001a110:	bd38      	pop	{r3, r4, r5, pc}
9001a112:	bf00      	nop
9001a114:	240265a0 	.word	0x240265a0
9001a118:	24000000 	.word	0x24000000
9001a11c:	90017ed5 	.word	0x90017ed5
9001a120:	2400009c 	.word	0x2400009c
9001a124:	240265a4 	.word	0x240265a4
9001a128:	90017ed3 	.word	0x90017ed3
9001a12c:	240000a0 	.word	0x240000a0

9001a130 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001a130:	b538      	push	{r3, r4, r5, lr}
9001a132:	4c15      	ldr	r4, [pc, #84]	; (9001a188 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001a134:	4605      	mov	r5, r0
9001a136:	7823      	ldrb	r3, [r4, #0]
9001a138:	f3bf 8f5b 	dmb	ish
9001a13c:	07da      	lsls	r2, r3, #31
9001a13e:	d40b      	bmi.n	9001a158 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001a140:	4620      	mov	r0, r4
9001a142:	f007 f840 	bl	900211c6 <__cxa_guard_acquire>
9001a146:	b138      	cbz	r0, 9001a158 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001a148:	4620      	mov	r0, r4
9001a14a:	f007 f848 	bl	900211de <__cxa_guard_release>
9001a14e:	4a0f      	ldr	r2, [pc, #60]	; (9001a18c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001a150:	490f      	ldr	r1, [pc, #60]	; (9001a190 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001a152:	4810      	ldr	r0, [pc, #64]	; (9001a194 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001a154:	f007 f830 	bl	900211b8 <__aeabi_atexit>
9001a158:	4c0f      	ldr	r4, [pc, #60]	; (9001a198 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001a15a:	7823      	ldrb	r3, [r4, #0]
9001a15c:	f3bf 8f5b 	dmb	ish
9001a160:	07db      	lsls	r3, r3, #31
9001a162:	d40b      	bmi.n	9001a17c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001a164:	4620      	mov	r0, r4
9001a166:	f007 f82e 	bl	900211c6 <__cxa_guard_acquire>
9001a16a:	b138      	cbz	r0, 9001a17c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001a16c:	4620      	mov	r0, r4
9001a16e:	f007 f836 	bl	900211de <__cxa_guard_release>
9001a172:	4a06      	ldr	r2, [pc, #24]	; (9001a18c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001a174:	4909      	ldr	r1, [pc, #36]	; (9001a19c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001a176:	480a      	ldr	r0, [pc, #40]	; (9001a1a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001a178:	f007 f81e 	bl	900211b8 <__aeabi_atexit>
9001a17c:	4b05      	ldr	r3, [pc, #20]	; (9001a194 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001a17e:	63ab      	str	r3, [r5, #56]	; 0x38
9001a180:	4b07      	ldr	r3, [pc, #28]	; (9001a1a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001a182:	63eb      	str	r3, [r5, #60]	; 0x3c
9001a184:	bd38      	pop	{r3, r4, r5, pc}
9001a186:	bf00      	nop
9001a188:	240265c0 	.word	0x240265c0
9001a18c:	24000000 	.word	0x24000000
9001a190:	90017ed9 	.word	0x90017ed9
9001a194:	240000bc 	.word	0x240000bc
9001a198:	240265c4 	.word	0x240265c4
9001a19c:	90017ed7 	.word	0x90017ed7
9001a1a0:	240000c0 	.word	0x240000c0

9001a1a4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001a1a4:	b510      	push	{r4, lr}
9001a1a6:	4604      	mov	r4, r0
9001a1a8:	f7ff ff14 	bl	90019fd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001a1ac:	4620      	mov	r0, r4
9001a1ae:	f7ff ff85 	bl	9001a0bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001a1b2:	4620      	mov	r0, r4
9001a1b4:	f7ff ff48 	bl	9001a048 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001a1b8:	4620      	mov	r0, r4
9001a1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a1be:	f7ff bfb7 	b.w	9001a130 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001a1c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001a1c4:	b538      	push	{r3, r4, r5, lr}
9001a1c6:	4c15      	ldr	r4, [pc, #84]	; (9001a21c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001a1c8:	4605      	mov	r5, r0
9001a1ca:	7823      	ldrb	r3, [r4, #0]
9001a1cc:	f3bf 8f5b 	dmb	ish
9001a1d0:	07da      	lsls	r2, r3, #31
9001a1d2:	d40b      	bmi.n	9001a1ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001a1d4:	4620      	mov	r0, r4
9001a1d6:	f006 fff6 	bl	900211c6 <__cxa_guard_acquire>
9001a1da:	b138      	cbz	r0, 9001a1ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001a1dc:	4620      	mov	r0, r4
9001a1de:	f006 fffe 	bl	900211de <__cxa_guard_release>
9001a1e2:	4a0f      	ldr	r2, [pc, #60]	; (9001a220 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001a1e4:	490f      	ldr	r1, [pc, #60]	; (9001a224 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001a1e6:	4810      	ldr	r0, [pc, #64]	; (9001a228 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001a1e8:	f006 ffe6 	bl	900211b8 <__aeabi_atexit>
9001a1ec:	4c0f      	ldr	r4, [pc, #60]	; (9001a22c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001a1ee:	7823      	ldrb	r3, [r4, #0]
9001a1f0:	f3bf 8f5b 	dmb	ish
9001a1f4:	07db      	lsls	r3, r3, #31
9001a1f6:	d40b      	bmi.n	9001a210 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001a1f8:	4620      	mov	r0, r4
9001a1fa:	f006 ffe4 	bl	900211c6 <__cxa_guard_acquire>
9001a1fe:	b138      	cbz	r0, 9001a210 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001a200:	4620      	mov	r0, r4
9001a202:	f006 ffec 	bl	900211de <__cxa_guard_release>
9001a206:	4a06      	ldr	r2, [pc, #24]	; (9001a220 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001a208:	4909      	ldr	r1, [pc, #36]	; (9001a230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001a20a:	480a      	ldr	r0, [pc, #40]	; (9001a234 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001a20c:	f006 ffd4 	bl	900211b8 <__aeabi_atexit>
9001a210:	4b05      	ldr	r3, [pc, #20]	; (9001a228 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001a212:	662b      	str	r3, [r5, #96]	; 0x60
9001a214:	4b07      	ldr	r3, [pc, #28]	; (9001a234 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001a216:	666b      	str	r3, [r5, #100]	; 0x64
9001a218:	bd38      	pop	{r3, r4, r5, pc}
9001a21a:	bf00      	nop
9001a21c:	240265a8 	.word	0x240265a8
9001a220:	24000000 	.word	0x24000000
9001a224:	90017ec5 	.word	0x90017ec5
9001a228:	240000a4 	.word	0x240000a4
9001a22c:	240265ac 	.word	0x240265ac
9001a230:	90017ec3 	.word	0x90017ec3
9001a234:	240000a8 	.word	0x240000a8

9001a238 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001a238:	b538      	push	{r3, r4, r5, lr}
9001a23a:	4c15      	ldr	r4, [pc, #84]	; (9001a290 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001a23c:	4605      	mov	r5, r0
9001a23e:	7823      	ldrb	r3, [r4, #0]
9001a240:	f3bf 8f5b 	dmb	ish
9001a244:	07da      	lsls	r2, r3, #31
9001a246:	d40b      	bmi.n	9001a260 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001a248:	4620      	mov	r0, r4
9001a24a:	f006 ffbc 	bl	900211c6 <__cxa_guard_acquire>
9001a24e:	b138      	cbz	r0, 9001a260 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001a250:	4620      	mov	r0, r4
9001a252:	f006 ffc4 	bl	900211de <__cxa_guard_release>
9001a256:	4a0f      	ldr	r2, [pc, #60]	; (9001a294 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001a258:	490f      	ldr	r1, [pc, #60]	; (9001a298 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001a25a:	4810      	ldr	r0, [pc, #64]	; (9001a29c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001a25c:	f006 ffac 	bl	900211b8 <__aeabi_atexit>
9001a260:	4c0f      	ldr	r4, [pc, #60]	; (9001a2a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001a262:	7823      	ldrb	r3, [r4, #0]
9001a264:	f3bf 8f5b 	dmb	ish
9001a268:	07db      	lsls	r3, r3, #31
9001a26a:	d40b      	bmi.n	9001a284 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001a26c:	4620      	mov	r0, r4
9001a26e:	f006 ffaa 	bl	900211c6 <__cxa_guard_acquire>
9001a272:	b138      	cbz	r0, 9001a284 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001a274:	4620      	mov	r0, r4
9001a276:	f006 ffb2 	bl	900211de <__cxa_guard_release>
9001a27a:	4a06      	ldr	r2, [pc, #24]	; (9001a294 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001a27c:	4909      	ldr	r1, [pc, #36]	; (9001a2a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001a27e:	480a      	ldr	r0, [pc, #40]	; (9001a2a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001a280:	f006 ff9a 	bl	900211b8 <__aeabi_atexit>
9001a284:	4b05      	ldr	r3, [pc, #20]	; (9001a29c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001a286:	65ab      	str	r3, [r5, #88]	; 0x58
9001a288:	4b07      	ldr	r3, [pc, #28]	; (9001a2a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001a28a:	65eb      	str	r3, [r5, #92]	; 0x5c
9001a28c:	bd38      	pop	{r3, r4, r5, pc}
9001a28e:	bf00      	nop
9001a290:	24026580 	.word	0x24026580
9001a294:	24000000 	.word	0x24000000
9001a298:	90017ec9 	.word	0x90017ec9
9001a29c:	2400007c 	.word	0x2400007c
9001a2a0:	24026584 	.word	0x24026584
9001a2a4:	90017ec7 	.word	0x90017ec7
9001a2a8:	24000080 	.word	0x24000080

9001a2ac <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001a2ac:	b510      	push	{r4, lr}
9001a2ae:	4604      	mov	r4, r0
9001a2b0:	f7ff ff88 	bl	9001a1c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001a2b4:	4620      	mov	r0, r4
9001a2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a2ba:	f7ff bfbd 	b.w	9001a238 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001a2c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001a2c0:	b538      	push	{r3, r4, r5, lr}
9001a2c2:	4c15      	ldr	r4, [pc, #84]	; (9001a318 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001a2c4:	4605      	mov	r5, r0
9001a2c6:	7823      	ldrb	r3, [r4, #0]
9001a2c8:	f3bf 8f5b 	dmb	ish
9001a2cc:	07da      	lsls	r2, r3, #31
9001a2ce:	d40b      	bmi.n	9001a2e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001a2d0:	4620      	mov	r0, r4
9001a2d2:	f006 ff78 	bl	900211c6 <__cxa_guard_acquire>
9001a2d6:	b138      	cbz	r0, 9001a2e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001a2d8:	4620      	mov	r0, r4
9001a2da:	f006 ff80 	bl	900211de <__cxa_guard_release>
9001a2de:	4a0f      	ldr	r2, [pc, #60]	; (9001a31c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001a2e0:	490f      	ldr	r1, [pc, #60]	; (9001a320 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001a2e2:	4810      	ldr	r0, [pc, #64]	; (9001a324 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001a2e4:	f006 ff68 	bl	900211b8 <__aeabi_atexit>
9001a2e8:	4c0f      	ldr	r4, [pc, #60]	; (9001a328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001a2ea:	7823      	ldrb	r3, [r4, #0]
9001a2ec:	f3bf 8f5b 	dmb	ish
9001a2f0:	07db      	lsls	r3, r3, #31
9001a2f2:	d40b      	bmi.n	9001a30c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001a2f4:	4620      	mov	r0, r4
9001a2f6:	f006 ff66 	bl	900211c6 <__cxa_guard_acquire>
9001a2fa:	b138      	cbz	r0, 9001a30c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001a2fc:	4620      	mov	r0, r4
9001a2fe:	f006 ff6e 	bl	900211de <__cxa_guard_release>
9001a302:	4a06      	ldr	r2, [pc, #24]	; (9001a31c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001a304:	4909      	ldr	r1, [pc, #36]	; (9001a32c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001a306:	480a      	ldr	r0, [pc, #40]	; (9001a330 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001a308:	f006 ff56 	bl	900211b8 <__aeabi_atexit>
9001a30c:	4b05      	ldr	r3, [pc, #20]	; (9001a324 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001a30e:	672b      	str	r3, [r5, #112]	; 0x70
9001a310:	4b07      	ldr	r3, [pc, #28]	; (9001a330 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001a312:	676b      	str	r3, [r5, #116]	; 0x74
9001a314:	bd38      	pop	{r3, r4, r5, pc}
9001a316:	bf00      	nop
9001a318:	24026578 	.word	0x24026578
9001a31c:	24000000 	.word	0x24000000
9001a320:	90017ebd 	.word	0x90017ebd
9001a324:	24000074 	.word	0x24000074
9001a328:	2402657c 	.word	0x2402657c
9001a32c:	90017ebb 	.word	0x90017ebb
9001a330:	24000078 	.word	0x24000078

9001a334 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001a334:	b538      	push	{r3, r4, r5, lr}
9001a336:	4c15      	ldr	r4, [pc, #84]	; (9001a38c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001a338:	4605      	mov	r5, r0
9001a33a:	7823      	ldrb	r3, [r4, #0]
9001a33c:	f3bf 8f5b 	dmb	ish
9001a340:	07da      	lsls	r2, r3, #31
9001a342:	d40b      	bmi.n	9001a35c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001a344:	4620      	mov	r0, r4
9001a346:	f006 ff3e 	bl	900211c6 <__cxa_guard_acquire>
9001a34a:	b138      	cbz	r0, 9001a35c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001a34c:	4620      	mov	r0, r4
9001a34e:	f006 ff46 	bl	900211de <__cxa_guard_release>
9001a352:	4a0f      	ldr	r2, [pc, #60]	; (9001a390 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001a354:	490f      	ldr	r1, [pc, #60]	; (9001a394 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001a356:	4810      	ldr	r0, [pc, #64]	; (9001a398 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001a358:	f006 ff2e 	bl	900211b8 <__aeabi_atexit>
9001a35c:	4c0f      	ldr	r4, [pc, #60]	; (9001a39c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001a35e:	7823      	ldrb	r3, [r4, #0]
9001a360:	f3bf 8f5b 	dmb	ish
9001a364:	07db      	lsls	r3, r3, #31
9001a366:	d40b      	bmi.n	9001a380 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001a368:	4620      	mov	r0, r4
9001a36a:	f006 ff2c 	bl	900211c6 <__cxa_guard_acquire>
9001a36e:	b138      	cbz	r0, 9001a380 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001a370:	4620      	mov	r0, r4
9001a372:	f006 ff34 	bl	900211de <__cxa_guard_release>
9001a376:	4a06      	ldr	r2, [pc, #24]	; (9001a390 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001a378:	4909      	ldr	r1, [pc, #36]	; (9001a3a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001a37a:	480a      	ldr	r0, [pc, #40]	; (9001a3a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001a37c:	f006 ff1c 	bl	900211b8 <__aeabi_atexit>
9001a380:	4b05      	ldr	r3, [pc, #20]	; (9001a398 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001a382:	66ab      	str	r3, [r5, #104]	; 0x68
9001a384:	4b07      	ldr	r3, [pc, #28]	; (9001a3a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001a386:	66eb      	str	r3, [r5, #108]	; 0x6c
9001a388:	bd38      	pop	{r3, r4, r5, pc}
9001a38a:	bf00      	nop
9001a38c:	24026570 	.word	0x24026570
9001a390:	24000000 	.word	0x24000000
9001a394:	90017ec1 	.word	0x90017ec1
9001a398:	2400006c 	.word	0x2400006c
9001a39c:	24026574 	.word	0x24026574
9001a3a0:	90017ebf 	.word	0x90017ebf
9001a3a4:	24000070 	.word	0x24000070

9001a3a8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001a3a8:	b510      	push	{r4, lr}
9001a3aa:	4604      	mov	r4, r0
9001a3ac:	f7ff ff88 	bl	9001a2c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001a3b0:	4620      	mov	r0, r4
9001a3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a3b6:	f7ff bfbd 	b.w	9001a334 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001a3ba <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001a3ba:	b510      	push	{r4, lr}
9001a3bc:	4604      	mov	r4, r0
9001a3be:	f7ff fff3 	bl	9001a3a8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001a3c2:	4620      	mov	r0, r4
9001a3c4:	f7ff ff72 	bl	9001a2ac <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001a3c8:	4620      	mov	r0, r4
9001a3ca:	f7ff fdf9 	bl	90019fc0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001a3ce:	4620      	mov	r0, r4
9001a3d0:	f7ff fcfa 	bl	90019dc8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001a3d4:	4620      	mov	r0, r4
9001a3d6:	f7ff fd75 	bl	90019ec4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001a3da:	4620      	mov	r0, r4
9001a3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001a3e0:	f7ff bee0 	b.w	9001a1a4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001a3e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a3e8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001a3ec:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001a3f0:	2d00      	cmp	r5, #0
9001a3f2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001a3f6:	fb05 4c0e 	mla	ip, r5, lr, r4
9001a3fa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001a3fe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001a402:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001a406:	eb02 0a0c 	add.w	sl, r2, ip
9001a40a:	8808      	ldrh	r0, [r1, #0]
9001a40c:	f2c0 80b0 	blt.w	9001a570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001a410:	45ab      	cmp	fp, r5
9001a412:	f340 80ad 	ble.w	9001a570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001a416:	2c00      	cmp	r4, #0
9001a418:	f2c0 80a8 	blt.w	9001a56c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001a41c:	45a6      	cmp	lr, r4
9001a41e:	f340 80a5 	ble.w	9001a56c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001a422:	f812 200c 	ldrb.w	r2, [r2, ip]
9001a426:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001a42a:	1c62      	adds	r2, r4, #1
9001a42c:	f100 80a3 	bmi.w	9001a576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001a430:	4596      	cmp	lr, r2
9001a432:	f340 80a0 	ble.w	9001a576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001a436:	f1b9 0f00 	cmp.w	r9, #0
9001a43a:	f000 809c 	beq.w	9001a576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001a43e:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001a442:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001a446:	3501      	adds	r5, #1
9001a448:	f100 8099 	bmi.w	9001a57e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001a44c:	45ab      	cmp	fp, r5
9001a44e:	f340 8096 	ble.w	9001a57e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001a452:	2f00      	cmp	r7, #0
9001a454:	f000 8093 	beq.w	9001a57e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001a458:	2c00      	cmp	r4, #0
9001a45a:	f2c0 808e 	blt.w	9001a57a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001a45e:	45a6      	cmp	lr, r4
9001a460:	f340 808b 	ble.w	9001a57a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001a464:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001a468:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001a46c:	3401      	adds	r4, #1
9001a46e:	f100 8089 	bmi.w	9001a584 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001a472:	45a6      	cmp	lr, r4
9001a474:	f340 8086 	ble.w	9001a584 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001a478:	f1b9 0f00 	cmp.w	r9, #0
9001a47c:	f000 8082 	beq.w	9001a584 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001a480:	44d6      	add	lr, sl
9001a482:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001a486:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001a48a:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001a48e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001a492:	fb19 fe07 	smulbb	lr, r9, r7
9001a496:	f1c7 0210 	rsb	r2, r7, #16
9001a49a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001a49e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001a4a2:	eba2 0209 	sub.w	r2, r2, r9
9001a4a6:	ea44 0808 	orr.w	r8, r4, r8
9001a4aa:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001a4ae:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001a4b2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001a4b6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001a4ba:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001a4be:	ea44 0c0c 	orr.w	ip, r4, ip
9001a4c2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001a4c6:	fb04 f40c 	mul.w	r4, r4, ip
9001a4ca:	fb02 4808 	mla	r8, r2, r8, r4
9001a4ce:	041a      	lsls	r2, r3, #16
9001a4d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001a4d4:	b2b4      	uxth	r4, r6
9001a4d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001a4da:	43f6      	mvns	r6, r6
9001a4dc:	4313      	orrs	r3, r2
9001a4de:	042a      	lsls	r2, r5, #16
9001a4e0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001a4e4:	b2f6      	uxtb	r6, r6
9001a4e6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001a4ea:	fb0e 8303 	mla	r3, lr, r3, r8
9001a4ee:	432a      	orrs	r2, r5
9001a4f0:	fb07 3202 	mla	r2, r7, r2, r3
9001a4f4:	10c7      	asrs	r7, r0, #3
9001a4f6:	0d53      	lsrs	r3, r2, #21
9001a4f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001a4fc:	0952      	lsrs	r2, r2, #5
9001a4fe:	fb17 f706 	smulbb	r7, r7, r6
9001a502:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a506:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001a50a:	431a      	orrs	r2, r3
9001a50c:	b293      	uxth	r3, r2
9001a50e:	1202      	asrs	r2, r0, #8
9001a510:	121d      	asrs	r5, r3, #8
9001a512:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001a516:	00c0      	lsls	r0, r0, #3
9001a518:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001a51c:	fb12 f206 	smulbb	r2, r2, r6
9001a520:	b2c0      	uxtb	r0, r0
9001a522:	fb05 2504 	mla	r5, r5, r4, r2
9001a526:	10da      	asrs	r2, r3, #3
9001a528:	fb10 f006 	smulbb	r0, r0, r6
9001a52c:	00db      	lsls	r3, r3, #3
9001a52e:	b2ad      	uxth	r5, r5
9001a530:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001a534:	b2db      	uxtb	r3, r3
9001a536:	fb02 7204 	mla	r2, r2, r4, r7
9001a53a:	fb03 0004 	mla	r0, r3, r4, r0
9001a53e:	1c6b      	adds	r3, r5, #1
9001a540:	b292      	uxth	r2, r2
9001a542:	b280      	uxth	r0, r0
9001a544:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001a548:	1c43      	adds	r3, r0, #1
9001a54a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001a54e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001a552:	1c50      	adds	r0, r2, #1
9001a554:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001a558:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001a55c:	0952      	lsrs	r2, r2, #5
9001a55e:	432b      	orrs	r3, r5
9001a560:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001a564:	4313      	orrs	r3, r2
9001a566:	800b      	strh	r3, [r1, #0]
9001a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a56c:	4680      	mov	r8, r0
9001a56e:	e75c      	b.n	9001a42a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001a570:	4684      	mov	ip, r0
9001a572:	4680      	mov	r8, r0
9001a574:	e767      	b.n	9001a446 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001a576:	4684      	mov	ip, r0
9001a578:	e765      	b.n	9001a446 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001a57a:	4605      	mov	r5, r0
9001a57c:	e776      	b.n	9001a46c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001a57e:	4603      	mov	r3, r0
9001a580:	4605      	mov	r5, r0
9001a582:	e782      	b.n	9001a48a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001a584:	4603      	mov	r3, r0
9001a586:	e780      	b.n	9001a48a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001a588 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a58c:	b099      	sub	sp, #100	; 0x64
9001a58e:	9215      	str	r2, [sp, #84]	; 0x54
9001a590:	9309      	str	r3, [sp, #36]	; 0x24
9001a592:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001a594:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001a598:	9016      	str	r0, [sp, #88]	; 0x58
9001a59a:	930d      	str	r3, [sp, #52]	; 0x34
9001a59c:	6850      	ldr	r0, [r2, #4]
9001a59e:	910c      	str	r1, [sp, #48]	; 0x30
9001a5a0:	6812      	ldr	r2, [r2, #0]
9001a5a2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001a5a6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001a5aa:	fb00 1303 	mla	r3, r0, r3, r1
9001a5ae:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001a5b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a5b4:	681b      	ldr	r3, [r3, #0]
9001a5b6:	930b      	str	r3, [sp, #44]	; 0x2c
9001a5b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a5ba:	685e      	ldr	r6, [r3, #4]
9001a5bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001a5be:	3604      	adds	r6, #4
9001a5c0:	43db      	mvns	r3, r3
9001a5c2:	b2db      	uxtb	r3, r3
9001a5c4:	930a      	str	r3, [sp, #40]	; 0x28
9001a5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001a5c8:	2b00      	cmp	r3, #0
9001a5ca:	dc03      	bgt.n	9001a5d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001a5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001a5ce:	2b00      	cmp	r3, #0
9001a5d0:	f340 8225 	ble.w	9001aa1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001a5d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a5d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001a5da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001a5de:	1e48      	subs	r0, r1, #1
9001a5e0:	1e57      	subs	r7, r2, #1
9001a5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a5e4:	2b00      	cmp	r3, #0
9001a5e6:	f340 80e3 	ble.w	9001a7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001a5ea:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001a5ee:	ea4f 4325 	mov.w	r3, r5, asr #16
9001a5f2:	d406      	bmi.n	9001a602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001a5f4:	4584      	cmp	ip, r0
9001a5f6:	da04      	bge.n	9001a602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001a5f8:	2b00      	cmp	r3, #0
9001a5fa:	db02      	blt.n	9001a602 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001a5fc:	42bb      	cmp	r3, r7
9001a5fe:	f2c0 80d8 	blt.w	9001a7b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001a602:	f11c 0c01 	adds.w	ip, ip, #1
9001a606:	f100 80c9 	bmi.w	9001a79c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001a60a:	4561      	cmp	r1, ip
9001a60c:	f2c0 80c6 	blt.w	9001a79c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001a610:	3301      	adds	r3, #1
9001a612:	f100 80c3 	bmi.w	9001a79c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001a616:	429a      	cmp	r2, r3
9001a618:	f2c0 80c0 	blt.w	9001a79c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001a61c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001a620:	4647      	mov	r7, r8
9001a622:	f1bb 0f00 	cmp.w	fp, #0
9001a626:	f340 80e3 	ble.w	9001a7f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001a62a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001a62c:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001a630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a632:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001a636:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001a63a:	ea5f 422a 	movs.w	r2, sl, asr #16
9001a63e:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001a642:	689b      	ldr	r3, [r3, #8]
9001a644:	f100 8121 	bmi.w	9001a88a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001a648:	f103 39ff 	add.w	r9, r3, #4294967295
9001a64c:	454a      	cmp	r2, r9
9001a64e:	f280 811c 	bge.w	9001a88a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001a652:	f1bc 0f00 	cmp.w	ip, #0
9001a656:	f2c0 8118 	blt.w	9001a88a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001a65a:	f10e 39ff 	add.w	r9, lr, #4294967295
9001a65e:	45cc      	cmp	ip, r9
9001a660:	f280 8113 	bge.w	9001a88a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001a664:	b21b      	sxth	r3, r3
9001a666:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001a668:	fb0c 2203 	mla	r2, ip, r3, r2
9001a66c:	eb04 0902 	add.w	r9, r4, r2
9001a670:	5ca2      	ldrb	r2, [r4, r2]
9001a672:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001a676:	2800      	cmp	r0, #0
9001a678:	f000 80fe 	beq.w	9001a878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001a67c:	f899 2001 	ldrb.w	r2, [r9, #1]
9001a680:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001a684:	9211      	str	r2, [sp, #68]	; 0x44
9001a686:	b151      	cbz	r1, 9001a69e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001a688:	eb09 0203 	add.w	r2, r9, r3
9001a68c:	f819 3003 	ldrb.w	r3, [r9, r3]
9001a690:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001a694:	930f      	str	r3, [sp, #60]	; 0x3c
9001a696:	7853      	ldrb	r3, [r2, #1]
9001a698:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001a69c:	9312      	str	r3, [sp, #72]	; 0x48
9001a69e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001a6a0:	fb10 f201 	smulbb	r2, r0, r1
9001a6a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001a6a6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001a6aa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001a6ae:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001a6b2:	10d2      	asrs	r2, r2, #3
9001a6b4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001a6b8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001a6bc:	ea4c 0c03 	orr.w	ip, ip, r3
9001a6c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001a6c2:	041b      	lsls	r3, r3, #16
9001a6c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001a6c8:	4323      	orrs	r3, r4
9001a6ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001a6cc:	4353      	muls	r3, r2
9001a6ce:	fb09 330c 	mla	r3, r9, ip, r3
9001a6d2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001a6d6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001a6da:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001a6de:	ea4c 0e0e 	orr.w	lr, ip, lr
9001a6e2:	f1c1 0c10 	rsb	ip, r1, #16
9001a6e6:	ebac 0c00 	sub.w	ip, ip, r0
9001a6ea:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001a6ee:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001a6f2:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001a6f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001a6f8:	0418      	lsls	r0, r3, #16
9001a6fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001a6fe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001a702:	4318      	orrs	r0, r3
9001a704:	fb02 c200 	mla	r2, r2, r0, ip
9001a708:	8838      	ldrh	r0, [r7, #0]
9001a70a:	0d53      	lsrs	r3, r2, #21
9001a70c:	0952      	lsrs	r2, r2, #5
9001a70e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a712:	1201      	asrs	r1, r0, #8
9001a714:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001a718:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001a71c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001a720:	00c0      	lsls	r0, r0, #3
9001a722:	431a      	orrs	r2, r3
9001a724:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001a728:	fb11 f104 	smulbb	r1, r1, r4
9001a72c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001a730:	b292      	uxth	r2, r2
9001a732:	fb1e fe04 	smulbb	lr, lr, r4
9001a736:	b2c0      	uxtb	r0, r0
9001a738:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001a73c:	fb10 f004 	smulbb	r0, r0, r4
9001a740:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001a744:	fb0c 1c03 	mla	ip, ip, r3, r1
9001a748:	10d1      	asrs	r1, r2, #3
9001a74a:	00d2      	lsls	r2, r2, #3
9001a74c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001a750:	fa1f fc8c 	uxth.w	ip, ip
9001a754:	b2d2      	uxtb	r2, r2
9001a756:	fb01 e103 	mla	r1, r1, r3, lr
9001a75a:	fb02 0303 	mla	r3, r2, r3, r0
9001a75e:	b289      	uxth	r1, r1
9001a760:	b29a      	uxth	r2, r3
9001a762:	f10c 0301 	add.w	r3, ip, #1
9001a766:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001a76a:	1c53      	adds	r3, r2, #1
9001a76c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001a770:	1c4a      	adds	r2, r1, #1
9001a772:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001a776:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001a77a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001a77e:	0949      	lsrs	r1, r1, #5
9001a780:	ea43 030c 	orr.w	r3, r3, ip
9001a784:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001a788:	430b      	orrs	r3, r1
9001a78a:	803b      	strh	r3, [r7, #0]
9001a78c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001a78e:	3702      	adds	r7, #2
9001a790:	f10b 3bff 	add.w	fp, fp, #4294967295
9001a794:	449a      	add	sl, r3
9001a796:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001a798:	441d      	add	r5, r3
9001a79a:	e742      	b.n	9001a622 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001a79c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001a79e:	f108 0802 	add.w	r8, r8, #2
9001a7a2:	449a      	add	sl, r3
9001a7a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001a7a6:	441d      	add	r5, r3
9001a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a7aa:	3b01      	subs	r3, #1
9001a7ac:	9309      	str	r3, [sp, #36]	; 0x24
9001a7ae:	e718      	b.n	9001a5e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001a7b0:	d023      	beq.n	9001a7fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001a7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a7b4:	9825      	ldr	r0, [sp, #148]	; 0x94
9001a7b6:	3b01      	subs	r3, #1
9001a7b8:	fb00 a003 	mla	r0, r0, r3, sl
9001a7bc:	1400      	asrs	r0, r0, #16
9001a7be:	f53f af2d 	bmi.w	9001a61c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001a7c2:	3901      	subs	r1, #1
9001a7c4:	4288      	cmp	r0, r1
9001a7c6:	f6bf af29 	bge.w	9001a61c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001a7ca:	9926      	ldr	r1, [sp, #152]	; 0x98
9001a7cc:	fb01 5303 	mla	r3, r1, r3, r5
9001a7d0:	141b      	asrs	r3, r3, #16
9001a7d2:	f53f af23 	bmi.w	9001a61c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001a7d6:	3a01      	subs	r2, #1
9001a7d8:	4293      	cmp	r3, r2
9001a7da:	f6bf af1f 	bge.w	9001a61c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001a7de:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001a7e2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001a7e6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001a7ea:	f1be 0f00 	cmp.w	lr, #0
9001a7ee:	dc6c      	bgt.n	9001a8ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001a7f2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001a7f6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001a7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001a7fc:	2b00      	cmp	r3, #0
9001a7fe:	f340 810e 	ble.w	9001aa1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001a802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001a806:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001a808:	ee30 0a04 	vadd.f32	s0, s0, s8
9001a80c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001a810:	eef0 6a62 	vmov.f32	s13, s5
9001a814:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001a818:	ee31 1a05 	vadd.f32	s2, s2, s10
9001a81c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001a820:	ee16 aa90 	vmov	sl, s13
9001a824:	eef0 6a43 	vmov.f32	s13, s6
9001a828:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001a82c:	ee16 5a90 	vmov	r5, s13
9001a830:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001a834:	ee61 7a27 	vmul.f32	s15, s2, s15
9001a838:	ee77 2a62 	vsub.f32	s5, s14, s5
9001a83c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001a840:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001a844:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001a848:	ee12 2a90 	vmov	r2, s5
9001a84c:	eef0 2a47 	vmov.f32	s5, s14
9001a850:	fb92 f3f3 	sdiv	r3, r2, r3
9001a854:	ee13 2a10 	vmov	r2, s6
9001a858:	9325      	str	r3, [sp, #148]	; 0x94
9001a85a:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001a85c:	eeb0 3a67 	vmov.f32	s6, s15
9001a860:	fb92 f3f3 	sdiv	r3, r2, r3
9001a864:	9326      	str	r3, [sp, #152]	; 0x98
9001a866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001a868:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001a86a:	3b01      	subs	r3, #1
9001a86c:	930c      	str	r3, [sp, #48]	; 0x30
9001a86e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001a870:	bf08      	it	eq
9001a872:	4613      	moveq	r3, r2
9001a874:	9309      	str	r3, [sp, #36]	; 0x24
9001a876:	e6a6      	b.n	9001a5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001a878:	2900      	cmp	r1, #0
9001a87a:	f43f af10 	beq.w	9001a69e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001a87e:	f819 3003 	ldrb.w	r3, [r9, r3]
9001a882:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001a886:	930f      	str	r3, [sp, #60]	; 0x3c
9001a888:	e709      	b.n	9001a69e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001a88a:	f112 0901 	adds.w	r9, r2, #1
9001a88e:	f53f af7d 	bmi.w	9001a78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001a892:	454b      	cmp	r3, r9
9001a894:	f6ff af7a 	blt.w	9001a78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001a898:	f11c 0901 	adds.w	r9, ip, #1
9001a89c:	f53f af76 	bmi.w	9001a78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001a8a0:	45ce      	cmp	lr, r9
9001a8a2:	f6ff af73 	blt.w	9001a78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001a8a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001a8a8:	b21b      	sxth	r3, r3
9001a8aa:	9202      	str	r2, [sp, #8]
9001a8ac:	fa0f f28e 	sxth.w	r2, lr
9001a8b0:	9300      	str	r3, [sp, #0]
9001a8b2:	4633      	mov	r3, r6
9001a8b4:	9201      	str	r2, [sp, #4]
9001a8b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001a8b8:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001a8bc:	e9cd c003 	strd	ip, r0, [sp, #12]
9001a8c0:	4639      	mov	r1, r7
9001a8c2:	9816      	ldr	r0, [sp, #88]	; 0x58
9001a8c4:	f7ff fd8e 	bl	9001a3e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001a8c8:	e760      	b.n	9001a78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001a8ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001a8cc:	ea4f 422a 	mov.w	r2, sl, asr #16
9001a8d0:	1429      	asrs	r1, r5, #16
9001a8d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001a8d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001a8d8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001a8dc:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001a8e0:	fb03 2101 	mla	r1, r3, r1, r2
9001a8e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001a8e6:	440a      	add	r2, r1
9001a8e8:	5c61      	ldrb	r1, [r4, r1]
9001a8ea:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001a8ee:	f1bc 0f00 	cmp.w	ip, #0
9001a8f2:	f000 808c 	beq.w	9001aa0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001a8f6:	7857      	ldrb	r7, [r2, #1]
9001a8f8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001a8fc:	9413      	str	r4, [sp, #76]	; 0x4c
9001a8fe:	b140      	cbz	r0, 9001a912 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001a900:	18d7      	adds	r7, r2, r3
9001a902:	5cd3      	ldrb	r3, [r2, r3]
9001a904:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001a908:	9310      	str	r3, [sp, #64]	; 0x40
9001a90a:	787b      	ldrb	r3, [r7, #1]
9001a90c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001a910:	9314      	str	r3, [sp, #80]	; 0x50
9001a912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001a914:	fb1c f200 	smulbb	r2, ip, r0
9001a918:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001a91a:	f10e 3eff 	add.w	lr, lr, #4294967295
9001a91e:	041f      	lsls	r7, r3, #16
9001a920:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001a924:	10d2      	asrs	r2, r2, #3
9001a926:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001a92a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001a92e:	431f      	orrs	r7, r3
9001a930:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001a934:	9317      	str	r3, [sp, #92]	; 0x5c
9001a936:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001a938:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001a93a:	041b      	lsls	r3, r3, #16
9001a93c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001a940:	ea43 030b 	orr.w	r3, r3, fp
9001a944:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001a948:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001a94c:	4353      	muls	r3, r2
9001a94e:	fb04 3707 	mla	r7, r4, r7, r3
9001a952:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001a956:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001a958:	ea43 0b01 	orr.w	fp, r3, r1
9001a95c:	f1c0 0110 	rsb	r1, r0, #16
9001a960:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001a962:	eba1 0c0c 	sub.w	ip, r1, ip
9001a966:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001a96a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001a96e:	fb0c 770b 	mla	r7, ip, fp, r7
9001a972:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001a976:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001a97a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001a97e:	ea4c 0c0b 	orr.w	ip, ip, fp
9001a982:	fb02 770c 	mla	r7, r2, ip, r7
9001a986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001a988:	0d79      	lsrs	r1, r7, #21
9001a98a:	8812      	ldrh	r2, [r2, #0]
9001a98c:	097f      	lsrs	r7, r7, #5
9001a98e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001a992:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001a996:	430f      	orrs	r7, r1
9001a998:	1211      	asrs	r1, r2, #8
9001a99a:	b2bb      	uxth	r3, r7
9001a99c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001a9a0:	10d7      	asrs	r7, r2, #3
9001a9a2:	fb11 f104 	smulbb	r1, r1, r4
9001a9a6:	1218      	asrs	r0, r3, #8
9001a9a8:	00d2      	lsls	r2, r2, #3
9001a9aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001a9ae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001a9b2:	fb17 f704 	smulbb	r7, r7, r4
9001a9b6:	b2d2      	uxtb	r2, r2
9001a9b8:	fb00 1009 	mla	r0, r0, r9, r1
9001a9bc:	10d9      	asrs	r1, r3, #3
9001a9be:	fb12 f204 	smulbb	r2, r2, r4
9001a9c2:	00db      	lsls	r3, r3, #3
9001a9c4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001a9c8:	b280      	uxth	r0, r0
9001a9ca:	b2db      	uxtb	r3, r3
9001a9cc:	fb01 7109 	mla	r1, r1, r9, r7
9001a9d0:	fb03 2309 	mla	r3, r3, r9, r2
9001a9d4:	1c42      	adds	r2, r0, #1
9001a9d6:	b289      	uxth	r1, r1
9001a9d8:	b29b      	uxth	r3, r3
9001a9da:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001a9de:	1c4f      	adds	r7, r1, #1
9001a9e0:	1c5a      	adds	r2, r3, #1
9001a9e2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001a9e6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001a9ea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001a9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001a9f0:	0949      	lsrs	r1, r1, #5
9001a9f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a9f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001a9fa:	4310      	orrs	r0, r2
9001a9fc:	4308      	orrs	r0, r1
9001a9fe:	f823 0b02 	strh.w	r0, [r3], #2
9001aa02:	930e      	str	r3, [sp, #56]	; 0x38
9001aa04:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001aa06:	449a      	add	sl, r3
9001aa08:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001aa0a:	441d      	add	r5, r3
9001aa0c:	e6ed      	b.n	9001a7ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001aa0e:	2800      	cmp	r0, #0
9001aa10:	f43f af7f 	beq.w	9001a912 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001aa14:	5cd3      	ldrb	r3, [r2, r3]
9001aa16:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001aa1a:	9310      	str	r3, [sp, #64]	; 0x40
9001aa1c:	e779      	b.n	9001a912 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001aa1e:	b019      	add	sp, #100	; 0x64
9001aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001aa24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001aa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001aa28:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001aa2c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001aa30:	f1b8 0f00 	cmp.w	r8, #0
9001aa34:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001aa38:	fb08 470e 	mla	r7, r8, lr, r4
9001aa3c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001aa40:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001aa44:	eb02 0907 	add.w	r9, r2, r7
9001aa48:	8808      	ldrh	r0, [r1, #0]
9001aa4a:	db67      	blt.n	9001ab1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001aa4c:	45c2      	cmp	sl, r8
9001aa4e:	dd65      	ble.n	9001ab1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001aa50:	2c00      	cmp	r4, #0
9001aa52:	db61      	blt.n	9001ab18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001aa54:	45a6      	cmp	lr, r4
9001aa56:	dd5f      	ble.n	9001ab18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001aa58:	5dd2      	ldrb	r2, [r2, r7]
9001aa5a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001aa5e:	1c62      	adds	r2, r4, #1
9001aa60:	d45f      	bmi.n	9001ab22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001aa62:	4596      	cmp	lr, r2
9001aa64:	dd5d      	ble.n	9001ab22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001aa66:	2d00      	cmp	r5, #0
9001aa68:	d05b      	beq.n	9001ab22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001aa6a:	f899 2001 	ldrb.w	r2, [r9, #1]
9001aa6e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001aa72:	f118 0801 	adds.w	r8, r8, #1
9001aa76:	d458      	bmi.n	9001ab2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001aa78:	45c2      	cmp	sl, r8
9001aa7a:	dd56      	ble.n	9001ab2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001aa7c:	2e00      	cmp	r6, #0
9001aa7e:	d054      	beq.n	9001ab2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001aa80:	2c00      	cmp	r4, #0
9001aa82:	db50      	blt.n	9001ab26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001aa84:	45a6      	cmp	lr, r4
9001aa86:	dd4e      	ble.n	9001ab26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001aa88:	f819 200e 	ldrb.w	r2, [r9, lr]
9001aa8c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001aa90:	3401      	adds	r4, #1
9001aa92:	d407      	bmi.n	9001aaa4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001aa94:	45a6      	cmp	lr, r4
9001aa96:	dd05      	ble.n	9001aaa4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001aa98:	b125      	cbz	r5, 9001aaa4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001aa9a:	44ce      	add	lr, r9
9001aa9c:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001aaa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001aaa4:	fb15 f406 	smulbb	r4, r5, r6
9001aaa8:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001aaac:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001aab0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001aab4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001aab8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001aabc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001aac0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001aac4:	ea43 0c0c 	orr.w	ip, r3, ip
9001aac8:	f1c6 0310 	rsb	r3, r6, #16
9001aacc:	ea4e 0707 	orr.w	r7, lr, r7
9001aad0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001aad4:	1b5b      	subs	r3, r3, r5
9001aad6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001aada:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001aade:	437d      	muls	r5, r7
9001aae0:	fb03 5c0c 	mla	ip, r3, ip, r5
9001aae4:	0403      	lsls	r3, r0, #16
9001aae6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001aaea:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001aaee:	4318      	orrs	r0, r3
9001aaf0:	0413      	lsls	r3, r2, #16
9001aaf2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001aaf6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001aafa:	fb04 c000 	mla	r0, r4, r0, ip
9001aafe:	4313      	orrs	r3, r2
9001ab00:	fb06 0003 	mla	r0, r6, r3, r0
9001ab04:	0d43      	lsrs	r3, r0, #21
9001ab06:	0940      	lsrs	r0, r0, #5
9001ab08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ab0c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ab10:	4318      	orrs	r0, r3
9001ab12:	8008      	strh	r0, [r1, #0]
9001ab14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001ab18:	4684      	mov	ip, r0
9001ab1a:	e7a0      	b.n	9001aa5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001ab1c:	4607      	mov	r7, r0
9001ab1e:	4684      	mov	ip, r0
9001ab20:	e7a7      	b.n	9001aa72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001ab22:	4607      	mov	r7, r0
9001ab24:	e7a5      	b.n	9001aa72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001ab26:	4602      	mov	r2, r0
9001ab28:	e7b2      	b.n	9001aa90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001ab2a:	4602      	mov	r2, r0
9001ab2c:	e7ba      	b.n	9001aaa4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001ab2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ab2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ab32:	b093      	sub	sp, #76	; 0x4c
9001ab34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ab38:	920f      	str	r2, [sp, #60]	; 0x3c
9001ab3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001ab3c:	9010      	str	r0, [sp, #64]	; 0x40
9001ab3e:	9108      	str	r1, [sp, #32]
9001ab40:	6850      	ldr	r0, [r2, #4]
9001ab42:	9306      	str	r3, [sp, #24]
9001ab44:	6812      	ldr	r2, [r2, #0]
9001ab46:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001ab4a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001ab4e:	fb00 1303 	mla	r3, r0, r3, r1
9001ab52:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001ab56:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ab58:	681b      	ldr	r3, [r3, #0]
9001ab5a:	9307      	str	r3, [sp, #28]
9001ab5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ab5e:	685f      	ldr	r7, [r3, #4]
9001ab60:	3704      	adds	r7, #4
9001ab62:	9b08      	ldr	r3, [sp, #32]
9001ab64:	2b00      	cmp	r3, #0
9001ab66:	dc03      	bgt.n	9001ab70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001ab68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ab6a:	2b00      	cmp	r3, #0
9001ab6c:	f340 81b2 	ble.w	9001aed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001ab70:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ab72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ab76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ab7a:	1e48      	subs	r0, r1, #1
9001ab7c:	f102 3cff 	add.w	ip, r2, #4294967295
9001ab80:	9b06      	ldr	r3, [sp, #24]
9001ab82:	2b00      	cmp	r3, #0
9001ab84:	f340 80a9 	ble.w	9001acda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001ab88:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001ab8c:	ea4f 4326 	mov.w	r3, r6, asr #16
9001ab90:	d406      	bmi.n	9001aba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001ab92:	4586      	cmp	lr, r0
9001ab94:	da04      	bge.n	9001aba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001ab96:	2b00      	cmp	r3, #0
9001ab98:	db02      	blt.n	9001aba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001ab9a:	4563      	cmp	r3, ip
9001ab9c:	f2c0 809e 	blt.w	9001acdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001aba0:	f11e 0e01 	adds.w	lr, lr, #1
9001aba4:	f100 808f 	bmi.w	9001acc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001aba8:	4571      	cmp	r1, lr
9001abaa:	f2c0 808c 	blt.w	9001acc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001abae:	3301      	adds	r3, #1
9001abb0:	f100 8089 	bmi.w	9001acc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001abb4:	429a      	cmp	r2, r3
9001abb6:	f2c0 8086 	blt.w	9001acc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001abba:	f8dd b018 	ldr.w	fp, [sp, #24]
9001abbe:	46c8      	mov	r8, r9
9001abc0:	f1bb 0f00 	cmp.w	fp, #0
9001abc4:	f340 80a6 	ble.w	9001ad14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001abc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001abca:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001abce:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001abd0:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001abd4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001abd8:	1422      	asrs	r2, r4, #16
9001abda:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001abde:	689b      	ldr	r3, [r3, #8]
9001abe0:	f100 80e3 	bmi.w	9001adaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001abe4:	f103 3aff 	add.w	sl, r3, #4294967295
9001abe8:	4552      	cmp	r2, sl
9001abea:	f280 80de 	bge.w	9001adaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001abee:	f1bc 0f00 	cmp.w	ip, #0
9001abf2:	f2c0 80da 	blt.w	9001adaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001abf6:	f10e 3aff 	add.w	sl, lr, #4294967295
9001abfa:	45d4      	cmp	ip, sl
9001abfc:	f280 80d5 	bge.w	9001adaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001ac00:	b21b      	sxth	r3, r3
9001ac02:	9d07      	ldr	r5, [sp, #28]
9001ac04:	fb0c 2203 	mla	r2, ip, r3, r2
9001ac08:	eb05 0a02 	add.w	sl, r5, r2
9001ac0c:	5caa      	ldrb	r2, [r5, r2]
9001ac0e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001ac12:	2800      	cmp	r0, #0
9001ac14:	f000 80c0 	beq.w	9001ad98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001ac18:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001ac1c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001ac20:	920b      	str	r2, [sp, #44]	; 0x2c
9001ac22:	b151      	cbz	r1, 9001ac3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001ac24:	eb0a 0203 	add.w	r2, sl, r3
9001ac28:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001ac2c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ac30:	9309      	str	r3, [sp, #36]	; 0x24
9001ac32:	7853      	ldrb	r3, [r2, #1]
9001ac34:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ac38:	930c      	str	r3, [sp, #48]	; 0x30
9001ac3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ac3c:	fb10 f201 	smulbb	r2, r0, r1
9001ac40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001ac42:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001ac46:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ac4a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001ac4e:	10d2      	asrs	r2, r2, #3
9001ac50:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ac54:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001ac58:	ea4c 0c03 	orr.w	ip, ip, r3
9001ac5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ac5e:	041b      	lsls	r3, r3, #16
9001ac60:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ac64:	432b      	orrs	r3, r5
9001ac66:	4353      	muls	r3, r2
9001ac68:	fb0a 330c 	mla	r3, sl, ip, r3
9001ac6c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001ac70:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ac74:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ac78:	ea4c 0e0e 	orr.w	lr, ip, lr
9001ac7c:	f1c1 0c10 	rsb	ip, r1, #16
9001ac80:	ebac 0c00 	sub.w	ip, ip, r0
9001ac84:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001ac88:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001ac8c:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ac92:	0418      	lsls	r0, r3, #16
9001ac94:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ac98:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ac9c:	4318      	orrs	r0, r3
9001ac9e:	fb02 c200 	mla	r2, r2, r0, ip
9001aca2:	0d53      	lsrs	r3, r2, #21
9001aca4:	0952      	lsrs	r2, r2, #5
9001aca6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001acaa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001acae:	431a      	orrs	r2, r3
9001acb0:	f8a8 2000 	strh.w	r2, [r8]
9001acb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001acb6:	f108 0802 	add.w	r8, r8, #2
9001acba:	f10b 3bff 	add.w	fp, fp, #4294967295
9001acbe:	441c      	add	r4, r3
9001acc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001acc2:	441e      	add	r6, r3
9001acc4:	e77c      	b.n	9001abc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001acc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001acc8:	f109 0902 	add.w	r9, r9, #2
9001accc:	441c      	add	r4, r3
9001acce:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001acd0:	441e      	add	r6, r3
9001acd2:	9b06      	ldr	r3, [sp, #24]
9001acd4:	3b01      	subs	r3, #1
9001acd6:	9306      	str	r3, [sp, #24]
9001acd8:	e752      	b.n	9001ab80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001acda:	d020      	beq.n	9001ad1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001acdc:	9b06      	ldr	r3, [sp, #24]
9001acde:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001ace0:	3b01      	subs	r3, #1
9001ace2:	fb00 4003 	mla	r0, r0, r3, r4
9001ace6:	1400      	asrs	r0, r0, #16
9001ace8:	f53f af67 	bmi.w	9001abba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001acec:	3901      	subs	r1, #1
9001acee:	4288      	cmp	r0, r1
9001acf0:	f6bf af63 	bge.w	9001abba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001acf4:	9920      	ldr	r1, [sp, #128]	; 0x80
9001acf6:	fb01 6303 	mla	r3, r1, r3, r6
9001acfa:	141b      	asrs	r3, r3, #16
9001acfc:	f53f af5d 	bmi.w	9001abba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ad00:	3a01      	subs	r2, #1
9001ad02:	4293      	cmp	r3, r2
9001ad04:	f6bf af59 	bge.w	9001abba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ad08:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001ad0c:	46ca      	mov	sl, r9
9001ad0e:	f1b8 0f00 	cmp.w	r8, #0
9001ad12:	dc67      	bgt.n	9001ade4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001ad14:	9b06      	ldr	r3, [sp, #24]
9001ad16:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001ad1a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001ad1e:	9b08      	ldr	r3, [sp, #32]
9001ad20:	2b00      	cmp	r3, #0
9001ad22:	f340 80d7 	ble.w	9001aed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001ad26:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ad2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ad2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ad30:	eeb0 6a62 	vmov.f32	s12, s5
9001ad34:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001ad38:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ad3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ad40:	ee16 4a10 	vmov	r4, s12
9001ad44:	eeb0 6a43 	vmov.f32	s12, s6
9001ad48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ad4c:	ee16 6a10 	vmov	r6, s12
9001ad50:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ad54:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ad58:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ad5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ad60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ad64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ad68:	ee12 2a90 	vmov	r2, s5
9001ad6c:	eef0 2a47 	vmov.f32	s5, s14
9001ad70:	fb92 f3f3 	sdiv	r3, r2, r3
9001ad74:	ee13 2a10 	vmov	r2, s6
9001ad78:	931f      	str	r3, [sp, #124]	; 0x7c
9001ad7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ad7c:	eeb0 3a67 	vmov.f32	s6, s15
9001ad80:	fb92 f3f3 	sdiv	r3, r2, r3
9001ad84:	9320      	str	r3, [sp, #128]	; 0x80
9001ad86:	9b08      	ldr	r3, [sp, #32]
9001ad88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ad8a:	3b01      	subs	r3, #1
9001ad8c:	9308      	str	r3, [sp, #32]
9001ad8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ad90:	bf08      	it	eq
9001ad92:	4613      	moveq	r3, r2
9001ad94:	9306      	str	r3, [sp, #24]
9001ad96:	e6e4      	b.n	9001ab62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001ad98:	2900      	cmp	r1, #0
9001ad9a:	f43f af4e 	beq.w	9001ac3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001ad9e:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001ada2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ada6:	9309      	str	r3, [sp, #36]	; 0x24
9001ada8:	e747      	b.n	9001ac3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001adaa:	f112 0a01 	adds.w	sl, r2, #1
9001adae:	d481      	bmi.n	9001acb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001adb0:	4553      	cmp	r3, sl
9001adb2:	f6ff af7f 	blt.w	9001acb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001adb6:	f11c 0a01 	adds.w	sl, ip, #1
9001adba:	f53f af7b 	bmi.w	9001acb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001adbe:	45d6      	cmp	lr, sl
9001adc0:	f6ff af78 	blt.w	9001acb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001adc4:	b21b      	sxth	r3, r3
9001adc6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001adca:	fa0f f28e 	sxth.w	r2, lr
9001adce:	9300      	str	r3, [sp, #0]
9001add0:	463b      	mov	r3, r7
9001add2:	9201      	str	r2, [sp, #4]
9001add4:	9a07      	ldr	r2, [sp, #28]
9001add6:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001adda:	4641      	mov	r1, r8
9001addc:	9810      	ldr	r0, [sp, #64]	; 0x40
9001adde:	f7ff fe21 	bl	9001aa24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001ade2:	e767      	b.n	9001acb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ade4:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ade6:	1422      	asrs	r2, r4, #16
9001ade8:	1431      	asrs	r1, r6, #16
9001adea:	9d07      	ldr	r5, [sp, #28]
9001adec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001adf0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001adf4:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001adf8:	fb03 2101 	mla	r1, r3, r1, r2
9001adfc:	9a07      	ldr	r2, [sp, #28]
9001adfe:	440a      	add	r2, r1
9001ae00:	5c69      	ldrb	r1, [r5, r1]
9001ae02:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001ae06:	f1be 0f00 	cmp.w	lr, #0
9001ae0a:	d05c      	beq.n	9001aec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001ae0c:	f892 c001 	ldrb.w	ip, [r2, #1]
9001ae10:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001ae14:	950d      	str	r5, [sp, #52]	; 0x34
9001ae16:	b150      	cbz	r0, 9001ae2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001ae18:	eb02 0c03 	add.w	ip, r2, r3
9001ae1c:	5cd3      	ldrb	r3, [r2, r3]
9001ae1e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ae22:	930a      	str	r3, [sp, #40]	; 0x28
9001ae24:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001ae28:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ae2c:	930e      	str	r3, [sp, #56]	; 0x38
9001ae2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ae30:	fb1e f200 	smulbb	r2, lr, r0
9001ae34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001ae36:	f108 38ff 	add.w	r8, r8, #4294967295
9001ae3a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001ae3e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ae42:	10d2      	asrs	r2, r2, #3
9001ae44:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001ae48:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001ae4c:	ea4c 0c03 	orr.w	ip, ip, r3
9001ae50:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001ae54:	9311      	str	r3, [sp, #68]	; 0x44
9001ae56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ae58:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001ae5a:	041b      	lsls	r3, r3, #16
9001ae5c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ae60:	ea43 030b 	orr.w	r3, r3, fp
9001ae64:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001ae68:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ae6c:	4353      	muls	r3, r2
9001ae6e:	fb05 3c0c 	mla	ip, r5, ip, r3
9001ae72:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001ae76:	ea43 0b01 	orr.w	fp, r3, r1
9001ae7a:	f1c0 0110 	rsb	r1, r0, #16
9001ae7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ae80:	eba1 0e0e 	sub.w	lr, r1, lr
9001ae84:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001ae88:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001ae8c:	fb0e cc0b 	mla	ip, lr, fp, ip
9001ae90:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001ae94:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001ae98:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ae9c:	ea4b 0e0e 	orr.w	lr, fp, lr
9001aea0:	fb02 cc0e 	mla	ip, r2, lr, ip
9001aea4:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001aea8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001aeac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001aeb0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001aeb4:	ea43 0c0c 	orr.w	ip, r3, ip
9001aeb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001aeba:	441c      	add	r4, r3
9001aebc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001aebe:	f82a cb02 	strh.w	ip, [sl], #2
9001aec2:	441e      	add	r6, r3
9001aec4:	e723      	b.n	9001ad0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001aec6:	2800      	cmp	r0, #0
9001aec8:	d0b1      	beq.n	9001ae2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001aeca:	5cd3      	ldrb	r3, [r2, r3]
9001aecc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001aed0:	930a      	str	r3, [sp, #40]	; 0x28
9001aed2:	e7ac      	b.n	9001ae2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001aed4:	b013      	add	sp, #76	; 0x4c
9001aed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001aeda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001aeda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aede:	880d      	ldrh	r5, [r1, #0]
9001aee0:	b087      	sub	sp, #28
9001aee2:	10ef      	asrs	r7, r5, #3
9001aee4:	9103      	str	r1, [sp, #12]
9001aee6:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001aeea:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001aeee:	00ed      	lsls	r5, r5, #3
9001aef0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001aef4:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001aef8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001aefc:	b2ed      	uxtb	r5, r5
9001aefe:	9701      	str	r7, [sp, #4]
9001af00:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001af04:	9502      	str	r5, [sp, #8]
9001af06:	9d01      	ldr	r5, [sp, #4]
9001af08:	9902      	ldr	r1, [sp, #8]
9001af0a:	022d      	lsls	r5, r5, #8
9001af0c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001af10:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001af14:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001af18:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001af1c:	430d      	orrs	r5, r1
9001af1e:	fb06 0709 	mla	r7, r6, r9, r0
9001af22:	2e00      	cmp	r6, #0
9001af24:	9505      	str	r5, [sp, #20]
9001af26:	eb02 0c07 	add.w	ip, r2, r7
9001af2a:	f2c0 80b6 	blt.w	9001b09a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001af2e:	45b3      	cmp	fp, r6
9001af30:	f340 80b3 	ble.w	9001b09a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001af34:	2800      	cmp	r0, #0
9001af36:	f2c0 80ae 	blt.w	9001b096 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001af3a:	4581      	cmp	r9, r0
9001af3c:	f340 80ab 	ble.w	9001b096 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001af40:	5dd7      	ldrb	r7, [r2, r7]
9001af42:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001af46:	441f      	add	r7, r3
9001af48:	1c42      	adds	r2, r0, #1
9001af4a:	f100 80a9 	bmi.w	9001b0a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001af4e:	4591      	cmp	r9, r2
9001af50:	f340 80a6 	ble.w	9001b0a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001af54:	2c00      	cmp	r4, #0
9001af56:	f000 80a3 	beq.w	9001b0a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001af5a:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001af5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001af62:	441d      	add	r5, r3
9001af64:	3601      	adds	r6, #1
9001af66:	f100 809f 	bmi.w	9001b0a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001af6a:	45b3      	cmp	fp, r6
9001af6c:	f340 809c 	ble.w	9001b0a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001af70:	f1be 0f00 	cmp.w	lr, #0
9001af74:	f000 8098 	beq.w	9001b0a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001af78:	2800      	cmp	r0, #0
9001af7a:	f2c0 8093 	blt.w	9001b0a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001af7e:	4581      	cmp	r9, r0
9001af80:	f340 8090 	ble.w	9001b0a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001af84:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001af88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001af8c:	441e      	add	r6, r3
9001af8e:	3001      	adds	r0, #1
9001af90:	f100 808d 	bmi.w	9001b0ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001af94:	4581      	cmp	r9, r0
9001af96:	f340 808a 	ble.w	9001b0ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001af9a:	2c00      	cmp	r4, #0
9001af9c:	f000 8087 	beq.w	9001b0ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001afa0:	44e1      	add	r9, ip
9001afa2:	f899 2001 	ldrb.w	r2, [r9, #1]
9001afa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001afaa:	4413      	add	r3, r2
9001afac:	b2a4      	uxth	r4, r4
9001afae:	f897 c002 	ldrb.w	ip, [r7, #2]
9001afb2:	fa1f fe8e 	uxth.w	lr, lr
9001afb6:	9901      	ldr	r1, [sp, #4]
9001afb8:	fb04 fb0e 	mul.w	fp, r4, lr
9001afbc:	0124      	lsls	r4, r4, #4
9001afbe:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001afc2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001afc6:	eba4 040b 	sub.w	r4, r4, fp
9001afca:	fa1f f08e 	uxth.w	r0, lr
9001afce:	b2a2      	uxth	r2, r4
9001afd0:	78ac      	ldrb	r4, [r5, #2]
9001afd2:	eba9 0900 	sub.w	r9, r9, r0
9001afd6:	fa1f fe88 	uxth.w	lr, r8
9001afda:	4354      	muls	r4, r2
9001afdc:	ea6f 0808 	mvn.w	r8, r8
9001afe0:	fa1f f989 	uxth.w	r9, r9
9001afe4:	fa5f f888 	uxtb.w	r8, r8
9001afe8:	fb09 440c 	mla	r4, r9, ip, r4
9001afec:	f896 c002 	ldrb.w	ip, [r6, #2]
9001aff0:	fb1a fa08 	smulbb	sl, sl, r8
9001aff4:	fb00 440c 	mla	r4, r0, ip, r4
9001aff8:	f893 c002 	ldrb.w	ip, [r3, #2]
9001affc:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001b000:	787c      	ldrb	r4, [r7, #1]
9001b002:	783f      	ldrb	r7, [r7, #0]
9001b004:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001b008:	fb0c ac0e 	mla	ip, ip, lr, sl
9001b00c:	f895 a001 	ldrb.w	sl, [r5, #1]
9001b010:	782d      	ldrb	r5, [r5, #0]
9001b012:	fb02 fa0a 	mul.w	sl, r2, sl
9001b016:	fa1f fc8c 	uxth.w	ip, ip
9001b01a:	436a      	muls	r2, r5
9001b01c:	7835      	ldrb	r5, [r6, #0]
9001b01e:	fb09 aa04 	mla	sl, r9, r4, sl
9001b022:	7874      	ldrb	r4, [r6, #1]
9001b024:	fb09 2207 	mla	r2, r9, r7, r2
9001b028:	fb00 aa04 	mla	sl, r0, r4, sl
9001b02c:	785c      	ldrb	r4, [r3, #1]
9001b02e:	fb00 2005 	mla	r0, r0, r5, r2
9001b032:	781b      	ldrb	r3, [r3, #0]
9001b034:	fb0b a404 	mla	r4, fp, r4, sl
9001b038:	fb11 fa08 	smulbb	sl, r1, r8
9001b03c:	fb0b 0b03 	mla	fp, fp, r3, r0
9001b040:	9b02      	ldr	r3, [sp, #8]
9001b042:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001b046:	fb13 f808 	smulbb	r8, r3, r8
9001b04a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001b04e:	fb04 a40e 	mla	r4, r4, lr, sl
9001b052:	f10c 0301 	add.w	r3, ip, #1
9001b056:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001b05a:	b2a4      	uxth	r4, r4
9001b05c:	fa1f fe8e 	uxth.w	lr, lr
9001b060:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001b064:	f104 0a01 	add.w	sl, r4, #1
9001b068:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001b06c:	f10e 0c01 	add.w	ip, lr, #1
9001b070:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001b074:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001b078:	0964      	lsrs	r4, r4, #5
9001b07a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b07e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001b082:	ea4c 0c03 	orr.w	ip, ip, r3
9001b086:	9b03      	ldr	r3, [sp, #12]
9001b088:	ea4c 0c04 	orr.w	ip, ip, r4
9001b08c:	f8a3 c000 	strh.w	ip, [r3]
9001b090:	b007      	add	sp, #28
9001b092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b096:	af05      	add	r7, sp, #20
9001b098:	e756      	b.n	9001af48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001b09a:	ad05      	add	r5, sp, #20
9001b09c:	462f      	mov	r7, r5
9001b09e:	e761      	b.n	9001af64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001b0a0:	ad05      	add	r5, sp, #20
9001b0a2:	e75f      	b.n	9001af64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001b0a4:	ae05      	add	r6, sp, #20
9001b0a6:	e772      	b.n	9001af8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001b0a8:	ab05      	add	r3, sp, #20
9001b0aa:	461e      	mov	r6, r3
9001b0ac:	e77e      	b.n	9001afac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001b0ae:	ab05      	add	r3, sp, #20
9001b0b0:	e77c      	b.n	9001afac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001b0b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b0b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b0b6:	b095      	sub	sp, #84	; 0x54
9001b0b8:	9212      	str	r2, [sp, #72]	; 0x48
9001b0ba:	9309      	str	r3, [sp, #36]	; 0x24
9001b0bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001b0be:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001b0c2:	9013      	str	r0, [sp, #76]	; 0x4c
9001b0c4:	930f      	str	r3, [sp, #60]	; 0x3c
9001b0c6:	6850      	ldr	r0, [r2, #4]
9001b0c8:	910e      	str	r1, [sp, #56]	; 0x38
9001b0ca:	6812      	ldr	r2, [r2, #0]
9001b0cc:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001b0d0:	fb00 1303 	mla	r3, r0, r3, r1
9001b0d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b0d8:	930a      	str	r3, [sp, #40]	; 0x28
9001b0da:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b0dc:	681b      	ldr	r3, [r3, #0]
9001b0de:	930d      	str	r3, [sp, #52]	; 0x34
9001b0e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b0e2:	685c      	ldr	r4, [r3, #4]
9001b0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b0e6:	3404      	adds	r4, #4
9001b0e8:	43db      	mvns	r3, r3
9001b0ea:	b2db      	uxtb	r3, r3
9001b0ec:	930b      	str	r3, [sp, #44]	; 0x2c
9001b0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b0f0:	2b00      	cmp	r3, #0
9001b0f2:	dc03      	bgt.n	9001b0fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001b0f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001b0f6:	2b00      	cmp	r3, #0
9001b0f8:	f340 8255 	ble.w	9001b5a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001b0fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001b0fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001b102:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001b106:	1e48      	subs	r0, r1, #1
9001b108:	1e55      	subs	r5, r2, #1
9001b10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b10c:	2b00      	cmp	r3, #0
9001b10e:	f340 80f9 	ble.w	9001b304 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001b112:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001b114:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b116:	1436      	asrs	r6, r6, #16
9001b118:	ea4f 4323 	mov.w	r3, r3, asr #16
9001b11c:	d406      	bmi.n	9001b12c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001b11e:	4286      	cmp	r6, r0
9001b120:	da04      	bge.n	9001b12c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001b122:	2b00      	cmp	r3, #0
9001b124:	db02      	blt.n	9001b12c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001b126:	42ab      	cmp	r3, r5
9001b128:	f2c0 80ed 	blt.w	9001b306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001b12c:	3601      	adds	r6, #1
9001b12e:	f100 80da 	bmi.w	9001b2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b132:	42b1      	cmp	r1, r6
9001b134:	f2c0 80d7 	blt.w	9001b2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b138:	3301      	adds	r3, #1
9001b13a:	f100 80d4 	bmi.w	9001b2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b13e:	429a      	cmp	r2, r3
9001b140:	f2c0 80d1 	blt.w	9001b2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001b144:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b146:	9311      	str	r3, [sp, #68]	; 0x44
9001b148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b14a:	930c      	str	r3, [sp, #48]	; 0x30
9001b14c:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b14e:	2b00      	cmp	r3, #0
9001b150:	f340 80fa 	ble.w	9001b348 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001b154:	9826      	ldr	r0, [sp, #152]	; 0x98
9001b156:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b158:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001b15a:	68c6      	ldr	r6, [r0, #12]
9001b15c:	141d      	asrs	r5, r3, #16
9001b15e:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001b160:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001b164:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b166:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001b168:	1400      	asrs	r0, r0, #16
9001b16a:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001b16e:	6892      	ldr	r2, [r2, #8]
9001b170:	f100 813e 	bmi.w	9001b3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b174:	1e57      	subs	r7, r2, #1
9001b176:	42b8      	cmp	r0, r7
9001b178:	f280 813a 	bge.w	9001b3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b17c:	2d00      	cmp	r5, #0
9001b17e:	f2c0 8137 	blt.w	9001b3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b182:	1e77      	subs	r7, r6, #1
9001b184:	42bd      	cmp	r5, r7
9001b186:	f280 8133 	bge.w	9001b3f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001b18a:	b212      	sxth	r2, r2
9001b18c:	fb05 0002 	mla	r0, r5, r2, r0
9001b190:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001b192:	f815 a000 	ldrb.w	sl, [r5, r0]
9001b196:	182e      	adds	r6, r5, r0
9001b198:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001b19c:	eb04 050a 	add.w	r5, r4, sl
9001b1a0:	2b00      	cmp	r3, #0
9001b1a2:	f000 8117 	beq.w	9001b3d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001b1a6:	f896 c001 	ldrb.w	ip, [r6, #1]
9001b1aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001b1ae:	44a4      	add	ip, r4
9001b1b0:	2900      	cmp	r1, #0
9001b1b2:	f000 8117 	beq.w	9001b3e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001b1b6:	18b0      	adds	r0, r6, r2
9001b1b8:	5cb2      	ldrb	r2, [r6, r2]
9001b1ba:	7840      	ldrb	r0, [r0, #1]
9001b1bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b1c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001b1c4:	4422      	add	r2, r4
9001b1c6:	4420      	add	r0, r4
9001b1c8:	b29b      	uxth	r3, r3
9001b1ca:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001b1ce:	b289      	uxth	r1, r1
9001b1d0:	f895 b002 	ldrb.w	fp, [r5, #2]
9001b1d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001b1d6:	fb03 f901 	mul.w	r9, r3, r1
9001b1da:	011b      	lsls	r3, r3, #4
9001b1dc:	f8b6 e000 	ldrh.w	lr, [r6]
9001b1e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001b1e4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001b1e8:	eba3 0309 	sub.w	r3, r3, r9
9001b1ec:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001b1f0:	b289      	uxth	r1, r1
9001b1f2:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001b1f6:	b29b      	uxth	r3, r3
9001b1f8:	eba8 0801 	sub.w	r8, r8, r1
9001b1fc:	435f      	muls	r7, r3
9001b1fe:	fa1f f888 	uxth.w	r8, r8
9001b202:	9310      	str	r3, [sp, #64]	; 0x40
9001b204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b206:	fb08 770b 	mla	r7, r8, fp, r7
9001b20a:	f892 b002 	ldrb.w	fp, [r2, #2]
9001b20e:	fb01 770b 	mla	r7, r1, fp, r7
9001b212:	f890 b002 	ldrb.w	fp, [r0, #2]
9001b216:	fb09 770b 	mla	r7, r9, fp, r7
9001b21a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001b21e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001b222:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001b226:	fb1b fb03 	smulbb	fp, fp, r3
9001b22a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b22c:	fb07 b706 	mla	r7, r7, r6, fp
9001b230:	f895 b001 	ldrb.w	fp, [r5, #1]
9001b234:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001b238:	f89c c000 	ldrb.w	ip, [ip]
9001b23c:	b2bf      	uxth	r7, r7
9001b23e:	435d      	muls	r5, r3
9001b240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b242:	fb08 550b 	mla	r5, r8, fp, r5
9001b246:	f892 b001 	ldrb.w	fp, [r2, #1]
9001b24a:	fb01 550b 	mla	r5, r1, fp, r5
9001b24e:	f890 b001 	ldrb.w	fp, [r0, #1]
9001b252:	fb09 550b 	mla	r5, r9, fp, r5
9001b256:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001b25a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001b25e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001b262:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001b266:	fa5f fe8e 	uxtb.w	lr, lr
9001b26a:	fb1b fb03 	smulbb	fp, fp, r3
9001b26e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b270:	fb03 f30c 	mul.w	r3, r3, ip
9001b274:	f892 c000 	ldrb.w	ip, [r2]
9001b278:	fb05 b506 	mla	r5, r5, r6, fp
9001b27c:	fb08 330a 	mla	r3, r8, sl, r3
9001b280:	b2ad      	uxth	r5, r5
9001b282:	fb01 330c 	mla	r3, r1, ip, r3
9001b286:	f890 c000 	ldrb.w	ip, [r0]
9001b28a:	f105 0b01 	add.w	fp, r5, #1
9001b28e:	fb09 3c0c 	mla	ip, r9, ip, r3
9001b292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b294:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001b298:	fb1e fe03 	smulbb	lr, lr, r3
9001b29c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001b2a0:	1c7b      	adds	r3, r7, #1
9001b2a2:	096d      	lsrs	r5, r5, #5
9001b2a4:	fb0c e606 	mla	r6, ip, r6, lr
9001b2a8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001b2ac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b2b0:	b2b6      	uxth	r6, r6
9001b2b2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001b2b6:	1c77      	adds	r7, r6, #1
9001b2b8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001b2bc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b2c0:	431f      	orrs	r7, r3
9001b2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001b2c4:	433d      	orrs	r5, r7
9001b2c6:	801d      	strh	r5, [r3, #0]
9001b2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001b2ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001b2cc:	3302      	adds	r3, #2
9001b2ce:	930c      	str	r3, [sp, #48]	; 0x30
9001b2d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b2d2:	4413      	add	r3, r2
9001b2d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001b2d6:	931f      	str	r3, [sp, #124]	; 0x7c
9001b2d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b2da:	4413      	add	r3, r2
9001b2dc:	9320      	str	r3, [sp, #128]	; 0x80
9001b2de:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b2e0:	3b01      	subs	r3, #1
9001b2e2:	9311      	str	r3, [sp, #68]	; 0x44
9001b2e4:	e732      	b.n	9001b14c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001b2e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b2e8:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001b2ea:	4433      	add	r3, r6
9001b2ec:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001b2ee:	931f      	str	r3, [sp, #124]	; 0x7c
9001b2f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b2f2:	4433      	add	r3, r6
9001b2f4:	9320      	str	r3, [sp, #128]	; 0x80
9001b2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b2f8:	3b01      	subs	r3, #1
9001b2fa:	9309      	str	r3, [sp, #36]	; 0x24
9001b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b2fe:	3302      	adds	r3, #2
9001b300:	930a      	str	r3, [sp, #40]	; 0x28
9001b302:	e702      	b.n	9001b10a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001b304:	d027      	beq.n	9001b356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b308:	9821      	ldr	r0, [sp, #132]	; 0x84
9001b30a:	3b01      	subs	r3, #1
9001b30c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001b30e:	fb00 5003 	mla	r0, r0, r3, r5
9001b312:	1400      	asrs	r0, r0, #16
9001b314:	f53f af16 	bmi.w	9001b144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b318:	3901      	subs	r1, #1
9001b31a:	4288      	cmp	r0, r1
9001b31c:	f6bf af12 	bge.w	9001b144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b320:	9922      	ldr	r1, [sp, #136]	; 0x88
9001b322:	9820      	ldr	r0, [sp, #128]	; 0x80
9001b324:	fb01 0303 	mla	r3, r1, r3, r0
9001b328:	141b      	asrs	r3, r3, #16
9001b32a:	f53f af0b 	bmi.w	9001b144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b32e:	3a01      	subs	r2, #1
9001b330:	4293      	cmp	r3, r2
9001b332:	f6bf af07 	bge.w	9001b144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001b336:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b338:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001b33c:	9311      	str	r3, [sp, #68]	; 0x44
9001b33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b340:	930c      	str	r3, [sp, #48]	; 0x30
9001b342:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b344:	2b00      	cmp	r3, #0
9001b346:	dc70      	bgt.n	9001b42a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001b348:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001b34c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b350:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b354:	930a      	str	r3, [sp, #40]	; 0x28
9001b356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b358:	2b00      	cmp	r3, #0
9001b35a:	f340 8124 	ble.w	9001b5a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001b35e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b362:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001b364:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b368:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b36c:	eef0 6a62 	vmov.f32	s13, s5
9001b370:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b374:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b378:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b37c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001b380:	eef0 6a43 	vmov.f32	s13, s6
9001b384:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b388:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001b38c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b390:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b394:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b398:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b39c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b3a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b3a4:	ee12 2a90 	vmov	r2, s5
9001b3a8:	eef0 2a47 	vmov.f32	s5, s14
9001b3ac:	fb92 f3f3 	sdiv	r3, r2, r3
9001b3b0:	ee13 2a10 	vmov	r2, s6
9001b3b4:	9321      	str	r3, [sp, #132]	; 0x84
9001b3b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001b3b8:	eeb0 3a67 	vmov.f32	s6, s15
9001b3bc:	fb92 f3f3 	sdiv	r3, r2, r3
9001b3c0:	9322      	str	r3, [sp, #136]	; 0x88
9001b3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b3c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b3c6:	3b01      	subs	r3, #1
9001b3c8:	930e      	str	r3, [sp, #56]	; 0x38
9001b3ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001b3cc:	bf08      	it	eq
9001b3ce:	4613      	moveq	r3, r2
9001b3d0:	9309      	str	r3, [sp, #36]	; 0x24
9001b3d2:	e68c      	b.n	9001b0ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001b3d4:	b149      	cbz	r1, 9001b3ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001b3d6:	5cb2      	ldrb	r2, [r6, r2]
9001b3d8:	4628      	mov	r0, r5
9001b3da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b3de:	4422      	add	r2, r4
9001b3e0:	46ac      	mov	ip, r5
9001b3e2:	e6f1      	b.n	9001b1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001b3e4:	4628      	mov	r0, r5
9001b3e6:	462a      	mov	r2, r5
9001b3e8:	e6ee      	b.n	9001b1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001b3ea:	4628      	mov	r0, r5
9001b3ec:	462a      	mov	r2, r5
9001b3ee:	e7f7      	b.n	9001b3e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001b3f0:	1c47      	adds	r7, r0, #1
9001b3f2:	f53f af69 	bmi.w	9001b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001b3f6:	42ba      	cmp	r2, r7
9001b3f8:	f6ff af66 	blt.w	9001b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001b3fc:	1c6f      	adds	r7, r5, #1
9001b3fe:	f53f af63 	bmi.w	9001b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001b402:	42be      	cmp	r6, r7
9001b404:	f6ff af60 	blt.w	9001b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001b408:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001b40a:	b236      	sxth	r6, r6
9001b40c:	b212      	sxth	r2, r2
9001b40e:	9002      	str	r0, [sp, #8]
9001b410:	9601      	str	r6, [sp, #4]
9001b412:	9200      	str	r2, [sp, #0]
9001b414:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b416:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001b41a:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001b41e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001b422:	4623      	mov	r3, r4
9001b424:	f7ff fd59 	bl	9001aeda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001b428:	e74e      	b.n	9001b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001b42a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001b42c:	9820      	ldr	r0, [sp, #128]	; 0x80
9001b42e:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001b432:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001b434:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001b436:	1400      	asrs	r0, r0, #16
9001b438:	142d      	asrs	r5, r5, #16
9001b43a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b43c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001b440:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001b444:	fb02 5000 	mla	r0, r2, r0, r5
9001b448:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001b44a:	f815 9000 	ldrb.w	r9, [r5, r0]
9001b44e:	182e      	adds	r6, r5, r0
9001b450:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001b454:	eb04 0509 	add.w	r5, r4, r9
9001b458:	2b00      	cmp	r3, #0
9001b45a:	f000 8096 	beq.w	9001b58a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001b45e:	7877      	ldrb	r7, [r6, #1]
9001b460:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001b464:	4427      	add	r7, r4
9001b466:	2900      	cmp	r1, #0
9001b468:	f000 8097 	beq.w	9001b59a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001b46c:	18b0      	adds	r0, r6, r2
9001b46e:	5cb2      	ldrb	r2, [r6, r2]
9001b470:	7840      	ldrb	r0, [r0, #1]
9001b472:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b476:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001b47a:	4422      	add	r2, r4
9001b47c:	4420      	add	r0, r4
9001b47e:	b29b      	uxth	r3, r3
9001b480:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001b482:	b289      	uxth	r1, r1
9001b484:	f895 b002 	ldrb.w	fp, [r5, #2]
9001b488:	f8b6 c000 	ldrh.w	ip, [r6]
9001b48c:	fb03 f801 	mul.w	r8, r3, r1
9001b490:	011b      	lsls	r3, r3, #4
9001b492:	78be      	ldrb	r6, [r7, #2]
9001b494:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001b498:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001b49c:	eba3 0308 	sub.w	r3, r3, r8
9001b4a0:	f814 9009 	ldrb.w	r9, [r4, r9]
9001b4a4:	b289      	uxth	r1, r1
9001b4a6:	b29b      	uxth	r3, r3
9001b4a8:	ebae 0e01 	sub.w	lr, lr, r1
9001b4ac:	435e      	muls	r6, r3
9001b4ae:	fa1f fe8e 	uxth.w	lr, lr
9001b4b2:	9310      	str	r3, [sp, #64]	; 0x40
9001b4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b4b6:	fb0e 660b 	mla	r6, lr, fp, r6
9001b4ba:	f892 b002 	ldrb.w	fp, [r2, #2]
9001b4be:	fb01 660b 	mla	r6, r1, fp, r6
9001b4c2:	f890 b002 	ldrb.w	fp, [r0, #2]
9001b4c6:	fb08 660b 	mla	r6, r8, fp, r6
9001b4ca:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001b4ce:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001b4d2:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001b4d6:	fb1b fb03 	smulbb	fp, fp, r3
9001b4da:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b4dc:	fb06 b60a 	mla	r6, r6, sl, fp
9001b4e0:	f895 b001 	ldrb.w	fp, [r5, #1]
9001b4e4:	787d      	ldrb	r5, [r7, #1]
9001b4e6:	783f      	ldrb	r7, [r7, #0]
9001b4e8:	b2b6      	uxth	r6, r6
9001b4ea:	435d      	muls	r5, r3
9001b4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b4ee:	fb0e 550b 	mla	r5, lr, fp, r5
9001b4f2:	f892 b001 	ldrb.w	fp, [r2, #1]
9001b4f6:	fb01 550b 	mla	r5, r1, fp, r5
9001b4fa:	f890 b001 	ldrb.w	fp, [r0, #1]
9001b4fe:	fb08 550b 	mla	r5, r8, fp, r5
9001b502:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001b506:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001b50a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001b50e:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001b512:	fa5f fc8c 	uxtb.w	ip, ip
9001b516:	fb1b fb03 	smulbb	fp, fp, r3
9001b51a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b51c:	437b      	muls	r3, r7
9001b51e:	7817      	ldrb	r7, [r2, #0]
9001b520:	fb05 b50a 	mla	r5, r5, sl, fp
9001b524:	fb0e 3309 	mla	r3, lr, r9, r3
9001b528:	b2ad      	uxth	r5, r5
9001b52a:	fb01 3307 	mla	r3, r1, r7, r3
9001b52e:	7807      	ldrb	r7, [r0, #0]
9001b530:	f105 0b01 	add.w	fp, r5, #1
9001b534:	fb08 3707 	mla	r7, r8, r7, r3
9001b538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b53a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001b53e:	fb1c fc03 	smulbb	ip, ip, r3
9001b542:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001b546:	1c73      	adds	r3, r6, #1
9001b548:	096d      	lsrs	r5, r5, #5
9001b54a:	fb07 c70a 	mla	r7, r7, sl, ip
9001b54e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001b552:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b556:	b2bf      	uxth	r7, r7
9001b558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001b55a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001b55e:	1c7a      	adds	r2, r7, #1
9001b560:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001b564:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001b568:	4316      	orrs	r6, r2
9001b56a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001b56c:	432e      	orrs	r6, r5
9001b56e:	f823 6b02 	strh.w	r6, [r3], #2
9001b572:	930c      	str	r3, [sp, #48]	; 0x30
9001b574:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001b576:	4413      	add	r3, r2
9001b578:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001b57a:	931f      	str	r3, [sp, #124]	; 0x7c
9001b57c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b57e:	4413      	add	r3, r2
9001b580:	9320      	str	r3, [sp, #128]	; 0x80
9001b582:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b584:	3b01      	subs	r3, #1
9001b586:	9311      	str	r3, [sp, #68]	; 0x44
9001b588:	e6db      	b.n	9001b342 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001b58a:	b149      	cbz	r1, 9001b5a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001b58c:	5cb2      	ldrb	r2, [r6, r2]
9001b58e:	4628      	mov	r0, r5
9001b590:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b594:	4422      	add	r2, r4
9001b596:	462f      	mov	r7, r5
9001b598:	e771      	b.n	9001b47e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001b59a:	4628      	mov	r0, r5
9001b59c:	462a      	mov	r2, r5
9001b59e:	e76e      	b.n	9001b47e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001b5a0:	4628      	mov	r0, r5
9001b5a2:	462a      	mov	r2, r5
9001b5a4:	e7f7      	b.n	9001b596 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001b5a6:	b015      	add	sp, #84	; 0x54
9001b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001b5ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001b5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b5b0:	880f      	ldrh	r7, [r1, #0]
9001b5b2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001b5b6:	023c      	lsls	r4, r7, #8
9001b5b8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001b5bc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001b5c0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001b5c4:	017c      	lsls	r4, r7, #5
9001b5c6:	00ff      	lsls	r7, r7, #3
9001b5c8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001b5cc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001b5d0:	b2ff      	uxtb	r7, r7
9001b5d2:	ea4b 0404 	orr.w	r4, fp, r4
9001b5d6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001b5da:	4327      	orrs	r7, r4
9001b5dc:	fb05 ca0e 	mla	sl, r5, lr, ip
9001b5e0:	2d00      	cmp	r5, #0
9001b5e2:	9701      	str	r7, [sp, #4]
9001b5e4:	eb02 080a 	add.w	r8, r2, sl
9001b5e8:	db7e      	blt.n	9001b6e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001b5ea:	45a9      	cmp	r9, r5
9001b5ec:	dd7c      	ble.n	9001b6e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001b5ee:	f1bc 0f00 	cmp.w	ip, #0
9001b5f2:	db77      	blt.n	9001b6e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001b5f4:	45e6      	cmp	lr, ip
9001b5f6:	dd75      	ble.n	9001b6e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001b5f8:	f812 700a 	ldrb.w	r7, [r2, sl]
9001b5fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001b600:	441f      	add	r7, r3
9001b602:	f11c 0201 	adds.w	r2, ip, #1
9001b606:	d472      	bmi.n	9001b6ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001b608:	4596      	cmp	lr, r2
9001b60a:	dd70      	ble.n	9001b6ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001b60c:	2800      	cmp	r0, #0
9001b60e:	d06e      	beq.n	9001b6ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001b610:	f898 4001 	ldrb.w	r4, [r8, #1]
9001b614:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001b618:	441c      	add	r4, r3
9001b61a:	3501      	adds	r5, #1
9001b61c:	d46b      	bmi.n	9001b6f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001b61e:	45a9      	cmp	r9, r5
9001b620:	dd69      	ble.n	9001b6f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001b622:	2e00      	cmp	r6, #0
9001b624:	d067      	beq.n	9001b6f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001b626:	f1bc 0f00 	cmp.w	ip, #0
9001b62a:	db62      	blt.n	9001b6f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001b62c:	45e6      	cmp	lr, ip
9001b62e:	dd60      	ble.n	9001b6f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001b630:	f818 500e 	ldrb.w	r5, [r8, lr]
9001b634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001b638:	441d      	add	r5, r3
9001b63a:	f11c 0201 	adds.w	r2, ip, #1
9001b63e:	d45d      	bmi.n	9001b6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001b640:	4596      	cmp	lr, r2
9001b642:	dd5b      	ble.n	9001b6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001b644:	2800      	cmp	r0, #0
9001b646:	d059      	beq.n	9001b6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001b648:	44c6      	add	lr, r8
9001b64a:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001b64e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b652:	4413      	add	r3, r2
9001b654:	b280      	uxth	r0, r0
9001b656:	f897 e002 	ldrb.w	lr, [r7, #2]
9001b65a:	b2b2      	uxth	r2, r6
9001b65c:	f897 9000 	ldrb.w	r9, [r7]
9001b660:	787f      	ldrb	r7, [r7, #1]
9001b662:	fb00 f602 	mul.w	r6, r0, r2
9001b666:	0100      	lsls	r0, r0, #4
9001b668:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001b66c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001b670:	1b80      	subs	r0, r0, r6
9001b672:	fa1f fc82 	uxth.w	ip, r2
9001b676:	b282      	uxth	r2, r0
9001b678:	78a0      	ldrb	r0, [r4, #2]
9001b67a:	eba8 080c 	sub.w	r8, r8, ip
9001b67e:	4350      	muls	r0, r2
9001b680:	fa1f f888 	uxth.w	r8, r8
9001b684:	fb08 0e0e 	mla	lr, r8, lr, r0
9001b688:	78a8      	ldrb	r0, [r5, #2]
9001b68a:	fb0c e000 	mla	r0, ip, r0, lr
9001b68e:	f893 e002 	ldrb.w	lr, [r3, #2]
9001b692:	fb06 0e0e 	mla	lr, r6, lr, r0
9001b696:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001b69a:	f894 e000 	ldrb.w	lr, [r4]
9001b69e:	fb02 fe0e 	mul.w	lr, r2, lr
9001b6a2:	fb08 e909 	mla	r9, r8, r9, lr
9001b6a6:	f895 e000 	ldrb.w	lr, [r5]
9001b6aa:	fb0c 990e 	mla	r9, ip, lr, r9
9001b6ae:	f893 e000 	ldrb.w	lr, [r3]
9001b6b2:	785b      	ldrb	r3, [r3, #1]
9001b6b4:	fb06 9e0e 	mla	lr, r6, lr, r9
9001b6b8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001b6bc:	ea4e 0e00 	orr.w	lr, lr, r0
9001b6c0:	7860      	ldrb	r0, [r4, #1]
9001b6c2:	4350      	muls	r0, r2
9001b6c4:	786a      	ldrb	r2, [r5, #1]
9001b6c6:	fb08 0007 	mla	r0, r8, r7, r0
9001b6ca:	fb0c 0202 	mla	r2, ip, r2, r0
9001b6ce:	fb06 2303 	mla	r3, r6, r3, r2
9001b6d2:	095b      	lsrs	r3, r3, #5
9001b6d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001b6d8:	ea4e 0303 	orr.w	r3, lr, r3
9001b6dc:	800b      	strh	r3, [r1, #0]
9001b6de:	b003      	add	sp, #12
9001b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b6e4:	af01      	add	r7, sp, #4
9001b6e6:	e78c      	b.n	9001b602 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001b6e8:	ac01      	add	r4, sp, #4
9001b6ea:	4627      	mov	r7, r4
9001b6ec:	e795      	b.n	9001b61a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001b6ee:	ac01      	add	r4, sp, #4
9001b6f0:	e793      	b.n	9001b61a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001b6f2:	ad01      	add	r5, sp, #4
9001b6f4:	e7a1      	b.n	9001b63a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001b6f6:	ab01      	add	r3, sp, #4
9001b6f8:	461d      	mov	r5, r3
9001b6fa:	e7ab      	b.n	9001b654 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001b6fc:	ab01      	add	r3, sp, #4
9001b6fe:	e7a9      	b.n	9001b654 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001b700 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b704:	b08f      	sub	sp, #60	; 0x3c
9001b706:	920c      	str	r2, [sp, #48]	; 0x30
9001b708:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001b70a:	900d      	str	r0, [sp, #52]	; 0x34
9001b70c:	910a      	str	r1, [sp, #40]	; 0x28
9001b70e:	6850      	ldr	r0, [r2, #4]
9001b710:	9306      	str	r3, [sp, #24]
9001b712:	6812      	ldr	r2, [r2, #0]
9001b714:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001b718:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001b71c:	fb00 1303 	mla	r3, r0, r3, r1
9001b720:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b724:	9307      	str	r3, [sp, #28]
9001b726:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b728:	681b      	ldr	r3, [r3, #0]
9001b72a:	9308      	str	r3, [sp, #32]
9001b72c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b72e:	685c      	ldr	r4, [r3, #4]
9001b730:	3404      	adds	r4, #4
9001b732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b734:	2b00      	cmp	r3, #0
9001b736:	dc03      	bgt.n	9001b740 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001b738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001b73a:	2b00      	cmp	r3, #0
9001b73c:	f340 81d5 	ble.w	9001baea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001b740:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001b742:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001b746:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001b74a:	1e48      	subs	r0, r1, #1
9001b74c:	1e56      	subs	r6, r2, #1
9001b74e:	9b06      	ldr	r3, [sp, #24]
9001b750:	2b00      	cmp	r3, #0
9001b752:	f340 80b6 	ble.w	9001b8c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001b756:	ea5f 472b 	movs.w	r7, fp, asr #16
9001b75a:	ea4f 4325 	mov.w	r3, r5, asr #16
9001b75e:	d406      	bmi.n	9001b76e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001b760:	4287      	cmp	r7, r0
9001b762:	da04      	bge.n	9001b76e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001b764:	2b00      	cmp	r3, #0
9001b766:	db02      	blt.n	9001b76e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001b768:	42b3      	cmp	r3, r6
9001b76a:	f2c0 80ab 	blt.w	9001b8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001b76e:	3701      	adds	r7, #1
9001b770:	f100 809c 	bmi.w	9001b8ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001b774:	42b9      	cmp	r1, r7
9001b776:	f2c0 8099 	blt.w	9001b8ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001b77a:	3301      	adds	r3, #1
9001b77c:	f100 8096 	bmi.w	9001b8ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001b780:	429a      	cmp	r2, r3
9001b782:	f2c0 8093 	blt.w	9001b8ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001b786:	9b06      	ldr	r3, [sp, #24]
9001b788:	930b      	str	r3, [sp, #44]	; 0x2c
9001b78a:	9b07      	ldr	r3, [sp, #28]
9001b78c:	9309      	str	r3, [sp, #36]	; 0x24
9001b78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b790:	2b00      	cmp	r3, #0
9001b792:	f340 80b4 	ble.w	9001b8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001b796:	9820      	ldr	r0, [sp, #128]	; 0x80
9001b798:	142e      	asrs	r6, r5, #16
9001b79a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001b79c:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001b7a0:	68c7      	ldr	r7, [r0, #12]
9001b7a2:	ea5f 402b 	movs.w	r0, fp, asr #16
9001b7a6:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001b7aa:	6892      	ldr	r2, [r2, #8]
9001b7ac:	f100 80fb 	bmi.w	9001b9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001b7b0:	f102 3cff 	add.w	ip, r2, #4294967295
9001b7b4:	4560      	cmp	r0, ip
9001b7b6:	f280 80f6 	bge.w	9001b9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001b7ba:	2e00      	cmp	r6, #0
9001b7bc:	f2c0 80f3 	blt.w	9001b9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001b7c0:	f107 3cff 	add.w	ip, r7, #4294967295
9001b7c4:	4566      	cmp	r6, ip
9001b7c6:	f280 80ee 	bge.w	9001b9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001b7ca:	b212      	sxth	r2, r2
9001b7cc:	fb06 0002 	mla	r0, r6, r2, r0
9001b7d0:	9e08      	ldr	r6, [sp, #32]
9001b7d2:	1837      	adds	r7, r6, r0
9001b7d4:	5c30      	ldrb	r0, [r6, r0]
9001b7d6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001b7da:	eb04 0c08 	add.w	ip, r4, r8
9001b7de:	2b00      	cmp	r3, #0
9001b7e0:	f000 80d3 	beq.w	9001b98a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001b7e4:	787e      	ldrb	r6, [r7, #1]
9001b7e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001b7ea:	4426      	add	r6, r4
9001b7ec:	2900      	cmp	r1, #0
9001b7ee:	f000 80d4 	beq.w	9001b99a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b7f2:	18b8      	adds	r0, r7, r2
9001b7f4:	5cba      	ldrb	r2, [r7, r2]
9001b7f6:	7840      	ldrb	r0, [r0, #1]
9001b7f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b7fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001b800:	4422      	add	r2, r4
9001b802:	4420      	add	r0, r4
9001b804:	b29b      	uxth	r3, r3
9001b806:	78b7      	ldrb	r7, [r6, #2]
9001b808:	b289      	uxth	r1, r1
9001b80a:	f89c a002 	ldrb.w	sl, [ip, #2]
9001b80e:	f89c c001 	ldrb.w	ip, [ip, #1]
9001b812:	fb03 f901 	mul.w	r9, r3, r1
9001b816:	011b      	lsls	r3, r3, #4
9001b818:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001b81c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001b820:	eba3 0309 	sub.w	r3, r3, r9
9001b824:	b289      	uxth	r1, r1
9001b826:	b29b      	uxth	r3, r3
9001b828:	ebae 0e01 	sub.w	lr, lr, r1
9001b82c:	435f      	muls	r7, r3
9001b82e:	fa1f fe8e 	uxth.w	lr, lr
9001b832:	fb0e 770a 	mla	r7, lr, sl, r7
9001b836:	f892 a002 	ldrb.w	sl, [r2, #2]
9001b83a:	fb01 770a 	mla	r7, r1, sl, r7
9001b83e:	f890 a002 	ldrb.w	sl, [r0, #2]
9001b842:	fb09 7a0a 	mla	sl, r9, sl, r7
9001b846:	f814 7008 	ldrb.w	r7, [r4, r8]
9001b84a:	f896 8000 	ldrb.w	r8, [r6]
9001b84e:	7876      	ldrb	r6, [r6, #1]
9001b850:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001b854:	fb03 f808 	mul.w	r8, r3, r8
9001b858:	4373      	muls	r3, r6
9001b85a:	fb0e 8807 	mla	r8, lr, r7, r8
9001b85e:	7817      	ldrb	r7, [r2, #0]
9001b860:	fb0e 330c 	mla	r3, lr, ip, r3
9001b864:	fb01 8807 	mla	r8, r1, r7, r8
9001b868:	7807      	ldrb	r7, [r0, #0]
9001b86a:	fb09 8707 	mla	r7, r9, r7, r8
9001b86e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b872:	ea47 070a 	orr.w	r7, r7, sl
9001b876:	f892 a001 	ldrb.w	sl, [r2, #1]
9001b87a:	fb01 310a 	mla	r1, r1, sl, r3
9001b87e:	f890 a001 	ldrb.w	sl, [r0, #1]
9001b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b884:	fb09 1a0a 	mla	sl, r9, sl, r1
9001b888:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001b88c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001b890:	ea47 070a 	orr.w	r7, r7, sl
9001b894:	801f      	strh	r7, [r3, #0]
9001b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b898:	3302      	adds	r3, #2
9001b89a:	9309      	str	r3, [sp, #36]	; 0x24
9001b89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001b89e:	449b      	add	fp, r3
9001b8a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001b8a2:	441d      	add	r5, r3
9001b8a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b8a6:	3b01      	subs	r3, #1
9001b8a8:	930b      	str	r3, [sp, #44]	; 0x2c
9001b8aa:	e770      	b.n	9001b78e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001b8ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001b8ae:	449b      	add	fp, r3
9001b8b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001b8b2:	441d      	add	r5, r3
9001b8b4:	9b06      	ldr	r3, [sp, #24]
9001b8b6:	3b01      	subs	r3, #1
9001b8b8:	9306      	str	r3, [sp, #24]
9001b8ba:	9b07      	ldr	r3, [sp, #28]
9001b8bc:	3302      	adds	r3, #2
9001b8be:	9307      	str	r3, [sp, #28]
9001b8c0:	e745      	b.n	9001b74e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001b8c2:	d023      	beq.n	9001b90c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001b8c4:	9b06      	ldr	r3, [sp, #24]
9001b8c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001b8c8:	3b01      	subs	r3, #1
9001b8ca:	fb00 b003 	mla	r0, r0, r3, fp
9001b8ce:	1400      	asrs	r0, r0, #16
9001b8d0:	f53f af59 	bmi.w	9001b786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001b8d4:	3901      	subs	r1, #1
9001b8d6:	4288      	cmp	r0, r1
9001b8d8:	f6bf af55 	bge.w	9001b786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001b8dc:	991c      	ldr	r1, [sp, #112]	; 0x70
9001b8de:	fb01 5303 	mla	r3, r1, r3, r5
9001b8e2:	141b      	asrs	r3, r3, #16
9001b8e4:	f53f af4f 	bmi.w	9001b786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001b8e8:	3a01      	subs	r2, #1
9001b8ea:	4293      	cmp	r3, r2
9001b8ec:	f6bf af4b 	bge.w	9001b786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001b8f0:	9b06      	ldr	r3, [sp, #24]
9001b8f2:	9309      	str	r3, [sp, #36]	; 0x24
9001b8f4:	9b07      	ldr	r3, [sp, #28]
9001b8f6:	930b      	str	r3, [sp, #44]	; 0x2c
9001b8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b8fa:	2b00      	cmp	r3, #0
9001b8fc:	dc70      	bgt.n	9001b9e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001b8fe:	9b06      	ldr	r3, [sp, #24]
9001b900:	9a07      	ldr	r2, [sp, #28]
9001b902:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b906:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001b90a:	9307      	str	r3, [sp, #28]
9001b90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b90e:	2b00      	cmp	r3, #0
9001b910:	f340 80eb 	ble.w	9001baea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001b914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b918:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001b91a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b91e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b922:	eef0 6a62 	vmov.f32	s13, s5
9001b926:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b92a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b92e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b932:	ee16 ba90 	vmov	fp, s13
9001b936:	eef0 6a43 	vmov.f32	s13, s6
9001b93a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b93e:	ee16 5a90 	vmov	r5, s13
9001b942:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b946:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b94a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b94e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b952:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b956:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b95a:	ee12 2a90 	vmov	r2, s5
9001b95e:	eef0 2a47 	vmov.f32	s5, s14
9001b962:	fb92 f3f3 	sdiv	r3, r2, r3
9001b966:	ee13 2a10 	vmov	r2, s6
9001b96a:	931b      	str	r3, [sp, #108]	; 0x6c
9001b96c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001b96e:	eeb0 3a67 	vmov.f32	s6, s15
9001b972:	fb92 f3f3 	sdiv	r3, r2, r3
9001b976:	931c      	str	r3, [sp, #112]	; 0x70
9001b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b97a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001b97c:	3b01      	subs	r3, #1
9001b97e:	930a      	str	r3, [sp, #40]	; 0x28
9001b980:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001b982:	bf08      	it	eq
9001b984:	4613      	moveq	r3, r2
9001b986:	9306      	str	r3, [sp, #24]
9001b988:	e6d3      	b.n	9001b732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001b98a:	b149      	cbz	r1, 9001b9a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001b98c:	5cba      	ldrb	r2, [r7, r2]
9001b98e:	4660      	mov	r0, ip
9001b990:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001b994:	4422      	add	r2, r4
9001b996:	4666      	mov	r6, ip
9001b998:	e734      	b.n	9001b804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001b99a:	4660      	mov	r0, ip
9001b99c:	4662      	mov	r2, ip
9001b99e:	e731      	b.n	9001b804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001b9a0:	4660      	mov	r0, ip
9001b9a2:	4662      	mov	r2, ip
9001b9a4:	e7f7      	b.n	9001b996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001b9a6:	f110 0c01 	adds.w	ip, r0, #1
9001b9aa:	f53f af74 	bmi.w	9001b896 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001b9ae:	4562      	cmp	r2, ip
9001b9b0:	f6ff af71 	blt.w	9001b896 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001b9b4:	f116 0c01 	adds.w	ip, r6, #1
9001b9b8:	f53f af6d 	bmi.w	9001b896 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001b9bc:	4567      	cmp	r7, ip
9001b9be:	f6ff af6a 	blt.w	9001b896 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001b9c2:	b23f      	sxth	r7, r7
9001b9c4:	b212      	sxth	r2, r2
9001b9c6:	9701      	str	r7, [sp, #4]
9001b9c8:	9200      	str	r2, [sp, #0]
9001b9ca:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001b9ce:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001b9d2:	4623      	mov	r3, r4
9001b9d4:	980d      	ldr	r0, [sp, #52]	; 0x34
9001b9d6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001b9da:	f7ff fde7 	bl	9001b5ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001b9de:	e75a      	b.n	9001b896 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001b9e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001b9e2:	ea4f 462b 	mov.w	r6, fp, asr #16
9001b9e6:	1428      	asrs	r0, r5, #16
9001b9e8:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001b9ec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001b9f0:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001b9f4:	fb02 6000 	mla	r0, r2, r0, r6
9001b9f8:	9e08      	ldr	r6, [sp, #32]
9001b9fa:	f816 8000 	ldrb.w	r8, [r6, r0]
9001b9fe:	1837      	adds	r7, r6, r0
9001ba00:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001ba04:	eb04 0c08 	add.w	ip, r4, r8
9001ba08:	2b00      	cmp	r3, #0
9001ba0a:	d060      	beq.n	9001bace <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001ba0c:	787e      	ldrb	r6, [r7, #1]
9001ba0e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001ba12:	4426      	add	r6, r4
9001ba14:	2900      	cmp	r1, #0
9001ba16:	d062      	beq.n	9001bade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001ba18:	18b8      	adds	r0, r7, r2
9001ba1a:	5cba      	ldrb	r2, [r7, r2]
9001ba1c:	7840      	ldrb	r0, [r0, #1]
9001ba1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001ba22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001ba26:	4422      	add	r2, r4
9001ba28:	4420      	add	r0, r4
9001ba2a:	b29b      	uxth	r3, r3
9001ba2c:	78b7      	ldrb	r7, [r6, #2]
9001ba2e:	b289      	uxth	r1, r1
9001ba30:	f89c a002 	ldrb.w	sl, [ip, #2]
9001ba34:	f89c c001 	ldrb.w	ip, [ip, #1]
9001ba38:	fb03 f901 	mul.w	r9, r3, r1
9001ba3c:	011b      	lsls	r3, r3, #4
9001ba3e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001ba42:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001ba46:	eba3 0309 	sub.w	r3, r3, r9
9001ba4a:	b289      	uxth	r1, r1
9001ba4c:	b29b      	uxth	r3, r3
9001ba4e:	ebae 0e01 	sub.w	lr, lr, r1
9001ba52:	435f      	muls	r7, r3
9001ba54:	fa1f fe8e 	uxth.w	lr, lr
9001ba58:	fb0e 770a 	mla	r7, lr, sl, r7
9001ba5c:	f892 a002 	ldrb.w	sl, [r2, #2]
9001ba60:	fb01 770a 	mla	r7, r1, sl, r7
9001ba64:	f890 a002 	ldrb.w	sl, [r0, #2]
9001ba68:	fb09 7a0a 	mla	sl, r9, sl, r7
9001ba6c:	f814 7008 	ldrb.w	r7, [r4, r8]
9001ba70:	f896 8000 	ldrb.w	r8, [r6]
9001ba74:	7876      	ldrb	r6, [r6, #1]
9001ba76:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001ba7a:	fb03 f808 	mul.w	r8, r3, r8
9001ba7e:	4373      	muls	r3, r6
9001ba80:	7856      	ldrb	r6, [r2, #1]
9001ba82:	fb0e 8807 	mla	r8, lr, r7, r8
9001ba86:	7817      	ldrb	r7, [r2, #0]
9001ba88:	fb0e 330c 	mla	r3, lr, ip, r3
9001ba8c:	fb01 8807 	mla	r8, r1, r7, r8
9001ba90:	7807      	ldrb	r7, [r0, #0]
9001ba92:	fb01 3306 	mla	r3, r1, r6, r3
9001ba96:	fb09 8707 	mla	r7, r9, r7, r8
9001ba9a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ba9e:	ea47 070a 	orr.w	r7, r7, sl
9001baa2:	f890 a001 	ldrb.w	sl, [r0, #1]
9001baa6:	fb09 3a0a 	mla	sl, r9, sl, r3
9001baaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001baac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001bab0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001bab4:	ea47 070a 	orr.w	r7, r7, sl
9001bab8:	f823 7b02 	strh.w	r7, [r3], #2
9001babc:	930b      	str	r3, [sp, #44]	; 0x2c
9001babe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001bac0:	449b      	add	fp, r3
9001bac2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001bac4:	441d      	add	r5, r3
9001bac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bac8:	3b01      	subs	r3, #1
9001baca:	9309      	str	r3, [sp, #36]	; 0x24
9001bacc:	e714      	b.n	9001b8f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001bace:	b149      	cbz	r1, 9001bae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001bad0:	5cba      	ldrb	r2, [r7, r2]
9001bad2:	4660      	mov	r0, ip
9001bad4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001bad8:	4422      	add	r2, r4
9001bada:	4666      	mov	r6, ip
9001badc:	e7a5      	b.n	9001ba2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001bade:	4660      	mov	r0, ip
9001bae0:	4662      	mov	r2, ip
9001bae2:	e7a2      	b.n	9001ba2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001bae4:	4660      	mov	r0, ip
9001bae6:	4662      	mov	r2, ip
9001bae8:	e7f7      	b.n	9001bada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001baea:	b00f      	add	sp, #60	; 0x3c
9001baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001baf0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001baf4:	b085      	sub	sp, #20
9001baf6:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001bafa:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001bafe:	9102      	str	r1, [sp, #8]
9001bb00:	2c00      	cmp	r4, #0
9001bb02:	fb04 710c 	mla	r1, r4, ip, r7
9001bb06:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001bb0a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001bb0e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001bb12:	eb02 0e01 	add.w	lr, r2, r1
9001bb16:	f2c0 8122 	blt.w	9001bd5e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001bb1a:	45a0      	cmp	r8, r4
9001bb1c:	f340 811f 	ble.w	9001bd5e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001bb20:	2f00      	cmp	r7, #0
9001bb22:	f2c0 811a 	blt.w	9001bd5a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001bb26:	45bc      	cmp	ip, r7
9001bb28:	f340 8117 	ble.w	9001bd5a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001bb2c:	5c52      	ldrb	r2, [r2, r1]
9001bb2e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001bb32:	1c7a      	adds	r2, r7, #1
9001bb34:	f100 8116 	bmi.w	9001bd64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001bb38:	4594      	cmp	ip, r2
9001bb3a:	f340 8113 	ble.w	9001bd64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001bb3e:	2e00      	cmp	r6, #0
9001bb40:	f000 8112 	beq.w	9001bd68 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001bb44:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001bb48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001bb4c:	3401      	adds	r4, #1
9001bb4e:	f100 810f 	bmi.w	9001bd70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001bb52:	45a0      	cmp	r8, r4
9001bb54:	f340 810c 	ble.w	9001bd70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001bb58:	2800      	cmp	r0, #0
9001bb5a:	f000 810c 	beq.w	9001bd76 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001bb5e:	2f00      	cmp	r7, #0
9001bb60:	f2c0 8104 	blt.w	9001bd6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001bb64:	45bc      	cmp	ip, r7
9001bb66:	f340 8101 	ble.w	9001bd6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001bb6a:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001bb6e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001bb72:	3701      	adds	r7, #1
9001bb74:	f100 8102 	bmi.w	9001bd7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001bb78:	45bc      	cmp	ip, r7
9001bb7a:	f340 80ff 	ble.w	9001bd7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001bb7e:	2e00      	cmp	r6, #0
9001bb80:	f000 80fe 	beq.w	9001bd80 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001bb84:	44f4      	add	ip, lr
9001bb86:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001bb8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001bb8e:	b2b6      	uxth	r6, r6
9001bb90:	b280      	uxth	r0, r0
9001bb92:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001bb96:	fb00 fe06 	mul.w	lr, r0, r6
9001bb9a:	0136      	lsls	r6, r6, #4
9001bb9c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001bba0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001bba4:	eba6 070e 	sub.w	r7, r6, lr
9001bba8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001bbac:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001bbb0:	b280      	uxth	r0, r0
9001bbb2:	b2bf      	uxth	r7, r7
9001bbb4:	1a1b      	subs	r3, r3, r0
9001bbb6:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001bbba:	fb0a f607 	mul.w	r6, sl, r7
9001bbbe:	b29b      	uxth	r3, r3
9001bbc0:	fb0b 6603 	mla	r6, fp, r3, r6
9001bbc4:	fb00 6609 	mla	r6, r0, r9, r6
9001bbc8:	fb0e 6608 	mla	r6, lr, r8, r6
9001bbcc:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001bbd0:	9600      	str	r6, [sp, #0]
9001bbd2:	2e00      	cmp	r6, #0
9001bbd4:	f000 80be 	beq.w	9001bd54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001bbd8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001bbdc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001bbe0:	9e02      	ldr	r6, [sp, #8]
9001bbe2:	fb0b fc0c 	mul.w	ip, fp, ip
9001bbe6:	fb0b f505 	mul.w	r5, fp, r5
9001bbea:	8836      	ldrh	r6, [r6, #0]
9001bbec:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001bbf0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001bbf4:	9501      	str	r5, [sp, #4]
9001bbf6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001bbfa:	44dc      	add	ip, fp
9001bbfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001bc00:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001bc04:	9503      	str	r5, [sp, #12]
9001bc06:	9d01      	ldr	r5, [sp, #4]
9001bc08:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001bc0c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001bc10:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001bc14:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001bc18:	fb0a fc0c 	mul.w	ip, sl, ip
9001bc1c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001bc20:	fb0a fa01 	mul.w	sl, sl, r1
9001bc24:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001bc28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001bc2c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001bc30:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001bc34:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001bc38:	4465      	add	r5, ip
9001bc3a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001bc3e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001bc42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001bc46:	fb09 fc0c 	mul.w	ip, r9, ip
9001bc4a:	0a2d      	lsrs	r5, r5, #8
9001bc4c:	fb09 f904 	mul.w	r9, r9, r4
9001bc50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001bc54:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001bc58:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001bc5c:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001bc60:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001bc64:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001bc68:	437d      	muls	r5, r7
9001bc6a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001bc6e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001bc72:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001bc76:	4461      	add	r1, ip
9001bc78:	fb08 f404 	mul.w	r4, r8, r4
9001bc7c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001bc80:	fb08 f802 	mul.w	r8, r8, r2
9001bc84:	0a09      	lsrs	r1, r1, #8
9001bc86:	0a22      	lsrs	r2, r4, #8
9001bc88:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001bc8c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001bc90:	fb07 f70a 	mul.w	r7, r7, sl
9001bc94:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001bc98:	4414      	add	r4, r2
9001bc9a:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001bc9e:	0a24      	lsrs	r4, r4, #8
9001bca0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001bca4:	9a03      	ldr	r2, [sp, #12]
9001bca6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001bcaa:	fb02 5503 	mla	r5, r2, r3, r5
9001bcae:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001bcb2:	9a00      	ldr	r2, [sp, #0]
9001bcb4:	fb04 540e 	mla	r4, r4, lr, r5
9001bcb8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001bcbc:	1235      	asrs	r5, r6, #8
9001bcbe:	fb01 4100 	mla	r1, r1, r0, r4
9001bcc2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001bcc6:	0a09      	lsrs	r1, r1, #8
9001bcc8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001bccc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001bcd0:	fb03 7101 	mla	r1, r3, r1, r7
9001bcd4:	fb0e 1e08 	mla	lr, lr, r8, r1
9001bcd8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001bcdc:	fb00 e101 	mla	r1, r0, r1, lr
9001bce0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001bce4:	b287      	uxth	r7, r0
9001bce6:	0a09      	lsrs	r1, r1, #8
9001bce8:	437a      	muls	r2, r7
9001bcea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001bcee:	1c53      	adds	r3, r2, #1
9001bcf0:	4321      	orrs	r1, r4
9001bcf2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001bcf6:	0c0a      	lsrs	r2, r1, #16
9001bcf8:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001bcfc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001bd00:	b2c8      	uxtb	r0, r1
9001bd02:	fb12 f207 	smulbb	r2, r2, r7
9001bd06:	fb14 f407 	smulbb	r4, r4, r7
9001bd0a:	b2db      	uxtb	r3, r3
9001bd0c:	fb10 f007 	smulbb	r0, r0, r7
9001bd10:	fb05 2503 	mla	r5, r5, r3, r2
9001bd14:	10f2      	asrs	r2, r6, #3
9001bd16:	00f6      	lsls	r6, r6, #3
9001bd18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001bd1c:	b2ad      	uxth	r5, r5
9001bd1e:	b2f6      	uxtb	r6, r6
9001bd20:	fb02 4203 	mla	r2, r2, r3, r4
9001bd24:	fb06 0303 	mla	r3, r6, r3, r0
9001bd28:	b294      	uxth	r4, r2
9001bd2a:	b299      	uxth	r1, r3
9001bd2c:	1c6b      	adds	r3, r5, #1
9001bd2e:	1c62      	adds	r2, r4, #1
9001bd30:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001bd34:	1c4b      	adds	r3, r1, #1
9001bd36:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001bd3a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001bd3e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001bd42:	0952      	lsrs	r2, r2, #5
9001bd44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001bd48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001bd4c:	432b      	orrs	r3, r5
9001bd4e:	4313      	orrs	r3, r2
9001bd50:	9a02      	ldr	r2, [sp, #8]
9001bd52:	8013      	strh	r3, [r2, #0]
9001bd54:	b005      	add	sp, #20
9001bd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001bd5a:	2500      	movs	r5, #0
9001bd5c:	e6e9      	b.n	9001bb32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001bd5e:	2100      	movs	r1, #0
9001bd60:	460d      	mov	r5, r1
9001bd62:	e6f3      	b.n	9001bb4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001bd64:	2100      	movs	r1, #0
9001bd66:	e6f1      	b.n	9001bb4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001bd68:	4631      	mov	r1, r6
9001bd6a:	e6ef      	b.n	9001bb4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001bd6c:	2400      	movs	r4, #0
9001bd6e:	e700      	b.n	9001bb72 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001bd70:	2200      	movs	r2, #0
9001bd72:	4614      	mov	r4, r2
9001bd74:	e70b      	b.n	9001bb8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001bd76:	4602      	mov	r2, r0
9001bd78:	4604      	mov	r4, r0
9001bd7a:	e708      	b.n	9001bb8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001bd7c:	2200      	movs	r2, #0
9001bd7e:	e706      	b.n	9001bb8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001bd80:	4632      	mov	r2, r6
9001bd82:	e704      	b.n	9001bb8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001bd84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bd88:	b09f      	sub	sp, #124	; 0x7c
9001bd8a:	921b      	str	r2, [sp, #108]	; 0x6c
9001bd8c:	9309      	str	r3, [sp, #36]	; 0x24
9001bd8e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001bd90:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001bd94:	901d      	str	r0, [sp, #116]	; 0x74
9001bd96:	931c      	str	r3, [sp, #112]	; 0x70
9001bd98:	6850      	ldr	r0, [r2, #4]
9001bd9a:	9119      	str	r1, [sp, #100]	; 0x64
9001bd9c:	6812      	ldr	r2, [r2, #0]
9001bd9e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001bda0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001bda4:	fb00 1303 	mla	r3, r0, r3, r1
9001bda8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001bdac:	930c      	str	r3, [sp, #48]	; 0x30
9001bdae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001bdb0:	681b      	ldr	r3, [r3, #0]
9001bdb2:	9312      	str	r3, [sp, #72]	; 0x48
9001bdb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001bdb6:	685e      	ldr	r6, [r3, #4]
9001bdb8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001bdbc:	3604      	adds	r6, #4
9001bdbe:	930d      	str	r3, [sp, #52]	; 0x34
9001bdc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001bdc2:	2b00      	cmp	r3, #0
9001bdc4:	dc03      	bgt.n	9001bdce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001bdc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001bdc8:	2b00      	cmp	r3, #0
9001bdca:	f340 8387 	ble.w	9001c4dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001bdce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001bdd0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001bdd4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001bdd8:	1e48      	subs	r0, r1, #1
9001bdda:	1e57      	subs	r7, r2, #1
9001bddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bdde:	2b00      	cmp	r3, #0
9001bde0:	f340 8194 	ble.w	9001c10c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001bde4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001bde6:	142b      	asrs	r3, r5, #16
9001bde8:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001bdec:	d406      	bmi.n	9001bdfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001bdee:	4584      	cmp	ip, r0
9001bdf0:	da04      	bge.n	9001bdfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001bdf2:	2b00      	cmp	r3, #0
9001bdf4:	db02      	blt.n	9001bdfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001bdf6:	42bb      	cmp	r3, r7
9001bdf8:	f2c0 8189 	blt.w	9001c10e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001bdfc:	f11c 0c01 	adds.w	ip, ip, #1
9001be00:	f100 8177 	bmi.w	9001c0f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001be04:	4561      	cmp	r1, ip
9001be06:	f2c0 8174 	blt.w	9001c0f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001be0a:	3301      	adds	r3, #1
9001be0c:	f100 8171 	bmi.w	9001c0f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001be10:	429a      	cmp	r2, r3
9001be12:	f2c0 816e 	blt.w	9001c0f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001be16:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001be18:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001be1a:	931a      	str	r3, [sp, #104]	; 0x68
9001be1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001be1e:	2b00      	cmp	r3, #0
9001be20:	f340 8193 	ble.w	9001c14a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001be24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001be26:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001be2a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001be2e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001be32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001be34:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001be38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001be3a:	141b      	asrs	r3, r3, #16
9001be3c:	f100 81d6 	bmi.w	9001c1ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001be40:	f100 38ff 	add.w	r8, r0, #4294967295
9001be44:	4543      	cmp	r3, r8
9001be46:	f280 81d1 	bge.w	9001c1ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001be4a:	f1bc 0f00 	cmp.w	ip, #0
9001be4e:	f2c0 81cd 	blt.w	9001c1ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001be52:	f10e 38ff 	add.w	r8, lr, #4294967295
9001be56:	45c4      	cmp	ip, r8
9001be58:	f280 81c8 	bge.w	9001c1ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001be5c:	b200      	sxth	r0, r0
9001be5e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001be60:	fb0c 3300 	mla	r3, ip, r0, r3
9001be64:	eb04 0803 	add.w	r8, r4, r3
9001be68:	5ce3      	ldrb	r3, [r4, r3]
9001be6a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001be6e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001be72:	2a00      	cmp	r2, #0
9001be74:	f000 81af 	beq.w	9001c1d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001be78:	f898 c001 	ldrb.w	ip, [r8, #1]
9001be7c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001be80:	940e      	str	r4, [sp, #56]	; 0x38
9001be82:	0e24      	lsrs	r4, r4, #24
9001be84:	9415      	str	r4, [sp, #84]	; 0x54
9001be86:	b179      	cbz	r1, 9001bea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001be88:	eb08 0c00 	add.w	ip, r8, r0
9001be8c:	f818 0000 	ldrb.w	r0, [r8, r0]
9001be90:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001be94:	900a      	str	r0, [sp, #40]	; 0x28
9001be96:	0e00      	lsrs	r0, r0, #24
9001be98:	9013      	str	r0, [sp, #76]	; 0x4c
9001be9a:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001be9e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001bea2:	900f      	str	r0, [sp, #60]	; 0x3c
9001bea4:	0e00      	lsrs	r0, r0, #24
9001bea6:	9016      	str	r0, [sp, #88]	; 0x58
9001bea8:	b292      	uxth	r2, r2
9001beaa:	9815      	ldr	r0, [sp, #84]	; 0x54
9001beac:	b289      	uxth	r1, r1
9001beae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001beb0:	fb02 f901 	mul.w	r9, r2, r1
9001beb4:	0112      	lsls	r2, r2, #4
9001beb6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001beba:	eba2 0809 	sub.w	r8, r2, r9
9001bebe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001bec2:	b289      	uxth	r1, r1
9001bec4:	fa1f f888 	uxth.w	r8, r8
9001bec8:	1a52      	subs	r2, r2, r1
9001beca:	fb08 f000 	mul.w	r0, r8, r0
9001bece:	b292      	uxth	r2, r2
9001bed0:	fb02 000e 	mla	r0, r2, lr, r0
9001bed4:	fb01 0004 	mla	r0, r1, r4, r0
9001bed8:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001beda:	fb09 0004 	mla	r0, r9, r4, r0
9001bede:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001bee2:	2800      	cmp	r0, #0
9001bee4:	f000 80fa 	beq.w	9001c0dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001bee8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001beec:	d01b      	beq.n	9001bf26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001beee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001bef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001bef6:	fb0e fa0a 	mul.w	sl, lr, sl
9001befa:	fb0e fe03 	mul.w	lr, lr, r3
9001befe:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001bf02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001bf06:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001bf0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001bf0e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001bf12:	4453      	add	r3, sl
9001bf14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001bf18:	0a1b      	lsrs	r3, r3, #8
9001bf1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001bf1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001bf22:	ea43 030c 	orr.w	r3, r3, ip
9001bf26:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001bf28:	2cff      	cmp	r4, #255	; 0xff
9001bf2a:	d021      	beq.n	9001bf70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001bf2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001bf2e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001bf32:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001bf34:	fb04 fb0b 	mul.w	fp, r4, fp
9001bf38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001bf3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001bf3e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001bf40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001bf44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001bf48:	fb04 fa0a 	mul.w	sl, r4, sl
9001bf4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001bf50:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001bf54:	44de      	add	lr, fp
9001bf56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001bf5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001bf5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001bf62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001bf66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001bf6a:	ea4e 040a 	orr.w	r4, lr, sl
9001bf6e:	940e      	str	r4, [sp, #56]	; 0x38
9001bf70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001bf72:	2cff      	cmp	r4, #255	; 0xff
9001bf74:	d021      	beq.n	9001bfba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001bf76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001bf78:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001bf7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001bf7e:	fb04 fb0b 	mul.w	fp, r4, fp
9001bf82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001bf84:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001bf88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001bf8a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001bf8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001bf92:	fb04 fa0a 	mul.w	sl, r4, sl
9001bf96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001bf9a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001bf9e:	44de      	add	lr, fp
9001bfa0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001bfa4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001bfa8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001bfac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001bfb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001bfb4:	ea4e 040a 	orr.w	r4, lr, sl
9001bfb8:	940a      	str	r4, [sp, #40]	; 0x28
9001bfba:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001bfbc:	2cff      	cmp	r4, #255	; 0xff
9001bfbe:	d021      	beq.n	9001c004 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001bfc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001bfc2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001bfc6:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001bfc8:	fb04 fb0b 	mul.w	fp, r4, fp
9001bfcc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001bfce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001bfd2:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001bfd4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001bfd8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001bfdc:	fb04 fa0a 	mul.w	sl, r4, sl
9001bfe0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001bfe4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001bfe8:	44de      	add	lr, fp
9001bfea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001bfee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001bff2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001bff6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001bffa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001bffe:	ea4e 040a 	orr.w	r4, lr, sl
9001c002:	940f      	str	r4, [sp, #60]	; 0x3c
9001c004:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001c006:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001c00a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c00e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001c012:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c014:	fb08 fc0c 	mul.w	ip, r8, ip
9001c018:	fb02 cc0e 	mla	ip, r2, lr, ip
9001c01c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001c020:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001c022:	fb01 cc0e 	mla	ip, r1, lr, ip
9001c026:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001c02a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001c02c:	fb09 cc0e 	mla	ip, r9, lr, ip
9001c030:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001c034:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c036:	fb08 f80e 	mul.w	r8, r8, lr
9001c03a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c03e:	fb02 8303 	mla	r3, r2, r3, r8
9001c042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001c044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c048:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001c04c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c04e:	fb01 330a 	mla	r3, r1, sl, r3
9001c052:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001c056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c058:	fb09 3901 	mla	r9, r9, r1, r3
9001c05c:	883b      	ldrh	r3, [r7, #0]
9001c05e:	4342      	muls	r2, r0
9001c060:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001c064:	1c50      	adds	r0, r2, #1
9001c066:	1219      	asrs	r1, r3, #8
9001c068:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001c06c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001c070:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c074:	ea4c 0c09 	orr.w	ip, ip, r9
9001c078:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001c07c:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001c080:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001c084:	b2c0      	uxtb	r0, r0
9001c086:	fb12 f204 	smulbb	r2, r2, r4
9001c08a:	fa5f fc8c 	uxtb.w	ip, ip
9001c08e:	fb1e fe04 	smulbb	lr, lr, r4
9001c092:	fb01 2100 	mla	r1, r1, r0, r2
9001c096:	10da      	asrs	r2, r3, #3
9001c098:	fb1c fc04 	smulbb	ip, ip, r4
9001c09c:	00db      	lsls	r3, r3, #3
9001c09e:	b289      	uxth	r1, r1
9001c0a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c0a4:	b2db      	uxtb	r3, r3
9001c0a6:	fb02 e200 	mla	r2, r2, r0, lr
9001c0aa:	fb03 c300 	mla	r3, r3, r0, ip
9001c0ae:	b292      	uxth	r2, r2
9001c0b0:	fa1f fc83 	uxth.w	ip, r3
9001c0b4:	1c4b      	adds	r3, r1, #1
9001c0b6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001c0ba:	f10c 0301 	add.w	r3, ip, #1
9001c0be:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001c0c2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001c0c6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c0ca:	430b      	orrs	r3, r1
9001c0cc:	1c51      	adds	r1, r2, #1
9001c0ce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001c0d2:	0952      	lsrs	r2, r2, #5
9001c0d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c0d8:	4313      	orrs	r3, r2
9001c0da:	803b      	strh	r3, [r7, #0]
9001c0dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001c0de:	3702      	adds	r7, #2
9001c0e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001c0e2:	441a      	add	r2, r3
9001c0e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c0e6:	441d      	add	r5, r3
9001c0e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001c0ea:	9229      	str	r2, [sp, #164]	; 0xa4
9001c0ec:	3b01      	subs	r3, #1
9001c0ee:	931a      	str	r3, [sp, #104]	; 0x68
9001c0f0:	e694      	b.n	9001be1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c0f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001c0f4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c0f6:	441c      	add	r4, r3
9001c0f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c0fa:	441d      	add	r5, r3
9001c0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c0fe:	9429      	str	r4, [sp, #164]	; 0xa4
9001c100:	3b01      	subs	r3, #1
9001c102:	9309      	str	r3, [sp, #36]	; 0x24
9001c104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c106:	3302      	adds	r3, #2
9001c108:	930c      	str	r3, [sp, #48]	; 0x30
9001c10a:	e667      	b.n	9001bddc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c10c:	d024      	beq.n	9001c158 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001c10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c110:	982b      	ldr	r0, [sp, #172]	; 0xac
9001c112:	3b01      	subs	r3, #1
9001c114:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c116:	fb00 4003 	mla	r0, r0, r3, r4
9001c11a:	1400      	asrs	r0, r0, #16
9001c11c:	f53f ae7b 	bmi.w	9001be16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c120:	3901      	subs	r1, #1
9001c122:	4288      	cmp	r0, r1
9001c124:	f6bf ae77 	bge.w	9001be16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c128:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001c12a:	fb01 5303 	mla	r3, r1, r3, r5
9001c12e:	141b      	asrs	r3, r3, #16
9001c130:	f53f ae71 	bmi.w	9001be16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c134:	3a01      	subs	r2, #1
9001c136:	4293      	cmp	r3, r2
9001c138:	f6bf ae6d 	bge.w	9001be16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c13c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001c140:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001c144:	f1bb 0f00 	cmp.w	fp, #0
9001c148:	dc70      	bgt.n	9001c22c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001c14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c14c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c152:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001c156:	930c      	str	r3, [sp, #48]	; 0x30
9001c158:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001c15a:	2b00      	cmp	r3, #0
9001c15c:	f340 81be 	ble.w	9001c4dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001c160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c164:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c166:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c16a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c16e:	eef0 6a62 	vmov.f32	s13, s5
9001c172:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c176:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c17a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c17e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001c182:	eef0 6a43 	vmov.f32	s13, s6
9001c186:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c18a:	ee16 5a90 	vmov	r5, s13
9001c18e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c192:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c196:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c19a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c19e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c1a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c1a6:	ee12 2a90 	vmov	r2, s5
9001c1aa:	eef0 2a47 	vmov.f32	s5, s14
9001c1ae:	fb92 f3f3 	sdiv	r3, r2, r3
9001c1b2:	ee13 2a10 	vmov	r2, s6
9001c1b6:	932b      	str	r3, [sp, #172]	; 0xac
9001c1b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c1ba:	eeb0 3a67 	vmov.f32	s6, s15
9001c1be:	fb92 f3f3 	sdiv	r3, r2, r3
9001c1c2:	932c      	str	r3, [sp, #176]	; 0xb0
9001c1c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001c1c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001c1c8:	3b01      	subs	r3, #1
9001c1ca:	9319      	str	r3, [sp, #100]	; 0x64
9001c1cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c1ce:	bf08      	it	eq
9001c1d0:	4613      	moveq	r3, r2
9001c1d2:	9309      	str	r3, [sp, #36]	; 0x24
9001c1d4:	e5f4      	b.n	9001bdc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001c1d6:	2900      	cmp	r1, #0
9001c1d8:	f43f ae66 	beq.w	9001bea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001c1dc:	f818 0000 	ldrb.w	r0, [r8, r0]
9001c1e0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001c1e4:	900a      	str	r0, [sp, #40]	; 0x28
9001c1e6:	0e00      	lsrs	r0, r0, #24
9001c1e8:	9013      	str	r0, [sp, #76]	; 0x4c
9001c1ea:	e65d      	b.n	9001bea8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001c1ec:	f113 0801 	adds.w	r8, r3, #1
9001c1f0:	f53f af74 	bmi.w	9001c0dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c1f4:	4540      	cmp	r0, r8
9001c1f6:	f6ff af71 	blt.w	9001c0dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c1fa:	f11c 0801 	adds.w	r8, ip, #1
9001c1fe:	f53f af6d 	bmi.w	9001c0dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c202:	45c6      	cmp	lr, r8
9001c204:	f6ff af6a 	blt.w	9001c0dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c208:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001c20a:	b200      	sxth	r0, r0
9001c20c:	9302      	str	r3, [sp, #8]
9001c20e:	fa0f f38e 	sxth.w	r3, lr
9001c212:	9000      	str	r0, [sp, #0]
9001c214:	9301      	str	r3, [sp, #4]
9001c216:	4633      	mov	r3, r6
9001c218:	981d      	ldr	r0, [sp, #116]	; 0x74
9001c21a:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c21e:	e9cd c203 	strd	ip, r2, [sp, #12]
9001c222:	4639      	mov	r1, r7
9001c224:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c226:	f7ff fc63 	bl	9001baf0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001c22a:	e757      	b.n	9001c0dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c22c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001c22e:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c232:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001c234:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001c238:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001c23a:	1427      	asrs	r7, r4, #16
9001c23c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c23e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c242:	142b      	asrs	r3, r5, #16
9001c244:	fb01 7303 	mla	r3, r1, r3, r7
9001c248:	18e7      	adds	r7, r4, r3
9001c24a:	5ce3      	ldrb	r3, [r4, r3]
9001c24c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001c250:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001c254:	2a00      	cmp	r2, #0
9001c256:	f000 8137 	beq.w	9001c4c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001c25a:	f897 e001 	ldrb.w	lr, [r7, #1]
9001c25e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001c262:	9410      	str	r4, [sp, #64]	; 0x40
9001c264:	0e24      	lsrs	r4, r4, #24
9001c266:	9417      	str	r4, [sp, #92]	; 0x5c
9001c268:	b170      	cbz	r0, 9001c288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001c26a:	eb07 0e01 	add.w	lr, r7, r1
9001c26e:	5c79      	ldrb	r1, [r7, r1]
9001c270:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c274:	910b      	str	r1, [sp, #44]	; 0x2c
9001c276:	0e09      	lsrs	r1, r1, #24
9001c278:	9114      	str	r1, [sp, #80]	; 0x50
9001c27a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001c27e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c282:	9111      	str	r1, [sp, #68]	; 0x44
9001c284:	0e09      	lsrs	r1, r1, #24
9001c286:	9118      	str	r1, [sp, #96]	; 0x60
9001c288:	b292      	uxth	r2, r2
9001c28a:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001c28c:	b280      	uxth	r0, r0
9001c28e:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c290:	fb02 f800 	mul.w	r8, r2, r0
9001c294:	0112      	lsls	r2, r2, #4
9001c296:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001c29a:	eba2 0e08 	sub.w	lr, r2, r8
9001c29e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001c2a2:	b280      	uxth	r0, r0
9001c2a4:	fa1f fe8e 	uxth.w	lr, lr
9001c2a8:	1a12      	subs	r2, r2, r0
9001c2aa:	fb0e f101 	mul.w	r1, lr, r1
9001c2ae:	b292      	uxth	r2, r2
9001c2b0:	fb02 110c 	mla	r1, r2, ip, r1
9001c2b4:	fb00 1104 	mla	r1, r0, r4, r1
9001c2b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001c2ba:	fb08 1104 	mla	r1, r8, r4, r1
9001c2be:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001c2c2:	2900      	cmp	r1, #0
9001c2c4:	f000 80f5 	beq.w	9001c4b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001c2c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001c2cc:	d019      	beq.n	9001c302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001c2ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001c2d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c2d6:	fb0c fa0a 	mul.w	sl, ip, sl
9001c2da:	fb0c fc03 	mul.w	ip, ip, r3
9001c2de:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001c2e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001c2e6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001c2ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001c2ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001c2f2:	4453      	add	r3, sl
9001c2f4:	0a3f      	lsrs	r7, r7, #8
9001c2f6:	0a1b      	lsrs	r3, r3, #8
9001c2f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001c2fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001c300:	433b      	orrs	r3, r7
9001c302:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c304:	2cff      	cmp	r4, #255	; 0xff
9001c306:	d020      	beq.n	9001c34a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001c308:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c30a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001c30e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c310:	4367      	muls	r7, r4
9001c312:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c314:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001c318:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c31c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c31e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001c322:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c326:	fb04 fa0a 	mul.w	sl, r4, sl
9001c32a:	44bc      	add	ip, r7
9001c32c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001c330:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c334:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001c338:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c33c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c340:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c344:	ea4c 040a 	orr.w	r4, ip, sl
9001c348:	9410      	str	r4, [sp, #64]	; 0x40
9001c34a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c34c:	2cff      	cmp	r4, #255	; 0xff
9001c34e:	d020      	beq.n	9001c392 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001c350:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c352:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001c356:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c358:	4367      	muls	r7, r4
9001c35a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c35c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001c360:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c364:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c366:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001c36a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c36e:	fb04 fa0a 	mul.w	sl, r4, sl
9001c372:	44bc      	add	ip, r7
9001c374:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001c378:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c37c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001c380:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c384:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c388:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c38c:	ea4c 040a 	orr.w	r4, ip, sl
9001c390:	940b      	str	r4, [sp, #44]	; 0x2c
9001c392:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001c394:	2cff      	cmp	r4, #255	; 0xff
9001c396:	d020      	beq.n	9001c3da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001c398:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c39a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001c39e:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001c3a0:	4367      	muls	r7, r4
9001c3a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c3a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001c3a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c3ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001c3ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001c3b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c3b6:	fb04 fa0a 	mul.w	sl, r4, sl
9001c3ba:	44bc      	add	ip, r7
9001c3bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001c3c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c3c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001c3c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c3cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c3d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c3d4:	ea4c 040a 	orr.w	r4, ip, sl
9001c3d8:	9411      	str	r4, [sp, #68]	; 0x44
9001c3da:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c3dc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001c3e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c3e4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001c3e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c3ea:	fb0e f707 	mul.w	r7, lr, r7
9001c3ee:	fb02 770c 	mla	r7, r2, ip, r7
9001c3f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001c3f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c3f8:	fb00 770c 	mla	r7, r0, ip, r7
9001c3fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001c400:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c402:	fb08 770c 	mla	r7, r8, ip, r7
9001c406:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001c40a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c40c:	fb0e fe0c 	mul.w	lr, lr, ip
9001c410:	0a3f      	lsrs	r7, r7, #8
9001c412:	fb02 e303 	mla	r3, r2, r3, lr
9001c416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c418:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001c41c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001c420:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c422:	fb00 330a 	mla	r3, r0, sl, r3
9001c426:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001c42a:	f8b9 0000 	ldrh.w	r0, [r9]
9001c42e:	fb08 3c0c 	mla	ip, r8, ip, r3
9001c432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c434:	1202      	asrs	r2, r0, #8
9001c436:	434b      	muls	r3, r1
9001c438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c43c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001c440:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001c444:	1c59      	adds	r1, r3, #1
9001c446:	ea47 070c 	orr.w	r7, r7, ip
9001c44a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001c44e:	0c3b      	lsrs	r3, r7, #16
9001c450:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001c454:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001c458:	b2ff      	uxtb	r7, r7
9001c45a:	fb13 f304 	smulbb	r3, r3, r4
9001c45e:	b2c9      	uxtb	r1, r1
9001c460:	fb1c fc04 	smulbb	ip, ip, r4
9001c464:	fb02 3201 	mla	r2, r2, r1, r3
9001c468:	10c3      	asrs	r3, r0, #3
9001c46a:	fb17 f704 	smulbb	r7, r7, r4
9001c46e:	00c0      	lsls	r0, r0, #3
9001c470:	b292      	uxth	r2, r2
9001c472:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001c476:	b2c0      	uxtb	r0, r0
9001c478:	fb03 c301 	mla	r3, r3, r1, ip
9001c47c:	f102 0c01 	add.w	ip, r2, #1
9001c480:	fb00 7001 	mla	r0, r0, r1, r7
9001c484:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001c488:	b280      	uxth	r0, r0
9001c48a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001c48e:	b29b      	uxth	r3, r3
9001c490:	1c42      	adds	r2, r0, #1
9001c492:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001c496:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001c49a:	ea42 020c 	orr.w	r2, r2, ip
9001c49e:	f103 0c01 	add.w	ip, r3, #1
9001c4a2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001c4a6:	095b      	lsrs	r3, r3, #5
9001c4a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c4ac:	431a      	orrs	r2, r3
9001c4ae:	f8a9 2000 	strh.w	r2, [r9]
9001c4b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001c4b4:	f109 0902 	add.w	r9, r9, #2
9001c4b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001c4ba:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c4be:	441a      	add	r2, r3
9001c4c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c4c2:	9229      	str	r2, [sp, #164]	; 0xa4
9001c4c4:	441d      	add	r5, r3
9001c4c6:	e63d      	b.n	9001c144 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001c4c8:	2800      	cmp	r0, #0
9001c4ca:	f43f aedd 	beq.w	9001c288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001c4ce:	5c79      	ldrb	r1, [r7, r1]
9001c4d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c4d4:	910b      	str	r1, [sp, #44]	; 0x2c
9001c4d6:	0e09      	lsrs	r1, r1, #24
9001c4d8:	9114      	str	r1, [sp, #80]	; 0x50
9001c4da:	e6d5      	b.n	9001c288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001c4dc:	b01f      	add	sp, #124	; 0x7c
9001c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c4e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001c4e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c4e6:	b089      	sub	sp, #36	; 0x24
9001c4e8:	9101      	str	r1, [sp, #4]
9001c4ea:	9801      	ldr	r0, [sp, #4]
9001c4ec:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001c4f0:	8800      	ldrh	r0, [r0, #0]
9001c4f2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001c4f6:	1206      	asrs	r6, r0, #8
9001c4f8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001c4fc:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001c500:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c504:	9602      	str	r6, [sp, #8]
9001c506:	10c6      	asrs	r6, r0, #3
9001c508:	00c0      	lsls	r0, r0, #3
9001c50a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c50e:	b2c0      	uxtb	r0, r0
9001c510:	9603      	str	r6, [sp, #12]
9001c512:	9004      	str	r0, [sp, #16]
9001c514:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001c518:	fb07 100c 	mla	r0, r7, ip, r1
9001c51c:	2f00      	cmp	r7, #0
9001c51e:	eb02 0e00 	add.w	lr, r2, r0
9001c522:	f2c0 810a 	blt.w	9001c73a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001c526:	45b8      	cmp	r8, r7
9001c528:	f340 8107 	ble.w	9001c73a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001c52c:	2900      	cmp	r1, #0
9001c52e:	f2c0 8102 	blt.w	9001c736 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001c532:	458c      	cmp	ip, r1
9001c534:	f340 80ff 	ble.w	9001c736 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001c538:	5c12      	ldrb	r2, [r2, r0]
9001c53a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001c53e:	1c4a      	adds	r2, r1, #1
9001c540:	f100 80fe 	bmi.w	9001c740 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001c544:	4594      	cmp	ip, r2
9001c546:	f340 80fb 	ble.w	9001c740 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001c54a:	2d00      	cmp	r5, #0
9001c54c:	f000 80fa 	beq.w	9001c744 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001c550:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001c554:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001c558:	3701      	adds	r7, #1
9001c55a:	f100 80f7 	bmi.w	9001c74c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001c55e:	45b8      	cmp	r8, r7
9001c560:	f340 80f4 	ble.w	9001c74c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001c564:	2c00      	cmp	r4, #0
9001c566:	f000 80f4 	beq.w	9001c752 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001c56a:	2900      	cmp	r1, #0
9001c56c:	eb0e 020c 	add.w	r2, lr, ip
9001c570:	f2c0 80ea 	blt.w	9001c748 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001c574:	458c      	cmp	ip, r1
9001c576:	f340 80e7 	ble.w	9001c748 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001c57a:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001c57e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001c582:	3101      	adds	r1, #1
9001c584:	f100 80e8 	bmi.w	9001c758 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001c588:	458c      	cmp	ip, r1
9001c58a:	f340 80e5 	ble.w	9001c758 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001c58e:	2d00      	cmp	r5, #0
9001c590:	f000 80e4 	beq.w	9001c75c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001c594:	7852      	ldrb	r2, [r2, #1]
9001c596:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001c59a:	0e0b      	lsrs	r3, r1, #24
9001c59c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001c5a0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001c5a4:	9300      	str	r3, [sp, #0]
9001c5a6:	b2a4      	uxth	r4, r4
9001c5a8:	b2ab      	uxth	r3, r5
9001c5aa:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001c5ae:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001c5b2:	fb03 f904 	mul.w	r9, r3, r4
9001c5b6:	011b      	lsls	r3, r3, #4
9001c5b8:	fb0a f505 	mul.w	r5, sl, r5
9001c5bc:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001c5c0:	eba3 0e09 	sub.w	lr, r3, r9
9001c5c4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001c5c8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001c5cc:	0a28      	lsrs	r0, r5, #8
9001c5ce:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001c5d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001c5d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001c5da:	fb0a f303 	mul.w	r3, sl, r3
9001c5de:	fb08 f707 	mul.w	r7, r8, r7
9001c5e2:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001c5e6:	4405      	add	r5, r0
9001c5e8:	fb08 fc0c 	mul.w	ip, r8, ip
9001c5ec:	b2a4      	uxth	r4, r4
9001c5ee:	0a2d      	lsrs	r5, r5, #8
9001c5f0:	fa1f fe8e 	uxth.w	lr, lr
9001c5f4:	1b12      	subs	r2, r2, r4
9001c5f6:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001c5fa:	b292      	uxth	r2, r2
9001c5fc:	9005      	str	r0, [sp, #20]
9001c5fe:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001c602:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001c606:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001c60a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001c60e:	0a1b      	lsrs	r3, r3, #8
9001c610:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001c614:	9306      	str	r3, [sp, #24]
9001c616:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001c61a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001c61e:	4460      	add	r0, ip
9001c620:	fb0b f303 	mul.w	r3, fp, r3
9001c624:	fb0b f606 	mul.w	r6, fp, r6
9001c628:	0a00      	lsrs	r0, r0, #8
9001c62a:	0a1d      	lsrs	r5, r3, #8
9001c62c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001c630:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001c634:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001c638:	441d      	add	r5, r3
9001c63a:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001c63e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001c642:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001c646:	0a2d      	lsrs	r5, r5, #8
9001c648:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001c64c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001c650:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001c654:	0a36      	lsrs	r6, r6, #8
9001c656:	0a1b      	lsrs	r3, r3, #8
9001c658:	fb05 f50e 	mul.w	r5, r5, lr
9001c65c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001c660:	9307      	str	r3, [sp, #28]
9001c662:	0e0b      	lsrs	r3, r1, #24
9001c664:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001c668:	fb0e f606 	mul.w	r6, lr, r6
9001c66c:	435f      	muls	r7, r3
9001c66e:	4359      	muls	r1, r3
9001c670:	9b05      	ldr	r3, [sp, #20]
9001c672:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001c676:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001c67a:	fb03 5502 	mla	r5, r3, r2, r5
9001c67e:	9b06      	ldr	r3, [sp, #24]
9001c680:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c684:	fb0e fe0b 	mul.w	lr, lr, fp
9001c688:	44bc      	add	ip, r7
9001c68a:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001c68e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c692:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001c696:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001c69a:	0a09      	lsrs	r1, r1, #8
9001c69c:	fb0c 5509 	mla	r5, ip, r9, r5
9001c6a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001c6a4:	fb00 5504 	mla	r5, r0, r4, r5
9001c6a8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001c6ac:	9b07      	ldr	r3, [sp, #28]
9001c6ae:	fb02 6000 	mla	r0, r2, r0, r6
9001c6b2:	0a2d      	lsrs	r5, r5, #8
9001c6b4:	fb02 e20a 	mla	r2, r2, sl, lr
9001c6b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c6bc:	fb09 0001 	mla	r0, r9, r1, r0
9001c6c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001c6c4:	fb04 0003 	mla	r0, r4, r3, r0
9001c6c8:	9b00      	ldr	r3, [sp, #0]
9001c6ca:	fb04 2408 	mla	r4, r4, r8, r2
9001c6ce:	9a04      	ldr	r2, [sp, #16]
9001c6d0:	0a00      	lsrs	r0, r0, #8
9001c6d2:	fb09 4903 	mla	r9, r9, r3, r4
9001c6d6:	9b02      	ldr	r3, [sp, #8]
9001c6d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001c6dc:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001c6e0:	4305      	orrs	r5, r0
9001c6e2:	fa5f f989 	uxtb.w	r9, r9
9001c6e6:	fb03 f109 	mul.w	r1, r3, r9
9001c6ea:	9b03      	ldr	r3, [sp, #12]
9001c6ec:	fb03 f309 	mul.w	r3, r3, r9
9001c6f0:	fb02 f909 	mul.w	r9, r2, r9
9001c6f4:	1c4a      	adds	r2, r1, #1
9001c6f6:	1c58      	adds	r0, r3, #1
9001c6f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001c6fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001c700:	0c2a      	lsrs	r2, r5, #16
9001c702:	0a2b      	lsrs	r3, r5, #8
9001c704:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001c708:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001c70c:	0212      	lsls	r2, r2, #8
9001c70e:	00db      	lsls	r3, r3, #3
9001c710:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001c714:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c718:	4313      	orrs	r3, r2
9001c71a:	f109 0201 	add.w	r2, r9, #1
9001c71e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001c722:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001c726:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001c72a:	431d      	orrs	r5, r3
9001c72c:	9b01      	ldr	r3, [sp, #4]
9001c72e:	801d      	strh	r5, [r3, #0]
9001c730:	b009      	add	sp, #36	; 0x24
9001c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c736:	2000      	movs	r0, #0
9001c738:	e701      	b.n	9001c53e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001c73a:	2600      	movs	r6, #0
9001c73c:	4630      	mov	r0, r6
9001c73e:	e70b      	b.n	9001c558 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001c740:	2600      	movs	r6, #0
9001c742:	e709      	b.n	9001c558 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001c744:	462e      	mov	r6, r5
9001c746:	e707      	b.n	9001c558 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001c748:	2700      	movs	r7, #0
9001c74a:	e71a      	b.n	9001c582 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001c74c:	2100      	movs	r1, #0
9001c74e:	460f      	mov	r7, r1
9001c750:	e723      	b.n	9001c59a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001c752:	4621      	mov	r1, r4
9001c754:	4627      	mov	r7, r4
9001c756:	e720      	b.n	9001c59a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001c758:	2100      	movs	r1, #0
9001c75a:	e71e      	b.n	9001c59a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001c75c:	4629      	mov	r1, r5
9001c75e:	e71c      	b.n	9001c59a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001c760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c764:	b09b      	sub	sp, #108	; 0x6c
9001c766:	9218      	str	r2, [sp, #96]	; 0x60
9001c768:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001c76a:	9019      	str	r0, [sp, #100]	; 0x64
9001c76c:	9116      	str	r1, [sp, #88]	; 0x58
9001c76e:	6850      	ldr	r0, [r2, #4]
9001c770:	9307      	str	r3, [sp, #28]
9001c772:	6812      	ldr	r2, [r2, #0]
9001c774:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001c776:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001c77a:	fb00 1303 	mla	r3, r0, r3, r1
9001c77e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001c782:	930a      	str	r3, [sp, #40]	; 0x28
9001c784:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c786:	681b      	ldr	r3, [r3, #0]
9001c788:	930f      	str	r3, [sp, #60]	; 0x3c
9001c78a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c78c:	685e      	ldr	r6, [r3, #4]
9001c78e:	3604      	adds	r6, #4
9001c790:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001c792:	2b00      	cmp	r3, #0
9001c794:	dc03      	bgt.n	9001c79e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c796:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001c798:	2b00      	cmp	r3, #0
9001c79a:	f340 8373 	ble.w	9001ce84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001c79e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c7a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c7a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c7a8:	1e48      	subs	r0, r1, #1
9001c7aa:	1e57      	subs	r7, r2, #1
9001c7ac:	9b07      	ldr	r3, [sp, #28]
9001c7ae:	2b00      	cmp	r3, #0
9001c7b0:	f340 818f 	ble.w	9001cad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001c7b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001c7b6:	142b      	asrs	r3, r5, #16
9001c7b8:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001c7bc:	d406      	bmi.n	9001c7cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c7be:	4584      	cmp	ip, r0
9001c7c0:	da04      	bge.n	9001c7cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c7c2:	2b00      	cmp	r3, #0
9001c7c4:	db02      	blt.n	9001c7cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c7c6:	42bb      	cmp	r3, r7
9001c7c8:	f2c0 8184 	blt.w	9001cad4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001c7cc:	f11c 0c01 	adds.w	ip, ip, #1
9001c7d0:	f100 8172 	bmi.w	9001cab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c7d4:	4561      	cmp	r1, ip
9001c7d6:	f2c0 816f 	blt.w	9001cab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c7da:	3301      	adds	r3, #1
9001c7dc:	f100 816c 	bmi.w	9001cab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c7e0:	429a      	cmp	r2, r3
9001c7e2:	f2c0 8169 	blt.w	9001cab8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001c7e6:	9b07      	ldr	r3, [sp, #28]
9001c7e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001c7ea:	9317      	str	r3, [sp, #92]	; 0x5c
9001c7ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001c7ee:	2b00      	cmp	r3, #0
9001c7f0:	f340 818e 	ble.w	9001cb10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001c7f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c7f6:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c7fa:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c7fe:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001c802:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001c804:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001c808:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c80a:	141b      	asrs	r3, r3, #16
9001c80c:	f100 81d1 	bmi.w	9001cbb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001c810:	f101 38ff 	add.w	r8, r1, #4294967295
9001c814:	4543      	cmp	r3, r8
9001c816:	f280 81cc 	bge.w	9001cbb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001c81a:	f1bc 0f00 	cmp.w	ip, #0
9001c81e:	f2c0 81c8 	blt.w	9001cbb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001c822:	f10e 38ff 	add.w	r8, lr, #4294967295
9001c826:	45c4      	cmp	ip, r8
9001c828:	f280 81c3 	bge.w	9001cbb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001c82c:	b209      	sxth	r1, r1
9001c82e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001c830:	fb0c 3301 	mla	r3, ip, r1, r3
9001c834:	eb04 0803 	add.w	r8, r4, r3
9001c838:	5ce3      	ldrb	r3, [r4, r3]
9001c83a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001c83e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001c842:	2a00      	cmp	r2, #0
9001c844:	f000 81aa 	beq.w	9001cb9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001c848:	f898 c001 	ldrb.w	ip, [r8, #1]
9001c84c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001c850:	940b      	str	r4, [sp, #44]	; 0x2c
9001c852:	0e24      	lsrs	r4, r4, #24
9001c854:	9412      	str	r4, [sp, #72]	; 0x48
9001c856:	b178      	cbz	r0, 9001c878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001c858:	eb08 0c01 	add.w	ip, r8, r1
9001c85c:	f818 1001 	ldrb.w	r1, [r8, r1]
9001c860:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c864:	9108      	str	r1, [sp, #32]
9001c866:	0e09      	lsrs	r1, r1, #24
9001c868:	9110      	str	r1, [sp, #64]	; 0x40
9001c86a:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001c86e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001c872:	910c      	str	r1, [sp, #48]	; 0x30
9001c874:	0e09      	lsrs	r1, r1, #24
9001c876:	9113      	str	r1, [sp, #76]	; 0x4c
9001c878:	b292      	uxth	r2, r2
9001c87a:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c87c:	b280      	uxth	r0, r0
9001c87e:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c880:	fb02 f900 	mul.w	r9, r2, r0
9001c884:	0112      	lsls	r2, r2, #4
9001c886:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001c88a:	eba2 0809 	sub.w	r8, r2, r9
9001c88e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001c892:	b280      	uxth	r0, r0
9001c894:	fa1f f888 	uxth.w	r8, r8
9001c898:	1a12      	subs	r2, r2, r0
9001c89a:	fb08 f101 	mul.w	r1, r8, r1
9001c89e:	b292      	uxth	r2, r2
9001c8a0:	fb02 110e 	mla	r1, r2, lr, r1
9001c8a4:	fb00 1104 	mla	r1, r0, r4, r1
9001c8a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c8aa:	fb09 1104 	mla	r1, r9, r4, r1
9001c8ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001c8b2:	2900      	cmp	r1, #0
9001c8b4:	f000 80f5 	beq.w	9001caa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001c8b8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001c8bc:	d01b      	beq.n	9001c8f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001c8be:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001c8c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c8c6:	fb0e fa0a 	mul.w	sl, lr, sl
9001c8ca:	fb0e fe03 	mul.w	lr, lr, r3
9001c8ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001c8d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001c8d6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001c8da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001c8de:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001c8e2:	4453      	add	r3, sl
9001c8e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001c8e8:	0a1b      	lsrs	r3, r3, #8
9001c8ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001c8ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001c8f2:	ea43 030c 	orr.w	r3, r3, ip
9001c8f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c8f8:	2cff      	cmp	r4, #255	; 0xff
9001c8fa:	d021      	beq.n	9001c940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001c8fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c8fe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001c902:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c904:	fb04 fb0b 	mul.w	fp, r4, fp
9001c908:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c90a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c90e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c910:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001c914:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001c918:	fb04 fa0a 	mul.w	sl, r4, sl
9001c91c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c920:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001c924:	44de      	add	lr, fp
9001c926:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001c92a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001c92e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c932:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c936:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c93a:	ea4e 040a 	orr.w	r4, lr, sl
9001c93e:	940b      	str	r4, [sp, #44]	; 0x2c
9001c940:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c942:	2cff      	cmp	r4, #255	; 0xff
9001c944:	d021      	beq.n	9001c98a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001c946:	9c08      	ldr	r4, [sp, #32]
9001c948:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001c94c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c94e:	fb04 fb0b 	mul.w	fp, r4, fp
9001c952:	9c08      	ldr	r4, [sp, #32]
9001c954:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c958:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001c95a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001c95e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001c962:	fb04 fa0a 	mul.w	sl, r4, sl
9001c966:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c96a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001c96e:	44de      	add	lr, fp
9001c970:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001c974:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001c978:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c97c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c980:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c984:	ea4e 040a 	orr.w	r4, lr, sl
9001c988:	9408      	str	r4, [sp, #32]
9001c98a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c98c:	2cff      	cmp	r4, #255	; 0xff
9001c98e:	d021      	beq.n	9001c9d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001c990:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001c992:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001c996:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c998:	fb04 fb0b 	mul.w	fp, r4, fp
9001c99c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001c99e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001c9a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c9a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001c9a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001c9ac:	fb04 fa0a 	mul.w	sl, r4, sl
9001c9b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c9b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001c9b8:	44de      	add	lr, fp
9001c9ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001c9be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001c9c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001c9c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001c9ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001c9ce:	ea4e 040a 	orr.w	r4, lr, sl
9001c9d2:	940c      	str	r4, [sp, #48]	; 0x30
9001c9d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c9d6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001c9da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001c9de:	43c9      	mvns	r1, r1
9001c9e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001c9e4:	9c08      	ldr	r4, [sp, #32]
9001c9e6:	fb08 fc0c 	mul.w	ip, r8, ip
9001c9ea:	fb02 cc0e 	mla	ip, r2, lr, ip
9001c9ee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001c9f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001c9f4:	fb00 cc0e 	mla	ip, r0, lr, ip
9001c9f8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001c9fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c9fe:	fb09 cc0e 	mla	ip, r9, lr, ip
9001ca02:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001ca06:	fb08 f80e 	mul.w	r8, r8, lr
9001ca0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ca0e:	fa5f fe81 	uxtb.w	lr, r1
9001ca12:	fb02 8303 	mla	r3, r2, r3, r8
9001ca16:	9a08      	ldr	r2, [sp, #32]
9001ca18:	f8b7 8000 	ldrh.w	r8, [r7]
9001ca1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ca20:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001ca24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001ca26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001ca2a:	fb00 330a 	mla	r3, r0, sl, r3
9001ca2e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001ca32:	ea4f 2228 	mov.w	r2, r8, asr #8
9001ca36:	fb09 3900 	mla	r9, r9, r0, r3
9001ca3a:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001ca3e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001ca42:	b2c9      	uxtb	r1, r1
9001ca44:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ca48:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001ca4c:	fb02 f20e 	mul.w	r2, r2, lr
9001ca50:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001ca54:	fb00 f00e 	mul.w	r0, r0, lr
9001ca58:	1c53      	adds	r3, r2, #1
9001ca5a:	fb01 f10e 	mul.w	r1, r1, lr
9001ca5e:	ea4c 0c09 	orr.w	ip, ip, r9
9001ca62:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001ca66:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001ca6a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ca6e:	4a60      	ldr	r2, [pc, #384]	; (9001cbf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001ca70:	b2db      	uxtb	r3, r3
9001ca72:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001ca76:	1c43      	adds	r3, r0, #1
9001ca78:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001ca7c:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001ca80:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001ca84:	00db      	lsls	r3, r3, #3
9001ca86:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ca8a:	4313      	orrs	r3, r2
9001ca8c:	1c4a      	adds	r2, r1, #1
9001ca8e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ca92:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001ca96:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001ca9a:	ea4c 0c03 	orr.w	ip, ip, r3
9001ca9e:	f8a7 c000 	strh.w	ip, [r7]
9001caa2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001caa4:	3702      	adds	r7, #2
9001caa6:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001caa8:	441a      	add	r2, r3
9001caaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001caac:	441d      	add	r5, r3
9001caae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001cab0:	9225      	str	r2, [sp, #148]	; 0x94
9001cab2:	3b01      	subs	r3, #1
9001cab4:	9317      	str	r3, [sp, #92]	; 0x5c
9001cab6:	e699      	b.n	9001c7ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001cab8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001caba:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001cabc:	441c      	add	r4, r3
9001cabe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001cac0:	441d      	add	r5, r3
9001cac2:	9b07      	ldr	r3, [sp, #28]
9001cac4:	9425      	str	r4, [sp, #148]	; 0x94
9001cac6:	3b01      	subs	r3, #1
9001cac8:	9307      	str	r3, [sp, #28]
9001caca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cacc:	3302      	adds	r3, #2
9001cace:	930a      	str	r3, [sp, #40]	; 0x28
9001cad0:	e66c      	b.n	9001c7ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001cad2:	d024      	beq.n	9001cb1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001cad4:	9b07      	ldr	r3, [sp, #28]
9001cad6:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001cad8:	3b01      	subs	r3, #1
9001cada:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001cadc:	fb00 4003 	mla	r0, r0, r3, r4
9001cae0:	1400      	asrs	r0, r0, #16
9001cae2:	f53f ae80 	bmi.w	9001c7e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001cae6:	3901      	subs	r1, #1
9001cae8:	4288      	cmp	r0, r1
9001caea:	f6bf ae7c 	bge.w	9001c7e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001caee:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001caf0:	fb01 5303 	mla	r3, r1, r3, r5
9001caf4:	141b      	asrs	r3, r3, #16
9001caf6:	f53f ae76 	bmi.w	9001c7e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001cafa:	3a01      	subs	r2, #1
9001cafc:	4293      	cmp	r3, r2
9001cafe:	f6bf ae72 	bge.w	9001c7e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001cb02:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001cb06:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001cb0a:	f1bb 0f00 	cmp.w	fp, #0
9001cb0e:	dc71      	bgt.n	9001cbf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001cb10:	9b07      	ldr	r3, [sp, #28]
9001cb12:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cb18:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001cb1c:	930a      	str	r3, [sp, #40]	; 0x28
9001cb1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001cb20:	2b00      	cmp	r3, #0
9001cb22:	f340 81af 	ble.w	9001ce84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001cb26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cb2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cb2c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cb30:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cb34:	eef0 6a62 	vmov.f32	s13, s5
9001cb38:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cb3c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cb40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cb44:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001cb48:	eef0 6a43 	vmov.f32	s13, s6
9001cb4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cb50:	ee16 5a90 	vmov	r5, s13
9001cb54:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cb58:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cb5c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cb60:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cb64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cb68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cb6c:	ee12 2a90 	vmov	r2, s5
9001cb70:	eef0 2a47 	vmov.f32	s5, s14
9001cb74:	fb92 f3f3 	sdiv	r3, r2, r3
9001cb78:	ee13 2a10 	vmov	r2, s6
9001cb7c:	9327      	str	r3, [sp, #156]	; 0x9c
9001cb7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cb80:	eeb0 3a67 	vmov.f32	s6, s15
9001cb84:	fb92 f3f3 	sdiv	r3, r2, r3
9001cb88:	9328      	str	r3, [sp, #160]	; 0xa0
9001cb8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001cb8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001cb8e:	3b01      	subs	r3, #1
9001cb90:	9316      	str	r3, [sp, #88]	; 0x58
9001cb92:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cb94:	bf08      	it	eq
9001cb96:	4613      	moveq	r3, r2
9001cb98:	9307      	str	r3, [sp, #28]
9001cb9a:	e5f9      	b.n	9001c790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001cb9c:	2800      	cmp	r0, #0
9001cb9e:	f43f ae6b 	beq.w	9001c878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001cba2:	f818 1001 	ldrb.w	r1, [r8, r1]
9001cba6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001cbaa:	9108      	str	r1, [sp, #32]
9001cbac:	0e09      	lsrs	r1, r1, #24
9001cbae:	9110      	str	r1, [sp, #64]	; 0x40
9001cbb0:	e662      	b.n	9001c878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001cbb2:	f113 0801 	adds.w	r8, r3, #1
9001cbb6:	f53f af74 	bmi.w	9001caa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cbba:	4541      	cmp	r1, r8
9001cbbc:	f6ff af71 	blt.w	9001caa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cbc0:	f11c 0801 	adds.w	r8, ip, #1
9001cbc4:	f53f af6d 	bmi.w	9001caa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cbc8:	45c6      	cmp	lr, r8
9001cbca:	f6ff af6a 	blt.w	9001caa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cbce:	b209      	sxth	r1, r1
9001cbd0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001cbd4:	fa0f f38e 	sxth.w	r3, lr
9001cbd8:	9100      	str	r1, [sp, #0]
9001cbda:	4639      	mov	r1, r7
9001cbdc:	9301      	str	r3, [sp, #4]
9001cbde:	4633      	mov	r3, r6
9001cbe0:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001cbe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cbe6:	9819      	ldr	r0, [sp, #100]	; 0x64
9001cbe8:	f7ff fc7b 	bl	9001c4e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001cbec:	e759      	b.n	9001caa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cbee:	bf00      	nop
9001cbf0:	fffff800 	.word	0xfffff800
9001cbf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001cbf6:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001cbfa:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001cbfc:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001cc00:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001cc02:	1427      	asrs	r7, r4, #16
9001cc04:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001cc06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001cc0a:	142b      	asrs	r3, r5, #16
9001cc0c:	fb01 7303 	mla	r3, r1, r3, r7
9001cc10:	18e7      	adds	r7, r4, r3
9001cc12:	5ce3      	ldrb	r3, [r4, r3]
9001cc14:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001cc18:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001cc1c:	2a00      	cmp	r2, #0
9001cc1e:	f000 8127 	beq.w	9001ce70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001cc22:	f897 e001 	ldrb.w	lr, [r7, #1]
9001cc26:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001cc2a:	940d      	str	r4, [sp, #52]	; 0x34
9001cc2c:	0e24      	lsrs	r4, r4, #24
9001cc2e:	9414      	str	r4, [sp, #80]	; 0x50
9001cc30:	b170      	cbz	r0, 9001cc50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001cc32:	eb07 0e01 	add.w	lr, r7, r1
9001cc36:	5c79      	ldrb	r1, [r7, r1]
9001cc38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001cc3c:	9109      	str	r1, [sp, #36]	; 0x24
9001cc3e:	0e09      	lsrs	r1, r1, #24
9001cc40:	9111      	str	r1, [sp, #68]	; 0x44
9001cc42:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001cc46:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001cc4a:	910e      	str	r1, [sp, #56]	; 0x38
9001cc4c:	0e09      	lsrs	r1, r1, #24
9001cc4e:	9115      	str	r1, [sp, #84]	; 0x54
9001cc50:	b292      	uxth	r2, r2
9001cc52:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cc54:	b280      	uxth	r0, r0
9001cc56:	fb02 f800 	mul.w	r8, r2, r0
9001cc5a:	0112      	lsls	r2, r2, #4
9001cc5c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001cc60:	eba2 0e08 	sub.w	lr, r2, r8
9001cc64:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001cc68:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001cc6a:	b280      	uxth	r0, r0
9001cc6c:	fa1f fe8e 	uxth.w	lr, lr
9001cc70:	1a09      	subs	r1, r1, r0
9001cc72:	fb0e f202 	mul.w	r2, lr, r2
9001cc76:	b289      	uxth	r1, r1
9001cc78:	fb01 220c 	mla	r2, r1, ip, r2
9001cc7c:	fb00 2204 	mla	r2, r0, r4, r2
9001cc80:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001cc82:	fb08 2204 	mla	r2, r8, r4, r2
9001cc86:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001cc8a:	2a00      	cmp	r2, #0
9001cc8c:	f000 80e5 	beq.w	9001ce5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001cc90:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001cc94:	d019      	beq.n	9001ccca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001cc96:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001cc9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001cc9e:	fb0c fa0a 	mul.w	sl, ip, sl
9001cca2:	fb0c fc03 	mul.w	ip, ip, r3
9001cca6:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001ccaa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001ccae:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001ccb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ccb6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001ccba:	4453      	add	r3, sl
9001ccbc:	0a3f      	lsrs	r7, r7, #8
9001ccbe:	0a1b      	lsrs	r3, r3, #8
9001ccc0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001ccc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ccc8:	433b      	orrs	r3, r7
9001ccca:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001cccc:	2cff      	cmp	r4, #255	; 0xff
9001ccce:	d020      	beq.n	9001cd12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001ccd0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ccd2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ccd6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ccd8:	4367      	muls	r7, r4
9001ccda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ccdc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001cce0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001cce4:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001cce6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001ccea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ccee:	fb04 fa0a 	mul.w	sl, r4, sl
9001ccf2:	44bc      	add	ip, r7
9001ccf4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001ccf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ccfc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001cd00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cd04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001cd08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001cd0c:	ea4c 040a 	orr.w	r4, ip, sl
9001cd10:	940d      	str	r4, [sp, #52]	; 0x34
9001cd12:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cd14:	2cff      	cmp	r4, #255	; 0xff
9001cd16:	d020      	beq.n	9001cd5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001cd18:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001cd1a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001cd1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cd20:	4367      	muls	r7, r4
9001cd22:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001cd24:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001cd28:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001cd2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cd2e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001cd32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cd36:	fb04 fa0a 	mul.w	sl, r4, sl
9001cd3a:	44bc      	add	ip, r7
9001cd3c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001cd40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001cd44:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001cd48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cd4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001cd50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001cd54:	ea4c 040a 	orr.w	r4, ip, sl
9001cd58:	9409      	str	r4, [sp, #36]	; 0x24
9001cd5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001cd5c:	2cff      	cmp	r4, #255	; 0xff
9001cd5e:	d020      	beq.n	9001cda2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001cd60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001cd62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001cd66:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001cd68:	4367      	muls	r7, r4
9001cd6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001cd6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001cd70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001cd74:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001cd76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001cd7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cd7e:	fb04 fa0a 	mul.w	sl, r4, sl
9001cd82:	44bc      	add	ip, r7
9001cd84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001cd88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001cd8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001cd90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001cd94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001cd98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001cd9c:	ea4c 040a 	orr.w	r4, ip, sl
9001cda0:	940e      	str	r4, [sp, #56]	; 0x38
9001cda2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001cda4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001cda8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001cdac:	43d2      	mvns	r2, r2
9001cdae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001cdb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001cdb4:	b2d2      	uxtb	r2, r2
9001cdb6:	fb0e f707 	mul.w	r7, lr, r7
9001cdba:	fb01 770c 	mla	r7, r1, ip, r7
9001cdbe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001cdc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001cdc4:	fb00 770c 	mla	r7, r0, ip, r7
9001cdc8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001cdcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001cdce:	fb08 770c 	mla	r7, r8, ip, r7
9001cdd2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001cdd6:	fb0e fe0c 	mul.w	lr, lr, ip
9001cdda:	0a3f      	lsrs	r7, r7, #8
9001cddc:	fb01 e303 	mla	r3, r1, r3, lr
9001cde0:	9909      	ldr	r1, [sp, #36]	; 0x24
9001cde2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001cde6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001cdea:	990e      	ldr	r1, [sp, #56]	; 0x38
9001cdec:	fb00 330a 	mla	r3, r0, sl, r3
9001cdf0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001cdf4:	fb08 3c0c 	mla	ip, r8, ip, r3
9001cdf8:	f8b9 3000 	ldrh.w	r3, [r9]
9001cdfc:	1218      	asrs	r0, r3, #8
9001cdfe:	10d9      	asrs	r1, r3, #3
9001ce00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ce04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001ce08:	00db      	lsls	r3, r3, #3
9001ce0a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001ce0e:	4350      	muls	r0, r2
9001ce10:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001ce14:	b2db      	uxtb	r3, r3
9001ce16:	4351      	muls	r1, r2
9001ce18:	ea47 070c 	orr.w	r7, r7, ip
9001ce1c:	4353      	muls	r3, r2
9001ce1e:	1c42      	adds	r2, r0, #1
9001ce20:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ce24:	0c3a      	lsrs	r2, r7, #16
9001ce26:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ce2a:	4a18      	ldr	r2, [pc, #96]	; (9001ce8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001ce2c:	b2c0      	uxtb	r0, r0
9001ce2e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001ce32:	1c4a      	adds	r2, r1, #1
9001ce34:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ce38:	0a3a      	lsrs	r2, r7, #8
9001ce3a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001ce3e:	00c9      	lsls	r1, r1, #3
9001ce40:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001ce44:	4301      	orrs	r1, r0
9001ce46:	1c58      	adds	r0, r3, #1
9001ce48:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001ce4c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001ce50:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001ce54:	4308      	orrs	r0, r1
9001ce56:	f8a9 0000 	strh.w	r0, [r9]
9001ce5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001ce5c:	f109 0902 	add.w	r9, r9, #2
9001ce60:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001ce62:	f10b 3bff 	add.w	fp, fp, #4294967295
9001ce66:	441a      	add	r2, r3
9001ce68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ce6a:	9225      	str	r2, [sp, #148]	; 0x94
9001ce6c:	441d      	add	r5, r3
9001ce6e:	e64c      	b.n	9001cb0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ce70:	2800      	cmp	r0, #0
9001ce72:	f43f aeed 	beq.w	9001cc50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001ce76:	5c79      	ldrb	r1, [r7, r1]
9001ce78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001ce7c:	9109      	str	r1, [sp, #36]	; 0x24
9001ce7e:	0e09      	lsrs	r1, r1, #24
9001ce80:	9111      	str	r1, [sp, #68]	; 0x44
9001ce82:	e6e5      	b.n	9001cc50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001ce84:	b01b      	add	sp, #108	; 0x6c
9001ce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ce8a:	bf00      	nop
9001ce8c:	fffff800 	.word	0xfffff800

9001ce90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ce94:	b085      	sub	sp, #20
9001ce96:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001ce9a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001ce9e:	2800      	cmp	r0, #0
9001cea0:	9103      	str	r1, [sp, #12]
9001cea2:	fb00 7406 	mla	r4, r0, r6, r7
9001cea6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001ceaa:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001ceae:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001ceb2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001ceb6:	eb03 0904 	add.w	r9, r3, r4
9001ceba:	9501      	str	r5, [sp, #4]
9001cebc:	f2c0 8150 	blt.w	9001d160 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001cec0:	4583      	cmp	fp, r0
9001cec2:	f340 814d 	ble.w	9001d160 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001cec6:	2f00      	cmp	r7, #0
9001cec8:	f2c0 8146 	blt.w	9001d158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001cecc:	42be      	cmp	r6, r7
9001cece:	f340 8143 	ble.w	9001d158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001ced2:	f813 c004 	ldrb.w	ip, [r3, r4]
9001ced6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001ceda:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001cede:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001cee2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001cee6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ceea:	4355      	muls	r5, r2
9001ceec:	fb0c f203 	mul.w	r2, ip, r3
9001cef0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001cef4:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001cef8:	441d      	add	r5, r3
9001cefa:	f102 0320 	add.w	r3, r2, #32
9001cefe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001cf02:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001cf06:	0a1b      	lsrs	r3, r3, #8
9001cf08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cf0c:	431c      	orrs	r4, r3
9001cf0e:	1c7b      	adds	r3, r7, #1
9001cf10:	f100 812b 	bmi.w	9001d16a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001cf14:	429e      	cmp	r6, r3
9001cf16:	f340 8128 	ble.w	9001d16a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001cf1a:	2900      	cmp	r1, #0
9001cf1c:	f000 8128 	beq.w	9001d170 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001cf20:	9a01      	ldr	r2, [sp, #4]
9001cf22:	f899 3001 	ldrb.w	r3, [r9, #1]
9001cf26:	8855      	ldrh	r5, [r2, #2]
9001cf28:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001cf2c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001cf30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cf34:	fb08 f802 	mul.w	r8, r8, r2
9001cf38:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001cf3c:	435d      	muls	r5, r3
9001cf3e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001cf42:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001cf46:	44d0      	add	r8, sl
9001cf48:	f105 0a20 	add.w	sl, r5, #32
9001cf4c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001cf50:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001cf54:	0a2d      	lsrs	r5, r5, #8
9001cf56:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cf5a:	432a      	orrs	r2, r5
9001cf5c:	3001      	adds	r0, #1
9001cf5e:	f100 810d 	bmi.w	9001d17c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001cf62:	4583      	cmp	fp, r0
9001cf64:	f340 810a 	ble.w	9001d17c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001cf68:	f1be 0f00 	cmp.w	lr, #0
9001cf6c:	f000 810b 	beq.w	9001d186 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001cf70:	2f00      	cmp	r7, #0
9001cf72:	f2c0 8100 	blt.w	9001d176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001cf76:	42be      	cmp	r6, r7
9001cf78:	f340 80fd 	ble.w	9001d176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001cf7c:	9801      	ldr	r0, [sp, #4]
9001cf7e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001cf82:	f819 5006 	ldrb.w	r5, [r9, r6]
9001cf86:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001cf8a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001cf8e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001cf92:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001cf96:	fb0a fa00 	mul.w	sl, sl, r0
9001cf9a:	fb05 f808 	mul.w	r8, r5, r8
9001cf9e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001cfa2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001cfa6:	4482      	add	sl, r0
9001cfa8:	f108 0020 	add.w	r0, r8, #32
9001cfac:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001cfb0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001cfb4:	0a00      	lsrs	r0, r0, #8
9001cfb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001cfba:	ea4b 0b00 	orr.w	fp, fp, r0
9001cfbe:	3701      	adds	r7, #1
9001cfc0:	f100 80e6 	bmi.w	9001d190 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001cfc4:	42be      	cmp	r6, r7
9001cfc6:	f340 80e3 	ble.w	9001d190 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001cfca:	2900      	cmp	r1, #0
9001cfcc:	f000 80e3 	beq.w	9001d196 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001cfd0:	3601      	adds	r6, #1
9001cfd2:	9801      	ldr	r0, [sp, #4]
9001cfd4:	f819 7006 	ldrb.w	r7, [r9, r6]
9001cfd8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001cfdc:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001cfe0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001cfe4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001cfe8:	fb09 f906 	mul.w	r9, r9, r6
9001cfec:	fb07 f800 	mul.w	r8, r7, r0
9001cff0:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001cff4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001cff8:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001cffc:	44d1      	add	r9, sl
9001cffe:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001d002:	f108 0020 	add.w	r0, r8, #32
9001d006:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001d00a:	0a00      	lsrs	r0, r0, #8
9001d00c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d010:	4330      	orrs	r0, r6
9001d012:	b28e      	uxth	r6, r1
9001d014:	fa1f f98e 	uxth.w	r9, lr
9001d018:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001d01c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001d020:	fb06 f809 	mul.w	r8, r6, r9
9001d024:	0136      	lsls	r6, r6, #4
9001d026:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d02a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001d02e:	9601      	str	r6, [sp, #4]
9001d030:	ea4a 0404 	orr.w	r4, sl, r4
9001d034:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001d038:	fa1f f689 	uxth.w	r6, r9
9001d03c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001d040:	fb11 f90e 	smulbb	r9, r1, lr
9001d044:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d048:	9602      	str	r6, [sp, #8]
9001d04a:	4626      	mov	r6, r4
9001d04c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001d050:	f1ce 0410 	rsb	r4, lr, #16
9001d054:	ea4a 0202 	orr.w	r2, sl, r2
9001d058:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001d05c:	1a64      	subs	r4, r4, r1
9001d05e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001d062:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d066:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001d06a:	434a      	muls	r2, r1
9001d06c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001d070:	ea4a 0000 	orr.w	r0, sl, r0
9001d074:	9903      	ldr	r1, [sp, #12]
9001d076:	fb04 2406 	mla	r4, r4, r6, r2
9001d07a:	9e02      	ldr	r6, [sp, #8]
9001d07c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001d080:	fb09 4200 	mla	r2, r9, r0, r4
9001d084:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001d088:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001d08c:	8808      	ldrh	r0, [r1, #0]
9001d08e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001d092:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001d096:	ea44 0b0b 	orr.w	fp, r4, fp
9001d09a:	9c01      	ldr	r4, [sp, #4]
9001d09c:	b289      	uxth	r1, r1
9001d09e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001d0a2:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001d0a6:	1ba4      	subs	r4, r4, r6
9001d0a8:	9e01      	ldr	r6, [sp, #4]
9001d0aa:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001d0ae:	eba6 0608 	sub.w	r6, r6, r8
9001d0b2:	b2a4      	uxth	r4, r4
9001d0b4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001d0b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d0bc:	b2b6      	uxth	r6, r6
9001d0be:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001d0c2:	4373      	muls	r3, r6
9001d0c4:	ea42 0e0e 	orr.w	lr, r2, lr
9001d0c8:	fb0c 3304 	mla	r3, ip, r4, r3
9001d0cc:	9c02      	ldr	r4, [sp, #8]
9001d0ce:	fa1f f28e 	uxth.w	r2, lr
9001d0d2:	fb04 3505 	mla	r5, r4, r5, r3
9001d0d6:	10d4      	asrs	r4, r2, #3
9001d0d8:	fb08 5707 	mla	r7, r8, r7, r5
9001d0dc:	1215      	asrs	r5, r2, #8
9001d0de:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001d0e2:	00d2      	lsls	r2, r2, #3
9001d0e4:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d0e8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d0ec:	b2d2      	uxtb	r2, r2
9001d0ee:	434f      	muls	r7, r1
9001d0f0:	1c7b      	adds	r3, r7, #1
9001d0f2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001d0f6:	1203      	asrs	r3, r0, #8
9001d0f8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001d0fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001d100:	b2ff      	uxtb	r7, r7
9001d102:	fb13 f307 	smulbb	r3, r3, r7
9001d106:	fb05 3501 	mla	r5, r5, r1, r3
9001d10a:	10c3      	asrs	r3, r0, #3
9001d10c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001d110:	b2ad      	uxth	r5, r5
9001d112:	fb13 f307 	smulbb	r3, r3, r7
9001d116:	fb04 3401 	mla	r4, r4, r1, r3
9001d11a:	00c3      	lsls	r3, r0, #3
9001d11c:	b2db      	uxtb	r3, r3
9001d11e:	b2a4      	uxth	r4, r4
9001d120:	fb13 f307 	smulbb	r3, r3, r7
9001d124:	fb02 3101 	mla	r1, r2, r1, r3
9001d128:	1c6b      	adds	r3, r5, #1
9001d12a:	1c62      	adds	r2, r4, #1
9001d12c:	b289      	uxth	r1, r1
9001d12e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d132:	1c4b      	adds	r3, r1, #1
9001d134:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001d138:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d13c:	9a03      	ldr	r2, [sp, #12]
9001d13e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001d142:	0964      	lsrs	r4, r4, #5
9001d144:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d148:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001d14c:	432b      	orrs	r3, r5
9001d14e:	4323      	orrs	r3, r4
9001d150:	8013      	strh	r3, [r2, #0]
9001d152:	b005      	add	sp, #20
9001d154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d158:	f04f 0c00 	mov.w	ip, #0
9001d15c:	4664      	mov	r4, ip
9001d15e:	e6d6      	b.n	9001cf0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001d160:	2300      	movs	r3, #0
9001d162:	469c      	mov	ip, r3
9001d164:	461a      	mov	r2, r3
9001d166:	461c      	mov	r4, r3
9001d168:	e6f8      	b.n	9001cf5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001d16a:	2300      	movs	r3, #0
9001d16c:	461a      	mov	r2, r3
9001d16e:	e6f5      	b.n	9001cf5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001d170:	460b      	mov	r3, r1
9001d172:	460a      	mov	r2, r1
9001d174:	e6f2      	b.n	9001cf5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001d176:	2500      	movs	r5, #0
9001d178:	46ab      	mov	fp, r5
9001d17a:	e720      	b.n	9001cfbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001d17c:	2700      	movs	r7, #0
9001d17e:	463d      	mov	r5, r7
9001d180:	4638      	mov	r0, r7
9001d182:	46bb      	mov	fp, r7
9001d184:	e745      	b.n	9001d012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001d186:	4677      	mov	r7, lr
9001d188:	4675      	mov	r5, lr
9001d18a:	4670      	mov	r0, lr
9001d18c:	46f3      	mov	fp, lr
9001d18e:	e740      	b.n	9001d012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001d190:	2700      	movs	r7, #0
9001d192:	4638      	mov	r0, r7
9001d194:	e73d      	b.n	9001d012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001d196:	460f      	mov	r7, r1
9001d198:	4608      	mov	r0, r1
9001d19a:	e73a      	b.n	9001d012 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001d19c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d1a0:	b097      	sub	sp, #92	; 0x5c
9001d1a2:	9214      	str	r2, [sp, #80]	; 0x50
9001d1a4:	9308      	str	r3, [sp, #32]
9001d1a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001d1a8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001d1ac:	9015      	str	r0, [sp, #84]	; 0x54
9001d1ae:	9312      	str	r3, [sp, #72]	; 0x48
9001d1b0:	6850      	ldr	r0, [r2, #4]
9001d1b2:	9111      	str	r1, [sp, #68]	; 0x44
9001d1b4:	6812      	ldr	r2, [r2, #0]
9001d1b6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001d1ba:	fb00 1303 	mla	r3, r0, r3, r1
9001d1be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d1c2:	9309      	str	r3, [sp, #36]	; 0x24
9001d1c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d1c6:	681b      	ldr	r3, [r3, #0]
9001d1c8:	930b      	str	r3, [sp, #44]	; 0x2c
9001d1ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d1cc:	685b      	ldr	r3, [r3, #4]
9001d1ce:	930c      	str	r3, [sp, #48]	; 0x30
9001d1d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001d1d4:	930a      	str	r3, [sp, #40]	; 0x28
9001d1d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d1d8:	2b00      	cmp	r3, #0
9001d1da:	dc03      	bgt.n	9001d1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001d1dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001d1de:	2b00      	cmp	r3, #0
9001d1e0:	f340 83cd 	ble.w	9001d97e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001d1e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d1e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d1ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d1ee:	1e48      	subs	r0, r1, #1
9001d1f0:	1e55      	subs	r5, r2, #1
9001d1f2:	9b08      	ldr	r3, [sp, #32]
9001d1f4:	2b00      	cmp	r3, #0
9001d1f6:	f340 81a5 	ble.w	9001d544 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001d1fa:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001d1fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d1fe:	1436      	asrs	r6, r6, #16
9001d200:	ea4f 4323 	mov.w	r3, r3, asr #16
9001d204:	d406      	bmi.n	9001d214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d206:	4286      	cmp	r6, r0
9001d208:	da04      	bge.n	9001d214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d20a:	2b00      	cmp	r3, #0
9001d20c:	db02      	blt.n	9001d214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d20e:	42ab      	cmp	r3, r5
9001d210:	f2c0 8199 	blt.w	9001d546 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001d214:	3601      	adds	r6, #1
9001d216:	f100 8186 	bmi.w	9001d526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d21a:	42b1      	cmp	r1, r6
9001d21c:	f2c0 8183 	blt.w	9001d526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d220:	3301      	adds	r3, #1
9001d222:	f100 8180 	bmi.w	9001d526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d226:	429a      	cmp	r2, r3
9001d228:	f2c0 817d 	blt.w	9001d526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d22c:	9b08      	ldr	r3, [sp, #32]
9001d22e:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001d232:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001d234:	9313      	str	r3, [sp, #76]	; 0x4c
9001d236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001d238:	2b00      	cmp	r3, #0
9001d23a:	f340 81a6 	ble.w	9001d58a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001d23e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d240:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001d242:	1418      	asrs	r0, r3, #16
9001d244:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d246:	142d      	asrs	r5, r5, #16
9001d248:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001d24c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d24e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001d252:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d254:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001d258:	f100 81fa 	bmi.w	9001d650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d25c:	f102 3eff 	add.w	lr, r2, #4294967295
9001d260:	4575      	cmp	r5, lr
9001d262:	f280 81f5 	bge.w	9001d650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d266:	2800      	cmp	r0, #0
9001d268:	f2c0 81f2 	blt.w	9001d650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d26c:	f103 3eff 	add.w	lr, r3, #4294967295
9001d270:	4570      	cmp	r0, lr
9001d272:	f280 81ed 	bge.w	9001d650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001d276:	b212      	sxth	r2, r2
9001d278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d27a:	fa1f fe81 	uxth.w	lr, r1
9001d27e:	fb00 5002 	mla	r0, r0, r2, r5
9001d282:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001d286:	eb03 0a00 	add.w	sl, r3, r0
9001d28a:	f813 9000 	ldrb.w	r9, [r3, r0]
9001d28e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001d292:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001d296:	b29b      	uxth	r3, r3
9001d298:	f1bc 0f00 	cmp.w	ip, #0
9001d29c:	f000 81bb 	beq.w	9001d616 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001d2a0:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001d2a4:	eb0a 0b02 	add.w	fp, sl, r2
9001d2a8:	fa1f fa8c 	uxth.w	sl, ip
9001d2ac:	940d      	str	r4, [sp, #52]	; 0x34
9001d2ae:	fb0a fe0e 	mul.w	lr, sl, lr
9001d2b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001d2b6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001d2ba:	eba5 050e 	sub.w	r5, r5, lr
9001d2be:	940e      	str	r4, [sp, #56]	; 0x38
9001d2c0:	fa1f fa8a 	uxth.w	sl, sl
9001d2c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001d2c6:	b2ad      	uxth	r5, r5
9001d2c8:	eba3 030a 	sub.w	r3, r3, sl
9001d2cc:	fb08 f505 	mul.w	r5, r8, r5
9001d2d0:	b29b      	uxth	r3, r3
9001d2d2:	fb09 5303 	mla	r3, r9, r3, r5
9001d2d6:	fb0a 3304 	mla	r3, sl, r4, r3
9001d2da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001d2dc:	fb0e 3304 	mla	r3, lr, r4, r3
9001d2e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001d2e4:	2b00      	cmp	r3, #0
9001d2e6:	f000 8111 	beq.w	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d2ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001d2ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001d2f0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001d2f4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001d2f8:	f000 8192 	beq.w	9001d620 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001d2fc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001d300:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001d304:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d308:	fb0a fe0e 	mul.w	lr, sl, lr
9001d30c:	fb09 f000 	mul.w	r0, r9, r0
9001d310:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001d314:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001d318:	f100 0b20 	add.w	fp, r0, #32
9001d31c:	44ce      	add	lr, r9
9001d31e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001d322:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001d326:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d32a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001d32e:	ea4e 0909 	orr.w	r9, lr, r9
9001d332:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001d336:	8868      	ldrh	r0, [r5, #2]
9001d338:	d019      	beq.n	9001d36e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001d33a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001d33e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001d342:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d346:	fb0a fe0e 	mul.w	lr, sl, lr
9001d34a:	fb08 f800 	mul.w	r8, r8, r0
9001d34e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001d352:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001d356:	f108 0b20 	add.w	fp, r8, #32
9001d35a:	4486      	add	lr, r0
9001d35c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001d360:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001d364:	0a00      	lsrs	r0, r0, #8
9001d366:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d36a:	ea4e 0000 	orr.w	r0, lr, r0
9001d36e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001d372:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001d376:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001d37a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001d37e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001d382:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d386:	ea4e 0909 	orr.w	r9, lr, r9
9001d38a:	ea4a 0000 	orr.w	r0, sl, r0
9001d38e:	f1bc 0f00 	cmp.w	ip, #0
9001d392:	f000 8147 	beq.w	9001d624 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001d396:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001d39a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001d39c:	3a01      	subs	r2, #1
9001d39e:	2cff      	cmp	r4, #255	; 0xff
9001d3a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001d3a4:	f102 0202 	add.w	r2, r2, #2
9001d3a8:	eb05 0e02 	add.w	lr, r5, r2
9001d3ac:	5aaa      	ldrh	r2, [r5, r2]
9001d3ae:	d018      	beq.n	9001d3e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001d3b0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001d3b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d3b8:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001d3bc:	fb04 fa02 	mul.w	sl, r4, r2
9001d3c0:	fb08 f805 	mul.w	r8, r8, r5
9001d3c4:	f10a 0520 	add.w	r5, sl, #32
9001d3c8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001d3cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001d3d0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001d3d4:	4442      	add	r2, r8
9001d3d6:	0a2d      	lsrs	r5, r5, #8
9001d3d8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001d3dc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d3e0:	432a      	orrs	r2, r5
9001d3e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001d3e4:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001d3e8:	2cff      	cmp	r4, #255	; 0xff
9001d3ea:	d01a      	beq.n	9001d422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001d3ec:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001d3f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d3f4:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001d3f8:	fb04 fa05 	mul.w	sl, r4, r5
9001d3fc:	fb08 f80e 	mul.w	r8, r8, lr
9001d400:	f10a 0e20 	add.w	lr, sl, #32
9001d404:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001d408:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001d40c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001d410:	4445      	add	r5, r8
9001d412:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001d416:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001d41a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001d41e:	ea45 050e 	orr.w	r5, r5, lr
9001d422:	fb1c fe01 	smulbb	lr, ip, r1
9001d426:	f1cc 0810 	rsb	r8, ip, #16
9001d42a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001d42e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001d432:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001d436:	eba8 0801 	sub.w	r8, r8, r1
9001d43a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001d43e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d442:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001d446:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001d44a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001d44e:	ea4a 0202 	orr.w	r2, sl, r2
9001d452:	4341      	muls	r1, r0
9001d454:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001d458:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001d45c:	fb09 1108 	mla	r1, r9, r8, r1
9001d460:	ea4b 0505 	orr.w	r5, fp, r5
9001d464:	fb0c 1102 	mla	r1, ip, r2, r1
9001d468:	fb0e 1e05 	mla	lr, lr, r5, r1
9001d46c:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001d470:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001d474:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d478:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001d47c:	ea42 0e0e 	orr.w	lr, r2, lr
9001d480:	fa1f f28e 	uxth.w	r2, lr
9001d484:	2bff      	cmp	r3, #255	; 0xff
9001d486:	d103      	bne.n	9001d490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001d488:	9912      	ldr	r1, [sp, #72]	; 0x48
9001d48a:	29ff      	cmp	r1, #255	; 0xff
9001d48c:	f000 80de 	beq.w	9001d64c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001d490:	990a      	ldr	r1, [sp, #40]	; 0x28
9001d492:	1215      	asrs	r5, r2, #8
9001d494:	8838      	ldrh	r0, [r7, #0]
9001d496:	434b      	muls	r3, r1
9001d498:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d49c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001d49e:	f103 0c01 	add.w	ip, r3, #1
9001d4a2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001d4a6:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001d4aa:	fa5f fc83 	uxtb.w	ip, r3
9001d4ae:	1203      	asrs	r3, r0, #8
9001d4b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001d4b4:	fb13 f30c 	smulbb	r3, r3, ip
9001d4b8:	fb05 3501 	mla	r5, r5, r1, r3
9001d4bc:	10c3      	asrs	r3, r0, #3
9001d4be:	10d1      	asrs	r1, r2, #3
9001d4c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001d4c4:	00d2      	lsls	r2, r2, #3
9001d4c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001d4ca:	b2ad      	uxth	r5, r5
9001d4cc:	fb13 f30c 	smulbb	r3, r3, ip
9001d4d0:	b2d2      	uxtb	r2, r2
9001d4d2:	fb01 3104 	mla	r1, r1, r4, r3
9001d4d6:	00c3      	lsls	r3, r0, #3
9001d4d8:	b2db      	uxtb	r3, r3
9001d4da:	b289      	uxth	r1, r1
9001d4dc:	fb13 f30c 	smulbb	r3, r3, ip
9001d4e0:	fb02 3304 	mla	r3, r2, r4, r3
9001d4e4:	b29a      	uxth	r2, r3
9001d4e6:	1c6b      	adds	r3, r5, #1
9001d4e8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d4ec:	1c53      	adds	r3, r2, #1
9001d4ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d4f2:	1c4a      	adds	r2, r1, #1
9001d4f4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d4f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001d4fc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d500:	0949      	lsrs	r1, r1, #5
9001d502:	432b      	orrs	r3, r5
9001d504:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001d508:	430b      	orrs	r3, r1
9001d50a:	803b      	strh	r3, [r7, #0]
9001d50c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d50e:	3702      	adds	r7, #2
9001d510:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001d512:	4413      	add	r3, r2
9001d514:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d516:	9321      	str	r3, [sp, #132]	; 0x84
9001d518:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d51a:	441a      	add	r2, r3
9001d51c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001d51e:	3b01      	subs	r3, #1
9001d520:	9222      	str	r2, [sp, #136]	; 0x88
9001d522:	9313      	str	r3, [sp, #76]	; 0x4c
9001d524:	e687      	b.n	9001d236 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001d526:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d528:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001d52a:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001d52c:	4433      	add	r3, r6
9001d52e:	9321      	str	r3, [sp, #132]	; 0x84
9001d530:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d532:	441c      	add	r4, r3
9001d534:	9b08      	ldr	r3, [sp, #32]
9001d536:	3b01      	subs	r3, #1
9001d538:	9422      	str	r4, [sp, #136]	; 0x88
9001d53a:	9308      	str	r3, [sp, #32]
9001d53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d53e:	3302      	adds	r3, #2
9001d540:	9309      	str	r3, [sp, #36]	; 0x24
9001d542:	e656      	b.n	9001d1f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001d544:	d028      	beq.n	9001d598 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001d546:	9b08      	ldr	r3, [sp, #32]
9001d548:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001d54a:	3b01      	subs	r3, #1
9001d54c:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001d54e:	fb00 5003 	mla	r0, r0, r3, r5
9001d552:	1400      	asrs	r0, r0, #16
9001d554:	f53f ae6a 	bmi.w	9001d22c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d558:	3901      	subs	r1, #1
9001d55a:	4288      	cmp	r0, r1
9001d55c:	f6bf ae66 	bge.w	9001d22c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d560:	9924      	ldr	r1, [sp, #144]	; 0x90
9001d562:	9822      	ldr	r0, [sp, #136]	; 0x88
9001d564:	fb01 0303 	mla	r3, r1, r3, r0
9001d568:	141b      	asrs	r3, r3, #16
9001d56a:	f53f ae5f 	bmi.w	9001d22c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d56e:	3a01      	subs	r2, #1
9001d570:	4293      	cmp	r3, r2
9001d572:	f6bf ae5b 	bge.w	9001d22c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d576:	9b08      	ldr	r3, [sp, #32]
9001d578:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001d57c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001d580:	9313      	str	r3, [sp, #76]	; 0x4c
9001d582:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001d584:	2b00      	cmp	r3, #0
9001d586:	f300 8082 	bgt.w	9001d68e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001d58a:	9b08      	ldr	r3, [sp, #32]
9001d58c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001d590:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d592:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001d596:	9309      	str	r3, [sp, #36]	; 0x24
9001d598:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d59a:	2b00      	cmp	r3, #0
9001d59c:	f340 81ef 	ble.w	9001d97e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001d5a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d5a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d5a6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d5aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d5ae:	eef0 6a62 	vmov.f32	s13, s5
9001d5b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d5b6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d5ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d5be:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001d5c2:	eef0 6a43 	vmov.f32	s13, s6
9001d5c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d5ca:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001d5ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d5d2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d5d6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d5da:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d5de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d5e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d5e6:	ee12 2a90 	vmov	r2, s5
9001d5ea:	eef0 2a47 	vmov.f32	s5, s14
9001d5ee:	fb92 f3f3 	sdiv	r3, r2, r3
9001d5f2:	ee13 2a10 	vmov	r2, s6
9001d5f6:	9323      	str	r3, [sp, #140]	; 0x8c
9001d5f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d5fa:	eeb0 3a67 	vmov.f32	s6, s15
9001d5fe:	fb92 f3f3 	sdiv	r3, r2, r3
9001d602:	9324      	str	r3, [sp, #144]	; 0x90
9001d604:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d606:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d608:	3b01      	subs	r3, #1
9001d60a:	9311      	str	r3, [sp, #68]	; 0x44
9001d60c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d60e:	bf08      	it	eq
9001d610:	4613      	moveq	r3, r2
9001d612:	9308      	str	r3, [sp, #32]
9001d614:	e5df      	b.n	9001d1d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001d616:	fb08 f505 	mul.w	r5, r8, r5
9001d61a:	fb09 5303 	mla	r3, r9, r3, r5
9001d61e:	e65f      	b.n	9001d2e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001d620:	4681      	mov	r9, r0
9001d622:	e686      	b.n	9001d332 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d624:	f1c1 0210 	rsb	r2, r1, #16
9001d628:	4341      	muls	r1, r0
9001d62a:	fb09 1902 	mla	r9, r9, r2, r1
9001d62e:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001d632:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001d636:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001d63a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d63e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001d642:	ea42 0909 	orr.w	r9, r2, r9
9001d646:	fa1f f289 	uxth.w	r2, r9
9001d64a:	e71b      	b.n	9001d484 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001d64c:	803a      	strh	r2, [r7, #0]
9001d64e:	e75d      	b.n	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d650:	f115 0e01 	adds.w	lr, r5, #1
9001d654:	f53f af5a 	bmi.w	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d658:	4572      	cmp	r2, lr
9001d65a:	f6ff af57 	blt.w	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d65e:	f110 0e01 	adds.w	lr, r0, #1
9001d662:	f53f af53 	bmi.w	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d666:	4573      	cmp	r3, lr
9001d668:	f6ff af50 	blt.w	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d66c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001d66e:	b21b      	sxth	r3, r3
9001d670:	b212      	sxth	r2, r2
9001d672:	9502      	str	r5, [sp, #8]
9001d674:	9301      	str	r3, [sp, #4]
9001d676:	9200      	str	r2, [sp, #0]
9001d678:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001d67c:	e9cd c405 	strd	ip, r4, [sp, #20]
9001d680:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001d684:	4639      	mov	r1, r7
9001d686:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d688:	f7ff fc02 	bl	9001ce90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001d68c:	e73e      	b.n	9001d50c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001d68e:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d690:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001d694:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d696:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001d69a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001d69c:	fa1f fc82 	uxth.w	ip, r2
9001d6a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d6a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001d6a6:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001d6aa:	141f      	asrs	r7, r3, #16
9001d6ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d6ae:	141b      	asrs	r3, r3, #16
9001d6b0:	fb01 3707 	mla	r7, r1, r7, r3
9001d6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d6b6:	eb03 0a07 	add.w	sl, r3, r7
9001d6ba:	f813 9007 	ldrb.w	r9, [r3, r7]
9001d6be:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001d6c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001d6c6:	b29b      	uxth	r3, r3
9001d6c8:	2d00      	cmp	r5, #0
9001d6ca:	f000 813d 	beq.w	9001d948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001d6ce:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001d6d2:	eb0a 0b01 	add.w	fp, sl, r1
9001d6d6:	fa1f fa85 	uxth.w	sl, r5
9001d6da:	940f      	str	r4, [sp, #60]	; 0x3c
9001d6dc:	fb0a fc0c 	mul.w	ip, sl, ip
9001d6e0:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001d6e4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001d6e8:	eba0 000c 	sub.w	r0, r0, ip
9001d6ec:	9410      	str	r4, [sp, #64]	; 0x40
9001d6ee:	fa1f fa8a 	uxth.w	sl, sl
9001d6f2:	b280      	uxth	r0, r0
9001d6f4:	eba3 030a 	sub.w	r3, r3, sl
9001d6f8:	fb08 f000 	mul.w	r0, r8, r0
9001d6fc:	b29b      	uxth	r3, r3
9001d6fe:	fb09 0303 	mla	r3, r9, r3, r0
9001d702:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001d704:	fb0a 3300 	mla	r3, sl, r0, r3
9001d708:	fb0c 3304 	mla	r3, ip, r4, r3
9001d70c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001d710:	2b00      	cmp	r3, #0
9001d712:	f000 810b 	beq.w	9001d92c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001d716:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001d718:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001d71c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001d71e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001d722:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001d726:	f000 8114 	beq.w	9001d952 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001d72a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001d72e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001d732:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001d736:	fb0a fc0c 	mul.w	ip, sl, ip
9001d73a:	fb09 f707 	mul.w	r7, r9, r7
9001d73e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001d742:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001d746:	f107 0b20 	add.w	fp, r7, #32
9001d74a:	44cc      	add	ip, r9
9001d74c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001d750:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001d754:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d758:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001d75c:	ea4c 0909 	orr.w	r9, ip, r9
9001d760:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001d764:	8847      	ldrh	r7, [r0, #2]
9001d766:	d019      	beq.n	9001d79c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001d768:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001d76c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001d770:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001d774:	fb0a fc0c 	mul.w	ip, sl, ip
9001d778:	fb08 f807 	mul.w	r8, r8, r7
9001d77c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001d780:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001d784:	f108 0b20 	add.w	fp, r8, #32
9001d788:	44bc      	add	ip, r7
9001d78a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001d78e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001d792:	0a3f      	lsrs	r7, r7, #8
9001d794:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001d798:	ea4c 0707 	orr.w	r7, ip, r7
9001d79c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001d7a0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001d7a4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001d7a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001d7ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001d7b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d7b4:	ea4c 0909 	orr.w	r9, ip, r9
9001d7b8:	ea4a 0707 	orr.w	r7, sl, r7
9001d7bc:	2d00      	cmp	r5, #0
9001d7be:	f000 80ca 	beq.w	9001d956 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001d7c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001d7c6:	3901      	subs	r1, #1
9001d7c8:	0049      	lsls	r1, r1, #1
9001d7ca:	3102      	adds	r1, #2
9001d7cc:	eb00 0c01 	add.w	ip, r0, r1
9001d7d0:	5a41      	ldrh	r1, [r0, r1]
9001d7d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001d7d4:	28ff      	cmp	r0, #255	; 0xff
9001d7d6:	d019      	beq.n	9001d80c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001d7d8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001d7dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001d7de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001d7e2:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001d7e6:	fb04 fa01 	mul.w	sl, r4, r1
9001d7ea:	fb08 f800 	mul.w	r8, r8, r0
9001d7ee:	f10a 0020 	add.w	r0, sl, #32
9001d7f2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001d7f6:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001d7fa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001d7fe:	4441      	add	r1, r8
9001d800:	0a00      	lsrs	r0, r0, #8
9001d802:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001d806:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d80a:	4301      	orrs	r1, r0
9001d80c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001d80e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001d812:	2cff      	cmp	r4, #255	; 0xff
9001d814:	d01a      	beq.n	9001d84c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001d816:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001d81a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d81e:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001d822:	fb04 fa00 	mul.w	sl, r4, r0
9001d826:	fb08 f80c 	mul.w	r8, r8, ip
9001d82a:	f10a 0c20 	add.w	ip, sl, #32
9001d82e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001d832:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001d836:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001d83a:	4440      	add	r0, r8
9001d83c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d840:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001d844:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001d848:	ea40 000c 	orr.w	r0, r0, ip
9001d84c:	fb15 fc02 	smulbb	ip, r5, r2
9001d850:	f1c5 0810 	rsb	r8, r5, #16
9001d854:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001d858:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001d85c:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001d860:	eba8 0802 	sub.w	r8, r8, r2
9001d864:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001d868:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001d86c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001d870:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001d874:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001d878:	ea4a 0101 	orr.w	r1, sl, r1
9001d87c:	437a      	muls	r2, r7
9001d87e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001d882:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001d886:	fb09 2208 	mla	r2, r9, r8, r2
9001d88a:	ea4b 0000 	orr.w	r0, fp, r0
9001d88e:	fb05 2201 	mla	r2, r5, r1, r2
9001d892:	fb0c 2200 	mla	r2, ip, r0, r2
9001d896:	0d57      	lsrs	r7, r2, #21
9001d898:	0952      	lsrs	r2, r2, #5
9001d89a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001d89e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001d8a2:	433a      	orrs	r2, r7
9001d8a4:	2bff      	cmp	r3, #255	; 0xff
9001d8a6:	b292      	uxth	r2, r2
9001d8a8:	d102      	bne.n	9001d8b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001d8aa:	9912      	ldr	r1, [sp, #72]	; 0x48
9001d8ac:	29ff      	cmp	r1, #255	; 0xff
9001d8ae:	d063      	beq.n	9001d978 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001d8b0:	980a      	ldr	r0, [sp, #40]	; 0x28
9001d8b2:	1215      	asrs	r5, r2, #8
9001d8b4:	f8be 1000 	ldrh.w	r1, [lr]
9001d8b8:	4343      	muls	r3, r0
9001d8ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001d8bc:	10cf      	asrs	r7, r1, #3
9001d8be:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d8c2:	1c58      	adds	r0, r3, #1
9001d8c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d8c8:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001d8cc:	1208      	asrs	r0, r1, #8
9001d8ce:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001d8d2:	00c9      	lsls	r1, r1, #3
9001d8d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001d8d8:	b2db      	uxtb	r3, r3
9001d8da:	b2c9      	uxtb	r1, r1
9001d8dc:	fb10 f003 	smulbb	r0, r0, r3
9001d8e0:	fb11 f103 	smulbb	r1, r1, r3
9001d8e4:	fb05 0504 	mla	r5, r5, r4, r0
9001d8e8:	10d0      	asrs	r0, r2, #3
9001d8ea:	fb17 f703 	smulbb	r7, r7, r3
9001d8ee:	00d2      	lsls	r2, r2, #3
9001d8f0:	b2ad      	uxth	r5, r5
9001d8f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001d8f6:	b2d2      	uxtb	r2, r2
9001d8f8:	fb00 7004 	mla	r0, r0, r4, r7
9001d8fc:	1c6b      	adds	r3, r5, #1
9001d8fe:	fb02 1204 	mla	r2, r2, r4, r1
9001d902:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d906:	b292      	uxth	r2, r2
9001d908:	b280      	uxth	r0, r0
9001d90a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d90e:	1c57      	adds	r7, r2, #1
9001d910:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001d914:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d918:	433d      	orrs	r5, r7
9001d91a:	1c47      	adds	r7, r0, #1
9001d91c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001d920:	097f      	lsrs	r7, r7, #5
9001d922:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001d926:	433d      	orrs	r5, r7
9001d928:	f8ae 5000 	strh.w	r5, [lr]
9001d92c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001d92e:	f10e 0e02 	add.w	lr, lr, #2
9001d932:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001d934:	4413      	add	r3, r2
9001d936:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d938:	9321      	str	r3, [sp, #132]	; 0x84
9001d93a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d93c:	441a      	add	r2, r3
9001d93e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001d940:	3b01      	subs	r3, #1
9001d942:	9222      	str	r2, [sp, #136]	; 0x88
9001d944:	9313      	str	r3, [sp, #76]	; 0x4c
9001d946:	e61c      	b.n	9001d582 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001d948:	fb08 f000 	mul.w	r0, r8, r0
9001d94c:	fb09 0303 	mla	r3, r9, r3, r0
9001d950:	e6dc      	b.n	9001d70c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001d952:	46b9      	mov	r9, r7
9001d954:	e704      	b.n	9001d760 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001d956:	f1c2 0110 	rsb	r1, r2, #16
9001d95a:	437a      	muls	r2, r7
9001d95c:	fb09 2901 	mla	r9, r9, r1, r2
9001d960:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001d964:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001d968:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001d96c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d970:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001d974:	4302      	orrs	r2, r0
9001d976:	e795      	b.n	9001d8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001d978:	f8ae 2000 	strh.w	r2, [lr]
9001d97c:	e7d6      	b.n	9001d92c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001d97e:	b017      	add	sp, #92	; 0x5c
9001d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001d984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d988:	b085      	sub	sp, #20
9001d98a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001d98e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001d992:	2800      	cmp	r0, #0
9001d994:	9103      	str	r1, [sp, #12]
9001d996:	fb00 7406 	mla	r4, r0, r6, r7
9001d99a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001d99e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001d9a2:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001d9a6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001d9aa:	eb02 0904 	add.w	r9, r2, r4
9001d9ae:	9501      	str	r5, [sp, #4]
9001d9b0:	f2c0 8141 	blt.w	9001dc36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001d9b4:	4583      	cmp	fp, r0
9001d9b6:	f340 813e 	ble.w	9001dc36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001d9ba:	2f00      	cmp	r7, #0
9001d9bc:	f2c0 8137 	blt.w	9001dc2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001d9c0:	42be      	cmp	r6, r7
9001d9c2:	f340 8134 	ble.w	9001dc2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001d9c6:	f812 c004 	ldrb.w	ip, [r2, r4]
9001d9ca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001d9ce:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001d9d2:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001d9d6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001d9da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d9de:	4355      	muls	r5, r2
9001d9e0:	fb0c f203 	mul.w	r2, ip, r3
9001d9e4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001d9e8:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001d9ec:	441d      	add	r5, r3
9001d9ee:	f102 0320 	add.w	r3, r2, #32
9001d9f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d9f6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001d9fa:	0a1b      	lsrs	r3, r3, #8
9001d9fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001da00:	431c      	orrs	r4, r3
9001da02:	1c7b      	adds	r3, r7, #1
9001da04:	f100 811c 	bmi.w	9001dc40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001da08:	429e      	cmp	r6, r3
9001da0a:	f340 8119 	ble.w	9001dc40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001da0e:	2900      	cmp	r1, #0
9001da10:	f000 8119 	beq.w	9001dc46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001da14:	9a01      	ldr	r2, [sp, #4]
9001da16:	f899 3001 	ldrb.w	r3, [r9, #1]
9001da1a:	8855      	ldrh	r5, [r2, #2]
9001da1c:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001da20:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001da24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001da28:	fb08 f802 	mul.w	r8, r8, r2
9001da2c:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001da30:	435d      	muls	r5, r3
9001da32:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001da36:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001da3a:	44d0      	add	r8, sl
9001da3c:	f105 0a20 	add.w	sl, r5, #32
9001da40:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001da44:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001da48:	0a2d      	lsrs	r5, r5, #8
9001da4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001da4e:	432a      	orrs	r2, r5
9001da50:	3001      	adds	r0, #1
9001da52:	f100 80fe 	bmi.w	9001dc52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001da56:	4583      	cmp	fp, r0
9001da58:	f340 80fb 	ble.w	9001dc52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001da5c:	f1be 0f00 	cmp.w	lr, #0
9001da60:	f000 80fc 	beq.w	9001dc5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001da64:	2f00      	cmp	r7, #0
9001da66:	f2c0 80f1 	blt.w	9001dc4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001da6a:	42be      	cmp	r6, r7
9001da6c:	f340 80ee 	ble.w	9001dc4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001da70:	9801      	ldr	r0, [sp, #4]
9001da72:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001da76:	f819 5006 	ldrb.w	r5, [r9, r6]
9001da7a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001da7e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001da82:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001da86:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001da8a:	fb0a fa00 	mul.w	sl, sl, r0
9001da8e:	fb05 f808 	mul.w	r8, r5, r8
9001da92:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001da96:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001da9a:	4482      	add	sl, r0
9001da9c:	f108 0020 	add.w	r0, r8, #32
9001daa0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001daa4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001daa8:	0a00      	lsrs	r0, r0, #8
9001daaa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001daae:	ea4b 0b00 	orr.w	fp, fp, r0
9001dab2:	3701      	adds	r7, #1
9001dab4:	f100 80d7 	bmi.w	9001dc66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001dab8:	42be      	cmp	r6, r7
9001daba:	f340 80d4 	ble.w	9001dc66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001dabe:	2900      	cmp	r1, #0
9001dac0:	f000 80d4 	beq.w	9001dc6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001dac4:	3601      	adds	r6, #1
9001dac6:	9801      	ldr	r0, [sp, #4]
9001dac8:	f819 7006 	ldrb.w	r7, [r9, r6]
9001dacc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001dad0:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001dad4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001dad8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001dadc:	fb09 f906 	mul.w	r9, r9, r6
9001dae0:	fb07 f800 	mul.w	r8, r7, r0
9001dae4:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001dae8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001daec:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001daf0:	44d1      	add	r9, sl
9001daf2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001daf6:	f108 0020 	add.w	r0, r8, #32
9001dafa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001dafe:	0a00      	lsrs	r0, r0, #8
9001db00:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001db04:	4330      	orrs	r0, r6
9001db06:	b28e      	uxth	r6, r1
9001db08:	fa1f f98e 	uxth.w	r9, lr
9001db0c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001db10:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001db14:	fb06 f809 	mul.w	r8, r6, r9
9001db18:	0136      	lsls	r6, r6, #4
9001db1a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001db1e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001db22:	9601      	str	r6, [sp, #4]
9001db24:	ea4a 0404 	orr.w	r4, sl, r4
9001db28:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001db2c:	fa1f f689 	uxth.w	r6, r9
9001db30:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001db34:	fb11 f90e 	smulbb	r9, r1, lr
9001db38:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001db3c:	9602      	str	r6, [sp, #8]
9001db3e:	4626      	mov	r6, r4
9001db40:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001db44:	f1ce 0410 	rsb	r4, lr, #16
9001db48:	ea4a 0202 	orr.w	r2, sl, r2
9001db4c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001db50:	1a64      	subs	r4, r4, r1
9001db52:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001db56:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001db5a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001db5e:	434a      	muls	r2, r1
9001db60:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001db64:	ea4a 0000 	orr.w	r0, sl, r0
9001db68:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001db6c:	fb04 2406 	mla	r4, r4, r6, r2
9001db70:	9903      	ldr	r1, [sp, #12]
9001db72:	fb09 4200 	mla	r2, r9, r0, r4
9001db76:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001db7a:	9801      	ldr	r0, [sp, #4]
9001db7c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001db80:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001db84:	8809      	ldrh	r1, [r1, #0]
9001db86:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001db8a:	ea44 0b0b 	orr.w	fp, r4, fp
9001db8e:	9c02      	ldr	r4, [sp, #8]
9001db90:	1b00      	subs	r0, r0, r4
9001db92:	9c01      	ldr	r4, [sp, #4]
9001db94:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001db98:	eba4 0608 	sub.w	r6, r4, r8
9001db9c:	b280      	uxth	r0, r0
9001db9e:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001dba2:	b2b6      	uxth	r6, r6
9001dba4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001dba8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dbac:	4373      	muls	r3, r6
9001dbae:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001dbb2:	fb0c 3300 	mla	r3, ip, r0, r3
9001dbb6:	9802      	ldr	r0, [sp, #8]
9001dbb8:	ea42 0e0e 	orr.w	lr, r2, lr
9001dbbc:	fb00 3505 	mla	r5, r0, r5, r3
9001dbc0:	120b      	asrs	r3, r1, #8
9001dbc2:	10c8      	asrs	r0, r1, #3
9001dbc4:	fb08 5707 	mla	r7, r8, r7, r5
9001dbc8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001dbcc:	00c9      	lsls	r1, r1, #3
9001dbce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001dbd2:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001dbd6:	fa1f f28e 	uxth.w	r2, lr
9001dbda:	b2c9      	uxtb	r1, r1
9001dbdc:	b2ff      	uxtb	r7, r7
9001dbde:	437b      	muls	r3, r7
9001dbe0:	4378      	muls	r0, r7
9001dbe2:	434f      	muls	r7, r1
9001dbe4:	1c59      	adds	r1, r3, #1
9001dbe6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001dbea:	1213      	asrs	r3, r2, #8
9001dbec:	f023 0307 	bic.w	r3, r3, #7
9001dbf0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001dbf4:	1c41      	adds	r1, r0, #1
9001dbf6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001dbfa:	10d1      	asrs	r1, r2, #3
9001dbfc:	021b      	lsls	r3, r3, #8
9001dbfe:	f021 0103 	bic.w	r1, r1, #3
9001dc02:	00d2      	lsls	r2, r2, #3
9001dc04:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001dc08:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001dc0c:	00c9      	lsls	r1, r1, #3
9001dc0e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001dc12:	430b      	orrs	r3, r1
9001dc14:	1c79      	adds	r1, r7, #1
9001dc16:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001dc1a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001dc1e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001dc22:	431a      	orrs	r2, r3
9001dc24:	9b03      	ldr	r3, [sp, #12]
9001dc26:	801a      	strh	r2, [r3, #0]
9001dc28:	b005      	add	sp, #20
9001dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001dc2e:	f04f 0c00 	mov.w	ip, #0
9001dc32:	4664      	mov	r4, ip
9001dc34:	e6e5      	b.n	9001da02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001dc36:	2300      	movs	r3, #0
9001dc38:	469c      	mov	ip, r3
9001dc3a:	461a      	mov	r2, r3
9001dc3c:	461c      	mov	r4, r3
9001dc3e:	e707      	b.n	9001da50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001dc40:	2300      	movs	r3, #0
9001dc42:	461a      	mov	r2, r3
9001dc44:	e704      	b.n	9001da50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001dc46:	460b      	mov	r3, r1
9001dc48:	460a      	mov	r2, r1
9001dc4a:	e701      	b.n	9001da50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001dc4c:	2500      	movs	r5, #0
9001dc4e:	46ab      	mov	fp, r5
9001dc50:	e72f      	b.n	9001dab2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001dc52:	2700      	movs	r7, #0
9001dc54:	463d      	mov	r5, r7
9001dc56:	4638      	mov	r0, r7
9001dc58:	46bb      	mov	fp, r7
9001dc5a:	e754      	b.n	9001db06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001dc5c:	4677      	mov	r7, lr
9001dc5e:	4675      	mov	r5, lr
9001dc60:	4670      	mov	r0, lr
9001dc62:	46f3      	mov	fp, lr
9001dc64:	e74f      	b.n	9001db06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001dc66:	2700      	movs	r7, #0
9001dc68:	4638      	mov	r0, r7
9001dc6a:	e74c      	b.n	9001db06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001dc6c:	460f      	mov	r7, r1
9001dc6e:	4608      	mov	r0, r1
9001dc70:	e749      	b.n	9001db06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001dc74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dc78:	b093      	sub	sp, #76	; 0x4c
9001dc7a:	9210      	str	r2, [sp, #64]	; 0x40
9001dc7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001dc7e:	9011      	str	r0, [sp, #68]	; 0x44
9001dc80:	910e      	str	r1, [sp, #56]	; 0x38
9001dc82:	6850      	ldr	r0, [r2, #4]
9001dc84:	9306      	str	r3, [sp, #24]
9001dc86:	6812      	ldr	r2, [r2, #0]
9001dc88:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001dc8c:	fb00 1303 	mla	r3, r0, r3, r1
9001dc90:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001dc94:	9307      	str	r3, [sp, #28]
9001dc96:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001dc98:	681b      	ldr	r3, [r3, #0]
9001dc9a:	9308      	str	r3, [sp, #32]
9001dc9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001dc9e:	685b      	ldr	r3, [r3, #4]
9001dca0:	9309      	str	r3, [sp, #36]	; 0x24
9001dca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001dca4:	2b00      	cmp	r3, #0
9001dca6:	dc03      	bgt.n	9001dcb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001dca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001dcaa:	2b00      	cmp	r3, #0
9001dcac:	f340 83b6 	ble.w	9001e41c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001dcb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001dcb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001dcb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001dcba:	1e48      	subs	r0, r1, #1
9001dcbc:	1e55      	subs	r5, r2, #1
9001dcbe:	9b06      	ldr	r3, [sp, #24]
9001dcc0:	2b00      	cmp	r3, #0
9001dcc2:	f340 8165 	ble.w	9001df90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001dcc6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
9001dcc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001dcca:	1436      	asrs	r6, r6, #16
9001dccc:	ea4f 4323 	mov.w	r3, r3, asr #16
9001dcd0:	d406      	bmi.n	9001dce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001dcd2:	4286      	cmp	r6, r0
9001dcd4:	da04      	bge.n	9001dce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001dcd6:	2b00      	cmp	r3, #0
9001dcd8:	db02      	blt.n	9001dce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001dcda:	42ab      	cmp	r3, r5
9001dcdc:	f2c0 8159 	blt.w	9001df92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001dce0:	3601      	adds	r6, #1
9001dce2:	f100 8146 	bmi.w	9001df72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001dce6:	42b1      	cmp	r1, r6
9001dce8:	f2c0 8143 	blt.w	9001df72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001dcec:	3301      	adds	r3, #1
9001dcee:	f100 8140 	bmi.w	9001df72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001dcf2:	429a      	cmp	r2, r3
9001dcf4:	f2c0 813d 	blt.w	9001df72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001dcf8:	9b06      	ldr	r3, [sp, #24]
9001dcfa:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001dcfe:	9f07      	ldr	r7, [sp, #28]
9001dd00:	930f      	str	r3, [sp, #60]	; 0x3c
9001dd02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001dd04:	2b00      	cmp	r3, #0
9001dd06:	f340 8166 	ble.w	9001dfd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001dd0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001dd0c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001dd0e:	1418      	asrs	r0, r3, #16
9001dd10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001dd12:	142d      	asrs	r5, r5, #16
9001dd14:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001dd18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001dd1a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001dd1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001dd20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001dd24:	f100 81f0 	bmi.w	9001e108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001dd28:	f102 3eff 	add.w	lr, r2, #4294967295
9001dd2c:	4575      	cmp	r5, lr
9001dd2e:	f280 81eb 	bge.w	9001e108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001dd32:	2800      	cmp	r0, #0
9001dd34:	f2c0 81e8 	blt.w	9001e108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001dd38:	f103 3eff 	add.w	lr, r3, #4294967295
9001dd3c:	4570      	cmp	r0, lr
9001dd3e:	f280 81e3 	bge.w	9001e108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001dd42:	b212      	sxth	r2, r2
9001dd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd46:	fa1f fe81 	uxth.w	lr, r1
9001dd4a:	fb00 5002 	mla	r0, r0, r2, r5
9001dd4e:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001dd52:	eb03 0a00 	add.w	sl, r3, r0
9001dd56:	f813 9000 	ldrb.w	r9, [r3, r0]
9001dd5a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001dd5e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001dd62:	b29b      	uxth	r3, r3
9001dd64:	f1bc 0f00 	cmp.w	ip, #0
9001dd68:	f000 817b 	beq.w	9001e062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001dd6c:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001dd70:	eb0a 0b02 	add.w	fp, sl, r2
9001dd74:	fa1f fa8c 	uxth.w	sl, ip
9001dd78:	940a      	str	r4, [sp, #40]	; 0x28
9001dd7a:	fb0a fe0e 	mul.w	lr, sl, lr
9001dd7e:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001dd82:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001dd86:	eba5 050e 	sub.w	r5, r5, lr
9001dd8a:	940b      	str	r4, [sp, #44]	; 0x2c
9001dd8c:	fa1f fa8a 	uxth.w	sl, sl
9001dd90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dd92:	b2ad      	uxth	r5, r5
9001dd94:	eba3 030a 	sub.w	r3, r3, sl
9001dd98:	fb08 f505 	mul.w	r5, r8, r5
9001dd9c:	b29b      	uxth	r3, r3
9001dd9e:	fb09 5303 	mla	r3, r9, r3, r5
9001dda2:	fb0a 3304 	mla	r3, sl, r4, r3
9001dda6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001dda8:	fb0e 3304 	mla	r3, lr, r4, r3
9001ddac:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001ddb0:	2b00      	cmp	r3, #0
9001ddb2:	f000 80d1 	beq.w	9001df58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001ddb6:	9c08      	ldr	r4, [sp, #32]
9001ddb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ddbc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001ddc0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001ddc4:	f000 8152 	beq.w	9001e06c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001ddc8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001ddcc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001ddd0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ddd4:	fb0a fe0e 	mul.w	lr, sl, lr
9001ddd8:	fb09 f000 	mul.w	r0, r9, r0
9001dddc:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001dde0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001dde4:	f100 0b20 	add.w	fp, r0, #32
9001dde8:	44ce      	add	lr, r9
9001ddea:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001ddee:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ddf2:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ddf6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ddfa:	ea4e 0909 	orr.w	r9, lr, r9
9001ddfe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001de02:	8868      	ldrh	r0, [r5, #2]
9001de04:	d019      	beq.n	9001de3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001de06:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001de0a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001de0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001de12:	fb0a fe0e 	mul.w	lr, sl, lr
9001de16:	fb08 f800 	mul.w	r8, r8, r0
9001de1a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001de1e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001de22:	f108 0b20 	add.w	fp, r8, #32
9001de26:	4486      	add	lr, r0
9001de28:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001de2c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001de30:	0a00      	lsrs	r0, r0, #8
9001de32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001de36:	ea4e 0000 	orr.w	r0, lr, r0
9001de3a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001de3e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001de42:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001de46:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001de4a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001de4e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001de52:	ea4e 0909 	orr.w	r9, lr, r9
9001de56:	ea4a 0000 	orr.w	r0, sl, r0
9001de5a:	f1bc 0f00 	cmp.w	ip, #0
9001de5e:	f000 8107 	beq.w	9001e070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001de62:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001de66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001de68:	3a01      	subs	r2, #1
9001de6a:	2cff      	cmp	r4, #255	; 0xff
9001de6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001de70:	f102 0202 	add.w	r2, r2, #2
9001de74:	eb05 0e02 	add.w	lr, r5, r2
9001de78:	5aaa      	ldrh	r2, [r5, r2]
9001de7a:	d018      	beq.n	9001deae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001de7c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001de80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001de84:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001de88:	fb04 fa02 	mul.w	sl, r4, r2
9001de8c:	fb08 f805 	mul.w	r8, r8, r5
9001de90:	f10a 0520 	add.w	r5, sl, #32
9001de94:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001de98:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001de9c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001dea0:	4442      	add	r2, r8
9001dea2:	0a2d      	lsrs	r5, r5, #8
9001dea4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001dea8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001deac:	432a      	orrs	r2, r5
9001deae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001deb0:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001deb4:	2cff      	cmp	r4, #255	; 0xff
9001deb6:	d01a      	beq.n	9001deee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001deb8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001debc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001dec0:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001dec4:	fb04 fa05 	mul.w	sl, r4, r5
9001dec8:	fb08 f80e 	mul.w	r8, r8, lr
9001decc:	f10a 0e20 	add.w	lr, sl, #32
9001ded0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001ded4:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ded8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001dedc:	4445      	add	r5, r8
9001dede:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dee2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001dee6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001deea:	ea45 050e 	orr.w	r5, r5, lr
9001deee:	fb1c fe01 	smulbb	lr, ip, r1
9001def2:	f1cc 0810 	rsb	r8, ip, #16
9001def6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001defa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001defe:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001df02:	eba8 0801 	sub.w	r8, r8, r1
9001df06:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001df0a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001df0e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001df12:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001df16:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001df1a:	ea4a 0202 	orr.w	r2, sl, r2
9001df1e:	4341      	muls	r1, r0
9001df20:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001df24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001df28:	fb09 1108 	mla	r1, r9, r8, r1
9001df2c:	ea4b 0505 	orr.w	r5, fp, r5
9001df30:	fb0c 1102 	mla	r1, ip, r2, r1
9001df34:	fb0e 1e05 	mla	lr, lr, r5, r1
9001df38:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001df3c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001df40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001df44:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001df48:	ea42 0e0e 	orr.w	lr, r2, lr
9001df4c:	fa1f f28e 	uxth.w	r2, lr
9001df50:	2bff      	cmp	r3, #255	; 0xff
9001df52:	f040 80a1 	bne.w	9001e098 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001df56:	803a      	strh	r2, [r7, #0]
9001df58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001df5a:	3702      	adds	r7, #2
9001df5c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001df5e:	4413      	add	r3, r2
9001df60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001df62:	931d      	str	r3, [sp, #116]	; 0x74
9001df64:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001df66:	441a      	add	r2, r3
9001df68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001df6a:	3b01      	subs	r3, #1
9001df6c:	921e      	str	r2, [sp, #120]	; 0x78
9001df6e:	930f      	str	r3, [sp, #60]	; 0x3c
9001df70:	e6c7      	b.n	9001dd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001df72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001df74:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001df76:	9c1e      	ldr	r4, [sp, #120]	; 0x78
9001df78:	4433      	add	r3, r6
9001df7a:	931d      	str	r3, [sp, #116]	; 0x74
9001df7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001df7e:	441c      	add	r4, r3
9001df80:	9b06      	ldr	r3, [sp, #24]
9001df82:	3b01      	subs	r3, #1
9001df84:	941e      	str	r4, [sp, #120]	; 0x78
9001df86:	9306      	str	r3, [sp, #24]
9001df88:	9b07      	ldr	r3, [sp, #28]
9001df8a:	3302      	adds	r3, #2
9001df8c:	9307      	str	r3, [sp, #28]
9001df8e:	e696      	b.n	9001dcbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001df90:	d028      	beq.n	9001dfe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001df92:	9b06      	ldr	r3, [sp, #24]
9001df94:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001df96:	3b01      	subs	r3, #1
9001df98:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001df9a:	fb00 5003 	mla	r0, r0, r3, r5
9001df9e:	1400      	asrs	r0, r0, #16
9001dfa0:	f53f aeaa 	bmi.w	9001dcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001dfa4:	3901      	subs	r1, #1
9001dfa6:	4288      	cmp	r0, r1
9001dfa8:	f6bf aea6 	bge.w	9001dcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001dfac:	9920      	ldr	r1, [sp, #128]	; 0x80
9001dfae:	981e      	ldr	r0, [sp, #120]	; 0x78
9001dfb0:	fb01 0303 	mla	r3, r1, r3, r0
9001dfb4:	141b      	asrs	r3, r3, #16
9001dfb6:	f53f ae9f 	bmi.w	9001dcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001dfba:	3a01      	subs	r2, #1
9001dfbc:	4293      	cmp	r3, r2
9001dfbe:	f6bf ae9b 	bge.w	9001dcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001dfc2:	9b06      	ldr	r3, [sp, #24]
9001dfc4:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001dfc8:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001dfcc:	930f      	str	r3, [sp, #60]	; 0x3c
9001dfce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001dfd0:	2b00      	cmp	r3, #0
9001dfd2:	f300 80b6 	bgt.w	9001e142 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001dfd6:	9b06      	ldr	r3, [sp, #24]
9001dfd8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001dfdc:	9b07      	ldr	r3, [sp, #28]
9001dfde:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001dfe2:	9307      	str	r3, [sp, #28]
9001dfe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001dfe6:	2b00      	cmp	r3, #0
9001dfe8:	f340 8218 	ble.w	9001e41c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001dfec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001dff0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001dff2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001dff6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001dffa:	eef0 6a62 	vmov.f32	s13, s5
9001dffe:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e002:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e006:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e00a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9001e00e:	eef0 6a43 	vmov.f32	s13, s6
9001e012:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e016:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9001e01a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e01e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e022:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e026:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e02a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e02e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e032:	ee12 2a90 	vmov	r2, s5
9001e036:	eef0 2a47 	vmov.f32	s5, s14
9001e03a:	fb92 f3f3 	sdiv	r3, r2, r3
9001e03e:	ee13 2a10 	vmov	r2, s6
9001e042:	931f      	str	r3, [sp, #124]	; 0x7c
9001e044:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e046:	eeb0 3a67 	vmov.f32	s6, s15
9001e04a:	fb92 f3f3 	sdiv	r3, r2, r3
9001e04e:	9320      	str	r3, [sp, #128]	; 0x80
9001e050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e052:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001e054:	3b01      	subs	r3, #1
9001e056:	930e      	str	r3, [sp, #56]	; 0x38
9001e058:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e05a:	bf08      	it	eq
9001e05c:	4613      	moveq	r3, r2
9001e05e:	9306      	str	r3, [sp, #24]
9001e060:	e61f      	b.n	9001dca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001e062:	fb08 f505 	mul.w	r5, r8, r5
9001e066:	fb09 5303 	mla	r3, r9, r3, r5
9001e06a:	e69f      	b.n	9001ddac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001e06c:	4681      	mov	r9, r0
9001e06e:	e6c6      	b.n	9001ddfe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001e070:	f1c1 0210 	rsb	r2, r1, #16
9001e074:	4341      	muls	r1, r0
9001e076:	fb09 1902 	mla	r9, r9, r2, r1
9001e07a:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001e07e:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001e082:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001e086:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e08a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001e08e:	ea42 0909 	orr.w	r9, r2, r9
9001e092:	fa1f f289 	uxth.w	r2, r9
9001e096:	e75b      	b.n	9001df50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001e098:	f8b7 c000 	ldrh.w	ip, [r7]
9001e09c:	43db      	mvns	r3, r3
9001e09e:	ea4f 202c 	mov.w	r0, ip, asr #8
9001e0a2:	fa5f fe83 	uxtb.w	lr, r3
9001e0a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001e0aa:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001e0ae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001e0b2:	fb00 f00e 	mul.w	r0, r0, lr
9001e0b6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e0ba:	b2db      	uxtb	r3, r3
9001e0bc:	1c41      	adds	r1, r0, #1
9001e0be:	fb05 f50e 	mul.w	r5, r5, lr
9001e0c2:	fb03 f30e 	mul.w	r3, r3, lr
9001e0c6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001e0ca:	1211      	asrs	r1, r2, #8
9001e0cc:	f021 0107 	bic.w	r1, r1, #7
9001e0d0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001e0d4:	48d3      	ldr	r0, [pc, #844]	; (9001e424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001e0d6:	b2c9      	uxtb	r1, r1
9001e0d8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001e0dc:	1c69      	adds	r1, r5, #1
9001e0de:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001e0e2:	10d1      	asrs	r1, r2, #3
9001e0e4:	00d2      	lsls	r2, r2, #3
9001e0e6:	f021 0103 	bic.w	r1, r1, #3
9001e0ea:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001e0ee:	00c9      	lsls	r1, r1, #3
9001e0f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e0f4:	4301      	orrs	r1, r0
9001e0f6:	1c58      	adds	r0, r3, #1
9001e0f8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001e0fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001e100:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001e104:	430a      	orrs	r2, r1
9001e106:	e726      	b.n	9001df56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001e108:	f115 0e01 	adds.w	lr, r5, #1
9001e10c:	f53f af24 	bmi.w	9001df58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e110:	4572      	cmp	r2, lr
9001e112:	f6ff af21 	blt.w	9001df58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e116:	f110 0e01 	adds.w	lr, r0, #1
9001e11a:	f53f af1d 	bmi.w	9001df58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e11e:	4573      	cmp	r3, lr
9001e120:	f6ff af1a 	blt.w	9001df58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e124:	b21b      	sxth	r3, r3
9001e126:	b212      	sxth	r2, r2
9001e128:	9301      	str	r3, [sp, #4]
9001e12a:	9200      	str	r2, [sp, #0]
9001e12c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001e130:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001e134:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001e138:	4639      	mov	r1, r7
9001e13a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001e13c:	f7ff fc22 	bl	9001d984 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001e140:	e70a      	b.n	9001df58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e144:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e148:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e14a:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001e14e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e150:	fa1f fc82 	uxth.w	ip, r2
9001e154:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e158:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001e15a:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001e15e:	141f      	asrs	r7, r3, #16
9001e160:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e162:	141b      	asrs	r3, r3, #16
9001e164:	fb01 3707 	mla	r7, r1, r7, r3
9001e168:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e16a:	eb03 0a07 	add.w	sl, r3, r7
9001e16e:	f813 9007 	ldrb.w	r9, [r3, r7]
9001e172:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001e176:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001e17a:	b29b      	uxth	r3, r3
9001e17c:	2d00      	cmp	r5, #0
9001e17e:	f000 80fe 	beq.w	9001e37e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001e182:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001e186:	eb0a 0b01 	add.w	fp, sl, r1
9001e18a:	fa1f fa85 	uxth.w	sl, r5
9001e18e:	940c      	str	r4, [sp, #48]	; 0x30
9001e190:	fb0a fc0c 	mul.w	ip, sl, ip
9001e194:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001e198:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001e19c:	eba0 000c 	sub.w	r0, r0, ip
9001e1a0:	940d      	str	r4, [sp, #52]	; 0x34
9001e1a2:	fa1f fa8a 	uxth.w	sl, sl
9001e1a6:	b280      	uxth	r0, r0
9001e1a8:	eba3 030a 	sub.w	r3, r3, sl
9001e1ac:	fb08 f000 	mul.w	r0, r8, r0
9001e1b0:	b29b      	uxth	r3, r3
9001e1b2:	fb09 0303 	mla	r3, r9, r3, r0
9001e1b6:	980c      	ldr	r0, [sp, #48]	; 0x30
9001e1b8:	fb0a 3300 	mla	r3, sl, r0, r3
9001e1bc:	fb0c 3304 	mla	r3, ip, r4, r3
9001e1c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001e1c4:	2b00      	cmp	r3, #0
9001e1c6:	f000 80cc 	beq.w	9001e362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001e1ca:	9808      	ldr	r0, [sp, #32]
9001e1cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e1d0:	9c08      	ldr	r4, [sp, #32]
9001e1d2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001e1d6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001e1da:	f000 80d5 	beq.w	9001e388 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001e1de:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001e1e2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001e1e6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e1ea:	fb0a fc0c 	mul.w	ip, sl, ip
9001e1ee:	fb09 f707 	mul.w	r7, r9, r7
9001e1f2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001e1f6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001e1fa:	f107 0b20 	add.w	fp, r7, #32
9001e1fe:	44cc      	add	ip, r9
9001e200:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001e204:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001e208:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e20c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e210:	ea4c 0909 	orr.w	r9, ip, r9
9001e214:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001e218:	8847      	ldrh	r7, [r0, #2]
9001e21a:	d019      	beq.n	9001e250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001e21c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001e220:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001e224:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e228:	fb0a fc0c 	mul.w	ip, sl, ip
9001e22c:	fb08 f807 	mul.w	r8, r8, r7
9001e230:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001e234:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001e238:	f108 0b20 	add.w	fp, r8, #32
9001e23c:	44bc      	add	ip, r7
9001e23e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001e242:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001e246:	0a3f      	lsrs	r7, r7, #8
9001e248:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e24c:	ea4c 0707 	orr.w	r7, ip, r7
9001e250:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001e254:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001e258:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001e25c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001e260:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001e264:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e268:	ea4c 0909 	orr.w	r9, ip, r9
9001e26c:	ea4a 0707 	orr.w	r7, sl, r7
9001e270:	2d00      	cmp	r5, #0
9001e272:	f000 808b 	beq.w	9001e38c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001e276:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001e27a:	3901      	subs	r1, #1
9001e27c:	0049      	lsls	r1, r1, #1
9001e27e:	3102      	adds	r1, #2
9001e280:	eb00 0c01 	add.w	ip, r0, r1
9001e284:	5a41      	ldrh	r1, [r0, r1]
9001e286:	980c      	ldr	r0, [sp, #48]	; 0x30
9001e288:	28ff      	cmp	r0, #255	; 0xff
9001e28a:	d019      	beq.n	9001e2c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001e28c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001e290:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e292:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e296:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001e29a:	fb04 fa01 	mul.w	sl, r4, r1
9001e29e:	fb08 f800 	mul.w	r8, r8, r0
9001e2a2:	f10a 0020 	add.w	r0, sl, #32
9001e2a6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001e2aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001e2ae:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001e2b2:	4441      	add	r1, r8
9001e2b4:	0a00      	lsrs	r0, r0, #8
9001e2b6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001e2ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e2be:	4301      	orrs	r1, r0
9001e2c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e2c2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001e2c6:	2cff      	cmp	r4, #255	; 0xff
9001e2c8:	d01a      	beq.n	9001e300 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9001e2ca:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001e2ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e2d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001e2d6:	fb04 fa00 	mul.w	sl, r4, r0
9001e2da:	fb08 f80c 	mul.w	r8, r8, ip
9001e2de:	f10a 0c20 	add.w	ip, sl, #32
9001e2e2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001e2e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001e2ea:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001e2ee:	4440      	add	r0, r8
9001e2f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e2f4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001e2f8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001e2fc:	ea40 000c 	orr.w	r0, r0, ip
9001e300:	fb15 fc02 	smulbb	ip, r5, r2
9001e304:	f1c5 0810 	rsb	r8, r5, #16
9001e308:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001e30c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001e310:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001e314:	eba8 0802 	sub.w	r8, r8, r2
9001e318:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001e31c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e320:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001e324:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001e328:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001e32c:	ea4a 0101 	orr.w	r1, sl, r1
9001e330:	437a      	muls	r2, r7
9001e332:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001e336:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001e33a:	fb09 2208 	mla	r2, r9, r8, r2
9001e33e:	ea4b 0000 	orr.w	r0, fp, r0
9001e342:	fb05 2201 	mla	r2, r5, r1, r2
9001e346:	fb0c 2200 	mla	r2, ip, r0, r2
9001e34a:	0d57      	lsrs	r7, r2, #21
9001e34c:	0952      	lsrs	r2, r2, #5
9001e34e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e352:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e356:	433a      	orrs	r2, r7
9001e358:	2bff      	cmp	r3, #255	; 0xff
9001e35a:	b292      	uxth	r2, r2
9001e35c:	d127      	bne.n	9001e3ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9001e35e:	f8ae 2000 	strh.w	r2, [lr]
9001e362:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001e364:	f10e 0e02 	add.w	lr, lr, #2
9001e368:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001e36a:	4413      	add	r3, r2
9001e36c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001e36e:	931d      	str	r3, [sp, #116]	; 0x74
9001e370:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001e372:	441a      	add	r2, r3
9001e374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001e376:	3b01      	subs	r3, #1
9001e378:	921e      	str	r2, [sp, #120]	; 0x78
9001e37a:	930f      	str	r3, [sp, #60]	; 0x3c
9001e37c:	e627      	b.n	9001dfce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001e37e:	fb08 f000 	mul.w	r0, r8, r0
9001e382:	fb09 0303 	mla	r3, r9, r3, r0
9001e386:	e71b      	b.n	9001e1c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
9001e388:	46b9      	mov	r9, r7
9001e38a:	e743      	b.n	9001e214 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9001e38c:	f1c2 0110 	rsb	r1, r2, #16
9001e390:	437a      	muls	r2, r7
9001e392:	fb09 2901 	mla	r9, r9, r1, r2
9001e396:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001e39a:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001e39e:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001e3a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e3a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e3aa:	4302      	orrs	r2, r0
9001e3ac:	e7d4      	b.n	9001e358 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9001e3ae:	f8be 7000 	ldrh.w	r7, [lr]
9001e3b2:	43db      	mvns	r3, r3
9001e3b4:	4c1b      	ldr	r4, [pc, #108]	; (9001e424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001e3b6:	1238      	asrs	r0, r7, #8
9001e3b8:	fa5f fc83 	uxtb.w	ip, r3
9001e3bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001e3c0:	10fd      	asrs	r5, r7, #3
9001e3c2:	00fb      	lsls	r3, r7, #3
9001e3c4:	fb00 f00c 	mul.w	r0, r0, ip
9001e3c8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e3cc:	b2db      	uxtb	r3, r3
9001e3ce:	fb05 f10c 	mul.w	r1, r5, ip
9001e3d2:	1c45      	adds	r5, r0, #1
9001e3d4:	fb03 f30c 	mul.w	r3, r3, ip
9001e3d8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001e3dc:	1215      	asrs	r5, r2, #8
9001e3de:	f025 0507 	bic.w	r5, r5, #7
9001e3e2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001e3e6:	1c4d      	adds	r5, r1, #1
9001e3e8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9001e3ec:	10d1      	asrs	r1, r2, #3
9001e3ee:	b2c0      	uxtb	r0, r0
9001e3f0:	f021 0103 	bic.w	r1, r1, #3
9001e3f4:	00d2      	lsls	r2, r2, #3
9001e3f6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9001e3fa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001e3fe:	00c9      	lsls	r1, r1, #3
9001e400:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e404:	4308      	orrs	r0, r1
9001e406:	1c59      	adds	r1, r3, #1
9001e408:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001e40c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9001e410:	f3c3 03c4 	ubfx	r3, r3, #3, #5
9001e414:	4318      	orrs	r0, r3
9001e416:	f8ae 0000 	strh.w	r0, [lr]
9001e41a:	e7a2      	b.n	9001e362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001e41c:	b013      	add	sp, #76	; 0x4c
9001e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e422:	bf00      	nop
9001e424:	fffff800 	.word	0xfffff800

9001e428 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
9001e428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e42c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
9001e430:	f9bd a020 	ldrsh.w	sl, [sp, #32]
9001e434:	fb05 4c03 	mla	ip, r5, r3, r4
9001e438:	2d00      	cmp	r5, #0
9001e43a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
9001e43e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9001e442:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9001e446:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001e44a:	8808      	ldrh	r0, [r1, #0]
9001e44c:	f2c0 80a7 	blt.w	9001e59e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001e450:	45aa      	cmp	sl, r5
9001e452:	f340 80a4 	ble.w	9001e59e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001e456:	2c00      	cmp	r4, #0
9001e458:	f2c0 809f 	blt.w	9001e59a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001e45c:	42a3      	cmp	r3, r4
9001e45e:	f340 809c 	ble.w	9001e59a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001e462:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
9001e466:	1c62      	adds	r2, r4, #1
9001e468:	f100 809c 	bmi.w	9001e5a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001e46c:	4293      	cmp	r3, r2
9001e46e:	f340 8099 	ble.w	9001e5a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001e472:	f1b9 0f00 	cmp.w	r9, #0
9001e476:	f000 8095 	beq.w	9001e5a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001e47a:	f8be c002 	ldrh.w	ip, [lr, #2]
9001e47e:	3501      	adds	r5, #1
9001e480:	f100 8094 	bmi.w	9001e5ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001e484:	45aa      	cmp	sl, r5
9001e486:	f340 8091 	ble.w	9001e5ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001e48a:	2f00      	cmp	r7, #0
9001e48c:	f000 808e 	beq.w	9001e5ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001e490:	2c00      	cmp	r4, #0
9001e492:	f2c0 8089 	blt.w	9001e5a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001e496:	42a3      	cmp	r3, r4
9001e498:	f340 8086 	ble.w	9001e5a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001e49c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
9001e4a0:	3401      	adds	r4, #1
9001e4a2:	f100 8086 	bmi.w	9001e5b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001e4a6:	42a3      	cmp	r3, r4
9001e4a8:	f340 8083 	ble.w	9001e5b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001e4ac:	f1b9 0f00 	cmp.w	r9, #0
9001e4b0:	d07f      	beq.n	9001e5b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001e4b2:	3301      	adds	r3, #1
9001e4b4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
9001e4b8:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001e4bc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001e4c0:	fb19 fe07 	smulbb	lr, r9, r7
9001e4c4:	f1c7 0210 	rsb	r2, r7, #16
9001e4c8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001e4cc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001e4d0:	eba2 0209 	sub.w	r2, r2, r9
9001e4d4:	ea44 0808 	orr.w	r8, r4, r8
9001e4d8:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001e4dc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001e4e0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001e4e4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001e4e8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001e4ec:	ea44 0c0c 	orr.w	ip, r4, ip
9001e4f0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001e4f4:	fb04 f40c 	mul.w	r4, r4, ip
9001e4f8:	fb02 4808 	mla	r8, r2, r8, r4
9001e4fc:	041a      	lsls	r2, r3, #16
9001e4fe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001e502:	b2b4      	uxth	r4, r6
9001e504:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001e508:	43f6      	mvns	r6, r6
9001e50a:	4313      	orrs	r3, r2
9001e50c:	042a      	lsls	r2, r5, #16
9001e50e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001e512:	b2f6      	uxtb	r6, r6
9001e514:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001e518:	fb0e 8303 	mla	r3, lr, r3, r8
9001e51c:	432a      	orrs	r2, r5
9001e51e:	fb07 3202 	mla	r2, r7, r2, r3
9001e522:	10c7      	asrs	r7, r0, #3
9001e524:	0d53      	lsrs	r3, r2, #21
9001e526:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001e52a:	0952      	lsrs	r2, r2, #5
9001e52c:	fb17 f706 	smulbb	r7, r7, r6
9001e530:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e534:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e538:	431a      	orrs	r2, r3
9001e53a:	b293      	uxth	r3, r2
9001e53c:	1202      	asrs	r2, r0, #8
9001e53e:	121d      	asrs	r5, r3, #8
9001e540:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e544:	00c0      	lsls	r0, r0, #3
9001e546:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001e54a:	fb12 f206 	smulbb	r2, r2, r6
9001e54e:	b2c0      	uxtb	r0, r0
9001e550:	fb05 2504 	mla	r5, r5, r4, r2
9001e554:	10da      	asrs	r2, r3, #3
9001e556:	fb10 f006 	smulbb	r0, r0, r6
9001e55a:	00db      	lsls	r3, r3, #3
9001e55c:	b2ad      	uxth	r5, r5
9001e55e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001e562:	b2db      	uxtb	r3, r3
9001e564:	fb02 7204 	mla	r2, r2, r4, r7
9001e568:	fb03 0004 	mla	r0, r3, r4, r0
9001e56c:	1c6b      	adds	r3, r5, #1
9001e56e:	b292      	uxth	r2, r2
9001e570:	b280      	uxth	r0, r0
9001e572:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001e576:	1c43      	adds	r3, r0, #1
9001e578:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001e57c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e580:	1c50      	adds	r0, r2, #1
9001e582:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001e586:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001e58a:	0952      	lsrs	r2, r2, #5
9001e58c:	432b      	orrs	r3, r5
9001e58e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e592:	4313      	orrs	r3, r2
9001e594:	800b      	strh	r3, [r1, #0]
9001e596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e59a:	4680      	mov	r8, r0
9001e59c:	e763      	b.n	9001e466 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
9001e59e:	4684      	mov	ip, r0
9001e5a0:	4680      	mov	r8, r0
9001e5a2:	e76c      	b.n	9001e47e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9001e5a4:	4684      	mov	ip, r0
9001e5a6:	e76a      	b.n	9001e47e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9001e5a8:	4605      	mov	r5, r0
9001e5aa:	e779      	b.n	9001e4a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
9001e5ac:	4603      	mov	r3, r0
9001e5ae:	4605      	mov	r5, r0
9001e5b0:	e782      	b.n	9001e4b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
9001e5b2:	4603      	mov	r3, r0
9001e5b4:	e780      	b.n	9001e4b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

9001e5b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e5b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e5ba:	b093      	sub	sp, #76	; 0x4c
9001e5bc:	461d      	mov	r5, r3
9001e5be:	9210      	str	r2, [sp, #64]	; 0x40
9001e5c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001e5c2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
9001e5c6:	910a      	str	r1, [sp, #40]	; 0x28
9001e5c8:	920b      	str	r2, [sp, #44]	; 0x2c
9001e5ca:	6859      	ldr	r1, [r3, #4]
9001e5cc:	681b      	ldr	r3, [r3, #0]
9001e5ce:	9011      	str	r0, [sp, #68]	; 0x44
9001e5d0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
9001e5d4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001e5d8:	fb01 2707 	mla	r7, r1, r7, r2
9001e5dc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
9001e5e0:	9307      	str	r3, [sp, #28]
9001e5e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e5e4:	681b      	ldr	r3, [r3, #0]
9001e5e6:	9309      	str	r3, [sp, #36]	; 0x24
9001e5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001e5ea:	43db      	mvns	r3, r3
9001e5ec:	b2db      	uxtb	r3, r3
9001e5ee:	9308      	str	r3, [sp, #32]
9001e5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e5f2:	2b00      	cmp	r3, #0
9001e5f4:	dc03      	bgt.n	9001e5fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001e5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001e5f8:	2b00      	cmp	r3, #0
9001e5fa:	f340 8205 	ble.w	9001ea08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e5fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e600:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e604:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e608:	1e48      	subs	r0, r1, #1
9001e60a:	f102 3cff 	add.w	ip, r2, #4294967295
9001e60e:	2d00      	cmp	r5, #0
9001e610:	f340 80da 	ble.w	9001e7c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
9001e614:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001e618:	ea4f 4326 	mov.w	r3, r6, asr #16
9001e61c:	d406      	bmi.n	9001e62c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e61e:	4586      	cmp	lr, r0
9001e620:	da04      	bge.n	9001e62c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e622:	2b00      	cmp	r3, #0
9001e624:	db02      	blt.n	9001e62c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e626:	4563      	cmp	r3, ip
9001e628:	f2c0 80cf 	blt.w	9001e7ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001e62c:	f11e 0e01 	adds.w	lr, lr, #1
9001e630:	f100 80c1 	bmi.w	9001e7b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001e634:	4571      	cmp	r1, lr
9001e636:	f2c0 80be 	blt.w	9001e7b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001e63a:	3301      	adds	r3, #1
9001e63c:	f100 80bb 	bmi.w	9001e7b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001e640:	429a      	cmp	r2, r3
9001e642:	f2c0 80b8 	blt.w	9001e7b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001e646:	46a9      	mov	r9, r5
9001e648:	f8dd 801c 	ldr.w	r8, [sp, #28]
9001e64c:	f1b9 0f00 	cmp.w	r9, #0
9001e650:	f340 80d8 	ble.w	9001e804 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
9001e654:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e656:	1421      	asrs	r1, r4, #16
9001e658:	ea4f 4026 	mov.w	r0, r6, asr #16
9001e65c:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001e660:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9001e664:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
9001e668:	f100 8112 	bmi.w	9001e890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001e66c:	f10e 3aff 	add.w	sl, lr, #4294967295
9001e670:	4551      	cmp	r1, sl
9001e672:	f280 810d 	bge.w	9001e890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001e676:	2800      	cmp	r0, #0
9001e678:	f2c0 810a 	blt.w	9001e890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001e67c:	f103 3aff 	add.w	sl, r3, #4294967295
9001e680:	4550      	cmp	r0, sl
9001e682:	f280 8105 	bge.w	9001e890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001e686:	fa0f f38e 	sxth.w	r3, lr
9001e68a:	fb00 1103 	mla	r1, r0, r3, r1
9001e68e:	9809      	ldr	r0, [sp, #36]	; 0x24
9001e690:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
9001e694:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
9001e698:	f8ba 1002 	ldrh.w	r1, [sl, #2]
9001e69c:	f1bc 0f00 	cmp.w	ip, #0
9001e6a0:	d007      	beq.n	9001e6b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
9001e6a2:	005b      	lsls	r3, r3, #1
9001e6a4:	eb0a 0003 	add.w	r0, sl, r3
9001e6a8:	f83a 3003 	ldrh.w	r3, [sl, r3]
9001e6ac:	930c      	str	r3, [sp, #48]	; 0x30
9001e6ae:	8843      	ldrh	r3, [r0, #2]
9001e6b0:	930d      	str	r3, [sp, #52]	; 0x34
9001e6b2:	ea4f 400e 	mov.w	r0, lr, lsl #16
9001e6b6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001e6ba:	fb12 f30c 	smulbb	r3, r2, ip
9001e6be:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001e6c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001e6c6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001e6ca:	10db      	asrs	r3, r3, #3
9001e6cc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001e6d0:	ea40 000e 	orr.w	r0, r0, lr
9001e6d4:	f1cc 0e10 	rsb	lr, ip, #16
9001e6d8:	ea4a 0101 	orr.w	r1, sl, r1
9001e6dc:	9f08      	ldr	r7, [sp, #32]
9001e6de:	ebae 0e02 	sub.w	lr, lr, r2
9001e6e2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001e6e6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9001e6ea:	4351      	muls	r1, r2
9001e6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001e6ee:	fb0e 1e00 	mla	lr, lr, r0, r1
9001e6f2:	990c      	ldr	r1, [sp, #48]	; 0x30
9001e6f4:	0410      	lsls	r0, r2, #16
9001e6f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001e6fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001e6fe:	4310      	orrs	r0, r2
9001e700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001e702:	0412      	lsls	r2, r2, #16
9001e704:	fb03 e000 	mla	r0, r3, r0, lr
9001e708:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9001e70c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9001e710:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001e714:	ea42 020e 	orr.w	r2, r2, lr
9001e718:	fb03 0302 	mla	r3, r3, r2, r0
9001e71c:	f8b8 0000 	ldrh.w	r0, [r8]
9001e720:	0d5a      	lsrs	r2, r3, #21
9001e722:	095b      	lsrs	r3, r3, #5
9001e724:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e728:	1201      	asrs	r1, r0, #8
9001e72a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001e72e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001e732:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001e736:	00c0      	lsls	r0, r0, #3
9001e738:	4313      	orrs	r3, r2
9001e73a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9001e73e:	fb11 f107 	smulbb	r1, r1, r7
9001e742:	b2c0      	uxtb	r0, r0
9001e744:	b29b      	uxth	r3, r3
9001e746:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001e74a:	fb10 f007 	smulbb	r0, r0, r7
9001e74e:	fb1e fe07 	smulbb	lr, lr, r7
9001e752:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001e756:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001e75a:	fb0c 1c02 	mla	ip, ip, r2, r1
9001e75e:	10d9      	asrs	r1, r3, #3
9001e760:	00db      	lsls	r3, r3, #3
9001e762:	fa1f fc8c 	uxth.w	ip, ip
9001e766:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001e76a:	b2db      	uxtb	r3, r3
9001e76c:	fb01 e102 	mla	r1, r1, r2, lr
9001e770:	fb03 0302 	mla	r3, r3, r2, r0
9001e774:	b289      	uxth	r1, r1
9001e776:	b29a      	uxth	r2, r3
9001e778:	f10c 0301 	add.w	r3, ip, #1
9001e77c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001e780:	1c53      	adds	r3, r2, #1
9001e782:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e786:	1c4a      	adds	r2, r1, #1
9001e788:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001e78c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e790:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001e794:	0949      	lsrs	r1, r1, #5
9001e796:	ea43 030c 	orr.w	r3, r3, ip
9001e79a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e79e:	430b      	orrs	r3, r1
9001e7a0:	f8a8 3000 	strh.w	r3, [r8]
9001e7a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001e7a6:	f108 0802 	add.w	r8, r8, #2
9001e7aa:	f109 39ff 	add.w	r9, r9, #4294967295
9001e7ae:	441c      	add	r4, r3
9001e7b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001e7b2:	441e      	add	r6, r3
9001e7b4:	e74a      	b.n	9001e64c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001e7b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001e7b8:	3d01      	subs	r5, #1
9001e7ba:	441c      	add	r4, r3
9001e7bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001e7be:	441e      	add	r6, r3
9001e7c0:	9b07      	ldr	r3, [sp, #28]
9001e7c2:	3302      	adds	r3, #2
9001e7c4:	9307      	str	r3, [sp, #28]
9001e7c6:	e722      	b.n	9001e60e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001e7c8:	d022      	beq.n	9001e810 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
9001e7ca:	1e6b      	subs	r3, r5, #1
9001e7cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001e7ce:	fb00 4003 	mla	r0, r0, r3, r4
9001e7d2:	1400      	asrs	r0, r0, #16
9001e7d4:	f53f af37 	bmi.w	9001e646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e7d8:	3901      	subs	r1, #1
9001e7da:	4288      	cmp	r0, r1
9001e7dc:	f6bf af33 	bge.w	9001e646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e7e0:	9920      	ldr	r1, [sp, #128]	; 0x80
9001e7e2:	fb01 6303 	mla	r3, r1, r3, r6
9001e7e6:	141b      	asrs	r3, r3, #16
9001e7e8:	f53f af2d 	bmi.w	9001e646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e7ec:	3a01      	subs	r2, #1
9001e7ee:	4293      	cmp	r3, r2
9001e7f0:	f6bf af29 	bge.w	9001e646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e7f4:	46a8      	mov	r8, r5
9001e7f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
9001e7fa:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9001e7fe:	f1b8 0f00 	cmp.w	r8, #0
9001e802:	dc60      	bgt.n	9001e8c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
9001e804:	9b07      	ldr	r3, [sp, #28]
9001e806:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9001e80a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9001e80e:	9307      	str	r3, [sp, #28]
9001e810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e812:	2b00      	cmp	r3, #0
9001e814:	f340 80f8 	ble.w	9001ea08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e81c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e81e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e822:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e826:	eef0 6a62 	vmov.f32	s13, s5
9001e82a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e82e:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e832:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e836:	ee16 4a90 	vmov	r4, s13
9001e83a:	eef0 6a43 	vmov.f32	s13, s6
9001e83e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e842:	ee16 6a90 	vmov	r6, s13
9001e846:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e84a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e84e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e852:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e856:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e85a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e85e:	ee12 2a90 	vmov	r2, s5
9001e862:	eef0 2a47 	vmov.f32	s5, s14
9001e866:	fb92 f3f3 	sdiv	r3, r2, r3
9001e86a:	ee13 2a10 	vmov	r2, s6
9001e86e:	931f      	str	r3, [sp, #124]	; 0x7c
9001e870:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e872:	eeb0 3a67 	vmov.f32	s6, s15
9001e876:	fb92 f3f3 	sdiv	r3, r2, r3
9001e87a:	9320      	str	r3, [sp, #128]	; 0x80
9001e87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e87e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001e880:	3b01      	subs	r3, #1
9001e882:	930a      	str	r3, [sp, #40]	; 0x28
9001e884:	bf08      	it	eq
9001e886:	4615      	moveq	r5, r2
9001e888:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001e88a:	bf18      	it	ne
9001e88c:	461d      	movne	r5, r3
9001e88e:	e6af      	b.n	9001e5f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001e890:	f111 0a01 	adds.w	sl, r1, #1
9001e894:	d486      	bmi.n	9001e7a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001e896:	45d6      	cmp	lr, sl
9001e898:	db84      	blt.n	9001e7a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001e89a:	f110 0a01 	adds.w	sl, r0, #1
9001e89e:	d481      	bmi.n	9001e7a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001e8a0:	4553      	cmp	r3, sl
9001e8a2:	f6ff af7f 	blt.w	9001e7a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001e8a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
9001e8a8:	b21b      	sxth	r3, r3
9001e8aa:	9101      	str	r1, [sp, #4]
9001e8ac:	4641      	mov	r1, r8
9001e8ae:	9300      	str	r3, [sp, #0]
9001e8b0:	fa0f f38e 	sxth.w	r3, lr
9001e8b4:	e9cd 0202 	strd	r0, r2, [sp, #8]
9001e8b8:	e9cd c704 	strd	ip, r7, [sp, #16]
9001e8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001e8be:	9811      	ldr	r0, [sp, #68]	; 0x44
9001e8c0:	f7ff fdb2 	bl	9001e428 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
9001e8c4:	e76e      	b.n	9001e7a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001e8c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e8c8:	1430      	asrs	r0, r6, #16
9001e8ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001e8cc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
9001e8d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e8d4:	1423      	asrs	r3, r4, #16
9001e8d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001e8da:	fb01 3000 	mla	r0, r1, r0, r3
9001e8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e8e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
9001e8e4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
9001e8e8:	8858      	ldrh	r0, [r3, #2]
9001e8ea:	f1be 0f00 	cmp.w	lr, #0
9001e8ee:	d00b      	beq.n	9001e908 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
9001e8f0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001e8f4:	3901      	subs	r1, #1
9001e8f6:	0049      	lsls	r1, r1, #1
9001e8f8:	3102      	adds	r1, #2
9001e8fa:	eb03 0b01 	add.w	fp, r3, r1
9001e8fe:	5a5b      	ldrh	r3, [r3, r1]
9001e900:	930e      	str	r3, [sp, #56]	; 0x38
9001e902:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001e906:	930f      	str	r3, [sp, #60]	; 0x3c
9001e908:	ea4f 410c 	mov.w	r1, ip, lsl #16
9001e90c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001e910:	fb12 f30e 	smulbb	r3, r2, lr
9001e914:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001e918:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9001e91c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001e920:	10db      	asrs	r3, r3, #3
9001e922:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001e926:	ea41 010c 	orr.w	r1, r1, ip
9001e92a:	f1ce 0c10 	rsb	ip, lr, #16
9001e92e:	ea4b 0000 	orr.w	r0, fp, r0
9001e932:	9f08      	ldr	r7, [sp, #32]
9001e934:	ebac 0c02 	sub.w	ip, ip, r2
9001e938:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001e93c:	f108 38ff 	add.w	r8, r8, #4294967295
9001e940:	4350      	muls	r0, r2
9001e942:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9001e946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e948:	fb0c 0c01 	mla	ip, ip, r1, r0
9001e94c:	980e      	ldr	r0, [sp, #56]	; 0x38
9001e94e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9001e952:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
9001e956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001e958:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001e95c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001e960:	0412      	lsls	r2, r2, #16
9001e962:	ea4b 0101 	orr.w	r1, fp, r1
9001e966:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001e96a:	fb03 c101 	mla	r1, r3, r1, ip
9001e96e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9001e972:	4302      	orrs	r2, r0
9001e974:	fb03 1202 	mla	r2, r3, r2, r1
9001e978:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9001e97c:	0952      	lsrs	r2, r2, #5
9001e97e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001e982:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
9001e986:	f8b9 2000 	ldrh.w	r2, [r9]
9001e98a:	ea4b 0303 	orr.w	r3, fp, r3
9001e98e:	1211      	asrs	r1, r2, #8
9001e990:	ea4f 0ce2 	mov.w	ip, r2, asr #3
9001e994:	b29b      	uxth	r3, r3
9001e996:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001e99a:	00d2      	lsls	r2, r2, #3
9001e99c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001e9a0:	fb11 f107 	smulbb	r1, r1, r7
9001e9a4:	1218      	asrs	r0, r3, #8
9001e9a6:	fb1c fc07 	smulbb	ip, ip, r7
9001e9aa:	b2d2      	uxtb	r2, r2
9001e9ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001e9b0:	fb12 f207 	smulbb	r2, r2, r7
9001e9b4:	fb00 100a 	mla	r0, r0, sl, r1
9001e9b8:	10d9      	asrs	r1, r3, #3
9001e9ba:	00db      	lsls	r3, r3, #3
9001e9bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001e9c0:	b280      	uxth	r0, r0
9001e9c2:	b2db      	uxtb	r3, r3
9001e9c4:	fb01 c10a 	mla	r1, r1, sl, ip
9001e9c8:	fb03 230a 	mla	r3, r3, sl, r2
9001e9cc:	1c42      	adds	r2, r0, #1
9001e9ce:	b289      	uxth	r1, r1
9001e9d0:	b29b      	uxth	r3, r3
9001e9d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001e9d6:	f101 0c01 	add.w	ip, r1, #1
9001e9da:	1c5a      	adds	r2, r3, #1
9001e9dc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001e9e0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001e9e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001e9e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001e9ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001e9ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e9f2:	441c      	add	r4, r3
9001e9f4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001e9f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001e9fa:	4310      	orrs	r0, r2
9001e9fc:	441e      	add	r6, r3
9001e9fe:	ea40 000c 	orr.w	r0, r0, ip
9001ea02:	f829 0b02 	strh.w	r0, [r9], #2
9001ea06:	e6fa      	b.n	9001e7fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
9001ea08:	b013      	add	sp, #76	; 0x4c
9001ea0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ea0e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9001ea0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001ea12:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
9001ea16:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9001ea1a:	fb0e 4703 	mla	r7, lr, r3, r4
9001ea1e:	f1be 0f00 	cmp.w	lr, #0
9001ea22:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
9001ea26:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9001ea2a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9001ea2e:	8808      	ldrh	r0, [r1, #0]
9001ea30:	db60      	blt.n	9001eaf4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9001ea32:	45f1      	cmp	r9, lr
9001ea34:	dd5e      	ble.n	9001eaf4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9001ea36:	2c00      	cmp	r4, #0
9001ea38:	db5a      	blt.n	9001eaf0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9001ea3a:	42a3      	cmp	r3, r4
9001ea3c:	dd58      	ble.n	9001eaf0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9001ea3e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
9001ea42:	1c62      	adds	r2, r4, #1
9001ea44:	d459      	bmi.n	9001eafa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9001ea46:	4293      	cmp	r3, r2
9001ea48:	dd57      	ble.n	9001eafa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9001ea4a:	2d00      	cmp	r5, #0
9001ea4c:	d055      	beq.n	9001eafa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9001ea4e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
9001ea52:	f11e 0e01 	adds.w	lr, lr, #1
9001ea56:	d454      	bmi.n	9001eb02 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9001ea58:	45f1      	cmp	r9, lr
9001ea5a:	dd52      	ble.n	9001eb02 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9001ea5c:	2e00      	cmp	r6, #0
9001ea5e:	d050      	beq.n	9001eb02 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9001ea60:	2c00      	cmp	r4, #0
9001ea62:	db4c      	blt.n	9001eafe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9001ea64:	42a3      	cmp	r3, r4
9001ea66:	dd4a      	ble.n	9001eafe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9001ea68:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
9001ea6c:	3401      	adds	r4, #1
9001ea6e:	d405      	bmi.n	9001ea7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9001ea70:	42a3      	cmp	r3, r4
9001ea72:	dd03      	ble.n	9001ea7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9001ea74:	b115      	cbz	r5, 9001ea7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9001ea76:	3301      	adds	r3, #1
9001ea78:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
9001ea7c:	fb15 f406 	smulbb	r4, r5, r6
9001ea80:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001ea84:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001ea88:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001ea8c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ea90:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001ea94:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001ea98:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001ea9c:	ea43 0c0c 	orr.w	ip, r3, ip
9001eaa0:	f1c6 0310 	rsb	r3, r6, #16
9001eaa4:	ea4e 0707 	orr.w	r7, lr, r7
9001eaa8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001eaac:	1b5b      	subs	r3, r3, r5
9001eaae:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001eab2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001eab6:	437d      	muls	r5, r7
9001eab8:	fb03 5c0c 	mla	ip, r3, ip, r5
9001eabc:	0403      	lsls	r3, r0, #16
9001eabe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001eac2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001eac6:	4318      	orrs	r0, r3
9001eac8:	0413      	lsls	r3, r2, #16
9001eaca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001eace:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001ead2:	fb04 c000 	mla	r0, r4, r0, ip
9001ead6:	4313      	orrs	r3, r2
9001ead8:	fb06 0003 	mla	r0, r6, r3, r0
9001eadc:	0d43      	lsrs	r3, r0, #21
9001eade:	0940      	lsrs	r0, r0, #5
9001eae0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eae4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001eae8:	4318      	orrs	r0, r3
9001eaea:	8008      	strh	r0, [r1, #0]
9001eaec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001eaf0:	4684      	mov	ip, r0
9001eaf2:	e7a6      	b.n	9001ea42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
9001eaf4:	4607      	mov	r7, r0
9001eaf6:	4684      	mov	ip, r0
9001eaf8:	e7ab      	b.n	9001ea52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9001eafa:	4607      	mov	r7, r0
9001eafc:	e7a9      	b.n	9001ea52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9001eafe:	4602      	mov	r2, r0
9001eb00:	e7b4      	b.n	9001ea6c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
9001eb02:	4602      	mov	r2, r0
9001eb04:	e7ba      	b.n	9001ea7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

9001eb06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001eb06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eb0a:	b08f      	sub	sp, #60	; 0x3c
9001eb0c:	461d      	mov	r5, r3
9001eb0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001eb10:	9107      	str	r1, [sp, #28]
9001eb12:	920c      	str	r2, [sp, #48]	; 0x30
9001eb14:	6859      	ldr	r1, [r3, #4]
9001eb16:	681b      	ldr	r3, [r3, #0]
9001eb18:	900d      	str	r0, [sp, #52]	; 0x34
9001eb1a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9001eb1e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
9001eb22:	fb01 2707 	mla	r7, r1, r7, r2
9001eb26:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9001eb2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001eb2c:	f8d3 8000 	ldr.w	r8, [r3]
9001eb30:	9b07      	ldr	r3, [sp, #28]
9001eb32:	2b00      	cmp	r3, #0
9001eb34:	dc03      	bgt.n	9001eb3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001eb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001eb38:	2b00      	cmp	r3, #0
9001eb3a:	f340 8182 	ble.w	9001ee42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9001eb3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001eb40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001eb44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001eb48:	1e48      	subs	r0, r1, #1
9001eb4a:	f102 3cff 	add.w	ip, r2, #4294967295
9001eb4e:	2d00      	cmp	r5, #0
9001eb50:	f340 809b 	ble.w	9001ec8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
9001eb54:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001eb58:	ea4f 4326 	mov.w	r3, r6, asr #16
9001eb5c:	d406      	bmi.n	9001eb6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001eb5e:	4586      	cmp	lr, r0
9001eb60:	da04      	bge.n	9001eb6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001eb62:	2b00      	cmp	r3, #0
9001eb64:	db02      	blt.n	9001eb6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001eb66:	4563      	cmp	r3, ip
9001eb68:	f2c0 8090 	blt.w	9001ec8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001eb6c:	f11e 0e01 	adds.w	lr, lr, #1
9001eb70:	f100 8084 	bmi.w	9001ec7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001eb74:	4571      	cmp	r1, lr
9001eb76:	f2c0 8081 	blt.w	9001ec7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001eb7a:	3301      	adds	r3, #1
9001eb7c:	d47e      	bmi.n	9001ec7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001eb7e:	429a      	cmp	r2, r3
9001eb80:	db7c      	blt.n	9001ec7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9001eb82:	46aa      	mov	sl, r5
9001eb84:	46b9      	mov	r9, r7
9001eb86:	f1ba 0f00 	cmp.w	sl, #0
9001eb8a:	f340 8099 	ble.w	9001ecc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
9001eb8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001eb90:	1421      	asrs	r1, r4, #16
9001eb92:	ea4f 4026 	mov.w	r0, r6, asr #16
9001eb96:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001eb9a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9001eb9e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
9001eba2:	f100 80d1 	bmi.w	9001ed48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001eba6:	f10e 3bff 	add.w	fp, lr, #4294967295
9001ebaa:	4559      	cmp	r1, fp
9001ebac:	f280 80cc 	bge.w	9001ed48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001ebb0:	2800      	cmp	r0, #0
9001ebb2:	f2c0 80c9 	blt.w	9001ed48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001ebb6:	f103 3bff 	add.w	fp, r3, #4294967295
9001ebba:	4558      	cmp	r0, fp
9001ebbc:	f280 80c4 	bge.w	9001ed48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001ebc0:	fa0f fe8e 	sxth.w	lr, lr
9001ebc4:	fb00 110e 	mla	r1, r0, lr, r1
9001ebc8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9001ebcc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
9001ebd0:	8841      	ldrh	r1, [r0, #2]
9001ebd2:	f1bc 0f00 	cmp.w	ip, #0
9001ebd6:	d00b      	beq.n	9001ebf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
9001ebd8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
9001ebdc:	3b01      	subs	r3, #1
9001ebde:	005b      	lsls	r3, r3, #1
9001ebe0:	3302      	adds	r3, #2
9001ebe2:	eb00 0e03 	add.w	lr, r0, r3
9001ebe6:	5ac3      	ldrh	r3, [r0, r3]
9001ebe8:	9308      	str	r3, [sp, #32]
9001ebea:	f8be 3002 	ldrh.w	r3, [lr, #2]
9001ebee:	9309      	str	r3, [sp, #36]	; 0x24
9001ebf0:	ea4f 400b 	mov.w	r0, fp, lsl #16
9001ebf4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001ebf8:	fb12 f30c 	smulbb	r3, r2, ip
9001ebfc:	f1cc 0e10 	rsb	lr, ip, #16
9001ec00:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ec04:	10db      	asrs	r3, r3, #3
9001ec06:	ebae 0e02 	sub.w	lr, lr, r2
9001ec0a:	ea40 000b 	orr.w	r0, r0, fp
9001ec0e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001ec12:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ec16:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001ec1a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ec1e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9001ec22:	ea4b 0101 	orr.w	r1, fp, r1
9001ec26:	4351      	muls	r1, r2
9001ec28:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001ec2a:	fb0e 1e00 	mla	lr, lr, r0, r1
9001ec2e:	0410      	lsls	r0, r2, #16
9001ec30:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ec34:	9908      	ldr	r1, [sp, #32]
9001ec36:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001ec3a:	4310      	orrs	r0, r2
9001ec3c:	9a08      	ldr	r2, [sp, #32]
9001ec3e:	0412      	lsls	r2, r2, #16
9001ec40:	fb03 e000 	mla	r0, r3, r0, lr
9001ec44:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9001ec48:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9001ec4c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ec50:	ea42 020e 	orr.w	r2, r2, lr
9001ec54:	fb03 0302 	mla	r3, r3, r2, r0
9001ec58:	0d5a      	lsrs	r2, r3, #21
9001ec5a:	095b      	lsrs	r3, r3, #5
9001ec5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ec60:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001ec64:	4313      	orrs	r3, r2
9001ec66:	f8a9 3000 	strh.w	r3, [r9]
9001ec6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001ec6c:	f109 0902 	add.w	r9, r9, #2
9001ec70:	f10a 3aff 	add.w	sl, sl, #4294967295
9001ec74:	441c      	add	r4, r3
9001ec76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ec78:	441e      	add	r6, r3
9001ec7a:	e784      	b.n	9001eb86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001ec7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001ec7e:	3d01      	subs	r5, #1
9001ec80:	3702      	adds	r7, #2
9001ec82:	441c      	add	r4, r3
9001ec84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ec86:	441e      	add	r6, r3
9001ec88:	e761      	b.n	9001eb4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ec8a:	d01d      	beq.n	9001ecc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001ec8c:	1e6b      	subs	r3, r5, #1
9001ec8e:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001ec90:	fb00 4003 	mla	r0, r0, r3, r4
9001ec94:	1400      	asrs	r0, r0, #16
9001ec96:	f53f af74 	bmi.w	9001eb82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ec9a:	3901      	subs	r1, #1
9001ec9c:	4288      	cmp	r0, r1
9001ec9e:	f6bf af70 	bge.w	9001eb82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001eca2:	991c      	ldr	r1, [sp, #112]	; 0x70
9001eca4:	fb01 6303 	mla	r3, r1, r3, r6
9001eca8:	141b      	asrs	r3, r3, #16
9001ecaa:	f53f af6a 	bmi.w	9001eb82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ecae:	3a01      	subs	r2, #1
9001ecb0:	4293      	cmp	r3, r2
9001ecb2:	f6bf af66 	bge.w	9001eb82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ecb6:	46a9      	mov	r9, r5
9001ecb8:	46ba      	mov	sl, r7
9001ecba:	f1b9 0f00 	cmp.w	r9, #0
9001ecbe:	dc5b      	bgt.n	9001ed78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001ecc0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9001ecc4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
9001ecc8:	9b07      	ldr	r3, [sp, #28]
9001ecca:	2b00      	cmp	r3, #0
9001eccc:	f340 80b9 	ble.w	9001ee42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9001ecd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ecd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ecd6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ecda:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ecde:	eef0 6a62 	vmov.f32	s13, s5
9001ece2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001ece6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ecea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ecee:	ee16 4a90 	vmov	r4, s13
9001ecf2:	eef0 6a43 	vmov.f32	s13, s6
9001ecf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ecfa:	ee16 6a90 	vmov	r6, s13
9001ecfe:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ed02:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ed06:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ed0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ed0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ed12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ed16:	ee12 2a90 	vmov	r2, s5
9001ed1a:	eef0 2a47 	vmov.f32	s5, s14
9001ed1e:	fb92 f3f3 	sdiv	r3, r2, r3
9001ed22:	ee13 2a10 	vmov	r2, s6
9001ed26:	931b      	str	r3, [sp, #108]	; 0x6c
9001ed28:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ed2a:	eeb0 3a67 	vmov.f32	s6, s15
9001ed2e:	fb92 f3f3 	sdiv	r3, r2, r3
9001ed32:	931c      	str	r3, [sp, #112]	; 0x70
9001ed34:	9b07      	ldr	r3, [sp, #28]
9001ed36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001ed38:	3b01      	subs	r3, #1
9001ed3a:	9307      	str	r3, [sp, #28]
9001ed3c:	bf08      	it	eq
9001ed3e:	4615      	moveq	r5, r2
9001ed40:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ed42:	bf18      	it	ne
9001ed44:	461d      	movne	r5, r3
9001ed46:	e6f3      	b.n	9001eb30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001ed48:	f111 0b01 	adds.w	fp, r1, #1
9001ed4c:	d48d      	bmi.n	9001ec6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001ed4e:	45de      	cmp	lr, fp
9001ed50:	db8b      	blt.n	9001ec6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001ed52:	f110 0b01 	adds.w	fp, r0, #1
9001ed56:	d488      	bmi.n	9001ec6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001ed58:	455b      	cmp	r3, fp
9001ed5a:	db86      	blt.n	9001ec6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001ed5c:	b21b      	sxth	r3, r3
9001ed5e:	e9cd 1001 	strd	r1, r0, [sp, #4]
9001ed62:	e9cd 2c03 	strd	r2, ip, [sp, #12]
9001ed66:	9300      	str	r3, [sp, #0]
9001ed68:	4642      	mov	r2, r8
9001ed6a:	fa0f f38e 	sxth.w	r3, lr
9001ed6e:	4649      	mov	r1, r9
9001ed70:	980d      	ldr	r0, [sp, #52]	; 0x34
9001ed72:	f7ff fe4c 	bl	9001ea0e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
9001ed76:	e778      	b.n	9001ec6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001ed78:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ed7a:	1420      	asrs	r0, r4, #16
9001ed7c:	1431      	asrs	r1, r6, #16
9001ed7e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
9001ed82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001ed86:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001ed8a:	fb03 0101 	mla	r1, r3, r1, r0
9001ed8e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9001ed92:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
9001ed96:	8841      	ldrh	r1, [r0, #2]
9001ed98:	f1be 0f00 	cmp.w	lr, #0
9001ed9c:	d00b      	beq.n	9001edb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
9001ed9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
9001eda2:	3b01      	subs	r3, #1
9001eda4:	005b      	lsls	r3, r3, #1
9001eda6:	3302      	adds	r3, #2
9001eda8:	eb00 0b03 	add.w	fp, r0, r3
9001edac:	5ac3      	ldrh	r3, [r0, r3]
9001edae:	930a      	str	r3, [sp, #40]	; 0x28
9001edb0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001edb4:	930b      	str	r3, [sp, #44]	; 0x2c
9001edb6:	ea4f 400c 	mov.w	r0, ip, lsl #16
9001edba:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001edbe:	fb12 f30e 	smulbb	r3, r2, lr
9001edc2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001edc6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001edca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001edce:	10db      	asrs	r3, r3, #3
9001edd0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001edd4:	ea40 000c 	orr.w	r0, r0, ip
9001edd8:	f1ce 0c10 	rsb	ip, lr, #16
9001eddc:	ea4b 0101 	orr.w	r1, fp, r1
9001ede0:	f109 39ff 	add.w	r9, r9, #4294967295
9001ede4:	ebac 0c02 	sub.w	ip, ip, r2
9001ede8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9001edec:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9001edf0:	4351      	muls	r1, r2
9001edf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001edf4:	fb0c 1c00 	mla	ip, ip, r0, r1
9001edf8:	990a      	ldr	r1, [sp, #40]	; 0x28
9001edfa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9001edfe:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
9001ee02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001ee04:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ee08:	0412      	lsls	r2, r2, #16
9001ee0a:	ea4b 0000 	orr.w	r0, fp, r0
9001ee0e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
9001ee12:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001ee16:	fb03 c000 	mla	r0, r3, r0, ip
9001ee1a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9001ee1e:	ea42 0b0b 	orr.w	fp, r2, fp
9001ee22:	fb03 000b 	mla	r0, r3, fp, r0
9001ee26:	0d43      	lsrs	r3, r0, #21
9001ee28:	0940      	lsrs	r0, r0, #5
9001ee2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ee2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ee32:	4318      	orrs	r0, r3
9001ee34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001ee36:	441c      	add	r4, r3
9001ee38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ee3a:	f82a 0b02 	strh.w	r0, [sl], #2
9001ee3e:	441e      	add	r6, r3
9001ee40:	e73b      	b.n	9001ecba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
9001ee42:	b00f      	add	sp, #60	; 0x3c
9001ee44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ee48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
9001ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ee4c:	b085      	sub	sp, #20
9001ee4e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9001ee52:	9102      	str	r1, [sp, #8]
9001ee54:	2c00      	cmp	r4, #0
9001ee56:	fb04 7103 	mla	r1, r4, r3, r7
9001ee5a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9001ee5e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001ee62:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9001ee66:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9001ee6a:	f2c0 811b 	blt.w	9001f0a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
9001ee6e:	45a6      	cmp	lr, r4
9001ee70:	f340 8118 	ble.w	9001f0a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
9001ee74:	2f00      	cmp	r7, #0
9001ee76:	f2c0 8113 	blt.w	9001f0a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
9001ee7a:	42bb      	cmp	r3, r7
9001ee7c:	f340 8110 	ble.w	9001f0a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
9001ee80:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9001ee84:	1c7a      	adds	r2, r7, #1
9001ee86:	f100 8110 	bmi.w	9001f0aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
9001ee8a:	4293      	cmp	r3, r2
9001ee8c:	f340 810d 	ble.w	9001f0aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
9001ee90:	2e00      	cmp	r6, #0
9001ee92:	f000 810c 	beq.w	9001f0ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
9001ee96:	f8dc 1004 	ldr.w	r1, [ip, #4]
9001ee9a:	3401      	adds	r4, #1
9001ee9c:	f100 810b 	bmi.w	9001f0b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
9001eea0:	45a6      	cmp	lr, r4
9001eea2:	f340 8108 	ble.w	9001f0b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
9001eea6:	2800      	cmp	r0, #0
9001eea8:	f000 8108 	beq.w	9001f0bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
9001eeac:	2f00      	cmp	r7, #0
9001eeae:	f2c0 8100 	blt.w	9001f0b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
9001eeb2:	42bb      	cmp	r3, r7
9001eeb4:	f340 80fd 	ble.w	9001f0b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
9001eeb8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
9001eebc:	3701      	adds	r7, #1
9001eebe:	f100 8100 	bmi.w	9001f0c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
9001eec2:	42bb      	cmp	r3, r7
9001eec4:	f340 80fd 	ble.w	9001f0c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
9001eec8:	2e00      	cmp	r6, #0
9001eeca:	f000 80fc 	beq.w	9001f0c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
9001eece:	3301      	adds	r3, #1
9001eed0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
9001eed4:	b2b6      	uxth	r6, r6
9001eed6:	b280      	uxth	r0, r0
9001eed8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001eedc:	fb00 fe06 	mul.w	lr, r0, r6
9001eee0:	0136      	lsls	r6, r6, #4
9001eee2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001eee6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001eeea:	eba6 070e 	sub.w	r7, r6, lr
9001eeee:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001eef2:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001eef6:	b280      	uxth	r0, r0
9001eef8:	b2bf      	uxth	r7, r7
9001eefa:	1a1b      	subs	r3, r3, r0
9001eefc:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001ef00:	fb0a f607 	mul.w	r6, sl, r7
9001ef04:	b29b      	uxth	r3, r3
9001ef06:	fb0b 6603 	mla	r6, fp, r3, r6
9001ef0a:	fb00 6609 	mla	r6, r0, r9, r6
9001ef0e:	fb0e 6608 	mla	r6, lr, r8, r6
9001ef12:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001ef16:	9600      	str	r6, [sp, #0]
9001ef18:	2e00      	cmp	r6, #0
9001ef1a:	f000 80be 	beq.w	9001f09a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
9001ef1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001ef22:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001ef26:	9e02      	ldr	r6, [sp, #8]
9001ef28:	fb0b fc0c 	mul.w	ip, fp, ip
9001ef2c:	fb0b f505 	mul.w	r5, fp, r5
9001ef30:	8836      	ldrh	r6, [r6, #0]
9001ef32:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001ef36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001ef3a:	9501      	str	r5, [sp, #4]
9001ef3c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001ef40:	44dc      	add	ip, fp
9001ef42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ef46:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001ef4a:	9503      	str	r5, [sp, #12]
9001ef4c:	9d01      	ldr	r5, [sp, #4]
9001ef4e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001ef52:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001ef56:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001ef5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001ef5e:	fb0a fc0c 	mul.w	ip, sl, ip
9001ef62:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001ef66:	fb0a fa01 	mul.w	sl, sl, r1
9001ef6a:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001ef6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001ef72:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001ef76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001ef7a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001ef7e:	4465      	add	r5, ip
9001ef80:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001ef84:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001ef88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ef8c:	fb09 fc0c 	mul.w	ip, r9, ip
9001ef90:	0a2d      	lsrs	r5, r5, #8
9001ef92:	fb09 f904 	mul.w	r9, r9, r4
9001ef96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ef9a:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001ef9e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001efa2:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001efa6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001efaa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001efae:	437d      	muls	r5, r7
9001efb0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001efb4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001efb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001efbc:	4461      	add	r1, ip
9001efbe:	fb08 f404 	mul.w	r4, r8, r4
9001efc2:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001efc6:	fb08 f802 	mul.w	r8, r8, r2
9001efca:	0a09      	lsrs	r1, r1, #8
9001efcc:	0a22      	lsrs	r2, r4, #8
9001efce:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001efd2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001efd6:	fb07 f70a 	mul.w	r7, r7, sl
9001efda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001efde:	4414      	add	r4, r2
9001efe0:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001efe4:	0a24      	lsrs	r4, r4, #8
9001efe6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001efea:	9a03      	ldr	r2, [sp, #12]
9001efec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001eff0:	fb02 5503 	mla	r5, r2, r3, r5
9001eff4:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001eff8:	9a00      	ldr	r2, [sp, #0]
9001effa:	fb04 540e 	mla	r4, r4, lr, r5
9001effe:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001f002:	1235      	asrs	r5, r6, #8
9001f004:	fb01 4100 	mla	r1, r1, r0, r4
9001f008:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f00c:	0a09      	lsrs	r1, r1, #8
9001f00e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001f012:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001f016:	fb03 7101 	mla	r1, r3, r1, r7
9001f01a:	fb0e 1e08 	mla	lr, lr, r8, r1
9001f01e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001f022:	fb00 e101 	mla	r1, r0, r1, lr
9001f026:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001f02a:	b287      	uxth	r7, r0
9001f02c:	0a09      	lsrs	r1, r1, #8
9001f02e:	437a      	muls	r2, r7
9001f030:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001f034:	1c53      	adds	r3, r2, #1
9001f036:	4321      	orrs	r1, r4
9001f038:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f03c:	0c0a      	lsrs	r2, r1, #16
9001f03e:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001f042:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001f046:	b2c8      	uxtb	r0, r1
9001f048:	fb12 f207 	smulbb	r2, r2, r7
9001f04c:	fb14 f407 	smulbb	r4, r4, r7
9001f050:	b2db      	uxtb	r3, r3
9001f052:	fb10 f007 	smulbb	r0, r0, r7
9001f056:	fb05 2503 	mla	r5, r5, r3, r2
9001f05a:	10f2      	asrs	r2, r6, #3
9001f05c:	00f6      	lsls	r6, r6, #3
9001f05e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001f062:	b2ad      	uxth	r5, r5
9001f064:	b2f6      	uxtb	r6, r6
9001f066:	fb02 4203 	mla	r2, r2, r3, r4
9001f06a:	fb06 0303 	mla	r3, r6, r3, r0
9001f06e:	b294      	uxth	r4, r2
9001f070:	b299      	uxth	r1, r3
9001f072:	1c6b      	adds	r3, r5, #1
9001f074:	1c62      	adds	r2, r4, #1
9001f076:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f07a:	1c4b      	adds	r3, r1, #1
9001f07c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001f080:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f084:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f088:	0952      	lsrs	r2, r2, #5
9001f08a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f08e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f092:	432b      	orrs	r3, r5
9001f094:	4313      	orrs	r3, r2
9001f096:	9a02      	ldr	r2, [sp, #8]
9001f098:	8013      	strh	r3, [r2, #0]
9001f09a:	b005      	add	sp, #20
9001f09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f0a0:	2500      	movs	r5, #0
9001f0a2:	e6ef      	b.n	9001ee84 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
9001f0a4:	2100      	movs	r1, #0
9001f0a6:	460d      	mov	r5, r1
9001f0a8:	e6f7      	b.n	9001ee9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9001f0aa:	2100      	movs	r1, #0
9001f0ac:	e6f5      	b.n	9001ee9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9001f0ae:	4631      	mov	r1, r6
9001f0b0:	e6f3      	b.n	9001ee9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
9001f0b2:	2400      	movs	r4, #0
9001f0b4:	e702      	b.n	9001eebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
9001f0b6:	2200      	movs	r2, #0
9001f0b8:	4614      	mov	r4, r2
9001f0ba:	e70b      	b.n	9001eed4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9001f0bc:	4602      	mov	r2, r0
9001f0be:	4604      	mov	r4, r0
9001f0c0:	e708      	b.n	9001eed4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9001f0c2:	2200      	movs	r2, #0
9001f0c4:	e706      	b.n	9001eed4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9001f0c6:	4632      	mov	r2, r6
9001f0c8:	e704      	b.n	9001eed4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

9001f0ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f0ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f0ce:	b09d      	sub	sp, #116	; 0x74
9001f0d0:	9219      	str	r2, [sp, #100]	; 0x64
9001f0d2:	9307      	str	r3, [sp, #28]
9001f0d4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
9001f0d6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
9001f0da:	901b      	str	r0, [sp, #108]	; 0x6c
9001f0dc:	931a      	str	r3, [sp, #104]	; 0x68
9001f0de:	6850      	ldr	r0, [r2, #4]
9001f0e0:	9117      	str	r1, [sp, #92]	; 0x5c
9001f0e2:	6812      	ldr	r2, [r2, #0]
9001f0e4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
9001f0e8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
9001f0ec:	fb00 1303 	mla	r3, r0, r3, r1
9001f0f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f0f4:	930a      	str	r3, [sp, #40]	; 0x28
9001f0f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f0f8:	681b      	ldr	r3, [r3, #0]
9001f0fa:	9310      	str	r3, [sp, #64]	; 0x40
9001f0fc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
9001f100:	930b      	str	r3, [sp, #44]	; 0x2c
9001f102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001f104:	2b00      	cmp	r3, #0
9001f106:	dc03      	bgt.n	9001f110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001f108:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001f10a:	2b00      	cmp	r3, #0
9001f10c:	f340 8375 	ble.w	9001f7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
9001f110:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f112:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f116:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f11a:	1e48      	subs	r0, r1, #1
9001f11c:	1e57      	subs	r7, r2, #1
9001f11e:	9b07      	ldr	r3, [sp, #28]
9001f120:	2b00      	cmp	r3, #0
9001f122:	f340 818e 	ble.w	9001f442 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001f126:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001f12a:	ea4f 4326 	mov.w	r3, r6, asr #16
9001f12e:	d406      	bmi.n	9001f13e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001f130:	4584      	cmp	ip, r0
9001f132:	da04      	bge.n	9001f13e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001f134:	2b00      	cmp	r3, #0
9001f136:	db02      	blt.n	9001f13e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001f138:	42bb      	cmp	r3, r7
9001f13a:	f2c0 8183 	blt.w	9001f444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
9001f13e:	f11c 0c01 	adds.w	ip, ip, #1
9001f142:	f100 8173 	bmi.w	9001f42c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f146:	4561      	cmp	r1, ip
9001f148:	f2c0 8170 	blt.w	9001f42c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f14c:	3301      	adds	r3, #1
9001f14e:	f100 816d 	bmi.w	9001f42c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f152:	429a      	cmp	r2, r3
9001f154:	f2c0 816a 	blt.w	9001f42c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f158:	9b07      	ldr	r3, [sp, #28]
9001f15a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001f15c:	9318      	str	r3, [sp, #96]	; 0x60
9001f15e:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001f160:	2b00      	cmp	r3, #0
9001f162:	f340 818c 	ble.w	9001f47e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
9001f166:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
9001f168:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001f16c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f16e:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001f172:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001f176:	1422      	asrs	r2, r4, #16
9001f178:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001f17c:	689b      	ldr	r3, [r3, #8]
9001f17e:	f100 81cd 	bmi.w	9001f51c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f182:	f103 38ff 	add.w	r8, r3, #4294967295
9001f186:	4542      	cmp	r2, r8
9001f188:	f280 81c8 	bge.w	9001f51c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f18c:	f1bc 0f00 	cmp.w	ip, #0
9001f190:	f2c0 81c4 	blt.w	9001f51c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f194:	f10e 38ff 	add.w	r8, lr, #4294967295
9001f198:	45c4      	cmp	ip, r8
9001f19a:	f280 81bf 	bge.w	9001f51c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001f19e:	b21b      	sxth	r3, r3
9001f1a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001f1a2:	fb0c 2203 	mla	r2, ip, r3, r2
9001f1a6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
9001f1aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9001f1ae:	ea4f 6e12 	mov.w	lr, r2, lsr #24
9001f1b2:	2800      	cmp	r0, #0
9001f1b4:	f000 81a9 	beq.w	9001f50a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
9001f1b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001f1bc:	950c      	str	r5, [sp, #48]	; 0x30
9001f1be:	0e2d      	lsrs	r5, r5, #24
9001f1c0:	9513      	str	r5, [sp, #76]	; 0x4c
9001f1c2:	b181      	cbz	r1, 9001f1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001f1c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
9001f1c8:	3b01      	subs	r3, #1
9001f1ca:	009b      	lsls	r3, r3, #2
9001f1cc:	3304      	adds	r3, #4
9001f1ce:	eb08 0c03 	add.w	ip, r8, r3
9001f1d2:	f858 3003 	ldr.w	r3, [r8, r3]
9001f1d6:	9308      	str	r3, [sp, #32]
9001f1d8:	0e1b      	lsrs	r3, r3, #24
9001f1da:	9311      	str	r3, [sp, #68]	; 0x44
9001f1dc:	f8dc 3004 	ldr.w	r3, [ip, #4]
9001f1e0:	930d      	str	r3, [sp, #52]	; 0x34
9001f1e2:	0e1b      	lsrs	r3, r3, #24
9001f1e4:	9314      	str	r3, [sp, #80]	; 0x50
9001f1e6:	b280      	uxth	r0, r0
9001f1e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f1ea:	b289      	uxth	r1, r1
9001f1ec:	fb00 f901 	mul.w	r9, r0, r1
9001f1f0:	0100      	lsls	r0, r0, #4
9001f1f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001f1f6:	eba0 0809 	sub.w	r8, r0, r9
9001f1fa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001f1fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001f200:	b289      	uxth	r1, r1
9001f202:	fa1f f888 	uxth.w	r8, r8
9001f206:	1a5b      	subs	r3, r3, r1
9001f208:	fb08 f000 	mul.w	r0, r8, r0
9001f20c:	b29b      	uxth	r3, r3
9001f20e:	fb03 000e 	mla	r0, r3, lr, r0
9001f212:	fb01 0005 	mla	r0, r1, r5, r0
9001f216:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001f218:	fb09 0005 	mla	r0, r9, r5, r0
9001f21c:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001f220:	2800      	cmp	r0, #0
9001f222:	f000 80fa 	beq.w	9001f41a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f226:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001f22a:	d01b      	beq.n	9001f264 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001f22c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
9001f230:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001f234:	fb0e fa0a 	mul.w	sl, lr, sl
9001f238:	fb0e fe02 	mul.w	lr, lr, r2
9001f23c:	ea4f 221a 	mov.w	r2, sl, lsr #8
9001f240:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001f244:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001f248:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001f24c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001f250:	4452      	add	r2, sl
9001f252:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f256:	0a12      	lsrs	r2, r2, #8
9001f258:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001f25c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001f260:	ea42 020c 	orr.w	r2, r2, ip
9001f264:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001f266:	2dff      	cmp	r5, #255	; 0xff
9001f268:	d021      	beq.n	9001f2ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
9001f26a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001f26c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001f270:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001f272:	fb05 fb0b 	mul.w	fp, r5, fp
9001f276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001f278:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f27c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001f27e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001f282:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001f286:	fb05 fa0a 	mul.w	sl, r5, sl
9001f28a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f28e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001f292:	44de      	add	lr, fp
9001f294:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001f298:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f29c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f2a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f2a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f2a8:	ea4e 050a 	orr.w	r5, lr, sl
9001f2ac:	950c      	str	r5, [sp, #48]	; 0x30
9001f2ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f2b0:	2dff      	cmp	r5, #255	; 0xff
9001f2b2:	d021      	beq.n	9001f2f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
9001f2b4:	9d08      	ldr	r5, [sp, #32]
9001f2b6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001f2ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f2bc:	fb05 fb0b 	mul.w	fp, r5, fp
9001f2c0:	9d08      	ldr	r5, [sp, #32]
9001f2c2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f2c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001f2c8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001f2cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001f2d0:	fb05 fa0a 	mul.w	sl, r5, sl
9001f2d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f2d8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001f2dc:	44de      	add	lr, fp
9001f2de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001f2e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f2e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f2ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f2ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f2f2:	ea4e 050a 	orr.w	r5, lr, sl
9001f2f6:	9508      	str	r5, [sp, #32]
9001f2f8:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001f2fa:	2dff      	cmp	r5, #255	; 0xff
9001f2fc:	d021      	beq.n	9001f342 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
9001f2fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001f300:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001f304:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001f306:	fb05 fb0b 	mul.w	fp, r5, fp
9001f30a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001f30c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f310:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001f312:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001f316:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001f31a:	fb05 fa0a 	mul.w	sl, r5, sl
9001f31e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f322:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001f326:	44de      	add	lr, fp
9001f328:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001f32c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f330:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f334:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001f338:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f33c:	ea4e 050a 	orr.w	r5, lr, sl
9001f340:	950d      	str	r5, [sp, #52]	; 0x34
9001f342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001f344:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
9001f348:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001f34c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001f350:	9d08      	ldr	r5, [sp, #32]
9001f352:	fb08 fc0c 	mul.w	ip, r8, ip
9001f356:	fb03 cc0e 	mla	ip, r3, lr, ip
9001f35a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9001f35e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001f360:	fb01 cc0e 	mla	ip, r1, lr, ip
9001f364:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9001f368:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001f36a:	fb09 cc0e 	mla	ip, r9, lr, ip
9001f36e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9001f372:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001f374:	fb08 f80e 	mul.w	r8, r8, lr
9001f378:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f37c:	fb03 8202 	mla	r2, r3, r2, r8
9001f380:	9b08      	ldr	r3, [sp, #32]
9001f382:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f386:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
9001f38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f38c:	fb01 220a 	mla	r2, r1, sl, r2
9001f390:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
9001f394:	883b      	ldrh	r3, [r7, #0]
9001f396:	fb09 2901 	mla	r9, r9, r1, r2
9001f39a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001f39c:	1219      	asrs	r1, r3, #8
9001f39e:	4342      	muls	r2, r0
9001f3a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f3a4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001f3a8:	1c50      	adds	r0, r2, #1
9001f3aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001f3ae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001f3b2:	ea4c 0c09 	orr.w	ip, ip, r9
9001f3b6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001f3ba:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001f3be:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001f3c2:	fa5f fc8c 	uxtb.w	ip, ip
9001f3c6:	fb12 f205 	smulbb	r2, r2, r5
9001f3ca:	b2c0      	uxtb	r0, r0
9001f3cc:	fb1c fc05 	smulbb	ip, ip, r5
9001f3d0:	fb01 2100 	mla	r1, r1, r0, r2
9001f3d4:	10da      	asrs	r2, r3, #3
9001f3d6:	fb1e fe05 	smulbb	lr, lr, r5
9001f3da:	00db      	lsls	r3, r3, #3
9001f3dc:	b289      	uxth	r1, r1
9001f3de:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001f3e2:	b2db      	uxtb	r3, r3
9001f3e4:	fb02 e200 	mla	r2, r2, r0, lr
9001f3e8:	fb03 c300 	mla	r3, r3, r0, ip
9001f3ec:	b292      	uxth	r2, r2
9001f3ee:	fa1f fc83 	uxth.w	ip, r3
9001f3f2:	1c4b      	adds	r3, r1, #1
9001f3f4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001f3f8:	f10c 0301 	add.w	r3, ip, #1
9001f3fc:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001f400:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001f404:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f408:	430b      	orrs	r3, r1
9001f40a:	1c51      	adds	r1, r2, #1
9001f40c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001f410:	0952      	lsrs	r2, r2, #5
9001f412:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f416:	4313      	orrs	r3, r2
9001f418:	803b      	strh	r3, [r7, #0]
9001f41a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001f41c:	3702      	adds	r7, #2
9001f41e:	441c      	add	r4, r3
9001f420:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f422:	441e      	add	r6, r3
9001f424:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001f426:	3b01      	subs	r3, #1
9001f428:	9318      	str	r3, [sp, #96]	; 0x60
9001f42a:	e698      	b.n	9001f15e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001f42c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001f42e:	441c      	add	r4, r3
9001f430:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f432:	441e      	add	r6, r3
9001f434:	9b07      	ldr	r3, [sp, #28]
9001f436:	3b01      	subs	r3, #1
9001f438:	9307      	str	r3, [sp, #28]
9001f43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f43c:	3302      	adds	r3, #2
9001f43e:	930a      	str	r3, [sp, #40]	; 0x28
9001f440:	e66d      	b.n	9001f11e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001f442:	d023      	beq.n	9001f48c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
9001f444:	9b07      	ldr	r3, [sp, #28]
9001f446:	9829      	ldr	r0, [sp, #164]	; 0xa4
9001f448:	3b01      	subs	r3, #1
9001f44a:	fb00 4003 	mla	r0, r0, r3, r4
9001f44e:	1400      	asrs	r0, r0, #16
9001f450:	f53f ae82 	bmi.w	9001f158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001f454:	3901      	subs	r1, #1
9001f456:	4288      	cmp	r0, r1
9001f458:	f6bf ae7e 	bge.w	9001f158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001f45c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001f45e:	fb01 6303 	mla	r3, r1, r3, r6
9001f462:	141b      	asrs	r3, r3, #16
9001f464:	f53f ae78 	bmi.w	9001f158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001f468:	3a01      	subs	r2, #1
9001f46a:	4293      	cmp	r3, r2
9001f46c:	f6bf ae74 	bge.w	9001f158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001f470:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001f474:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001f478:	f1bb 0f00 	cmp.w	fp, #0
9001f47c:	dc6c      	bgt.n	9001f558 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9001f47e:	9b07      	ldr	r3, [sp, #28]
9001f480:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001f484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f486:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9001f48a:	930a      	str	r3, [sp, #40]	; 0x28
9001f48c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001f48e:	2b00      	cmp	r3, #0
9001f490:	f340 81b3 	ble.w	9001f7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
9001f494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f498:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001f49a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f49e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f4a2:	eef0 6a62 	vmov.f32	s13, s5
9001f4a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f4aa:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f4ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f4b2:	ee16 4a90 	vmov	r4, s13
9001f4b6:	eef0 6a43 	vmov.f32	s13, s6
9001f4ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f4be:	ee16 6a90 	vmov	r6, s13
9001f4c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001f4c6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001f4ca:	ee77 2a62 	vsub.f32	s5, s14, s5
9001f4ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001f4d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001f4d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001f4da:	ee12 2a90 	vmov	r2, s5
9001f4de:	eef0 2a47 	vmov.f32	s5, s14
9001f4e2:	fb92 f3f3 	sdiv	r3, r2, r3
9001f4e6:	ee13 2a10 	vmov	r2, s6
9001f4ea:	9329      	str	r3, [sp, #164]	; 0xa4
9001f4ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001f4ee:	eeb0 3a67 	vmov.f32	s6, s15
9001f4f2:	fb92 f3f3 	sdiv	r3, r2, r3
9001f4f6:	932a      	str	r3, [sp, #168]	; 0xa8
9001f4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001f4fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
9001f4fc:	3b01      	subs	r3, #1
9001f4fe:	9317      	str	r3, [sp, #92]	; 0x5c
9001f500:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001f502:	bf08      	it	eq
9001f504:	4613      	moveq	r3, r2
9001f506:	9307      	str	r3, [sp, #28]
9001f508:	e5fb      	b.n	9001f102 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001f50a:	2900      	cmp	r1, #0
9001f50c:	f43f ae6b 	beq.w	9001f1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001f510:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9001f514:	9308      	str	r3, [sp, #32]
9001f516:	0e1b      	lsrs	r3, r3, #24
9001f518:	9311      	str	r3, [sp, #68]	; 0x44
9001f51a:	e664      	b.n	9001f1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001f51c:	f112 0801 	adds.w	r8, r2, #1
9001f520:	f53f af7b 	bmi.w	9001f41a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f524:	4543      	cmp	r3, r8
9001f526:	f6ff af78 	blt.w	9001f41a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f52a:	f11c 0801 	adds.w	r8, ip, #1
9001f52e:	f53f af74 	bmi.w	9001f41a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f532:	45c6      	cmp	lr, r8
9001f534:	f6ff af71 	blt.w	9001f41a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f538:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001f53a:	b21b      	sxth	r3, r3
9001f53c:	9201      	str	r2, [sp, #4]
9001f53e:	fa0f f28e 	sxth.w	r2, lr
9001f542:	e9cd 1504 	strd	r1, r5, [sp, #16]
9001f546:	e9cd c002 	strd	ip, r0, [sp, #8]
9001f54a:	9200      	str	r2, [sp, #0]
9001f54c:	4639      	mov	r1, r7
9001f54e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001f550:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001f552:	f7ff fc79 	bl	9001ee48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
9001f556:	e760      	b.n	9001f41a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9001f558:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9001f55a:	1427      	asrs	r7, r4, #16
9001f55c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001f55e:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001f562:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f566:	1433      	asrs	r3, r6, #16
9001f568:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001f56c:	fb01 7303 	mla	r3, r1, r3, r7
9001f570:	eb05 0783 	add.w	r7, r5, r3, lsl #2
9001f574:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
9001f578:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001f57c:	2a00      	cmp	r2, #0
9001f57e:	f000 8133 	beq.w	9001f7e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
9001f582:	687d      	ldr	r5, [r7, #4]
9001f584:	950e      	str	r5, [sp, #56]	; 0x38
9001f586:	0e2d      	lsrs	r5, r5, #24
9001f588:	9515      	str	r5, [sp, #84]	; 0x54
9001f58a:	b178      	cbz	r0, 9001f5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9001f58c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
9001f590:	3901      	subs	r1, #1
9001f592:	0089      	lsls	r1, r1, #2
9001f594:	3104      	adds	r1, #4
9001f596:	eb07 0e01 	add.w	lr, r7, r1
9001f59a:	5879      	ldr	r1, [r7, r1]
9001f59c:	9109      	str	r1, [sp, #36]	; 0x24
9001f59e:	0e09      	lsrs	r1, r1, #24
9001f5a0:	9112      	str	r1, [sp, #72]	; 0x48
9001f5a2:	f8de 1004 	ldr.w	r1, [lr, #4]
9001f5a6:	910f      	str	r1, [sp, #60]	; 0x3c
9001f5a8:	0e09      	lsrs	r1, r1, #24
9001f5aa:	9116      	str	r1, [sp, #88]	; 0x58
9001f5ac:	b292      	uxth	r2, r2
9001f5ae:	9915      	ldr	r1, [sp, #84]	; 0x54
9001f5b0:	b280      	uxth	r0, r0
9001f5b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001f5b4:	fb02 f800 	mul.w	r8, r2, r0
9001f5b8:	0112      	lsls	r2, r2, #4
9001f5ba:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001f5be:	eba2 0e08 	sub.w	lr, r2, r8
9001f5c2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001f5c6:	b280      	uxth	r0, r0
9001f5c8:	fa1f fe8e 	uxth.w	lr, lr
9001f5cc:	1a12      	subs	r2, r2, r0
9001f5ce:	fb0e f101 	mul.w	r1, lr, r1
9001f5d2:	b292      	uxth	r2, r2
9001f5d4:	fb02 110c 	mla	r1, r2, ip, r1
9001f5d8:	fb00 1105 	mla	r1, r0, r5, r1
9001f5dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001f5de:	fb08 1105 	mla	r1, r8, r5, r1
9001f5e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001f5e6:	2900      	cmp	r1, #0
9001f5e8:	f000 80f5 	beq.w	9001f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
9001f5ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001f5f0:	d019      	beq.n	9001f626 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
9001f5f2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001f5f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001f5fa:	fb0c fa0a 	mul.w	sl, ip, sl
9001f5fe:	fb0c fc03 	mul.w	ip, ip, r3
9001f602:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001f606:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001f60a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001f60e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001f612:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001f616:	4453      	add	r3, sl
9001f618:	0a3f      	lsrs	r7, r7, #8
9001f61a:	0a1b      	lsrs	r3, r3, #8
9001f61c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001f620:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001f624:	433b      	orrs	r3, r7
9001f626:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001f628:	2dff      	cmp	r5, #255	; 0xff
9001f62a:	d020      	beq.n	9001f66e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
9001f62c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001f62e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001f632:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001f634:	436f      	muls	r7, r5
9001f636:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001f638:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001f63c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f640:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001f642:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001f646:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f64a:	fb05 fa0a 	mul.w	sl, r5, sl
9001f64e:	44bc      	add	ip, r7
9001f650:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001f654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f658:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001f65c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f660:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f664:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f668:	ea4c 050a 	orr.w	r5, ip, sl
9001f66c:	950e      	str	r5, [sp, #56]	; 0x38
9001f66e:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001f670:	2dff      	cmp	r5, #255	; 0xff
9001f672:	d020      	beq.n	9001f6b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
9001f674:	9d09      	ldr	r5, [sp, #36]	; 0x24
9001f676:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001f67a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001f67c:	436f      	muls	r7, r5
9001f67e:	9d09      	ldr	r5, [sp, #36]	; 0x24
9001f680:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001f684:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f688:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001f68a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001f68e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f692:	fb05 fa0a 	mul.w	sl, r5, sl
9001f696:	44bc      	add	ip, r7
9001f698:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001f69c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f6a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001f6a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f6a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f6ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f6b0:	ea4c 050a 	orr.w	r5, ip, sl
9001f6b4:	9509      	str	r5, [sp, #36]	; 0x24
9001f6b6:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001f6b8:	2dff      	cmp	r5, #255	; 0xff
9001f6ba:	d020      	beq.n	9001f6fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
9001f6bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001f6be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001f6c2:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001f6c4:	436f      	muls	r7, r5
9001f6c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001f6c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001f6cc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001f6d0:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001f6d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001f6d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f6da:	fb05 fa0a 	mul.w	sl, r5, sl
9001f6de:	44bc      	add	ip, r7
9001f6e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001f6e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f6e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001f6ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f6f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f6f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f6f8:	ea4c 050a 	orr.w	r5, ip, sl
9001f6fc:	950f      	str	r5, [sp, #60]	; 0x3c
9001f6fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001f700:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001f704:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001f708:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001f70c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9001f70e:	fb0e f707 	mul.w	r7, lr, r7
9001f712:	fb02 770c 	mla	r7, r2, ip, r7
9001f716:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001f71a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001f71c:	fb00 770c 	mla	r7, r0, ip, r7
9001f720:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001f724:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001f726:	fb08 770c 	mla	r7, r8, ip, r7
9001f72a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9001f72e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001f730:	fb0e fe0c 	mul.w	lr, lr, ip
9001f734:	0a3f      	lsrs	r7, r7, #8
9001f736:	fb02 e303 	mla	r3, r2, r3, lr
9001f73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f73c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001f740:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001f744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001f746:	fb00 330a 	mla	r3, r0, sl, r3
9001f74a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001f74e:	f8b9 0000 	ldrh.w	r0, [r9]
9001f752:	fb08 3c0c 	mla	ip, r8, ip, r3
9001f756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f758:	1202      	asrs	r2, r0, #8
9001f75a:	4359      	muls	r1, r3
9001f75c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f760:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001f764:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001f768:	1c4b      	adds	r3, r1, #1
9001f76a:	ea47 070c 	orr.w	r7, r7, ip
9001f76e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001f772:	0c3b      	lsrs	r3, r7, #16
9001f774:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001f778:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001f77c:	b2ff      	uxtb	r7, r7
9001f77e:	fb13 f305 	smulbb	r3, r3, r5
9001f782:	b2c9      	uxtb	r1, r1
9001f784:	fb17 f705 	smulbb	r7, r7, r5
9001f788:	fb02 3201 	mla	r2, r2, r1, r3
9001f78c:	10c3      	asrs	r3, r0, #3
9001f78e:	fb1c fc05 	smulbb	ip, ip, r5
9001f792:	00c0      	lsls	r0, r0, #3
9001f794:	b292      	uxth	r2, r2
9001f796:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001f79a:	b2c0      	uxtb	r0, r0
9001f79c:	fb03 c301 	mla	r3, r3, r1, ip
9001f7a0:	fb00 7001 	mla	r0, r0, r1, r7
9001f7a4:	1c51      	adds	r1, r2, #1
9001f7a6:	b29b      	uxth	r3, r3
9001f7a8:	b280      	uxth	r0, r0
9001f7aa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001f7ae:	f100 0c01 	add.w	ip, r0, #1
9001f7b2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001f7b6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
9001f7ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001f7be:	ea4c 0202 	orr.w	r2, ip, r2
9001f7c2:	f103 0c01 	add.w	ip, r3, #1
9001f7c6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001f7ca:	095b      	lsrs	r3, r3, #5
9001f7cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f7d0:	431a      	orrs	r2, r3
9001f7d2:	f8a9 2000 	strh.w	r2, [r9]
9001f7d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001f7d8:	f109 0902 	add.w	r9, r9, #2
9001f7dc:	f10b 3bff 	add.w	fp, fp, #4294967295
9001f7e0:	441c      	add	r4, r3
9001f7e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f7e4:	441e      	add	r6, r3
9001f7e6:	e647      	b.n	9001f478 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
9001f7e8:	2800      	cmp	r0, #0
9001f7ea:	f43f aedf 	beq.w	9001f5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9001f7ee:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
9001f7f2:	9109      	str	r1, [sp, #36]	; 0x24
9001f7f4:	0e09      	lsrs	r1, r1, #24
9001f7f6:	9112      	str	r1, [sp, #72]	; 0x48
9001f7f8:	e6d8      	b.n	9001f5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9001f7fa:	b01d      	add	sp, #116	; 0x74
9001f7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f800 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
9001f800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f804:	b085      	sub	sp, #20
9001f806:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9001f80a:	9102      	str	r1, [sp, #8]
9001f80c:	2c00      	cmp	r4, #0
9001f80e:	fb04 7103 	mla	r1, r4, r3, r7
9001f812:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9001f816:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001f81a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9001f81e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9001f822:	f2c0 810c 	blt.w	9001fa3e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9001f826:	45a6      	cmp	lr, r4
9001f828:	f340 8109 	ble.w	9001fa3e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9001f82c:	2f00      	cmp	r7, #0
9001f82e:	f2c0 8104 	blt.w	9001fa3a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9001f832:	42bb      	cmp	r3, r7
9001f834:	f340 8101 	ble.w	9001fa3a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9001f838:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9001f83c:	1c7a      	adds	r2, r7, #1
9001f83e:	f100 8101 	bmi.w	9001fa44 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9001f842:	4293      	cmp	r3, r2
9001f844:	f340 80fe 	ble.w	9001fa44 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9001f848:	2e00      	cmp	r6, #0
9001f84a:	f000 80fd 	beq.w	9001fa48 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
9001f84e:	f8dc 1004 	ldr.w	r1, [ip, #4]
9001f852:	3401      	adds	r4, #1
9001f854:	f100 80fc 	bmi.w	9001fa50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9001f858:	45a6      	cmp	lr, r4
9001f85a:	f340 80f9 	ble.w	9001fa50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9001f85e:	2800      	cmp	r0, #0
9001f860:	f000 80f9 	beq.w	9001fa56 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
9001f864:	2f00      	cmp	r7, #0
9001f866:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9001f86a:	f2c0 80ef 	blt.w	9001fa4c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9001f86e:	42bb      	cmp	r3, r7
9001f870:	f340 80ec 	ble.w	9001fa4c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9001f874:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
9001f878:	3701      	adds	r7, #1
9001f87a:	f100 80ef 	bmi.w	9001fa5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9001f87e:	42bb      	cmp	r3, r7
9001f880:	f340 80ec 	ble.w	9001fa5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9001f884:	2e00      	cmp	r6, #0
9001f886:	f000 80eb 	beq.w	9001fa60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
9001f88a:	6852      	ldr	r2, [r2, #4]
9001f88c:	b2b6      	uxth	r6, r6
9001f88e:	b280      	uxth	r0, r0
9001f890:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001f894:	fb00 fe06 	mul.w	lr, r0, r6
9001f898:	0136      	lsls	r6, r6, #4
9001f89a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001f89e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001f8a2:	eba6 070e 	sub.w	r7, r6, lr
9001f8a6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001f8aa:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001f8ae:	b280      	uxth	r0, r0
9001f8b0:	b2bf      	uxth	r7, r7
9001f8b2:	1a1b      	subs	r3, r3, r0
9001f8b4:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001f8b8:	fb07 f60a 	mul.w	r6, r7, sl
9001f8bc:	b29b      	uxth	r3, r3
9001f8be:	fb0b 6603 	mla	r6, fp, r3, r6
9001f8c2:	fb00 6609 	mla	r6, r0, r9, r6
9001f8c6:	fb0e 6608 	mla	r6, lr, r8, r6
9001f8ca:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001f8ce:	9600      	str	r6, [sp, #0]
9001f8d0:	2e00      	cmp	r6, #0
9001f8d2:	f000 80af 	beq.w	9001fa34 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
9001f8d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001f8da:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001f8de:	9e02      	ldr	r6, [sp, #8]
9001f8e0:	fb0b fc0c 	mul.w	ip, fp, ip
9001f8e4:	fb0b f505 	mul.w	r5, fp, r5
9001f8e8:	8836      	ldrh	r6, [r6, #0]
9001f8ea:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001f8ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001f8f2:	9501      	str	r5, [sp, #4]
9001f8f4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001f8f8:	44dc      	add	ip, fp
9001f8fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f8fe:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001f902:	9503      	str	r5, [sp, #12]
9001f904:	9d01      	ldr	r5, [sp, #4]
9001f906:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001f90a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001f90e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001f912:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001f916:	fb0a fc0c 	mul.w	ip, sl, ip
9001f91a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001f91e:	fb0a fa01 	mul.w	sl, sl, r1
9001f922:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001f926:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001f92a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001f92e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001f932:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001f936:	4465      	add	r5, ip
9001f938:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001f93c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001f940:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f944:	fb09 fc0c 	mul.w	ip, r9, ip
9001f948:	0a2d      	lsrs	r5, r5, #8
9001f94a:	fb09 f904 	mul.w	r9, r9, r4
9001f94e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f952:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001f956:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001f95a:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001f95e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001f962:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001f966:	437d      	muls	r5, r7
9001f968:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001f96c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001f970:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001f974:	4461      	add	r1, ip
9001f976:	fb08 f404 	mul.w	r4, r8, r4
9001f97a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f97e:	fb08 f802 	mul.w	r8, r8, r2
9001f982:	0a09      	lsrs	r1, r1, #8
9001f984:	0a22      	lsrs	r2, r4, #8
9001f986:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001f98a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001f98e:	fb07 f70a 	mul.w	r7, r7, sl
9001f992:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001f996:	4414      	add	r4, r2
9001f998:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001f99c:	0a24      	lsrs	r4, r4, #8
9001f99e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001f9a2:	9a03      	ldr	r2, [sp, #12]
9001f9a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001f9a8:	fb02 5503 	mla	r5, r2, r3, r5
9001f9ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001f9b0:	fb04 540e 	mla	r4, r4, lr, r5
9001f9b4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001f9b8:	fb01 4100 	mla	r1, r1, r0, r4
9001f9bc:	0a09      	lsrs	r1, r1, #8
9001f9be:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001f9c2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001f9c6:	fb03 7101 	mla	r1, r3, r1, r7
9001f9ca:	9b00      	ldr	r3, [sp, #0]
9001f9cc:	fb0e 1e08 	mla	lr, lr, r8, r1
9001f9d0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001f9d4:	43da      	mvns	r2, r3
9001f9d6:	1233      	asrs	r3, r6, #8
9001f9d8:	fb00 e101 	mla	r1, r0, r1, lr
9001f9dc:	10f0      	asrs	r0, r6, #3
9001f9de:	b2d2      	uxtb	r2, r2
9001f9e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f9e4:	0a09      	lsrs	r1, r1, #8
9001f9e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f9ea:	00f6      	lsls	r6, r6, #3
9001f9ec:	4353      	muls	r3, r2
9001f9ee:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001f9f2:	4350      	muls	r0, r2
9001f9f4:	b2f6      	uxtb	r6, r6
9001f9f6:	4321      	orrs	r1, r4
9001f9f8:	4356      	muls	r6, r2
9001f9fa:	1c5a      	adds	r2, r3, #1
9001f9fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001fa00:	0c0b      	lsrs	r3, r1, #16
9001fa02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001fa06:	1c42      	adds	r2, r0, #1
9001fa08:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001fa0c:	0a0a      	lsrs	r2, r1, #8
9001fa0e:	021b      	lsls	r3, r3, #8
9001fa10:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001fa14:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001fa18:	00d2      	lsls	r2, r2, #3
9001fa1a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fa1e:	4313      	orrs	r3, r2
9001fa20:	1c72      	adds	r2, r6, #1
9001fa22:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001fa26:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9001fa2a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001fa2e:	4319      	orrs	r1, r3
9001fa30:	9b02      	ldr	r3, [sp, #8]
9001fa32:	8019      	strh	r1, [r3, #0]
9001fa34:	b005      	add	sp, #20
9001fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fa3a:	2500      	movs	r5, #0
9001fa3c:	e6fe      	b.n	9001f83c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
9001fa3e:	2100      	movs	r1, #0
9001fa40:	460d      	mov	r5, r1
9001fa42:	e706      	b.n	9001f852 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9001fa44:	2100      	movs	r1, #0
9001fa46:	e704      	b.n	9001f852 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9001fa48:	4631      	mov	r1, r6
9001fa4a:	e702      	b.n	9001f852 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9001fa4c:	2400      	movs	r4, #0
9001fa4e:	e713      	b.n	9001f878 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
9001fa50:	2200      	movs	r2, #0
9001fa52:	4614      	mov	r4, r2
9001fa54:	e71a      	b.n	9001f88c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9001fa56:	4602      	mov	r2, r0
9001fa58:	4604      	mov	r4, r0
9001fa5a:	e717      	b.n	9001f88c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9001fa5c:	2200      	movs	r2, #0
9001fa5e:	e715      	b.n	9001f88c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9001fa60:	4632      	mov	r2, r6
9001fa62:	e713      	b.n	9001f88c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

9001fa64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001fa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fa68:	b09b      	sub	sp, #108	; 0x6c
9001fa6a:	9218      	str	r2, [sp, #96]	; 0x60
9001fa6c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001fa6e:	9019      	str	r0, [sp, #100]	; 0x64
9001fa70:	9116      	str	r1, [sp, #88]	; 0x58
9001fa72:	6850      	ldr	r0, [r2, #4]
9001fa74:	9307      	str	r3, [sp, #28]
9001fa76:	6812      	ldr	r2, [r2, #0]
9001fa78:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001fa7c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
9001fa80:	fb00 1303 	mla	r3, r0, r3, r1
9001fa84:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001fa88:	930a      	str	r3, [sp, #40]	; 0x28
9001fa8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001fa8c:	681b      	ldr	r3, [r3, #0]
9001fa8e:	930f      	str	r3, [sp, #60]	; 0x3c
9001fa90:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001fa92:	2b00      	cmp	r3, #0
9001fa94:	dc03      	bgt.n	9001fa9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001fa96:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001fa98:	2b00      	cmp	r3, #0
9001fa9a:	f340 8387 	ble.w	900201ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9001fa9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001faa0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001faa4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001faa8:	1e48      	subs	r0, r1, #1
9001faaa:	1e57      	subs	r7, r2, #1
9001faac:	9b07      	ldr	r3, [sp, #28]
9001faae:	2b00      	cmp	r3, #0
9001fab0:	f340 8166 	ble.w	9001fd80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001fab4:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001fab8:	ea4f 4326 	mov.w	r3, r6, asr #16
9001fabc:	d406      	bmi.n	9001facc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001fabe:	4584      	cmp	ip, r0
9001fac0:	da04      	bge.n	9001facc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001fac2:	2b00      	cmp	r3, #0
9001fac4:	db02      	blt.n	9001facc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001fac6:	42bb      	cmp	r3, r7
9001fac8:	f2c0 815b 	blt.w	9001fd82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001facc:	f11c 0c01 	adds.w	ip, ip, #1
9001fad0:	f100 814b 	bmi.w	9001fd6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9001fad4:	4561      	cmp	r1, ip
9001fad6:	f2c0 8148 	blt.w	9001fd6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9001fada:	3301      	adds	r3, #1
9001fadc:	f100 8145 	bmi.w	9001fd6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9001fae0:	429a      	cmp	r2, r3
9001fae2:	f2c0 8142 	blt.w	9001fd6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9001fae6:	9b07      	ldr	r3, [sp, #28]
9001fae8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001faea:	9317      	str	r3, [sp, #92]	; 0x5c
9001faec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001faee:	2b00      	cmp	r3, #0
9001faf0:	f340 8165 	ble.w	9001fdbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001faf4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
9001faf6:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001fafa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001fafc:	f3c4 3103 	ubfx	r1, r4, #12, #4
9001fb00:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001fb04:	1422      	asrs	r2, r4, #16
9001fb06:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001fb0a:	689b      	ldr	r3, [r3, #8]
9001fb0c:	f100 81d5 	bmi.w	9001feba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9001fb10:	f103 38ff 	add.w	r8, r3, #4294967295
9001fb14:	4542      	cmp	r2, r8
9001fb16:	f280 81d0 	bge.w	9001feba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9001fb1a:	f1bc 0f00 	cmp.w	ip, #0
9001fb1e:	f2c0 81cc 	blt.w	9001feba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9001fb22:	f10e 38ff 	add.w	r8, lr, #4294967295
9001fb26:	45c4      	cmp	ip, r8
9001fb28:	f280 81c7 	bge.w	9001feba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9001fb2c:	b21b      	sxth	r3, r3
9001fb2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001fb30:	fb0c 2203 	mla	r2, ip, r3, r2
9001fb34:	eb05 0882 	add.w	r8, r5, r2, lsl #2
9001fb38:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9001fb3c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
9001fb40:	2900      	cmp	r1, #0
9001fb42:	f000 8182 	beq.w	9001fe4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001fb46:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001fb4a:	950b      	str	r5, [sp, #44]	; 0x2c
9001fb4c:	0e2d      	lsrs	r5, r5, #24
9001fb4e:	9512      	str	r5, [sp, #72]	; 0x48
9001fb50:	b180      	cbz	r0, 9001fb74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9001fb52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
9001fb56:	3b01      	subs	r3, #1
9001fb58:	009b      	lsls	r3, r3, #2
9001fb5a:	3304      	adds	r3, #4
9001fb5c:	eb08 0c03 	add.w	ip, r8, r3
9001fb60:	f858 3003 	ldr.w	r3, [r8, r3]
9001fb64:	9308      	str	r3, [sp, #32]
9001fb66:	0e1b      	lsrs	r3, r3, #24
9001fb68:	9310      	str	r3, [sp, #64]	; 0x40
9001fb6a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9001fb6e:	930c      	str	r3, [sp, #48]	; 0x30
9001fb70:	0e1b      	lsrs	r3, r3, #24
9001fb72:	9313      	str	r3, [sp, #76]	; 0x4c
9001fb74:	b289      	uxth	r1, r1
9001fb76:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001fb78:	b280      	uxth	r0, r0
9001fb7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001fb7c:	fb01 f900 	mul.w	r9, r1, r0
9001fb80:	0109      	lsls	r1, r1, #4
9001fb82:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001fb86:	eba1 0809 	sub.w	r8, r1, r9
9001fb8a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
9001fb8e:	b280      	uxth	r0, r0
9001fb90:	fa1f f888 	uxth.w	r8, r8
9001fb94:	1a09      	subs	r1, r1, r0
9001fb96:	fb08 f303 	mul.w	r3, r8, r3
9001fb9a:	b289      	uxth	r1, r1
9001fb9c:	fb01 330e 	mla	r3, r1, lr, r3
9001fba0:	fb00 3305 	mla	r3, r0, r5, r3
9001fba4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001fba6:	fb09 3305 	mla	r3, r9, r5, r3
9001fbaa:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fbae:	2b00      	cmp	r3, #0
9001fbb0:	f000 80d2 	beq.w	9001fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001fbb4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001fbb8:	d01b      	beq.n	9001fbf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
9001fbba:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
9001fbbe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001fbc2:	fb0e fa0a 	mul.w	sl, lr, sl
9001fbc6:	fb0e fe02 	mul.w	lr, lr, r2
9001fbca:	ea4f 221a 	mov.w	r2, sl, lsr #8
9001fbce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001fbd2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001fbd6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001fbda:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001fbde:	4452      	add	r2, sl
9001fbe0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fbe4:	0a12      	lsrs	r2, r2, #8
9001fbe6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001fbea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001fbee:	ea42 020c 	orr.w	r2, r2, ip
9001fbf2:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fbf4:	2dff      	cmp	r5, #255	; 0xff
9001fbf6:	d021      	beq.n	9001fc3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
9001fbf8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001fbfa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001fbfe:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fc00:	fb05 fb0b 	mul.w	fp, r5, fp
9001fc04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001fc06:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fc0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001fc0c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001fc10:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001fc14:	fb05 fa0a 	mul.w	sl, r5, sl
9001fc18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fc1c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001fc20:	44de      	add	lr, fp
9001fc22:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001fc26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fc2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fc2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fc32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fc36:	ea4e 050a 	orr.w	r5, lr, sl
9001fc3a:	950b      	str	r5, [sp, #44]	; 0x2c
9001fc3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001fc3e:	2dff      	cmp	r5, #255	; 0xff
9001fc40:	d021      	beq.n	9001fc86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
9001fc42:	9d08      	ldr	r5, [sp, #32]
9001fc44:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001fc48:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001fc4a:	fb05 fb0b 	mul.w	fp, r5, fp
9001fc4e:	9d08      	ldr	r5, [sp, #32]
9001fc50:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9001fc54:	9d10      	ldr	r5, [sp, #64]	; 0x40
9001fc56:	fb05 fa0e 	mul.w	sl, r5, lr
9001fc5a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001fc5e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001fc62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fc66:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001fc6a:	44de      	add	lr, fp
9001fc6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001fc70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fc74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fc78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fc7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fc80:	ea4e 050a 	orr.w	r5, lr, sl
9001fc84:	9508      	str	r5, [sp, #32]
9001fc86:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001fc88:	2dff      	cmp	r5, #255	; 0xff
9001fc8a:	d021      	beq.n	9001fcd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
9001fc8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001fc8e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9001fc92:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001fc94:	fb05 fb0b 	mul.w	fp, r5, fp
9001fc98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001fc9a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001fc9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001fca0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001fca4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001fca8:	fb05 fa0a 	mul.w	sl, r5, sl
9001fcac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fcb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001fcb4:	44de      	add	lr, fp
9001fcb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001fcba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fcbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001fcc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001fcc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001fcca:	ea4e 050a 	orr.w	r5, lr, sl
9001fcce:	950c      	str	r5, [sp, #48]	; 0x30
9001fcd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001fcd2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
9001fcd6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001fcda:	2bff      	cmp	r3, #255	; 0xff
9001fcdc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001fce0:	9d08      	ldr	r5, [sp, #32]
9001fce2:	fb08 fc0c 	mul.w	ip, r8, ip
9001fce6:	fb01 cc0e 	mla	ip, r1, lr, ip
9001fcea:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9001fcee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001fcf0:	fb00 cc0e 	mla	ip, r0, lr, ip
9001fcf4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9001fcf8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9001fcfa:	fb09 cc0e 	mla	ip, r9, lr, ip
9001fcfe:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9001fd02:	fb08 f80e 	mul.w	r8, r8, lr
9001fd06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fd0a:	fb01 8202 	mla	r2, r1, r2, r8
9001fd0e:	9908      	ldr	r1, [sp, #32]
9001fd10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fd14:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001fd18:	990c      	ldr	r1, [sp, #48]	; 0x30
9001fd1a:	fb00 220a 	mla	r2, r0, sl, r2
9001fd1e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
9001fd22:	fb09 2900 	mla	r9, r9, r0, r2
9001fd26:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fd2a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001fd2e:	ea4c 0c09 	orr.w	ip, ip, r9
9001fd32:	ea4f 221c 	mov.w	r2, ip, lsr #8
9001fd36:	f040 8091 	bne.w	9001fe5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001fd3a:	ea4f 135c 	mov.w	r3, ip, lsr #5
9001fd3e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
9001fd42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001fd46:	f022 0207 	bic.w	r2, r2, #7
9001fd4a:	431a      	orrs	r2, r3
9001fd4c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001fd50:	ea4c 0c02 	orr.w	ip, ip, r2
9001fd54:	f8a7 c000 	strh.w	ip, [r7]
9001fd58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001fd5a:	3702      	adds	r7, #2
9001fd5c:	441c      	add	r4, r3
9001fd5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001fd60:	441e      	add	r6, r3
9001fd62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001fd64:	3b01      	subs	r3, #1
9001fd66:	9317      	str	r3, [sp, #92]	; 0x5c
9001fd68:	e6c0      	b.n	9001faec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
9001fd6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001fd6c:	441c      	add	r4, r3
9001fd6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001fd70:	441e      	add	r6, r3
9001fd72:	9b07      	ldr	r3, [sp, #28]
9001fd74:	3b01      	subs	r3, #1
9001fd76:	9307      	str	r3, [sp, #28]
9001fd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001fd7a:	3302      	adds	r3, #2
9001fd7c:	930a      	str	r3, [sp, #40]	; 0x28
9001fd7e:	e695      	b.n	9001faac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001fd80:	d024      	beq.n	9001fdcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
9001fd82:	9b07      	ldr	r3, [sp, #28]
9001fd84:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001fd86:	3b01      	subs	r3, #1
9001fd88:	fb00 4003 	mla	r0, r0, r3, r4
9001fd8c:	1400      	asrs	r0, r0, #16
9001fd8e:	f53f aeaa 	bmi.w	9001fae6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001fd92:	3901      	subs	r1, #1
9001fd94:	4288      	cmp	r0, r1
9001fd96:	f6bf aea6 	bge.w	9001fae6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001fd9a:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001fd9c:	fb01 6303 	mla	r3, r1, r3, r6
9001fda0:	141b      	asrs	r3, r3, #16
9001fda2:	f53f aea0 	bmi.w	9001fae6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001fda6:	3a01      	subs	r2, #1
9001fda8:	4293      	cmp	r3, r2
9001fdaa:	f6bf ae9c 	bge.w	9001fae6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001fdae:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001fdb2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
9001fdb6:	f1bb 0f00 	cmp.w	fp, #0
9001fdba:	f300 809a 	bgt.w	9001fef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9001fdbe:	9b07      	ldr	r3, [sp, #28]
9001fdc0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001fdc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001fdc6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9001fdca:	930a      	str	r3, [sp, #40]	; 0x28
9001fdcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001fdce:	2b00      	cmp	r3, #0
9001fdd0:	f340 81ec 	ble.w	900201ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9001fdd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001fdd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fdda:	ee30 0a04 	vadd.f32	s0, s0, s8
9001fdde:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001fde2:	eef0 6a62 	vmov.f32	s13, s5
9001fde6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001fdea:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fdee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fdf2:	ee16 4a90 	vmov	r4, s13
9001fdf6:	eef0 6a43 	vmov.f32	s13, s6
9001fdfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fdfe:	ee16 6a90 	vmov	r6, s13
9001fe02:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fe06:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fe0a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fe0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fe12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fe16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fe1a:	ee12 2a90 	vmov	r2, s5
9001fe1e:	eef0 2a47 	vmov.f32	s5, s14
9001fe22:	fb92 f3f3 	sdiv	r3, r2, r3
9001fe26:	ee13 2a10 	vmov	r2, s6
9001fe2a:	9327      	str	r3, [sp, #156]	; 0x9c
9001fe2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fe2e:	eeb0 3a67 	vmov.f32	s6, s15
9001fe32:	fb92 f3f3 	sdiv	r3, r2, r3
9001fe36:	9328      	str	r3, [sp, #160]	; 0xa0
9001fe38:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001fe3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001fe3c:	3b01      	subs	r3, #1
9001fe3e:	9316      	str	r3, [sp, #88]	; 0x58
9001fe40:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fe42:	bf08      	it	eq
9001fe44:	4613      	moveq	r3, r2
9001fe46:	9307      	str	r3, [sp, #28]
9001fe48:	e622      	b.n	9001fa90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
9001fe4a:	2800      	cmp	r0, #0
9001fe4c:	f43f ae92 	beq.w	9001fb74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9001fe50:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9001fe54:	9308      	str	r3, [sp, #32]
9001fe56:	0e1b      	lsrs	r3, r3, #24
9001fe58:	9310      	str	r3, [sp, #64]	; 0x40
9001fe5a:	e68b      	b.n	9001fb74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9001fe5c:	8839      	ldrh	r1, [r7, #0]
9001fe5e:	43db      	mvns	r3, r3
9001fe60:	4dd4      	ldr	r5, [pc, #848]	; (900201b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
9001fe62:	ea4f 2e21 	mov.w	lr, r1, asr #8
9001fe66:	fa5f f883 	uxtb.w	r8, r3
9001fe6a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001fe6e:	10c8      	asrs	r0, r1, #3
9001fe70:	00cb      	lsls	r3, r1, #3
9001fe72:	fb0e fe08 	mul.w	lr, lr, r8
9001fe76:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001fe7a:	b2db      	uxtb	r3, r3
9001fe7c:	f10e 0101 	add.w	r1, lr, #1
9001fe80:	fb00 f008 	mul.w	r0, r0, r8
9001fe84:	fb03 f308 	mul.w	r3, r3, r8
9001fe88:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
9001fe8c:	ea4f 411c 	mov.w	r1, ip, lsr #16
9001fe90:	eb01 211e 	add.w	r1, r1, lr, lsr #8
9001fe94:	f100 0e01 	add.w	lr, r0, #1
9001fe98:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
9001fe9c:	b2c9      	uxtb	r1, r1
9001fe9e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001fea2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
9001fea6:	00d2      	lsls	r2, r2, #3
9001fea8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001feac:	430a      	orrs	r2, r1
9001feae:	1c59      	adds	r1, r3, #1
9001feb0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001feb4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001feb8:	e748      	b.n	9001fd4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001feba:	f112 0801 	adds.w	r8, r2, #1
9001febe:	f53f af4b 	bmi.w	9001fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001fec2:	4543      	cmp	r3, r8
9001fec4:	f6ff af48 	blt.w	9001fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001fec8:	f11c 0801 	adds.w	r8, ip, #1
9001fecc:	f53f af44 	bmi.w	9001fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001fed0:	45c6      	cmp	lr, r8
9001fed2:	f6ff af41 	blt.w	9001fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001fed6:	b21b      	sxth	r3, r3
9001fed8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
9001fedc:	fa0f f28e 	sxth.w	r2, lr
9001fee0:	e9cd 1003 	strd	r1, r0, [sp, #12]
9001fee4:	9200      	str	r2, [sp, #0]
9001fee6:	4639      	mov	r1, r7
9001fee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001feea:	9819      	ldr	r0, [sp, #100]	; 0x64
9001feec:	f7ff fc88 	bl	9001f800 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
9001fef0:	e732      	b.n	9001fd58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001fef2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001fef4:	1421      	asrs	r1, r4, #16
9001fef6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9001fef8:	f3c4 3203 	ubfx	r2, r4, #12, #4
9001fefc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
9001ff00:	1433      	asrs	r3, r6, #16
9001ff02:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001ff06:	fb07 1303 	mla	r3, r7, r3, r1
9001ff0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
9001ff0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
9001ff10:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
9001ff14:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001ff18:	2a00      	cmp	r2, #0
9001ff1a:	f000 8108 	beq.w	9002012e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
9001ff1e:	684d      	ldr	r5, [r1, #4]
9001ff20:	950d      	str	r5, [sp, #52]	; 0x34
9001ff22:	0e2d      	lsrs	r5, r5, #24
9001ff24:	9514      	str	r5, [sp, #80]	; 0x50
9001ff26:	b178      	cbz	r0, 9001ff48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001ff28:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
9001ff2c:	3f01      	subs	r7, #1
9001ff2e:	00bf      	lsls	r7, r7, #2
9001ff30:	3704      	adds	r7, #4
9001ff32:	eb01 0e07 	add.w	lr, r1, r7
9001ff36:	59c9      	ldr	r1, [r1, r7]
9001ff38:	9109      	str	r1, [sp, #36]	; 0x24
9001ff3a:	0e09      	lsrs	r1, r1, #24
9001ff3c:	9111      	str	r1, [sp, #68]	; 0x44
9001ff3e:	f8de 1004 	ldr.w	r1, [lr, #4]
9001ff42:	910e      	str	r1, [sp, #56]	; 0x38
9001ff44:	0e09      	lsrs	r1, r1, #24
9001ff46:	9115      	str	r1, [sp, #84]	; 0x54
9001ff48:	b292      	uxth	r2, r2
9001ff4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001ff4c:	b280      	uxth	r0, r0
9001ff4e:	fb02 f900 	mul.w	r9, r2, r0
9001ff52:	0112      	lsls	r2, r2, #4
9001ff54:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001ff58:	eba2 0e09 	sub.w	lr, r2, r9
9001ff5c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001ff60:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001ff62:	b280      	uxth	r0, r0
9001ff64:	fa1f fe8e 	uxth.w	lr, lr
9001ff68:	1a09      	subs	r1, r1, r0
9001ff6a:	fb0e f202 	mul.w	r2, lr, r2
9001ff6e:	b289      	uxth	r1, r1
9001ff70:	fb01 220c 	mla	r2, r1, ip, r2
9001ff74:	fb00 2205 	mla	r2, r0, r5, r2
9001ff78:	9d15      	ldr	r5, [sp, #84]	; 0x54
9001ff7a:	fb09 2205 	mla	r2, r9, r5, r2
9001ff7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001ff82:	2a00      	cmp	r2, #0
9001ff84:	f000 80ca 	beq.w	9002011c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
9001ff88:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001ff8c:	d019      	beq.n	9001ffc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
9001ff8e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001ff92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001ff96:	fb0c fa0a 	mul.w	sl, ip, sl
9001ff9a:	fb0c fc03 	mul.w	ip, ip, r3
9001ff9e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001ffa2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001ffa6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001ffaa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ffae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001ffb2:	4453      	add	r3, sl
9001ffb4:	0a3f      	lsrs	r7, r7, #8
9001ffb6:	0a1b      	lsrs	r3, r3, #8
9001ffb8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001ffbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ffc0:	433b      	orrs	r3, r7
9001ffc2:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001ffc4:	2dff      	cmp	r5, #255	; 0xff
9001ffc6:	d020      	beq.n	9002000a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
9001ffc8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001ffca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9001ffce:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001ffd0:	436f      	muls	r7, r5
9001ffd2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001ffd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001ffd8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9001ffdc:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001ffde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001ffe2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ffe6:	fb05 fa0a 	mul.w	sl, r5, sl
9001ffea:	44bc      	add	ip, r7
9001ffec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001fff0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fff4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001fff8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001fffc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020004:	ea4c 050a 	orr.w	r5, ip, sl
90020008:	950d      	str	r5, [sp, #52]	; 0x34
9002000a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002000c:	2dff      	cmp	r5, #255	; 0xff
9002000e:	d020      	beq.n	90020052 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90020010:	9d09      	ldr	r5, [sp, #36]	; 0x24
90020012:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90020016:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020018:	436f      	muls	r7, r5
9002001a:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002001c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90020020:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020022:	fb05 fa0c 	mul.w	sl, r5, ip
90020026:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002002a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002002e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020032:	44bc      	add	ip, r7
90020034:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90020038:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002003c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020040:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020044:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020048:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002004c:	ea4c 050a 	orr.w	r5, ip, sl
90020050:	9509      	str	r5, [sp, #36]	; 0x24
90020052:	9d15      	ldr	r5, [sp, #84]	; 0x54
90020054:	2dff      	cmp	r5, #255	; 0xff
90020056:	d020      	beq.n	9002009a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90020058:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002005a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002005e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90020060:	436f      	muls	r7, r5
90020062:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020064:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90020068:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002006c:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002006e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90020072:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020076:	fb05 fa0a 	mul.w	sl, r5, sl
9002007a:	44bc      	add	ip, r7
9002007c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90020080:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020084:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90020088:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002008c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020090:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020094:	ea4c 050a 	orr.w	r5, ip, sl
90020098:	950e      	str	r5, [sp, #56]	; 0x38
9002009a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002009c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900200a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900200a4:	2aff      	cmp	r2, #255	; 0xff
900200a6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900200aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
900200ac:	fb0e f707 	mul.w	r7, lr, r7
900200b0:	fb01 770c 	mla	r7, r1, ip, r7
900200b4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900200b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900200ba:	fb00 770c 	mla	r7, r0, ip, r7
900200be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900200c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900200c4:	fb09 770c 	mla	r7, r9, ip, r7
900200c8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
900200cc:	fb0e fe0c 	mul.w	lr, lr, ip
900200d0:	ea4f 2717 	mov.w	r7, r7, lsr #8
900200d4:	fb01 e303 	mla	r3, r1, r3, lr
900200d8:	9909      	ldr	r1, [sp, #36]	; 0x24
900200da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900200de:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
900200e2:	990e      	ldr	r1, [sp, #56]	; 0x38
900200e4:	fb00 330a 	mla	r3, r0, sl, r3
900200e8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
900200ec:	fb09 3c0c 	mla	ip, r9, ip, r3
900200f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900200f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900200f8:	ea47 070c 	orr.w	r7, r7, ip
900200fc:	ea4f 2317 	mov.w	r3, r7, lsr #8
90020100:	d11e      	bne.n	90020140 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90020102:	097a      	lsrs	r2, r7, #5
90020104:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90020108:	f3c7 07c4 	ubfx	r7, r7, #3, #5
9002010c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020110:	f023 0307 	bic.w	r3, r3, #7
90020114:	4313      	orrs	r3, r2
90020116:	431f      	orrs	r7, r3
90020118:	f8a8 7000 	strh.w	r7, [r8]
9002011c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002011e:	f108 0802 	add.w	r8, r8, #2
90020122:	f10b 3bff 	add.w	fp, fp, #4294967295
90020126:	441c      	add	r4, r3
90020128:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002012a:	441e      	add	r6, r3
9002012c:	e643      	b.n	9001fdb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
9002012e:	2800      	cmp	r0, #0
90020130:	f43f af0a 	beq.w	9001ff48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020134:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90020138:	9109      	str	r1, [sp, #36]	; 0x24
9002013a:	0e09      	lsrs	r1, r1, #24
9002013c:	9111      	str	r1, [sp, #68]	; 0x44
9002013e:	e703      	b.n	9001ff48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90020140:	f8b8 1000 	ldrh.w	r1, [r8]
90020144:	43d2      	mvns	r2, r2
90020146:	ea4f 2c21 	mov.w	ip, r1, asr #8
9002014a:	fa5f fe82 	uxtb.w	lr, r2
9002014e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020152:	10c8      	asrs	r0, r1, #3
90020154:	00ca      	lsls	r2, r1, #3
90020156:	fb0c fc0e 	mul.w	ip, ip, lr
9002015a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002015e:	b2d2      	uxtb	r2, r2
90020160:	f10c 0101 	add.w	r1, ip, #1
90020164:	fb00 f00e 	mul.w	r0, r0, lr
90020168:	fb02 f20e 	mul.w	r2, r2, lr
9002016c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90020170:	0c39      	lsrs	r1, r7, #16
90020172:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90020176:	490f      	ldr	r1, [pc, #60]	; (900201b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90020178:	fa5f fc8c 	uxtb.w	ip, ip
9002017c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90020180:	1c41      	adds	r1, r0, #1
90020182:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90020186:	1c51      	adds	r1, r2, #1
90020188:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9002018c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90020190:	00c0      	lsls	r0, r0, #3
90020192:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90020196:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002019a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
9002019e:	ea4c 0c00 	orr.w	ip, ip, r0
900201a2:	ea47 0c0c 	orr.w	ip, r7, ip
900201a6:	f8a8 c000 	strh.w	ip, [r8]
900201aa:	e7b7      	b.n	9002011c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
900201ac:	b01b      	add	sp, #108	; 0x6c
900201ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900201b2:	bf00      	nop
900201b4:	fffff800 	.word	0xfffff800

900201b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
900201b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900201bc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
900201c0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900201c4:	2d00      	cmp	r5, #0
900201c6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
900201ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900201ce:	fb05 0e03 	mla	lr, r5, r3, r0
900201d2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
900201d6:	f2c0 808c 	blt.w	900202f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
900201da:	45a9      	cmp	r9, r5
900201dc:	f340 8089 	ble.w	900202f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
900201e0:	2800      	cmp	r0, #0
900201e2:	f2c0 8084 	blt.w	900202ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
900201e6:	4580      	cmp	r8, r0
900201e8:	f340 8081 	ble.w	900202ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
900201ec:	ea4f 045e 	mov.w	r4, lr, lsr #1
900201f0:	f01e 0f01 	tst.w	lr, #1
900201f4:	5d16      	ldrb	r6, [r2, r4]
900201f6:	bf0c      	ite	eq
900201f8:	f006 060f 	andeq.w	r6, r6, #15
900201fc:	1136      	asrne	r6, r6, #4
900201fe:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90020202:	b2f6      	uxtb	r6, r6
90020204:	1c44      	adds	r4, r0, #1
90020206:	d477      	bmi.n	900202f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90020208:	45a0      	cmp	r8, r4
9002020a:	dd75      	ble.n	900202f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
9002020c:	2f00      	cmp	r7, #0
9002020e:	d075      	beq.n	900202fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90020210:	f10e 0a01 	add.w	sl, lr, #1
90020214:	ea4f 045a 	mov.w	r4, sl, lsr #1
90020218:	f01a 0f01 	tst.w	sl, #1
9002021c:	5d14      	ldrb	r4, [r2, r4]
9002021e:	bf0c      	ite	eq
90020220:	f004 040f 	andeq.w	r4, r4, #15
90020224:	1124      	asrne	r4, r4, #4
90020226:	eb04 1404 	add.w	r4, r4, r4, lsl #4
9002022a:	b2e4      	uxtb	r4, r4
9002022c:	3501      	adds	r5, #1
9002022e:	d469      	bmi.n	90020304 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90020230:	45a9      	cmp	r9, r5
90020232:	dd67      	ble.n	90020304 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90020234:	f1bc 0f00 	cmp.w	ip, #0
90020238:	d067      	beq.n	9002030a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
9002023a:	2800      	cmp	r0, #0
9002023c:	db60      	blt.n	90020300 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
9002023e:	4580      	cmp	r8, r0
90020240:	dd5e      	ble.n	90020300 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90020242:	eb03 090e 	add.w	r9, r3, lr
90020246:	ea4f 0559 	mov.w	r5, r9, lsr #1
9002024a:	f019 0f01 	tst.w	r9, #1
9002024e:	5d55      	ldrb	r5, [r2, r5]
90020250:	bf0c      	ite	eq
90020252:	f005 050f 	andeq.w	r5, r5, #15
90020256:	112d      	asrne	r5, r5, #4
90020258:	eb05 1505 	add.w	r5, r5, r5, lsl #4
9002025c:	b2ed      	uxtb	r5, r5
9002025e:	3001      	adds	r0, #1
90020260:	d456      	bmi.n	90020310 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90020262:	4580      	cmp	r8, r0
90020264:	dd54      	ble.n	90020310 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90020266:	2f00      	cmp	r7, #0
90020268:	d054      	beq.n	90020314 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
9002026a:	3301      	adds	r3, #1
9002026c:	449e      	add	lr, r3
9002026e:	ea4f 035e 	mov.w	r3, lr, lsr #1
90020272:	f01e 0f01 	tst.w	lr, #1
90020276:	5cd0      	ldrb	r0, [r2, r3]
90020278:	bf0c      	ite	eq
9002027a:	f000 000f 	andeq.w	r0, r0, #15
9002027e:	1100      	asrne	r0, r0, #4
90020280:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90020284:	b2c3      	uxtb	r3, r0
90020286:	b2ba      	uxth	r2, r7
90020288:	fa1f fc8c 	uxth.w	ip, ip
9002028c:	fb02 f00c 	mul.w	r0, r2, ip
90020290:	0112      	lsls	r2, r2, #4
90020292:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90020296:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
9002029a:	1a12      	subs	r2, r2, r0
9002029c:	fa1f fc8c 	uxth.w	ip, ip
900202a0:	b292      	uxth	r2, r2
900202a2:	eba7 070c 	sub.w	r7, r7, ip
900202a6:	4362      	muls	r2, r4
900202a8:	b2bf      	uxth	r7, r7
900202aa:	fb06 2207 	mla	r2, r6, r7, r2
900202ae:	fb0c 2505 	mla	r5, ip, r5, r2
900202b2:	fb00 5303 	mla	r3, r0, r3, r5
900202b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
900202ba:	b1b3      	cbz	r3, 900202ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
900202bc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
900202c0:	435a      	muls	r2, r3
900202c2:	1c53      	adds	r3, r2, #1
900202c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900202c8:	4a2d      	ldr	r2, [pc, #180]	; (90020380 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
900202ca:	121b      	asrs	r3, r3, #8
900202cc:	6812      	ldr	r2, [r2, #0]
900202ce:	2bff      	cmp	r3, #255	; 0xff
900202d0:	ea4f 2612 	mov.w	r6, r2, lsr #8
900202d4:	d120      	bne.n	90020318 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
900202d6:	0950      	lsrs	r0, r2, #5
900202d8:	4b2a      	ldr	r3, [pc, #168]	; (90020384 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
900202da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900202de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900202e2:	4033      	ands	r3, r6
900202e4:	4318      	orrs	r0, r3
900202e6:	4302      	orrs	r2, r0
900202e8:	800a      	strh	r2, [r1, #0]
900202ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900202ee:	2600      	movs	r6, #0
900202f0:	e788      	b.n	90020204 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
900202f2:	2400      	movs	r4, #0
900202f4:	4626      	mov	r6, r4
900202f6:	e799      	b.n	9002022c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
900202f8:	2400      	movs	r4, #0
900202fa:	e797      	b.n	9002022c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
900202fc:	463c      	mov	r4, r7
900202fe:	e795      	b.n	9002022c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90020300:	2500      	movs	r5, #0
90020302:	e7ac      	b.n	9002025e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90020304:	2300      	movs	r3, #0
90020306:	461d      	mov	r5, r3
90020308:	e7bd      	b.n	90020286 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
9002030a:	4663      	mov	r3, ip
9002030c:	4665      	mov	r5, ip
9002030e:	e7ba      	b.n	90020286 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020310:	2300      	movs	r3, #0
90020312:	e7b8      	b.n	90020286 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020314:	463b      	mov	r3, r7
90020316:	e7b6      	b.n	90020286 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90020318:	880d      	ldrh	r5, [r1, #0]
9002031a:	b29f      	uxth	r7, r3
9002031c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90020320:	43db      	mvns	r3, r3
90020322:	122c      	asrs	r4, r5, #8
90020324:	fb10 f007 	smulbb	r0, r0, r7
90020328:	b2db      	uxtb	r3, r3
9002032a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9002032e:	b2f6      	uxtb	r6, r6
90020330:	b2d2      	uxtb	r2, r2
90020332:	fb04 0403 	mla	r4, r4, r3, r0
90020336:	10e8      	asrs	r0, r5, #3
90020338:	fb12 f207 	smulbb	r2, r2, r7
9002033c:	00ed      	lsls	r5, r5, #3
9002033e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90020342:	b2a4      	uxth	r4, r4
90020344:	fb16 f607 	smulbb	r6, r6, r7
90020348:	b2ed      	uxtb	r5, r5
9002034a:	fb00 6603 	mla	r6, r0, r3, r6
9002034e:	fb05 2303 	mla	r3, r5, r3, r2
90020352:	b2b0      	uxth	r0, r6
90020354:	b29a      	uxth	r2, r3
90020356:	1c63      	adds	r3, r4, #1
90020358:	eb03 2414 	add.w	r4, r3, r4, lsr #8
9002035c:	1c53      	adds	r3, r2, #1
9002035e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020362:	1c42      	adds	r2, r0, #1
90020364:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90020368:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002036c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020370:	0940      	lsrs	r0, r0, #5
90020372:	4323      	orrs	r3, r4
90020374:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90020378:	4303      	orrs	r3, r0
9002037a:	800b      	strh	r3, [r1, #0]
9002037c:	e7b5      	b.n	900202ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
9002037e:	bf00      	nop
90020380:	240264ec 	.word	0x240264ec
90020384:	00fff800 	.word	0x00fff800

90020388 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002038c:	b097      	sub	sp, #92	; 0x5c
9002038e:	9214      	str	r2, [sp, #80]	; 0x50
90020390:	9309      	str	r3, [sp, #36]	; 0x24
90020392:	9a25      	ldr	r2, [sp, #148]	; 0x94
90020394:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90020398:	9015      	str	r0, [sp, #84]	; 0x54
9002039a:	910d      	str	r1, [sp, #52]	; 0x34
9002039c:	6850      	ldr	r0, [r2, #4]
9002039e:	930f      	str	r3, [sp, #60]	; 0x3c
900203a0:	6812      	ldr	r2, [r2, #0]
900203a2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
900203a6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
900203aa:	fb00 1303 	mla	r3, r0, r3, r1
900203ae:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900203b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900203b4:	689b      	ldr	r3, [r3, #8]
900203b6:	3301      	adds	r3, #1
900203b8:	f023 0301 	bic.w	r3, r3, #1
900203bc:	930a      	str	r3, [sp, #40]	; 0x28
900203be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900203c0:	681f      	ldr	r7, [r3, #0]
900203c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900203c4:	2b00      	cmp	r3, #0
900203c6:	dc03      	bgt.n	900203d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900203c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
900203ca:	2b00      	cmp	r3, #0
900203cc:	f340 8289 	ble.w	900208e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900203d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900203d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900203d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900203da:	1e48      	subs	r0, r1, #1
900203dc:	f102 3cff 	add.w	ip, r2, #4294967295
900203e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900203e2:	2b00      	cmp	r3, #0
900203e4:	f340 80c5 	ble.w	90020572 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
900203e8:	ea5f 4e24 	movs.w	lr, r4, asr #16
900203ec:	ea4f 4326 	mov.w	r3, r6, asr #16
900203f0:	d406      	bmi.n	90020400 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900203f2:	4586      	cmp	lr, r0
900203f4:	da04      	bge.n	90020400 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900203f6:	2b00      	cmp	r3, #0
900203f8:	db02      	blt.n	90020400 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900203fa:	4563      	cmp	r3, ip
900203fc:	f2c0 80ba 	blt.w	90020574 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90020400:	f11e 0e01 	adds.w	lr, lr, #1
90020404:	f100 80ab 	bmi.w	9002055e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90020408:	4571      	cmp	r1, lr
9002040a:	f2c0 80a8 	blt.w	9002055e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002040e:	3301      	adds	r3, #1
90020410:	f100 80a5 	bmi.w	9002055e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90020414:	429a      	cmp	r2, r3
90020416:	f2c0 80a2 	blt.w	9002055e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002041c:	46c8      	mov	r8, r9
9002041e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90020422:	930e      	str	r3, [sp, #56]	; 0x38
90020424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020426:	2b00      	cmp	r3, #0
90020428:	f340 80c4 	ble.w	900205b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
9002042c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002042e:	1430      	asrs	r0, r6, #16
90020430:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020434:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020438:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
9002043c:	1423      	asrs	r3, r4, #16
9002043e:	f100 814f 	bmi.w	900206e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90020442:	f10c 3bff 	add.w	fp, ip, #4294967295
90020446:	455b      	cmp	r3, fp
90020448:	f280 814a 	bge.w	900206e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002044c:	2800      	cmp	r0, #0
9002044e:	f2c0 8147 	blt.w	900206e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90020452:	f10e 3bff 	add.w	fp, lr, #4294967295
90020456:	4558      	cmp	r0, fp
90020458:	f280 8142 	bge.w	900206e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002045c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9002045e:	fb00 3305 	mla	r3, r0, r5, r3
90020462:	0858      	lsrs	r0, r3, #1
90020464:	07dd      	lsls	r5, r3, #31
90020466:	f817 c000 	ldrb.w	ip, [r7, r0]
9002046a:	bf54      	ite	pl
9002046c:	f00c 0c0f 	andpl.w	ip, ip, #15
90020470:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020474:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020478:	fa5f fc8c 	uxtb.w	ip, ip
9002047c:	2a00      	cmp	r2, #0
9002047e:	f000 80dd 	beq.w	9002063c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90020482:	1c58      	adds	r0, r3, #1
90020484:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90020488:	07c0      	lsls	r0, r0, #31
9002048a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9002048e:	bf54      	ite	pl
90020490:	f00e 0e0f 	andpl.w	lr, lr, #15
90020494:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90020498:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
9002049c:	fa5f f08e 	uxtb.w	r0, lr
900204a0:	9010      	str	r0, [sp, #64]	; 0x40
900204a2:	b1d9      	cbz	r1, 900204dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900204a4:	4453      	add	r3, sl
900204a6:	0858      	lsrs	r0, r3, #1
900204a8:	07dd      	lsls	r5, r3, #31
900204aa:	f103 0301 	add.w	r3, r3, #1
900204ae:	5c38      	ldrb	r0, [r7, r0]
900204b0:	bf54      	ite	pl
900204b2:	f000 000f 	andpl.w	r0, r0, #15
900204b6:	1100      	asrmi	r0, r0, #4
900204b8:	07dd      	lsls	r5, r3, #31
900204ba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900204be:	b2c0      	uxtb	r0, r0
900204c0:	900b      	str	r0, [sp, #44]	; 0x2c
900204c2:	ea4f 0053 	mov.w	r0, r3, lsr #1
900204c6:	f817 e000 	ldrb.w	lr, [r7, r0]
900204ca:	bf54      	ite	pl
900204cc:	f00e 030f 	andpl.w	r3, lr, #15
900204d0:	ea4f 132e 	movmi.w	r3, lr, asr #4
900204d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900204d8:	b2db      	uxtb	r3, r3
900204da:	9311      	str	r3, [sp, #68]	; 0x44
900204dc:	b292      	uxth	r2, r2
900204de:	9d10      	ldr	r5, [sp, #64]	; 0x40
900204e0:	b289      	uxth	r1, r1
900204e2:	fb02 f301 	mul.w	r3, r2, r1
900204e6:	0112      	lsls	r2, r2, #4
900204e8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
900204ec:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
900204f0:	1ad2      	subs	r2, r2, r3
900204f2:	b289      	uxth	r1, r1
900204f4:	b292      	uxth	r2, r2
900204f6:	1a40      	subs	r0, r0, r1
900204f8:	436a      	muls	r2, r5
900204fa:	b280      	uxth	r0, r0
900204fc:	fb0c 2c00 	mla	ip, ip, r0, r2
90020500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020502:	fb01 c102 	mla	r1, r1, r2, ip
90020506:	9a11      	ldr	r2, [sp, #68]	; 0x44
90020508:	fb03 1302 	mla	r3, r3, r2, r1
9002050c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90020510:	b1db      	cbz	r3, 9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020512:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020514:	4353      	muls	r3, r2
90020516:	1c5a      	adds	r2, r3, #1
90020518:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002051c:	4ac6      	ldr	r2, [pc, #792]	; (90020838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002051e:	121b      	asrs	r3, r3, #8
90020520:	6812      	ldr	r2, [r2, #0]
90020522:	2bff      	cmp	r3, #255	; 0xff
90020524:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90020528:	f040 8099 	bne.w	9002065e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9002052c:	0953      	lsrs	r3, r2, #5
9002052e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90020532:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020536:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002053a:	f02c 0c07 	bic.w	ip, ip, #7
9002053e:	ea43 0c0c 	orr.w	ip, r3, ip
90020542:	ea4c 0202 	orr.w	r2, ip, r2
90020546:	f8a8 2000 	strh.w	r2, [r8]
9002054a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
9002054c:	f108 0802 	add.w	r8, r8, #2
90020550:	441c      	add	r4, r3
90020552:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020554:	441e      	add	r6, r3
90020556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020558:	3b01      	subs	r3, #1
9002055a:	930e      	str	r3, [sp, #56]	; 0x38
9002055c:	e762      	b.n	90020424 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002055e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90020560:	f109 0902 	add.w	r9, r9, #2
90020564:	441c      	add	r4, r3
90020566:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020568:	441e      	add	r6, r3
9002056a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002056c:	3b01      	subs	r3, #1
9002056e:	9309      	str	r3, [sp, #36]	; 0x24
90020570:	e736      	b.n	900203e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020572:	d024      	beq.n	900205be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90020574:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020576:	9823      	ldr	r0, [sp, #140]	; 0x8c
90020578:	3b01      	subs	r3, #1
9002057a:	fb00 4003 	mla	r0, r0, r3, r4
9002057e:	1400      	asrs	r0, r0, #16
90020580:	f53f af4b 	bmi.w	9002041a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020584:	3901      	subs	r1, #1
90020586:	4288      	cmp	r0, r1
90020588:	f6bf af47 	bge.w	9002041a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002058c:	9924      	ldr	r1, [sp, #144]	; 0x90
9002058e:	fb01 6303 	mla	r3, r1, r3, r6
90020592:	141b      	asrs	r3, r3, #16
90020594:	f53f af41 	bmi.w	9002041a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020598:	3a01      	subs	r2, #1
9002059a:	4293      	cmp	r3, r2
9002059c:	f6bf af3d 	bge.w	9002041a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900205a0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
900205a4:	46c8      	mov	r8, r9
900205a6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900205aa:	930e      	str	r3, [sp, #56]	; 0x38
900205ac:	f1bb 0f00 	cmp.w	fp, #0
900205b0:	f300 80b7 	bgt.w	90020722 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900205b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900205b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900205ba:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900205be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900205c0:	2b00      	cmp	r3, #0
900205c2:	f340 818e 	ble.w	900208e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900205c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900205ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
900205cc:	ee30 0a04 	vadd.f32	s0, s0, s8
900205d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900205d4:	eef0 6a62 	vmov.f32	s13, s5
900205d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
900205dc:	ee31 1a05 	vadd.f32	s2, s2, s10
900205e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900205e4:	ee16 4a90 	vmov	r4, s13
900205e8:	eef0 6a43 	vmov.f32	s13, s6
900205ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900205f0:	ee16 6a90 	vmov	r6, s13
900205f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
900205f8:	ee61 7a27 	vmul.f32	s15, s2, s15
900205fc:	ee77 2a62 	vsub.f32	s5, s14, s5
90020600:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020604:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020608:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002060c:	ee12 2a90 	vmov	r2, s5
90020610:	eef0 2a47 	vmov.f32	s5, s14
90020614:	fb92 f3f3 	sdiv	r3, r2, r3
90020618:	ee13 2a10 	vmov	r2, s6
9002061c:	9323      	str	r3, [sp, #140]	; 0x8c
9002061e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020620:	eeb0 3a67 	vmov.f32	s6, s15
90020624:	fb92 f3f3 	sdiv	r3, r2, r3
90020628:	9324      	str	r3, [sp, #144]	; 0x90
9002062a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002062c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002062e:	3b01      	subs	r3, #1
90020630:	930d      	str	r3, [sp, #52]	; 0x34
90020632:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020634:	bf08      	it	eq
90020636:	4613      	moveq	r3, r2
90020638:	9309      	str	r3, [sp, #36]	; 0x24
9002063a:	e6c2      	b.n	900203c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9002063c:	2900      	cmp	r1, #0
9002063e:	f43f af4d 	beq.w	900204dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90020642:	eb0a 0003 	add.w	r0, sl, r3
90020646:	0843      	lsrs	r3, r0, #1
90020648:	07c0      	lsls	r0, r0, #31
9002064a:	5cfb      	ldrb	r3, [r7, r3]
9002064c:	bf54      	ite	pl
9002064e:	f003 030f 	andpl.w	r3, r3, #15
90020652:	111b      	asrmi	r3, r3, #4
90020654:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90020658:	b2db      	uxtb	r3, r3
9002065a:	930b      	str	r3, [sp, #44]	; 0x2c
9002065c:	e73e      	b.n	900204dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9002065e:	f8b8 e000 	ldrh.w	lr, [r8]
90020662:	fa1f fb83 	uxth.w	fp, r3
90020666:	f3c2 4107 	ubfx	r1, r2, #16, #8
9002066a:	43db      	mvns	r3, r3
9002066c:	ea4f 202e 	mov.w	r0, lr, asr #8
90020670:	fb11 f10b 	smulbb	r1, r1, fp
90020674:	b2db      	uxtb	r3, r3
90020676:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002067a:	fa5f fc8c 	uxtb.w	ip, ip
9002067e:	b2d2      	uxtb	r2, r2
90020680:	fb00 1003 	mla	r0, r0, r3, r1
90020684:	ea4f 01ee 	mov.w	r1, lr, asr #3
90020688:	fb1c fc0b 	smulbb	ip, ip, fp
9002068c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020690:	b280      	uxth	r0, r0
90020692:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020696:	fb12 fb0b 	smulbb	fp, r2, fp
9002069a:	fa5f fe8e 	uxtb.w	lr, lr
9002069e:	fb01 cc03 	mla	ip, r1, r3, ip
900206a2:	fb0e bb03 	mla	fp, lr, r3, fp
900206a6:	1c43      	adds	r3, r0, #1
900206a8:	fa1f fc8c 	uxth.w	ip, ip
900206ac:	fa1f fb8b 	uxth.w	fp, fp
900206b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900206b4:	f10c 0101 	add.w	r1, ip, #1
900206b8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
900206bc:	f10b 0001 	add.w	r0, fp, #1
900206c0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900206c4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900206c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900206cc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900206d0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900206d4:	4318      	orrs	r0, r3
900206d6:	ea40 000c 	orr.w	r0, r0, ip
900206da:	f8a8 0000 	strh.w	r0, [r8]
900206de:	e734      	b.n	9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900206e0:	f113 0b01 	adds.w	fp, r3, #1
900206e4:	f53f af31 	bmi.w	9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900206e8:	45dc      	cmp	ip, fp
900206ea:	f6ff af2e 	blt.w	9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900206ee:	f110 0b01 	adds.w	fp, r0, #1
900206f2:	f53f af2a 	bmi.w	9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900206f6:	45de      	cmp	lr, fp
900206f8:	f6ff af27 	blt.w	9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900206fc:	9302      	str	r3, [sp, #8]
900206fe:	fa0f f38e 	sxth.w	r3, lr
90020702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90020704:	9301      	str	r3, [sp, #4]
90020706:	fa0f f38c 	sxth.w	r3, ip
9002070a:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002070e:	e9cd 1505 	strd	r1, r5, [sp, #20]
90020712:	9300      	str	r3, [sp, #0]
90020714:	463a      	mov	r2, r7
90020716:	4653      	mov	r3, sl
90020718:	4641      	mov	r1, r8
9002071a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002071c:	f7ff fd4c 	bl	900201b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90020720:	e713      	b.n	9002054a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020722:	1422      	asrs	r2, r4, #16
90020724:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90020726:	1433      	asrs	r3, r6, #16
90020728:	f3c4 3103 	ubfx	r1, r4, #12, #4
9002072c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020730:	fb05 2303 	mla	r3, r5, r3, r2
90020734:	085a      	lsrs	r2, r3, #1
90020736:	07dd      	lsls	r5, r3, #31
90020738:	5cba      	ldrb	r2, [r7, r2]
9002073a:	bf54      	ite	pl
9002073c:	f002 020f 	andpl.w	r2, r2, #15
90020740:	1112      	asrmi	r2, r2, #4
90020742:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90020746:	b2d2      	uxtb	r2, r2
90020748:	2900      	cmp	r1, #0
9002074a:	d077      	beq.n	9002083c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002074c:	f103 0e01 	add.w	lr, r3, #1
90020750:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90020754:	f01e 0f01 	tst.w	lr, #1
90020758:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002075c:	bf0c      	ite	eq
9002075e:	f00c 0c0f 	andeq.w	ip, ip, #15
90020762:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90020766:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002076a:	fa5f f58c 	uxtb.w	r5, ip
9002076e:	9512      	str	r5, [sp, #72]	; 0x48
90020770:	b308      	cbz	r0, 900207b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90020772:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020774:	442b      	add	r3, r5
90020776:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002077a:	07dd      	lsls	r5, r3, #31
9002077c:	f103 0301 	add.w	r3, r3, #1
90020780:	f817 c00c 	ldrb.w	ip, [r7, ip]
90020784:	bf54      	ite	pl
90020786:	f00c 0c0f 	andpl.w	ip, ip, #15
9002078a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002078e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020792:	fa5f f58c 	uxtb.w	r5, ip
90020796:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002079a:	950c      	str	r5, [sp, #48]	; 0x30
9002079c:	07dd      	lsls	r5, r3, #31
9002079e:	f817 c00c 	ldrb.w	ip, [r7, ip]
900207a2:	bf54      	ite	pl
900207a4:	f00c 0c0f 	andpl.w	ip, ip, #15
900207a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900207ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900207b0:	fa5f f38c 	uxtb.w	r3, ip
900207b4:	9313      	str	r3, [sp, #76]	; 0x4c
900207b6:	b289      	uxth	r1, r1
900207b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900207ba:	b280      	uxth	r0, r0
900207bc:	fb01 f300 	mul.w	r3, r1, r0
900207c0:	0109      	lsls	r1, r1, #4
900207c2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900207c6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
900207ca:	1ac9      	subs	r1, r1, r3
900207cc:	b280      	uxth	r0, r0
900207ce:	b289      	uxth	r1, r1
900207d0:	ebac 0c00 	sub.w	ip, ip, r0
900207d4:	4369      	muls	r1, r5
900207d6:	fa1f fc8c 	uxth.w	ip, ip
900207da:	fb02 120c 	mla	r2, r2, ip, r1
900207de:	990c      	ldr	r1, [sp, #48]	; 0x30
900207e0:	fb00 2001 	mla	r0, r0, r1, r2
900207e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900207e6:	fb03 0302 	mla	r3, r3, r2, r0
900207ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
900207ee:	b1d3      	cbz	r3, 90020826 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900207f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900207f2:	4353      	muls	r3, r2
900207f4:	1c5a      	adds	r2, r3, #1
900207f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900207fa:	4a0f      	ldr	r2, [pc, #60]	; (90020838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
900207fc:	121b      	asrs	r3, r3, #8
900207fe:	6812      	ldr	r2, [r2, #0]
90020800:	2bff      	cmp	r3, #255	; 0xff
90020802:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90020806:	d12d      	bne.n	90020864 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90020808:	0953      	lsrs	r3, r2, #5
9002080a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002080e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020812:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020816:	f02c 0c07 	bic.w	ip, ip, #7
9002081a:	ea43 0c0c 	orr.w	ip, r3, ip
9002081e:	ea4c 0202 	orr.w	r2, ip, r2
90020822:	f8a8 2000 	strh.w	r2, [r8]
90020826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90020828:	f108 0802 	add.w	r8, r8, #2
9002082c:	f10b 3bff 	add.w	fp, fp, #4294967295
90020830:	441c      	add	r4, r3
90020832:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020834:	441e      	add	r6, r3
90020836:	e6b9      	b.n	900205ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90020838:	240264ec 	.word	0x240264ec
9002083c:	2800      	cmp	r0, #0
9002083e:	d0ba      	beq.n	900207b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90020840:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020842:	442b      	add	r3, r5
90020844:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90020848:	07db      	lsls	r3, r3, #31
9002084a:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002084e:	bf54      	ite	pl
90020850:	f00c 0c0f 	andpl.w	ip, ip, #15
90020854:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020858:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002085c:	fa5f f38c 	uxtb.w	r3, ip
90020860:	930c      	str	r3, [sp, #48]	; 0x30
90020862:	e7a8      	b.n	900207b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90020864:	f8b8 e000 	ldrh.w	lr, [r8]
90020868:	fa1f fa83 	uxth.w	sl, r3
9002086c:	f3c2 4107 	ubfx	r1, r2, #16, #8
90020870:	43db      	mvns	r3, r3
90020872:	ea4f 202e 	mov.w	r0, lr, asr #8
90020876:	fb11 f10a 	smulbb	r1, r1, sl
9002087a:	b2db      	uxtb	r3, r3
9002087c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020880:	b2d2      	uxtb	r2, r2
90020882:	fa5f fc8c 	uxtb.w	ip, ip
90020886:	fb00 1003 	mla	r0, r0, r3, r1
9002088a:	ea4f 01ee 	mov.w	r1, lr, asr #3
9002088e:	fb12 f20a 	smulbb	r2, r2, sl
90020892:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020896:	b280      	uxth	r0, r0
90020898:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002089c:	fb1c fc0a 	smulbb	ip, ip, sl
900208a0:	fa5f fe8e 	uxtb.w	lr, lr
900208a4:	fb0e 2203 	mla	r2, lr, r3, r2
900208a8:	fb01 cc03 	mla	ip, r1, r3, ip
900208ac:	1c43      	adds	r3, r0, #1
900208ae:	b292      	uxth	r2, r2
900208b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900208b4:	1c51      	adds	r1, r2, #1
900208b6:	fa1f fc8c 	uxth.w	ip, ip
900208ba:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900208be:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900208c2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900208c6:	4308      	orrs	r0, r1
900208c8:	f10c 0101 	add.w	r1, ip, #1
900208cc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900208d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900208d4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900208d8:	ea40 000c 	orr.w	r0, r0, ip
900208dc:	f8a8 0000 	strh.w	r0, [r8]
900208e0:	e7a1      	b.n	90020826 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900208e2:	b017      	add	sp, #92	; 0x5c
900208e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900208e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
900208e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900208ec:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
900208f0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900208f4:	2d00      	cmp	r5, #0
900208f6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
900208fa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900208fe:	fb05 0e03 	mla	lr, r5, r3, r0
90020902:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90020906:	f2c0 80b0 	blt.w	90020a6a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002090a:	45a9      	cmp	r9, r5
9002090c:	f340 80ad 	ble.w	90020a6a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90020910:	2800      	cmp	r0, #0
90020912:	f2c0 80a8 	blt.w	90020a66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90020916:	4580      	cmp	r8, r0
90020918:	f340 80a5 	ble.w	90020a66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002091c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90020920:	f01e 0f01 	tst.w	lr, #1
90020924:	5d16      	ldrb	r6, [r2, r4]
90020926:	bf0c      	ite	eq
90020928:	f006 060f 	andeq.w	r6, r6, #15
9002092c:	1136      	asrne	r6, r6, #4
9002092e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90020932:	b2f6      	uxtb	r6, r6
90020934:	1c44      	adds	r4, r0, #1
90020936:	f100 809b 	bmi.w	90020a70 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002093a:	45a0      	cmp	r8, r4
9002093c:	f340 8098 	ble.w	90020a70 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90020940:	2f00      	cmp	r7, #0
90020942:	f000 8097 	beq.w	90020a74 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90020946:	f10e 0a01 	add.w	sl, lr, #1
9002094a:	ea4f 045a 	mov.w	r4, sl, lsr #1
9002094e:	f01a 0f01 	tst.w	sl, #1
90020952:	5d14      	ldrb	r4, [r2, r4]
90020954:	bf0c      	ite	eq
90020956:	f004 040f 	andeq.w	r4, r4, #15
9002095a:	1124      	asrne	r4, r4, #4
9002095c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90020960:	b2e4      	uxtb	r4, r4
90020962:	3501      	adds	r5, #1
90020964:	f100 808a 	bmi.w	90020a7c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90020968:	45a9      	cmp	r9, r5
9002096a:	f340 8087 	ble.w	90020a7c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
9002096e:	f1bc 0f00 	cmp.w	ip, #0
90020972:	f000 8086 	beq.w	90020a82 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
90020976:	2800      	cmp	r0, #0
90020978:	db7e      	blt.n	90020a78 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002097a:	4580      	cmp	r8, r0
9002097c:	dd7c      	ble.n	90020a78 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002097e:	eb03 090e 	add.w	r9, r3, lr
90020982:	ea4f 0559 	mov.w	r5, r9, lsr #1
90020986:	f019 0f01 	tst.w	r9, #1
9002098a:	5d55      	ldrb	r5, [r2, r5]
9002098c:	bf0c      	ite	eq
9002098e:	f005 050f 	andeq.w	r5, r5, #15
90020992:	112d      	asrne	r5, r5, #4
90020994:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90020998:	b2ed      	uxtb	r5, r5
9002099a:	3001      	adds	r0, #1
9002099c:	d474      	bmi.n	90020a88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002099e:	4580      	cmp	r8, r0
900209a0:	dd72      	ble.n	90020a88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900209a2:	2f00      	cmp	r7, #0
900209a4:	d072      	beq.n	90020a8c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
900209a6:	3301      	adds	r3, #1
900209a8:	449e      	add	lr, r3
900209aa:	ea4f 035e 	mov.w	r3, lr, lsr #1
900209ae:	f01e 0f01 	tst.w	lr, #1
900209b2:	5cd0      	ldrb	r0, [r2, r3]
900209b4:	bf0c      	ite	eq
900209b6:	f000 000f 	andeq.w	r0, r0, #15
900209ba:	1100      	asrne	r0, r0, #4
900209bc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900209c0:	b2c3      	uxtb	r3, r0
900209c2:	b2ba      	uxth	r2, r7
900209c4:	fa1f fc8c 	uxth.w	ip, ip
900209c8:	fb02 f00c 	mul.w	r0, r2, ip
900209cc:	0112      	lsls	r2, r2, #4
900209ce:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900209d2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900209d6:	1a12      	subs	r2, r2, r0
900209d8:	fa1f fc8c 	uxth.w	ip, ip
900209dc:	b292      	uxth	r2, r2
900209de:	eba7 070c 	sub.w	r7, r7, ip
900209e2:	4362      	muls	r2, r4
900209e4:	b2bf      	uxth	r7, r7
900209e6:	fb06 2207 	mla	r2, r6, r7, r2
900209ea:	fb0c 2505 	mla	r5, ip, r5, r2
900209ee:	fb00 5303 	mla	r3, r0, r3, r5
900209f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900209f6:	b3a3      	cbz	r3, 90020a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
900209f8:	4a25      	ldr	r2, [pc, #148]	; (90020a90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
900209fa:	880e      	ldrh	r6, [r1, #0]
900209fc:	6815      	ldr	r5, [r2, #0]
900209fe:	b29a      	uxth	r2, r3
90020a00:	1234      	asrs	r4, r6, #8
90020a02:	43db      	mvns	r3, r3
90020a04:	f3c5 4007 	ubfx	r0, r5, #16, #8
90020a08:	f3c5 2707 	ubfx	r7, r5, #8, #8
90020a0c:	b2db      	uxtb	r3, r3
90020a0e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90020a12:	fb10 f002 	smulbb	r0, r0, r2
90020a16:	b2ed      	uxtb	r5, r5
90020a18:	fb17 f702 	smulbb	r7, r7, r2
90020a1c:	fb04 0403 	mla	r4, r4, r3, r0
90020a20:	10f0      	asrs	r0, r6, #3
90020a22:	fb15 f202 	smulbb	r2, r5, r2
90020a26:	00f6      	lsls	r6, r6, #3
90020a28:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90020a2c:	b2a4      	uxth	r4, r4
90020a2e:	b2f6      	uxtb	r6, r6
90020a30:	fb00 7003 	mla	r0, r0, r3, r7
90020a34:	fb06 2303 	mla	r3, r6, r3, r2
90020a38:	b280      	uxth	r0, r0
90020a3a:	b29a      	uxth	r2, r3
90020a3c:	1c63      	adds	r3, r4, #1
90020a3e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90020a42:	1c53      	adds	r3, r2, #1
90020a44:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020a48:	1c42      	adds	r2, r0, #1
90020a4a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90020a4e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90020a52:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020a56:	0940      	lsrs	r0, r0, #5
90020a58:	4323      	orrs	r3, r4
90020a5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90020a5e:	4303      	orrs	r3, r0
90020a60:	800b      	strh	r3, [r1, #0]
90020a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020a66:	2600      	movs	r6, #0
90020a68:	e764      	b.n	90020934 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
90020a6a:	2400      	movs	r4, #0
90020a6c:	4626      	mov	r6, r4
90020a6e:	e778      	b.n	90020962 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90020a70:	2400      	movs	r4, #0
90020a72:	e776      	b.n	90020962 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90020a74:	463c      	mov	r4, r7
90020a76:	e774      	b.n	90020962 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90020a78:	2500      	movs	r5, #0
90020a7a:	e78e      	b.n	9002099a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
90020a7c:	2300      	movs	r3, #0
90020a7e:	461d      	mov	r5, r3
90020a80:	e79f      	b.n	900209c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90020a82:	4663      	mov	r3, ip
90020a84:	4665      	mov	r5, ip
90020a86:	e79c      	b.n	900209c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90020a88:	2300      	movs	r3, #0
90020a8a:	e79a      	b.n	900209c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90020a8c:	463b      	mov	r3, r7
90020a8e:	e798      	b.n	900209c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90020a90:	240264ec 	.word	0x240264ec

90020a94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020a98:	b093      	sub	sp, #76	; 0x4c
90020a9a:	461d      	mov	r5, r3
90020a9c:	920c      	str	r2, [sp, #48]	; 0x30
90020a9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90020aa0:	9011      	str	r0, [sp, #68]	; 0x44
90020aa2:	9107      	str	r1, [sp, #28]
90020aa4:	6850      	ldr	r0, [r2, #4]
90020aa6:	6812      	ldr	r2, [r2, #0]
90020aa8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
90020aac:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90020ab0:	fb00 1303 	mla	r3, r0, r3, r1
90020ab4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90020ab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020aba:	689b      	ldr	r3, [r3, #8]
90020abc:	3301      	adds	r3, #1
90020abe:	f023 0301 	bic.w	r3, r3, #1
90020ac2:	9306      	str	r3, [sp, #24]
90020ac4:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020ac6:	681f      	ldr	r7, [r3, #0]
90020ac8:	9b07      	ldr	r3, [sp, #28]
90020aca:	2b00      	cmp	r3, #0
90020acc:	dc03      	bgt.n	90020ad6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
90020ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020ad0:	2b00      	cmp	r3, #0
90020ad2:	f340 8267 	ble.w	90020fa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90020ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020ad8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020adc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020ae0:	1e48      	subs	r0, r1, #1
90020ae2:	f102 3cff 	add.w	ip, r2, #4294967295
90020ae6:	2d00      	cmp	r5, #0
90020ae8:	f340 80b7 	ble.w	90020c5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90020aec:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020af0:	ea4f 4326 	mov.w	r3, r6, asr #16
90020af4:	d406      	bmi.n	90020b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90020af6:	4586      	cmp	lr, r0
90020af8:	da04      	bge.n	90020b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90020afa:	2b00      	cmp	r3, #0
90020afc:	db02      	blt.n	90020b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90020afe:	4563      	cmp	r3, ip
90020b00:	f2c0 80ac 	blt.w	90020c5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90020b04:	f11e 0e01 	adds.w	lr, lr, #1
90020b08:	f100 809f 	bmi.w	90020c4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90020b0c:	4571      	cmp	r1, lr
90020b0e:	f2c0 809c 	blt.w	90020c4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90020b12:	3301      	adds	r3, #1
90020b14:	f100 8099 	bmi.w	90020c4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90020b18:	429a      	cmp	r2, r3
90020b1a:	f2c0 8096 	blt.w	90020c4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90020b1e:	46c8      	mov	r8, r9
90020b20:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90020b24:	9509      	str	r5, [sp, #36]	; 0x24
90020b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020b28:	2b00      	cmp	r3, #0
90020b2a:	f340 80b5 	ble.w	90020c98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020b2e:	f3c4 3303 	ubfx	r3, r4, #12, #4
90020b32:	1430      	asrs	r0, r6, #16
90020b34:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020b38:	9308      	str	r3, [sp, #32]
90020b3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020b3c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90020b40:	1423      	asrs	r3, r4, #16
90020b42:	f100 813f 	bmi.w	90020dc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90020b46:	f10c 3bff 	add.w	fp, ip, #4294967295
90020b4a:	455b      	cmp	r3, fp
90020b4c:	f280 813a 	bge.w	90020dc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90020b50:	2800      	cmp	r0, #0
90020b52:	f2c0 8137 	blt.w	90020dc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90020b56:	f10e 3bff 	add.w	fp, lr, #4294967295
90020b5a:	4558      	cmp	r0, fp
90020b5c:	f280 8132 	bge.w	90020dc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90020b60:	9a06      	ldr	r2, [sp, #24]
90020b62:	fb00 3302 	mla	r3, r0, r2, r3
90020b66:	0858      	lsrs	r0, r3, #1
90020b68:	07da      	lsls	r2, r3, #31
90020b6a:	9a08      	ldr	r2, [sp, #32]
90020b6c:	f817 c000 	ldrb.w	ip, [r7, r0]
90020b70:	bf54      	ite	pl
90020b72:	f00c 0c0f 	andpl.w	ip, ip, #15
90020b76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90020b7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90020b7e:	fa5f fc8c 	uxtb.w	ip, ip
90020b82:	2a00      	cmp	r2, #0
90020b84:	f000 80cc 	beq.w	90020d20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90020b88:	1c58      	adds	r0, r3, #1
90020b8a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90020b8e:	07c0      	lsls	r0, r0, #31
90020b90:	f817 e00e 	ldrb.w	lr, [r7, lr]
90020b94:	bf54      	ite	pl
90020b96:	f00e 0e0f 	andpl.w	lr, lr, #15
90020b9a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90020b9e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90020ba2:	fa5f fe8e 	uxtb.w	lr, lr
90020ba6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90020baa:	b1b9      	cbz	r1, 90020bdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90020bac:	4453      	add	r3, sl
90020bae:	0858      	lsrs	r0, r3, #1
90020bb0:	07da      	lsls	r2, r3, #31
90020bb2:	5c38      	ldrb	r0, [r7, r0]
90020bb4:	bf54      	ite	pl
90020bb6:	f000 000f 	andpl.w	r0, r0, #15
90020bba:	1100      	asrmi	r0, r0, #4
90020bbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90020bc0:	b2c0      	uxtb	r0, r0
90020bc2:	900a      	str	r0, [sp, #40]	; 0x28
90020bc4:	1c58      	adds	r0, r3, #1
90020bc6:	0843      	lsrs	r3, r0, #1
90020bc8:	07c2      	lsls	r2, r0, #31
90020bca:	5cfb      	ldrb	r3, [r7, r3]
90020bcc:	bf54      	ite	pl
90020bce:	f003 030f 	andpl.w	r3, r3, #15
90020bd2:	111b      	asrmi	r3, r3, #4
90020bd4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90020bd8:	b2db      	uxtb	r3, r3
90020bda:	930e      	str	r3, [sp, #56]	; 0x38
90020bdc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90020be0:	b289      	uxth	r1, r1
90020be2:	fb02 f301 	mul.w	r3, r2, r1
90020be6:	0112      	lsls	r2, r2, #4
90020be8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90020bec:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90020bf0:	1ad2      	subs	r2, r2, r3
90020bf2:	b289      	uxth	r1, r1
90020bf4:	b292      	uxth	r2, r2
90020bf6:	1a40      	subs	r0, r0, r1
90020bf8:	fa1f fe80 	uxth.w	lr, r0
90020bfc:	980d      	ldr	r0, [sp, #52]	; 0x34
90020bfe:	4342      	muls	r2, r0
90020c00:	fb0c 2c0e 	mla	ip, ip, lr, r2
90020c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90020c06:	fb01 c102 	mla	r1, r1, r2, ip
90020c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020c0c:	fb03 1302 	mla	r3, r3, r2, r1
90020c10:	f3c3 2307 	ubfx	r3, r3, #8, #8
90020c14:	2bff      	cmp	r3, #255	; 0xff
90020c16:	f040 8094 	bne.w	90020d42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90020c1a:	4bbf      	ldr	r3, [pc, #764]	; (90020f18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90020c1c:	681a      	ldr	r2, [r3, #0]
90020c1e:	4bbf      	ldr	r3, [pc, #764]	; (90020f1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90020c20:	0951      	lsrs	r1, r2, #5
90020c22:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90020c26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020c2a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020c2e:	430b      	orrs	r3, r1
90020c30:	4313      	orrs	r3, r2
90020c32:	f8a8 3000 	strh.w	r3, [r8]
90020c36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020c38:	f108 0802 	add.w	r8, r8, #2
90020c3c:	441c      	add	r4, r3
90020c3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020c40:	441e      	add	r6, r3
90020c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020c44:	3b01      	subs	r3, #1
90020c46:	9309      	str	r3, [sp, #36]	; 0x24
90020c48:	e76d      	b.n	90020b26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020c4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020c4c:	3d01      	subs	r5, #1
90020c4e:	f109 0902 	add.w	r9, r9, #2
90020c52:	441c      	add	r4, r3
90020c54:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020c56:	441e      	add	r6, r3
90020c58:	e745      	b.n	90020ae6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90020c5a:	d021      	beq.n	90020ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90020c5c:	1e6b      	subs	r3, r5, #1
90020c5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020c60:	fb00 4003 	mla	r0, r0, r3, r4
90020c64:	1400      	asrs	r0, r0, #16
90020c66:	f53f af5a 	bmi.w	90020b1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90020c6a:	3901      	subs	r1, #1
90020c6c:	4288      	cmp	r0, r1
90020c6e:	f6bf af56 	bge.w	90020b1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90020c72:	9920      	ldr	r1, [sp, #128]	; 0x80
90020c74:	fb01 6303 	mla	r3, r1, r3, r6
90020c78:	141b      	asrs	r3, r3, #16
90020c7a:	f53f af50 	bmi.w	90020b1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90020c7e:	3a01      	subs	r2, #1
90020c80:	4293      	cmp	r3, r2
90020c82:	f6bf af4c 	bge.w	90020b1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90020c86:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90020c8a:	46a8      	mov	r8, r5
90020c8c:	46ce      	mov	lr, r9
90020c8e:	9308      	str	r3, [sp, #32]
90020c90:	f1b8 0f00 	cmp.w	r8, #0
90020c94:	f300 80b6 	bgt.w	90020e04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90020c98:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90020c9c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90020ca0:	9b07      	ldr	r3, [sp, #28]
90020ca2:	2b00      	cmp	r3, #0
90020ca4:	f340 817e 	ble.w	90020fa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90020ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020cac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020cae:	ee30 0a04 	vadd.f32	s0, s0, s8
90020cb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020cb6:	eef0 6a62 	vmov.f32	s13, s5
90020cba:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020cbe:	ee31 1a05 	vadd.f32	s2, s2, s10
90020cc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020cc6:	ee16 4a90 	vmov	r4, s13
90020cca:	eef0 6a43 	vmov.f32	s13, s6
90020cce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020cd2:	ee16 6a90 	vmov	r6, s13
90020cd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020cda:	ee61 7a27 	vmul.f32	s15, s2, s15
90020cde:	ee77 2a62 	vsub.f32	s5, s14, s5
90020ce2:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020ce6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020cea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020cee:	ee12 2a90 	vmov	r2, s5
90020cf2:	eef0 2a47 	vmov.f32	s5, s14
90020cf6:	fb92 f3f3 	sdiv	r3, r2, r3
90020cfa:	ee13 2a10 	vmov	r2, s6
90020cfe:	931f      	str	r3, [sp, #124]	; 0x7c
90020d00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020d02:	eeb0 3a67 	vmov.f32	s6, s15
90020d06:	fb92 f3f3 	sdiv	r3, r2, r3
90020d0a:	9320      	str	r3, [sp, #128]	; 0x80
90020d0c:	9b07      	ldr	r3, [sp, #28]
90020d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020d10:	3b01      	subs	r3, #1
90020d12:	9307      	str	r3, [sp, #28]
90020d14:	bf08      	it	eq
90020d16:	4615      	moveq	r5, r2
90020d18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020d1a:	bf18      	it	ne
90020d1c:	461d      	movne	r5, r3
90020d1e:	e6d3      	b.n	90020ac8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90020d20:	2900      	cmp	r1, #0
90020d22:	f43f af5b 	beq.w	90020bdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90020d26:	eb0a 0003 	add.w	r0, sl, r3
90020d2a:	0843      	lsrs	r3, r0, #1
90020d2c:	07c0      	lsls	r0, r0, #31
90020d2e:	5cfb      	ldrb	r3, [r7, r3]
90020d30:	bf54      	ite	pl
90020d32:	f003 030f 	andpl.w	r3, r3, #15
90020d36:	111b      	asrmi	r3, r3, #4
90020d38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90020d3c:	b2db      	uxtb	r3, r3
90020d3e:	930a      	str	r3, [sp, #40]	; 0x28
90020d40:	e74c      	b.n	90020bdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90020d42:	2b00      	cmp	r3, #0
90020d44:	f43f af77 	beq.w	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020d48:	4a73      	ldr	r2, [pc, #460]	; (90020f18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90020d4a:	fa1f fe83 	uxth.w	lr, r3
90020d4e:	f8b8 c000 	ldrh.w	ip, [r8]
90020d52:	43db      	mvns	r3, r3
90020d54:	6810      	ldr	r0, [r2, #0]
90020d56:	ea4f 212c 	mov.w	r1, ip, asr #8
90020d5a:	f3c0 4207 	ubfx	r2, r0, #16, #8
90020d5e:	b2db      	uxtb	r3, r3
90020d60:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020d64:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90020d68:	fb12 f20e 	smulbb	r2, r2, lr
90020d6c:	b2c0      	uxtb	r0, r0
90020d6e:	fb1b fb0e 	smulbb	fp, fp, lr
90020d72:	fb01 2103 	mla	r1, r1, r3, r2
90020d76:	ea4f 02ec 	mov.w	r2, ip, asr #3
90020d7a:	fb10 fe0e 	smulbb	lr, r0, lr
90020d7e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90020d82:	b289      	uxth	r1, r1
90020d84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020d88:	fa5f fc8c 	uxtb.w	ip, ip
90020d8c:	fb02 b203 	mla	r2, r2, r3, fp
90020d90:	1c48      	adds	r0, r1, #1
90020d92:	fb0c e303 	mla	r3, ip, r3, lr
90020d96:	b292      	uxth	r2, r2
90020d98:	b29b      	uxth	r3, r3
90020d9a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90020d9e:	f102 0b01 	add.w	fp, r2, #1
90020da2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90020da6:	1c59      	adds	r1, r3, #1
90020da8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90020dac:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90020db0:	0952      	lsrs	r2, r2, #5
90020db2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90020db6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020dba:	4301      	orrs	r1, r0
90020dbc:	4311      	orrs	r1, r2
90020dbe:	f8a8 1000 	strh.w	r1, [r8]
90020dc2:	e738      	b.n	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020dc4:	f113 0b01 	adds.w	fp, r3, #1
90020dc8:	f53f af35 	bmi.w	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020dcc:	45dc      	cmp	ip, fp
90020dce:	f6ff af32 	blt.w	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020dd2:	f110 0b01 	adds.w	fp, r0, #1
90020dd6:	f53f af2e 	bmi.w	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020dda:	45de      	cmp	lr, fp
90020ddc:	f6ff af2b 	blt.w	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020de0:	9302      	str	r3, [sp, #8]
90020de2:	fa0f f38e 	sxth.w	r3, lr
90020de6:	9a08      	ldr	r2, [sp, #32]
90020de8:	9301      	str	r3, [sp, #4]
90020dea:	fa0f f38c 	sxth.w	r3, ip
90020dee:	9105      	str	r1, [sp, #20]
90020df0:	4641      	mov	r1, r8
90020df2:	9300      	str	r3, [sp, #0]
90020df4:	4653      	mov	r3, sl
90020df6:	e9cd 0203 	strd	r0, r2, [sp, #12]
90020dfa:	463a      	mov	r2, r7
90020dfc:	9811      	ldr	r0, [sp, #68]	; 0x44
90020dfe:	f7ff fd73 	bl	900208e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90020e02:	e718      	b.n	90020c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90020e04:	1422      	asrs	r2, r4, #16
90020e06:	9906      	ldr	r1, [sp, #24]
90020e08:	1433      	asrs	r3, r6, #16
90020e0a:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020e0e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020e12:	fb01 2303 	mla	r3, r1, r3, r2
90020e16:	085a      	lsrs	r2, r3, #1
90020e18:	07d9      	lsls	r1, r3, #31
90020e1a:	5cba      	ldrb	r2, [r7, r2]
90020e1c:	bf54      	ite	pl
90020e1e:	f002 020f 	andpl.w	r2, r2, #15
90020e22:	1112      	asrmi	r2, r2, #4
90020e24:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90020e28:	b2d2      	uxtb	r2, r2
90020e2a:	2800      	cmp	r0, #0
90020e2c:	d063      	beq.n	90020ef6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90020e2e:	f103 0a01 	add.w	sl, r3, #1
90020e32:	ea4f 015a 	mov.w	r1, sl, lsr #1
90020e36:	f01a 0f01 	tst.w	sl, #1
90020e3a:	5c79      	ldrb	r1, [r7, r1]
90020e3c:	bf0c      	ite	eq
90020e3e:	f001 010f 	andeq.w	r1, r1, #15
90020e42:	1109      	asrne	r1, r1, #4
90020e44:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90020e48:	b2c9      	uxtb	r1, r1
90020e4a:	910f      	str	r1, [sp, #60]	; 0x3c
90020e4c:	f1bc 0f00 	cmp.w	ip, #0
90020e50:	d01a      	beq.n	90020e88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90020e52:	9908      	ldr	r1, [sp, #32]
90020e54:	440b      	add	r3, r1
90020e56:	0859      	lsrs	r1, r3, #1
90020e58:	f013 0f01 	tst.w	r3, #1
90020e5c:	f103 0301 	add.w	r3, r3, #1
90020e60:	5c79      	ldrb	r1, [r7, r1]
90020e62:	bf0c      	ite	eq
90020e64:	f001 010f 	andeq.w	r1, r1, #15
90020e68:	1109      	asrne	r1, r1, #4
90020e6a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90020e6e:	b2c9      	uxtb	r1, r1
90020e70:	910b      	str	r1, [sp, #44]	; 0x2c
90020e72:	0859      	lsrs	r1, r3, #1
90020e74:	07db      	lsls	r3, r3, #31
90020e76:	5c79      	ldrb	r1, [r7, r1]
90020e78:	bf54      	ite	pl
90020e7a:	f001 010f 	andpl.w	r1, r1, #15
90020e7e:	1109      	asrmi	r1, r1, #4
90020e80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90020e84:	b2c9      	uxtb	r1, r1
90020e86:	9110      	str	r1, [sp, #64]	; 0x40
90020e88:	b280      	uxth	r0, r0
90020e8a:	fa1f fc8c 	uxth.w	ip, ip
90020e8e:	fb00 f30c 	mul.w	r3, r0, ip
90020e92:	0100      	lsls	r0, r0, #4
90020e94:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90020e98:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90020e9c:	1ac0      	subs	r0, r0, r3
90020e9e:	fa1f fc8c 	uxth.w	ip, ip
90020ea2:	b280      	uxth	r0, r0
90020ea4:	eba1 010c 	sub.w	r1, r1, ip
90020ea8:	fa1f fa81 	uxth.w	sl, r1
90020eac:	990f      	ldr	r1, [sp, #60]	; 0x3c
90020eae:	4348      	muls	r0, r1
90020eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
90020eb2:	fb02 020a 	mla	r2, r2, sl, r0
90020eb6:	fb0c 2c01 	mla	ip, ip, r1, r2
90020eba:	9a10      	ldr	r2, [sp, #64]	; 0x40
90020ebc:	fb03 c302 	mla	r3, r3, r2, ip
90020ec0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90020ec4:	2bff      	cmp	r3, #255	; 0xff
90020ec6:	d12b      	bne.n	90020f20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90020ec8:	4b13      	ldr	r3, [pc, #76]	; (90020f18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90020eca:	681a      	ldr	r2, [r3, #0]
90020ecc:	4b13      	ldr	r3, [pc, #76]	; (90020f1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90020ece:	0951      	lsrs	r1, r2, #5
90020ed0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90020ed4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90020ed8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020edc:	430b      	orrs	r3, r1
90020ede:	4313      	orrs	r3, r2
90020ee0:	f8ae 3000 	strh.w	r3, [lr]
90020ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020ee6:	f10e 0e02 	add.w	lr, lr, #2
90020eea:	f108 38ff 	add.w	r8, r8, #4294967295
90020eee:	441c      	add	r4, r3
90020ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020ef2:	441e      	add	r6, r3
90020ef4:	e6cc      	b.n	90020c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90020ef6:	f1bc 0f00 	cmp.w	ip, #0
90020efa:	d0c5      	beq.n	90020e88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90020efc:	9908      	ldr	r1, [sp, #32]
90020efe:	440b      	add	r3, r1
90020f00:	0859      	lsrs	r1, r3, #1
90020f02:	07db      	lsls	r3, r3, #31
90020f04:	5c79      	ldrb	r1, [r7, r1]
90020f06:	bf54      	ite	pl
90020f08:	f001 010f 	andpl.w	r1, r1, #15
90020f0c:	1109      	asrmi	r1, r1, #4
90020f0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90020f12:	b2c9      	uxtb	r1, r1
90020f14:	910b      	str	r1, [sp, #44]	; 0x2c
90020f16:	e7b7      	b.n	90020e88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90020f18:	240264ec 	.word	0x240264ec
90020f1c:	fffff800 	.word	0xfffff800
90020f20:	2b00      	cmp	r3, #0
90020f22:	d0df      	beq.n	90020ee4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90020f24:	4a21      	ldr	r2, [pc, #132]	; (90020fac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90020f26:	fa1f fa83 	uxth.w	sl, r3
90020f2a:	f8be c000 	ldrh.w	ip, [lr]
90020f2e:	43db      	mvns	r3, r3
90020f30:	6810      	ldr	r0, [r2, #0]
90020f32:	ea4f 212c 	mov.w	r1, ip, asr #8
90020f36:	f3c0 4207 	ubfx	r2, r0, #16, #8
90020f3a:	b2db      	uxtb	r3, r3
90020f3c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020f40:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90020f44:	fb12 f20a 	smulbb	r2, r2, sl
90020f48:	b2c0      	uxtb	r0, r0
90020f4a:	fb1b fb0a 	smulbb	fp, fp, sl
90020f4e:	fb01 2103 	mla	r1, r1, r3, r2
90020f52:	ea4f 02ec 	mov.w	r2, ip, asr #3
90020f56:	fb10 f00a 	smulbb	r0, r0, sl
90020f5a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90020f5e:	b289      	uxth	r1, r1
90020f60:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020f64:	fa5f fc8c 	uxtb.w	ip, ip
90020f68:	fb02 b203 	mla	r2, r2, r3, fp
90020f6c:	fb0c 0003 	mla	r0, ip, r3, r0
90020f70:	1c4b      	adds	r3, r1, #1
90020f72:	b292      	uxth	r2, r2
90020f74:	b280      	uxth	r0, r0
90020f76:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90020f7a:	f100 0b01 	add.w	fp, r0, #1
90020f7e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90020f82:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90020f86:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90020f8a:	ea4b 0101 	orr.w	r1, fp, r1
90020f8e:	f102 0b01 	add.w	fp, r2, #1
90020f92:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90020f96:	0952      	lsrs	r2, r2, #5
90020f98:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020f9c:	4311      	orrs	r1, r2
90020f9e:	f8ae 1000 	strh.w	r1, [lr]
90020fa2:	e79f      	b.n	90020ee4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90020fa4:	b013      	add	sp, #76	; 0x4c
90020fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020faa:	bf00      	nop
90020fac:	240264ec 	.word	0x240264ec

90020fb0 <CRC_Lock>:
90020fb0:	4a20      	ldr	r2, [pc, #128]	; (90021034 <CRC_Lock+0x84>)
90020fb2:	b530      	push	{r4, r5, lr}
90020fb4:	6813      	ldr	r3, [r2, #0]
90020fb6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90020fba:	f24c 2540 	movw	r5, #49728	; 0xc240
90020fbe:	f023 0301 	bic.w	r3, r3, #1
90020fc2:	6013      	str	r3, [r2, #0]
90020fc4:	4b1c      	ldr	r3, [pc, #112]	; (90021038 <CRC_Lock+0x88>)
90020fc6:	681a      	ldr	r2, [r3, #0]
90020fc8:	4022      	ands	r2, r4
90020fca:	42aa      	cmp	r2, r5
90020fcc:	d005      	beq.n	90020fda <CRC_Lock+0x2a>
90020fce:	681b      	ldr	r3, [r3, #0]
90020fd0:	f24c 2270 	movw	r2, #49776	; 0xc270
90020fd4:	4023      	ands	r3, r4
90020fd6:	4293      	cmp	r3, r2
90020fd8:	d124      	bne.n	90021024 <CRC_Lock+0x74>
90020fda:	4b18      	ldr	r3, [pc, #96]	; (9002103c <CRC_Lock+0x8c>)
90020fdc:	681b      	ldr	r3, [r3, #0]
90020fde:	bb0b      	cbnz	r3, 90021024 <CRC_Lock+0x74>
90020fe0:	4b17      	ldr	r3, [pc, #92]	; (90021040 <CRC_Lock+0x90>)
90020fe2:	681a      	ldr	r2, [r3, #0]
90020fe4:	f3c2 020b 	ubfx	r2, r2, #0, #12
90020fe8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90020fec:	d00d      	beq.n	9002100a <CRC_Lock+0x5a>
90020fee:	681a      	ldr	r2, [r3, #0]
90020ff0:	f240 4483 	movw	r4, #1155	; 0x483
90020ff4:	f3c2 020b 	ubfx	r2, r2, #0, #12
90020ff8:	42a2      	cmp	r2, r4
90020ffa:	d006      	beq.n	9002100a <CRC_Lock+0x5a>
90020ffc:	681b      	ldr	r3, [r3, #0]
90020ffe:	f240 4285 	movw	r2, #1157	; 0x485
90021002:	f3c3 030b 	ubfx	r3, r3, #0, #12
90021006:	4293      	cmp	r3, r2
90021008:	d10c      	bne.n	90021024 <CRC_Lock+0x74>
9002100a:	4b0e      	ldr	r3, [pc, #56]	; (90021044 <CRC_Lock+0x94>)
9002100c:	2201      	movs	r2, #1
9002100e:	601a      	str	r2, [r3, #0]
90021010:	681a      	ldr	r2, [r3, #0]
90021012:	2a00      	cmp	r2, #0
90021014:	d1fc      	bne.n	90021010 <CRC_Lock+0x60>
90021016:	4b0c      	ldr	r3, [pc, #48]	; (90021048 <CRC_Lock+0x98>)
90021018:	6018      	str	r0, [r3, #0]
9002101a:	6818      	ldr	r0, [r3, #0]
9002101c:	1a43      	subs	r3, r0, r1
9002101e:	4258      	negs	r0, r3
90021020:	4158      	adcs	r0, r3
90021022:	bd30      	pop	{r4, r5, pc}
90021024:	4b09      	ldr	r3, [pc, #36]	; (9002104c <CRC_Lock+0x9c>)
90021026:	2201      	movs	r2, #1
90021028:	601a      	str	r2, [r3, #0]
9002102a:	681a      	ldr	r2, [r3, #0]
9002102c:	2a00      	cmp	r2, #0
9002102e:	d1fc      	bne.n	9002102a <CRC_Lock+0x7a>
90021030:	4b07      	ldr	r3, [pc, #28]	; (90021050 <CRC_Lock+0xa0>)
90021032:	e7f1      	b.n	90021018 <CRC_Lock+0x68>
90021034:	e0002000 	.word	0xe0002000
90021038:	e000ed00 	.word	0xe000ed00
9002103c:	e0042000 	.word	0xe0042000
90021040:	5c001000 	.word	0x5c001000
90021044:	58024c08 	.word	0x58024c08
90021048:	58024c00 	.word	0x58024c00
9002104c:	40023008 	.word	0x40023008
90021050:	40023000 	.word	0x40023000

90021054 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90021054:	6101      	str	r1, [r0, #16]
90021056:	4770      	bx	lr

90021058 <_ZN8touchgfx8Gestures4tickEv>:
90021058:	7b83      	ldrb	r3, [r0, #14]
9002105a:	b14b      	cbz	r3, 90021070 <_ZN8touchgfx8Gestures4tickEv+0x18>
9002105c:	8903      	ldrh	r3, [r0, #8]
9002105e:	3301      	adds	r3, #1
90021060:	b29b      	uxth	r3, r3
90021062:	2b07      	cmp	r3, #7
90021064:	8103      	strh	r3, [r0, #8]
90021066:	bf81      	itttt	hi
90021068:	2300      	movhi	r3, #0
9002106a:	8143      	strhhi	r3, [r0, #10]
9002106c:	8183      	strhhi	r3, [r0, #12]
9002106e:	7383      	strbhi	r3, [r0, #14]
90021070:	4770      	bx	lr
	...

90021074 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90021074:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90021078:	4698      	mov	r8, r3
9002107a:	8883      	ldrh	r3, [r0, #4]
9002107c:	4604      	mov	r4, r0
9002107e:	4617      	mov	r7, r2
90021080:	f8ad 3006 	strh.w	r3, [sp, #6]
90021084:	eba8 0303 	sub.w	r3, r8, r3
90021088:	4a19      	ldr	r2, [pc, #100]	; (900210f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
9002108a:	460e      	mov	r6, r1
9002108c:	b21b      	sxth	r3, r3
9002108e:	88c1      	ldrh	r1, [r0, #6]
90021090:	9200      	str	r2, [sp, #0]
90021092:	2000      	movs	r0, #0
90021094:	2b00      	cmp	r3, #0
90021096:	8aa2      	ldrh	r2, [r4, #20]
90021098:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
9002109c:	bfb8      	it	lt
9002109e:	425b      	neglt	r3, r3
900210a0:	f88d 0004 	strb.w	r0, [sp, #4]
900210a4:	f8ad 1008 	strh.w	r1, [sp, #8]
900210a8:	b21b      	sxth	r3, r3
900210aa:	f8ad 800a 	strh.w	r8, [sp, #10]
900210ae:	f8ad 500c 	strh.w	r5, [sp, #12]
900210b2:	4293      	cmp	r3, r2
900210b4:	dc07      	bgt.n	900210c6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
900210b6:	1a69      	subs	r1, r5, r1
900210b8:	b209      	sxth	r1, r1
900210ba:	2900      	cmp	r1, #0
900210bc:	bfb8      	it	lt
900210be:	4249      	neglt	r1, r1
900210c0:	b209      	sxth	r1, r1
900210c2:	428a      	cmp	r2, r1
900210c4:	da10      	bge.n	900210e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
900210c6:	6920      	ldr	r0, [r4, #16]
900210c8:	4669      	mov	r1, sp
900210ca:	eba8 0606 	sub.w	r6, r8, r6
900210ce:	1bef      	subs	r7, r5, r7
900210d0:	6803      	ldr	r3, [r0, #0]
900210d2:	685b      	ldr	r3, [r3, #4]
900210d4:	4798      	blx	r3
900210d6:	2300      	movs	r3, #0
900210d8:	2001      	movs	r0, #1
900210da:	8166      	strh	r6, [r4, #10]
900210dc:	8123      	strh	r3, [r4, #8]
900210de:	81a7      	strh	r7, [r4, #12]
900210e0:	f8a4 8004 	strh.w	r8, [r4, #4]
900210e4:	80e5      	strh	r5, [r4, #6]
900210e6:	73a0      	strb	r0, [r4, #14]
900210e8:	b004      	add	sp, #16
900210ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900210ee:	bf00      	nop
900210f0:	90025124 	.word	0x90025124

900210f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
900210f4:	b5f0      	push	{r4, r5, r6, r7, lr}
900210f6:	461e      	mov	r6, r3
900210f8:	1e4b      	subs	r3, r1, #1
900210fa:	b085      	sub	sp, #20
900210fc:	4604      	mov	r4, r0
900210fe:	2b01      	cmp	r3, #1
90021100:	460d      	mov	r5, r1
90021102:	4617      	mov	r7, r2
90021104:	d84b      	bhi.n	9002119e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90021106:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9002110a:	1cd3      	adds	r3, r2, #3
9002110c:	b29b      	uxth	r3, r3
9002110e:	2b06      	cmp	r3, #6
90021110:	d916      	bls.n	90021140 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90021112:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 900211b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90021116:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9002111a:	f8cd c004 	str.w	ip, [sp, #4]
9002111e:	f04f 0c00 	mov.w	ip, #0
90021122:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90021126:	6900      	ldr	r0, [r0, #16]
90021128:	f8ad 100c 	strh.w	r1, [sp, #12]
9002112c:	a901      	add	r1, sp, #4
9002112e:	f88d c008 	strb.w	ip, [sp, #8]
90021132:	f8ad 200a 	strh.w	r2, [sp, #10]
90021136:	f8ad 300e 	strh.w	r3, [sp, #14]
9002113a:	6803      	ldr	r3, [r0, #0]
9002113c:	689b      	ldr	r3, [r3, #8]
9002113e:	4798      	blx	r3
90021140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90021144:	1cd3      	adds	r3, r2, #3
90021146:	b29b      	uxth	r3, r3
90021148:	2b06      	cmp	r3, #6
9002114a:	d916      	bls.n	9002117a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
9002114c:	f8df c064 	ldr.w	ip, [pc, #100]	; 900211b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90021150:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90021154:	f8cd c004 	str.w	ip, [sp, #4]
90021158:	f04f 0c01 	mov.w	ip, #1
9002115c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90021160:	6920      	ldr	r0, [r4, #16]
90021162:	f8ad 100c 	strh.w	r1, [sp, #12]
90021166:	a901      	add	r1, sp, #4
90021168:	f88d c008 	strb.w	ip, [sp, #8]
9002116c:	f8ad 200a 	strh.w	r2, [sp, #10]
90021170:	f8ad 300e 	strh.w	r3, [sp, #14]
90021174:	6803      	ldr	r3, [r0, #0]
90021176:	689b      	ldr	r3, [r3, #8]
90021178:	4798      	blx	r3
9002117a:	4b0d      	ldr	r3, [pc, #52]	; (900211b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
9002117c:	a901      	add	r1, sp, #4
9002117e:	6920      	ldr	r0, [r4, #16]
90021180:	9301      	str	r3, [sp, #4]
90021182:	2300      	movs	r3, #0
90021184:	f88d 5008 	strb.w	r5, [sp, #8]
90021188:	f8ad 700a 	strh.w	r7, [sp, #10]
9002118c:	f8ad 600c 	strh.w	r6, [sp, #12]
90021190:	f8ad 300e 	strh.w	r3, [sp, #14]
90021194:	6803      	ldr	r3, [r0, #0]
90021196:	681b      	ldr	r3, [r3, #0]
90021198:	4798      	blx	r3
9002119a:	b005      	add	sp, #20
9002119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9002119e:	2900      	cmp	r1, #0
900211a0:	d1eb      	bne.n	9002117a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900211a2:	80a2      	strh	r2, [r4, #4]
900211a4:	80c6      	strh	r6, [r0, #6]
900211a6:	60a1      	str	r1, [r4, #8]
900211a8:	81a1      	strh	r1, [r4, #12]
900211aa:	73a1      	strb	r1, [r4, #14]
900211ac:	e7e5      	b.n	9002117a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900211ae:	bf00      	nop
900211b0:	90025110 	.word	0x90025110
900211b4:	90025138 	.word	0x90025138

900211b8 <__aeabi_atexit>:
900211b8:	460b      	mov	r3, r1
900211ba:	4601      	mov	r1, r0
900211bc:	4618      	mov	r0, r3
900211be:	f000 b853 	b.w	90021268 <__cxa_atexit>

900211c2 <_ZdlPvj>:
900211c2:	f000 b812 	b.w	900211ea <_ZdlPv>

900211c6 <__cxa_guard_acquire>:
900211c6:	6803      	ldr	r3, [r0, #0]
900211c8:	07db      	lsls	r3, r3, #31
900211ca:	d406      	bmi.n	900211da <__cxa_guard_acquire+0x14>
900211cc:	7843      	ldrb	r3, [r0, #1]
900211ce:	b103      	cbz	r3, 900211d2 <__cxa_guard_acquire+0xc>
900211d0:	deff      	udf	#255	; 0xff
900211d2:	2301      	movs	r3, #1
900211d4:	7043      	strb	r3, [r0, #1]
900211d6:	4618      	mov	r0, r3
900211d8:	4770      	bx	lr
900211da:	2000      	movs	r0, #0
900211dc:	4770      	bx	lr

900211de <__cxa_guard_release>:
900211de:	2301      	movs	r3, #1
900211e0:	6003      	str	r3, [r0, #0]
900211e2:	4770      	bx	lr

900211e4 <__cxa_pure_virtual>:
900211e4:	b508      	push	{r3, lr}
900211e6:	f000 f80f 	bl	90021208 <_ZSt9terminatev>

900211ea <_ZdlPv>:
900211ea:	f000 b893 	b.w	90021314 <free>

900211ee <_ZN10__cxxabiv111__terminateEPFvvE>:
900211ee:	b508      	push	{r3, lr}
900211f0:	4780      	blx	r0
900211f2:	f000 f80e 	bl	90021212 <abort>
	...

900211f8 <_ZSt13get_terminatev>:
900211f8:	4b02      	ldr	r3, [pc, #8]	; (90021204 <_ZSt13get_terminatev+0xc>)
900211fa:	6818      	ldr	r0, [r3, #0]
900211fc:	f3bf 8f5b 	dmb	ish
90021200:	4770      	bx	lr
90021202:	bf00      	nop
90021204:	240000dc 	.word	0x240000dc

90021208 <_ZSt9terminatev>:
90021208:	b508      	push	{r3, lr}
9002120a:	f7ff fff5 	bl	900211f8 <_ZSt13get_terminatev>
9002120e:	f7ff ffee 	bl	900211ee <_ZN10__cxxabiv111__terminateEPFvvE>

90021212 <abort>:
90021212:	b508      	push	{r3, lr}
90021214:	2006      	movs	r0, #6
90021216:	f000 fca1 	bl	90021b5c <raise>
9002121a:	2001      	movs	r0, #1
9002121c:	f7e3 fbca 	bl	900049b4 <_exit>

90021220 <__assert_func>:
90021220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90021222:	4614      	mov	r4, r2
90021224:	461a      	mov	r2, r3
90021226:	4b09      	ldr	r3, [pc, #36]	; (9002124c <__assert_func+0x2c>)
90021228:	681b      	ldr	r3, [r3, #0]
9002122a:	4605      	mov	r5, r0
9002122c:	68d8      	ldr	r0, [r3, #12]
9002122e:	b14c      	cbz	r4, 90021244 <__assert_func+0x24>
90021230:	4b07      	ldr	r3, [pc, #28]	; (90021250 <__assert_func+0x30>)
90021232:	9100      	str	r1, [sp, #0]
90021234:	e9cd 3401 	strd	r3, r4, [sp, #4]
90021238:	4906      	ldr	r1, [pc, #24]	; (90021254 <__assert_func+0x34>)
9002123a:	462b      	mov	r3, r5
9002123c:	f000 f828 	bl	90021290 <fiprintf>
90021240:	f7ff ffe7 	bl	90021212 <abort>
90021244:	4b04      	ldr	r3, [pc, #16]	; (90021258 <__assert_func+0x38>)
90021246:	461c      	mov	r4, r3
90021248:	e7f3      	b.n	90021232 <__assert_func+0x12>
9002124a:	bf00      	nop
9002124c:	240000e0 	.word	0x240000e0
90021250:	90025400 	.word	0x90025400
90021254:	9002540d 	.word	0x9002540d
90021258:	9002543b 	.word	0x9002543b

9002125c <atexit>:
9002125c:	2300      	movs	r3, #0
9002125e:	4601      	mov	r1, r0
90021260:	461a      	mov	r2, r3
90021262:	4618      	mov	r0, r3
90021264:	f000 bd6a 	b.w	90021d3c <__register_exitproc>

90021268 <__cxa_atexit>:
90021268:	b510      	push	{r4, lr}
9002126a:	4c05      	ldr	r4, [pc, #20]	; (90021280 <__cxa_atexit+0x18>)
9002126c:	4613      	mov	r3, r2
9002126e:	b12c      	cbz	r4, 9002127c <__cxa_atexit+0x14>
90021270:	460a      	mov	r2, r1
90021272:	4601      	mov	r1, r0
90021274:	2002      	movs	r0, #2
90021276:	f000 fd61 	bl	90021d3c <__register_exitproc>
9002127a:	bd10      	pop	{r4, pc}
9002127c:	4620      	mov	r0, r4
9002127e:	e7fc      	b.n	9002127a <__cxa_atexit+0x12>
90021280:	90021d3d 	.word	0x90021d3d

90021284 <__errno>:
90021284:	4b01      	ldr	r3, [pc, #4]	; (9002128c <__errno+0x8>)
90021286:	6818      	ldr	r0, [r3, #0]
90021288:	4770      	bx	lr
9002128a:	bf00      	nop
9002128c:	240000e0 	.word	0x240000e0

90021290 <fiprintf>:
90021290:	b40e      	push	{r1, r2, r3}
90021292:	b503      	push	{r0, r1, lr}
90021294:	4601      	mov	r1, r0
90021296:	ab03      	add	r3, sp, #12
90021298:	4805      	ldr	r0, [pc, #20]	; (900212b0 <fiprintf+0x20>)
9002129a:	f853 2b04 	ldr.w	r2, [r3], #4
9002129e:	6800      	ldr	r0, [r0, #0]
900212a0:	9301      	str	r3, [sp, #4]
900212a2:	f000 f95f 	bl	90021564 <_vfiprintf_r>
900212a6:	b002      	add	sp, #8
900212a8:	f85d eb04 	ldr.w	lr, [sp], #4
900212ac:	b003      	add	sp, #12
900212ae:	4770      	bx	lr
900212b0:	240000e0 	.word	0x240000e0

900212b4 <__libc_init_array>:
900212b4:	b570      	push	{r4, r5, r6, lr}
900212b6:	4d0d      	ldr	r5, [pc, #52]	; (900212ec <__libc_init_array+0x38>)
900212b8:	4c0d      	ldr	r4, [pc, #52]	; (900212f0 <__libc_init_array+0x3c>)
900212ba:	1b64      	subs	r4, r4, r5
900212bc:	10a4      	asrs	r4, r4, #2
900212be:	2600      	movs	r6, #0
900212c0:	42a6      	cmp	r6, r4
900212c2:	d109      	bne.n	900212d8 <__libc_init_array+0x24>
900212c4:	4d0b      	ldr	r5, [pc, #44]	; (900212f4 <__libc_init_array+0x40>)
900212c6:	4c0c      	ldr	r4, [pc, #48]	; (900212f8 <__libc_init_array+0x44>)
900212c8:	f001 f86e 	bl	900223a8 <_init>
900212cc:	1b64      	subs	r4, r4, r5
900212ce:	10a4      	asrs	r4, r4, #2
900212d0:	2600      	movs	r6, #0
900212d2:	42a6      	cmp	r6, r4
900212d4:	d105      	bne.n	900212e2 <__libc_init_array+0x2e>
900212d6:	bd70      	pop	{r4, r5, r6, pc}
900212d8:	f855 3b04 	ldr.w	r3, [r5], #4
900212dc:	4798      	blx	r3
900212de:	3601      	adds	r6, #1
900212e0:	e7ee      	b.n	900212c0 <__libc_init_array+0xc>
900212e2:	f855 3b04 	ldr.w	r3, [r5], #4
900212e6:	4798      	blx	r3
900212e8:	3601      	adds	r6, #1
900212ea:	e7f2      	b.n	900212d2 <__libc_init_array+0x1e>
900212ec:	90025500 	.word	0x90025500
900212f0:	90025500 	.word	0x90025500
900212f4:	90025500 	.word	0x90025500
900212f8:	9002551c 	.word	0x9002551c

900212fc <__retarget_lock_init_recursive>:
900212fc:	4770      	bx	lr

900212fe <__retarget_lock_acquire_recursive>:
900212fe:	4770      	bx	lr

90021300 <__retarget_lock_release>:
90021300:	4770      	bx	lr

90021302 <__retarget_lock_release_recursive>:
90021302:	4770      	bx	lr

90021304 <malloc>:
90021304:	4b02      	ldr	r3, [pc, #8]	; (90021310 <malloc+0xc>)
90021306:	4601      	mov	r1, r0
90021308:	6818      	ldr	r0, [r3, #0]
9002130a:	f000 b88d 	b.w	90021428 <_malloc_r>
9002130e:	bf00      	nop
90021310:	240000e0 	.word	0x240000e0

90021314 <free>:
90021314:	4b02      	ldr	r3, [pc, #8]	; (90021320 <free+0xc>)
90021316:	4601      	mov	r1, r0
90021318:	6818      	ldr	r0, [r3, #0]
9002131a:	f000 b819 	b.w	90021350 <_free_r>
9002131e:	bf00      	nop
90021320:	240000e0 	.word	0x240000e0

90021324 <memcpy>:
90021324:	440a      	add	r2, r1
90021326:	4291      	cmp	r1, r2
90021328:	f100 33ff 	add.w	r3, r0, #4294967295
9002132c:	d100      	bne.n	90021330 <memcpy+0xc>
9002132e:	4770      	bx	lr
90021330:	b510      	push	{r4, lr}
90021332:	f811 4b01 	ldrb.w	r4, [r1], #1
90021336:	f803 4f01 	strb.w	r4, [r3, #1]!
9002133a:	4291      	cmp	r1, r2
9002133c:	d1f9      	bne.n	90021332 <memcpy+0xe>
9002133e:	bd10      	pop	{r4, pc}

90021340 <memset>:
90021340:	4402      	add	r2, r0
90021342:	4603      	mov	r3, r0
90021344:	4293      	cmp	r3, r2
90021346:	d100      	bne.n	9002134a <memset+0xa>
90021348:	4770      	bx	lr
9002134a:	f803 1b01 	strb.w	r1, [r3], #1
9002134e:	e7f9      	b.n	90021344 <memset+0x4>

90021350 <_free_r>:
90021350:	b537      	push	{r0, r1, r2, r4, r5, lr}
90021352:	2900      	cmp	r1, #0
90021354:	d044      	beq.n	900213e0 <_free_r+0x90>
90021356:	f851 3c04 	ldr.w	r3, [r1, #-4]
9002135a:	9001      	str	r0, [sp, #4]
9002135c:	2b00      	cmp	r3, #0
9002135e:	f1a1 0404 	sub.w	r4, r1, #4
90021362:	bfb8      	it	lt
90021364:	18e4      	addlt	r4, r4, r3
90021366:	f000 ff67 	bl	90022238 <__malloc_lock>
9002136a:	4a1e      	ldr	r2, [pc, #120]	; (900213e4 <_free_r+0x94>)
9002136c:	9801      	ldr	r0, [sp, #4]
9002136e:	6813      	ldr	r3, [r2, #0]
90021370:	b933      	cbnz	r3, 90021380 <_free_r+0x30>
90021372:	6063      	str	r3, [r4, #4]
90021374:	6014      	str	r4, [r2, #0]
90021376:	b003      	add	sp, #12
90021378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9002137c:	f000 bf62 	b.w	90022244 <__malloc_unlock>
90021380:	42a3      	cmp	r3, r4
90021382:	d908      	bls.n	90021396 <_free_r+0x46>
90021384:	6825      	ldr	r5, [r4, #0]
90021386:	1961      	adds	r1, r4, r5
90021388:	428b      	cmp	r3, r1
9002138a:	bf01      	itttt	eq
9002138c:	6819      	ldreq	r1, [r3, #0]
9002138e:	685b      	ldreq	r3, [r3, #4]
90021390:	1949      	addeq	r1, r1, r5
90021392:	6021      	streq	r1, [r4, #0]
90021394:	e7ed      	b.n	90021372 <_free_r+0x22>
90021396:	461a      	mov	r2, r3
90021398:	685b      	ldr	r3, [r3, #4]
9002139a:	b10b      	cbz	r3, 900213a0 <_free_r+0x50>
9002139c:	42a3      	cmp	r3, r4
9002139e:	d9fa      	bls.n	90021396 <_free_r+0x46>
900213a0:	6811      	ldr	r1, [r2, #0]
900213a2:	1855      	adds	r5, r2, r1
900213a4:	42a5      	cmp	r5, r4
900213a6:	d10b      	bne.n	900213c0 <_free_r+0x70>
900213a8:	6824      	ldr	r4, [r4, #0]
900213aa:	4421      	add	r1, r4
900213ac:	1854      	adds	r4, r2, r1
900213ae:	42a3      	cmp	r3, r4
900213b0:	6011      	str	r1, [r2, #0]
900213b2:	d1e0      	bne.n	90021376 <_free_r+0x26>
900213b4:	681c      	ldr	r4, [r3, #0]
900213b6:	685b      	ldr	r3, [r3, #4]
900213b8:	6053      	str	r3, [r2, #4]
900213ba:	4421      	add	r1, r4
900213bc:	6011      	str	r1, [r2, #0]
900213be:	e7da      	b.n	90021376 <_free_r+0x26>
900213c0:	d902      	bls.n	900213c8 <_free_r+0x78>
900213c2:	230c      	movs	r3, #12
900213c4:	6003      	str	r3, [r0, #0]
900213c6:	e7d6      	b.n	90021376 <_free_r+0x26>
900213c8:	6825      	ldr	r5, [r4, #0]
900213ca:	1961      	adds	r1, r4, r5
900213cc:	428b      	cmp	r3, r1
900213ce:	bf04      	itt	eq
900213d0:	6819      	ldreq	r1, [r3, #0]
900213d2:	685b      	ldreq	r3, [r3, #4]
900213d4:	6063      	str	r3, [r4, #4]
900213d6:	bf04      	itt	eq
900213d8:	1949      	addeq	r1, r1, r5
900213da:	6021      	streq	r1, [r4, #0]
900213dc:	6054      	str	r4, [r2, #4]
900213de:	e7ca      	b.n	90021376 <_free_r+0x26>
900213e0:	b003      	add	sp, #12
900213e2:	bd30      	pop	{r4, r5, pc}
900213e4:	240265e4 	.word	0x240265e4

900213e8 <sbrk_aligned>:
900213e8:	b570      	push	{r4, r5, r6, lr}
900213ea:	4e0e      	ldr	r6, [pc, #56]	; (90021424 <sbrk_aligned+0x3c>)
900213ec:	460c      	mov	r4, r1
900213ee:	6831      	ldr	r1, [r6, #0]
900213f0:	4605      	mov	r5, r0
900213f2:	b911      	cbnz	r1, 900213fa <sbrk_aligned+0x12>
900213f4:	f000 fb7a 	bl	90021aec <_sbrk_r>
900213f8:	6030      	str	r0, [r6, #0]
900213fa:	4621      	mov	r1, r4
900213fc:	4628      	mov	r0, r5
900213fe:	f000 fb75 	bl	90021aec <_sbrk_r>
90021402:	1c43      	adds	r3, r0, #1
90021404:	d00a      	beq.n	9002141c <sbrk_aligned+0x34>
90021406:	1cc4      	adds	r4, r0, #3
90021408:	f024 0403 	bic.w	r4, r4, #3
9002140c:	42a0      	cmp	r0, r4
9002140e:	d007      	beq.n	90021420 <sbrk_aligned+0x38>
90021410:	1a21      	subs	r1, r4, r0
90021412:	4628      	mov	r0, r5
90021414:	f000 fb6a 	bl	90021aec <_sbrk_r>
90021418:	3001      	adds	r0, #1
9002141a:	d101      	bne.n	90021420 <sbrk_aligned+0x38>
9002141c:	f04f 34ff 	mov.w	r4, #4294967295
90021420:	4620      	mov	r0, r4
90021422:	bd70      	pop	{r4, r5, r6, pc}
90021424:	240265e8 	.word	0x240265e8

90021428 <_malloc_r>:
90021428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002142c:	1ccd      	adds	r5, r1, #3
9002142e:	f025 0503 	bic.w	r5, r5, #3
90021432:	3508      	adds	r5, #8
90021434:	2d0c      	cmp	r5, #12
90021436:	bf38      	it	cc
90021438:	250c      	movcc	r5, #12
9002143a:	2d00      	cmp	r5, #0
9002143c:	4607      	mov	r7, r0
9002143e:	db01      	blt.n	90021444 <_malloc_r+0x1c>
90021440:	42a9      	cmp	r1, r5
90021442:	d905      	bls.n	90021450 <_malloc_r+0x28>
90021444:	230c      	movs	r3, #12
90021446:	603b      	str	r3, [r7, #0]
90021448:	2600      	movs	r6, #0
9002144a:	4630      	mov	r0, r6
9002144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90021450:	4e2e      	ldr	r6, [pc, #184]	; (9002150c <_malloc_r+0xe4>)
90021452:	f000 fef1 	bl	90022238 <__malloc_lock>
90021456:	6833      	ldr	r3, [r6, #0]
90021458:	461c      	mov	r4, r3
9002145a:	bb34      	cbnz	r4, 900214aa <_malloc_r+0x82>
9002145c:	4629      	mov	r1, r5
9002145e:	4638      	mov	r0, r7
90021460:	f7ff ffc2 	bl	900213e8 <sbrk_aligned>
90021464:	1c43      	adds	r3, r0, #1
90021466:	4604      	mov	r4, r0
90021468:	d14d      	bne.n	90021506 <_malloc_r+0xde>
9002146a:	6834      	ldr	r4, [r6, #0]
9002146c:	4626      	mov	r6, r4
9002146e:	2e00      	cmp	r6, #0
90021470:	d140      	bne.n	900214f4 <_malloc_r+0xcc>
90021472:	6823      	ldr	r3, [r4, #0]
90021474:	4631      	mov	r1, r6
90021476:	4638      	mov	r0, r7
90021478:	eb04 0803 	add.w	r8, r4, r3
9002147c:	f000 fb36 	bl	90021aec <_sbrk_r>
90021480:	4580      	cmp	r8, r0
90021482:	d13a      	bne.n	900214fa <_malloc_r+0xd2>
90021484:	6821      	ldr	r1, [r4, #0]
90021486:	3503      	adds	r5, #3
90021488:	1a6d      	subs	r5, r5, r1
9002148a:	f025 0503 	bic.w	r5, r5, #3
9002148e:	3508      	adds	r5, #8
90021490:	2d0c      	cmp	r5, #12
90021492:	bf38      	it	cc
90021494:	250c      	movcc	r5, #12
90021496:	4629      	mov	r1, r5
90021498:	4638      	mov	r0, r7
9002149a:	f7ff ffa5 	bl	900213e8 <sbrk_aligned>
9002149e:	3001      	adds	r0, #1
900214a0:	d02b      	beq.n	900214fa <_malloc_r+0xd2>
900214a2:	6823      	ldr	r3, [r4, #0]
900214a4:	442b      	add	r3, r5
900214a6:	6023      	str	r3, [r4, #0]
900214a8:	e00e      	b.n	900214c8 <_malloc_r+0xa0>
900214aa:	6822      	ldr	r2, [r4, #0]
900214ac:	1b52      	subs	r2, r2, r5
900214ae:	d41e      	bmi.n	900214ee <_malloc_r+0xc6>
900214b0:	2a0b      	cmp	r2, #11
900214b2:	d916      	bls.n	900214e2 <_malloc_r+0xba>
900214b4:	1961      	adds	r1, r4, r5
900214b6:	42a3      	cmp	r3, r4
900214b8:	6025      	str	r5, [r4, #0]
900214ba:	bf18      	it	ne
900214bc:	6059      	strne	r1, [r3, #4]
900214be:	6863      	ldr	r3, [r4, #4]
900214c0:	bf08      	it	eq
900214c2:	6031      	streq	r1, [r6, #0]
900214c4:	5162      	str	r2, [r4, r5]
900214c6:	604b      	str	r3, [r1, #4]
900214c8:	4638      	mov	r0, r7
900214ca:	f104 060b 	add.w	r6, r4, #11
900214ce:	f000 feb9 	bl	90022244 <__malloc_unlock>
900214d2:	f026 0607 	bic.w	r6, r6, #7
900214d6:	1d23      	adds	r3, r4, #4
900214d8:	1af2      	subs	r2, r6, r3
900214da:	d0b6      	beq.n	9002144a <_malloc_r+0x22>
900214dc:	1b9b      	subs	r3, r3, r6
900214de:	50a3      	str	r3, [r4, r2]
900214e0:	e7b3      	b.n	9002144a <_malloc_r+0x22>
900214e2:	6862      	ldr	r2, [r4, #4]
900214e4:	42a3      	cmp	r3, r4
900214e6:	bf0c      	ite	eq
900214e8:	6032      	streq	r2, [r6, #0]
900214ea:	605a      	strne	r2, [r3, #4]
900214ec:	e7ec      	b.n	900214c8 <_malloc_r+0xa0>
900214ee:	4623      	mov	r3, r4
900214f0:	6864      	ldr	r4, [r4, #4]
900214f2:	e7b2      	b.n	9002145a <_malloc_r+0x32>
900214f4:	4634      	mov	r4, r6
900214f6:	6876      	ldr	r6, [r6, #4]
900214f8:	e7b9      	b.n	9002146e <_malloc_r+0x46>
900214fa:	230c      	movs	r3, #12
900214fc:	603b      	str	r3, [r7, #0]
900214fe:	4638      	mov	r0, r7
90021500:	f000 fea0 	bl	90022244 <__malloc_unlock>
90021504:	e7a1      	b.n	9002144a <_malloc_r+0x22>
90021506:	6025      	str	r5, [r4, #0]
90021508:	e7de      	b.n	900214c8 <_malloc_r+0xa0>
9002150a:	bf00      	nop
9002150c:	240265e4 	.word	0x240265e4

90021510 <__sfputc_r>:
90021510:	6893      	ldr	r3, [r2, #8]
90021512:	3b01      	subs	r3, #1
90021514:	2b00      	cmp	r3, #0
90021516:	b410      	push	{r4}
90021518:	6093      	str	r3, [r2, #8]
9002151a:	da08      	bge.n	9002152e <__sfputc_r+0x1e>
9002151c:	6994      	ldr	r4, [r2, #24]
9002151e:	42a3      	cmp	r3, r4
90021520:	db01      	blt.n	90021526 <__sfputc_r+0x16>
90021522:	290a      	cmp	r1, #10
90021524:	d103      	bne.n	9002152e <__sfputc_r+0x1e>
90021526:	f85d 4b04 	ldr.w	r4, [sp], #4
9002152a:	f000 bb47 	b.w	90021bbc <__swbuf_r>
9002152e:	6813      	ldr	r3, [r2, #0]
90021530:	1c58      	adds	r0, r3, #1
90021532:	6010      	str	r0, [r2, #0]
90021534:	7019      	strb	r1, [r3, #0]
90021536:	4608      	mov	r0, r1
90021538:	f85d 4b04 	ldr.w	r4, [sp], #4
9002153c:	4770      	bx	lr

9002153e <__sfputs_r>:
9002153e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90021540:	4606      	mov	r6, r0
90021542:	460f      	mov	r7, r1
90021544:	4614      	mov	r4, r2
90021546:	18d5      	adds	r5, r2, r3
90021548:	42ac      	cmp	r4, r5
9002154a:	d101      	bne.n	90021550 <__sfputs_r+0x12>
9002154c:	2000      	movs	r0, #0
9002154e:	e007      	b.n	90021560 <__sfputs_r+0x22>
90021550:	f814 1b01 	ldrb.w	r1, [r4], #1
90021554:	463a      	mov	r2, r7
90021556:	4630      	mov	r0, r6
90021558:	f7ff ffda 	bl	90021510 <__sfputc_r>
9002155c:	1c43      	adds	r3, r0, #1
9002155e:	d1f3      	bne.n	90021548 <__sfputs_r+0xa>
90021560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90021564 <_vfiprintf_r>:
90021564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021568:	460d      	mov	r5, r1
9002156a:	b09d      	sub	sp, #116	; 0x74
9002156c:	4614      	mov	r4, r2
9002156e:	4698      	mov	r8, r3
90021570:	4606      	mov	r6, r0
90021572:	b118      	cbz	r0, 9002157c <_vfiprintf_r+0x18>
90021574:	6983      	ldr	r3, [r0, #24]
90021576:	b90b      	cbnz	r3, 9002157c <_vfiprintf_r+0x18>
90021578:	f000 fd5c 	bl	90022034 <__sinit>
9002157c:	4b89      	ldr	r3, [pc, #548]	; (900217a4 <_vfiprintf_r+0x240>)
9002157e:	429d      	cmp	r5, r3
90021580:	d11b      	bne.n	900215ba <_vfiprintf_r+0x56>
90021582:	6875      	ldr	r5, [r6, #4]
90021584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90021586:	07d9      	lsls	r1, r3, #31
90021588:	d405      	bmi.n	90021596 <_vfiprintf_r+0x32>
9002158a:	89ab      	ldrh	r3, [r5, #12]
9002158c:	059a      	lsls	r2, r3, #22
9002158e:	d402      	bmi.n	90021596 <_vfiprintf_r+0x32>
90021590:	6da8      	ldr	r0, [r5, #88]	; 0x58
90021592:	f7ff feb4 	bl	900212fe <__retarget_lock_acquire_recursive>
90021596:	89ab      	ldrh	r3, [r5, #12]
90021598:	071b      	lsls	r3, r3, #28
9002159a:	d501      	bpl.n	900215a0 <_vfiprintf_r+0x3c>
9002159c:	692b      	ldr	r3, [r5, #16]
9002159e:	b9eb      	cbnz	r3, 900215dc <_vfiprintf_r+0x78>
900215a0:	4629      	mov	r1, r5
900215a2:	4630      	mov	r0, r6
900215a4:	f000 fb5c 	bl	90021c60 <__swsetup_r>
900215a8:	b1c0      	cbz	r0, 900215dc <_vfiprintf_r+0x78>
900215aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900215ac:	07dc      	lsls	r4, r3, #31
900215ae:	d50e      	bpl.n	900215ce <_vfiprintf_r+0x6a>
900215b0:	f04f 30ff 	mov.w	r0, #4294967295
900215b4:	b01d      	add	sp, #116	; 0x74
900215b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900215ba:	4b7b      	ldr	r3, [pc, #492]	; (900217a8 <_vfiprintf_r+0x244>)
900215bc:	429d      	cmp	r5, r3
900215be:	d101      	bne.n	900215c4 <_vfiprintf_r+0x60>
900215c0:	68b5      	ldr	r5, [r6, #8]
900215c2:	e7df      	b.n	90021584 <_vfiprintf_r+0x20>
900215c4:	4b79      	ldr	r3, [pc, #484]	; (900217ac <_vfiprintf_r+0x248>)
900215c6:	429d      	cmp	r5, r3
900215c8:	bf08      	it	eq
900215ca:	68f5      	ldreq	r5, [r6, #12]
900215cc:	e7da      	b.n	90021584 <_vfiprintf_r+0x20>
900215ce:	89ab      	ldrh	r3, [r5, #12]
900215d0:	0598      	lsls	r0, r3, #22
900215d2:	d4ed      	bmi.n	900215b0 <_vfiprintf_r+0x4c>
900215d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
900215d6:	f7ff fe94 	bl	90021302 <__retarget_lock_release_recursive>
900215da:	e7e9      	b.n	900215b0 <_vfiprintf_r+0x4c>
900215dc:	2300      	movs	r3, #0
900215de:	9309      	str	r3, [sp, #36]	; 0x24
900215e0:	2320      	movs	r3, #32
900215e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900215e6:	f8cd 800c 	str.w	r8, [sp, #12]
900215ea:	2330      	movs	r3, #48	; 0x30
900215ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 900217b0 <_vfiprintf_r+0x24c>
900215f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
900215f4:	f04f 0901 	mov.w	r9, #1
900215f8:	4623      	mov	r3, r4
900215fa:	469a      	mov	sl, r3
900215fc:	f813 2b01 	ldrb.w	r2, [r3], #1
90021600:	b10a      	cbz	r2, 90021606 <_vfiprintf_r+0xa2>
90021602:	2a25      	cmp	r2, #37	; 0x25
90021604:	d1f9      	bne.n	900215fa <_vfiprintf_r+0x96>
90021606:	ebba 0b04 	subs.w	fp, sl, r4
9002160a:	d00b      	beq.n	90021624 <_vfiprintf_r+0xc0>
9002160c:	465b      	mov	r3, fp
9002160e:	4622      	mov	r2, r4
90021610:	4629      	mov	r1, r5
90021612:	4630      	mov	r0, r6
90021614:	f7ff ff93 	bl	9002153e <__sfputs_r>
90021618:	3001      	adds	r0, #1
9002161a:	f000 80aa 	beq.w	90021772 <_vfiprintf_r+0x20e>
9002161e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90021620:	445a      	add	r2, fp
90021622:	9209      	str	r2, [sp, #36]	; 0x24
90021624:	f89a 3000 	ldrb.w	r3, [sl]
90021628:	2b00      	cmp	r3, #0
9002162a:	f000 80a2 	beq.w	90021772 <_vfiprintf_r+0x20e>
9002162e:	2300      	movs	r3, #0
90021630:	f04f 32ff 	mov.w	r2, #4294967295
90021634:	e9cd 2305 	strd	r2, r3, [sp, #20]
90021638:	f10a 0a01 	add.w	sl, sl, #1
9002163c:	9304      	str	r3, [sp, #16]
9002163e:	9307      	str	r3, [sp, #28]
90021640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90021644:	931a      	str	r3, [sp, #104]	; 0x68
90021646:	4654      	mov	r4, sl
90021648:	2205      	movs	r2, #5
9002164a:	f814 1b01 	ldrb.w	r1, [r4], #1
9002164e:	4858      	ldr	r0, [pc, #352]	; (900217b0 <_vfiprintf_r+0x24c>)
90021650:	f7de fe46 	bl	900002e0 <memchr>
90021654:	9a04      	ldr	r2, [sp, #16]
90021656:	b9d8      	cbnz	r0, 90021690 <_vfiprintf_r+0x12c>
90021658:	06d1      	lsls	r1, r2, #27
9002165a:	bf44      	itt	mi
9002165c:	2320      	movmi	r3, #32
9002165e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90021662:	0713      	lsls	r3, r2, #28
90021664:	bf44      	itt	mi
90021666:	232b      	movmi	r3, #43	; 0x2b
90021668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9002166c:	f89a 3000 	ldrb.w	r3, [sl]
90021670:	2b2a      	cmp	r3, #42	; 0x2a
90021672:	d015      	beq.n	900216a0 <_vfiprintf_r+0x13c>
90021674:	9a07      	ldr	r2, [sp, #28]
90021676:	4654      	mov	r4, sl
90021678:	2000      	movs	r0, #0
9002167a:	f04f 0c0a 	mov.w	ip, #10
9002167e:	4621      	mov	r1, r4
90021680:	f811 3b01 	ldrb.w	r3, [r1], #1
90021684:	3b30      	subs	r3, #48	; 0x30
90021686:	2b09      	cmp	r3, #9
90021688:	d94e      	bls.n	90021728 <_vfiprintf_r+0x1c4>
9002168a:	b1b0      	cbz	r0, 900216ba <_vfiprintf_r+0x156>
9002168c:	9207      	str	r2, [sp, #28]
9002168e:	e014      	b.n	900216ba <_vfiprintf_r+0x156>
90021690:	eba0 0308 	sub.w	r3, r0, r8
90021694:	fa09 f303 	lsl.w	r3, r9, r3
90021698:	4313      	orrs	r3, r2
9002169a:	9304      	str	r3, [sp, #16]
9002169c:	46a2      	mov	sl, r4
9002169e:	e7d2      	b.n	90021646 <_vfiprintf_r+0xe2>
900216a0:	9b03      	ldr	r3, [sp, #12]
900216a2:	1d19      	adds	r1, r3, #4
900216a4:	681b      	ldr	r3, [r3, #0]
900216a6:	9103      	str	r1, [sp, #12]
900216a8:	2b00      	cmp	r3, #0
900216aa:	bfbb      	ittet	lt
900216ac:	425b      	neglt	r3, r3
900216ae:	f042 0202 	orrlt.w	r2, r2, #2
900216b2:	9307      	strge	r3, [sp, #28]
900216b4:	9307      	strlt	r3, [sp, #28]
900216b6:	bfb8      	it	lt
900216b8:	9204      	strlt	r2, [sp, #16]
900216ba:	7823      	ldrb	r3, [r4, #0]
900216bc:	2b2e      	cmp	r3, #46	; 0x2e
900216be:	d10c      	bne.n	900216da <_vfiprintf_r+0x176>
900216c0:	7863      	ldrb	r3, [r4, #1]
900216c2:	2b2a      	cmp	r3, #42	; 0x2a
900216c4:	d135      	bne.n	90021732 <_vfiprintf_r+0x1ce>
900216c6:	9b03      	ldr	r3, [sp, #12]
900216c8:	1d1a      	adds	r2, r3, #4
900216ca:	681b      	ldr	r3, [r3, #0]
900216cc:	9203      	str	r2, [sp, #12]
900216ce:	2b00      	cmp	r3, #0
900216d0:	bfb8      	it	lt
900216d2:	f04f 33ff 	movlt.w	r3, #4294967295
900216d6:	3402      	adds	r4, #2
900216d8:	9305      	str	r3, [sp, #20]
900216da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900217c0 <_vfiprintf_r+0x25c>
900216de:	7821      	ldrb	r1, [r4, #0]
900216e0:	2203      	movs	r2, #3
900216e2:	4650      	mov	r0, sl
900216e4:	f7de fdfc 	bl	900002e0 <memchr>
900216e8:	b140      	cbz	r0, 900216fc <_vfiprintf_r+0x198>
900216ea:	2340      	movs	r3, #64	; 0x40
900216ec:	eba0 000a 	sub.w	r0, r0, sl
900216f0:	fa03 f000 	lsl.w	r0, r3, r0
900216f4:	9b04      	ldr	r3, [sp, #16]
900216f6:	4303      	orrs	r3, r0
900216f8:	3401      	adds	r4, #1
900216fa:	9304      	str	r3, [sp, #16]
900216fc:	f814 1b01 	ldrb.w	r1, [r4], #1
90021700:	482c      	ldr	r0, [pc, #176]	; (900217b4 <_vfiprintf_r+0x250>)
90021702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90021706:	2206      	movs	r2, #6
90021708:	f7de fdea 	bl	900002e0 <memchr>
9002170c:	2800      	cmp	r0, #0
9002170e:	d03f      	beq.n	90021790 <_vfiprintf_r+0x22c>
90021710:	4b29      	ldr	r3, [pc, #164]	; (900217b8 <_vfiprintf_r+0x254>)
90021712:	bb1b      	cbnz	r3, 9002175c <_vfiprintf_r+0x1f8>
90021714:	9b03      	ldr	r3, [sp, #12]
90021716:	3307      	adds	r3, #7
90021718:	f023 0307 	bic.w	r3, r3, #7
9002171c:	3308      	adds	r3, #8
9002171e:	9303      	str	r3, [sp, #12]
90021720:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021722:	443b      	add	r3, r7
90021724:	9309      	str	r3, [sp, #36]	; 0x24
90021726:	e767      	b.n	900215f8 <_vfiprintf_r+0x94>
90021728:	fb0c 3202 	mla	r2, ip, r2, r3
9002172c:	460c      	mov	r4, r1
9002172e:	2001      	movs	r0, #1
90021730:	e7a5      	b.n	9002167e <_vfiprintf_r+0x11a>
90021732:	2300      	movs	r3, #0
90021734:	3401      	adds	r4, #1
90021736:	9305      	str	r3, [sp, #20]
90021738:	4619      	mov	r1, r3
9002173a:	f04f 0c0a 	mov.w	ip, #10
9002173e:	4620      	mov	r0, r4
90021740:	f810 2b01 	ldrb.w	r2, [r0], #1
90021744:	3a30      	subs	r2, #48	; 0x30
90021746:	2a09      	cmp	r2, #9
90021748:	d903      	bls.n	90021752 <_vfiprintf_r+0x1ee>
9002174a:	2b00      	cmp	r3, #0
9002174c:	d0c5      	beq.n	900216da <_vfiprintf_r+0x176>
9002174e:	9105      	str	r1, [sp, #20]
90021750:	e7c3      	b.n	900216da <_vfiprintf_r+0x176>
90021752:	fb0c 2101 	mla	r1, ip, r1, r2
90021756:	4604      	mov	r4, r0
90021758:	2301      	movs	r3, #1
9002175a:	e7f0      	b.n	9002173e <_vfiprintf_r+0x1da>
9002175c:	ab03      	add	r3, sp, #12
9002175e:	9300      	str	r3, [sp, #0]
90021760:	462a      	mov	r2, r5
90021762:	4b16      	ldr	r3, [pc, #88]	; (900217bc <_vfiprintf_r+0x258>)
90021764:	a904      	add	r1, sp, #16
90021766:	4630      	mov	r0, r6
90021768:	f3af 8000 	nop.w
9002176c:	4607      	mov	r7, r0
9002176e:	1c78      	adds	r0, r7, #1
90021770:	d1d6      	bne.n	90021720 <_vfiprintf_r+0x1bc>
90021772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90021774:	07d9      	lsls	r1, r3, #31
90021776:	d405      	bmi.n	90021784 <_vfiprintf_r+0x220>
90021778:	89ab      	ldrh	r3, [r5, #12]
9002177a:	059a      	lsls	r2, r3, #22
9002177c:	d402      	bmi.n	90021784 <_vfiprintf_r+0x220>
9002177e:	6da8      	ldr	r0, [r5, #88]	; 0x58
90021780:	f7ff fdbf 	bl	90021302 <__retarget_lock_release_recursive>
90021784:	89ab      	ldrh	r3, [r5, #12]
90021786:	065b      	lsls	r3, r3, #25
90021788:	f53f af12 	bmi.w	900215b0 <_vfiprintf_r+0x4c>
9002178c:	9809      	ldr	r0, [sp, #36]	; 0x24
9002178e:	e711      	b.n	900215b4 <_vfiprintf_r+0x50>
90021790:	ab03      	add	r3, sp, #12
90021792:	9300      	str	r3, [sp, #0]
90021794:	462a      	mov	r2, r5
90021796:	4b09      	ldr	r3, [pc, #36]	; (900217bc <_vfiprintf_r+0x258>)
90021798:	a904      	add	r1, sp, #16
9002179a:	4630      	mov	r0, r6
9002179c:	f000 f880 	bl	900218a0 <_printf_i>
900217a0:	e7e4      	b.n	9002176c <_vfiprintf_r+0x208>
900217a2:	bf00      	nop
900217a4:	90025498 	.word	0x90025498
900217a8:	900254b8 	.word	0x900254b8
900217ac:	90025478 	.word	0x90025478
900217b0:	90025440 	.word	0x90025440
900217b4:	9002544a 	.word	0x9002544a
900217b8:	00000000 	.word	0x00000000
900217bc:	9002153f 	.word	0x9002153f
900217c0:	90025446 	.word	0x90025446

900217c4 <_printf_common>:
900217c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900217c8:	4616      	mov	r6, r2
900217ca:	4699      	mov	r9, r3
900217cc:	688a      	ldr	r2, [r1, #8]
900217ce:	690b      	ldr	r3, [r1, #16]
900217d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
900217d4:	4293      	cmp	r3, r2
900217d6:	bfb8      	it	lt
900217d8:	4613      	movlt	r3, r2
900217da:	6033      	str	r3, [r6, #0]
900217dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900217e0:	4607      	mov	r7, r0
900217e2:	460c      	mov	r4, r1
900217e4:	b10a      	cbz	r2, 900217ea <_printf_common+0x26>
900217e6:	3301      	adds	r3, #1
900217e8:	6033      	str	r3, [r6, #0]
900217ea:	6823      	ldr	r3, [r4, #0]
900217ec:	0699      	lsls	r1, r3, #26
900217ee:	bf42      	ittt	mi
900217f0:	6833      	ldrmi	r3, [r6, #0]
900217f2:	3302      	addmi	r3, #2
900217f4:	6033      	strmi	r3, [r6, #0]
900217f6:	6825      	ldr	r5, [r4, #0]
900217f8:	f015 0506 	ands.w	r5, r5, #6
900217fc:	d106      	bne.n	9002180c <_printf_common+0x48>
900217fe:	f104 0a19 	add.w	sl, r4, #25
90021802:	68e3      	ldr	r3, [r4, #12]
90021804:	6832      	ldr	r2, [r6, #0]
90021806:	1a9b      	subs	r3, r3, r2
90021808:	42ab      	cmp	r3, r5
9002180a:	dc26      	bgt.n	9002185a <_printf_common+0x96>
9002180c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90021810:	1e13      	subs	r3, r2, #0
90021812:	6822      	ldr	r2, [r4, #0]
90021814:	bf18      	it	ne
90021816:	2301      	movne	r3, #1
90021818:	0692      	lsls	r2, r2, #26
9002181a:	d42b      	bmi.n	90021874 <_printf_common+0xb0>
9002181c:	f104 0243 	add.w	r2, r4, #67	; 0x43
90021820:	4649      	mov	r1, r9
90021822:	4638      	mov	r0, r7
90021824:	47c0      	blx	r8
90021826:	3001      	adds	r0, #1
90021828:	d01e      	beq.n	90021868 <_printf_common+0xa4>
9002182a:	6823      	ldr	r3, [r4, #0]
9002182c:	68e5      	ldr	r5, [r4, #12]
9002182e:	6832      	ldr	r2, [r6, #0]
90021830:	f003 0306 	and.w	r3, r3, #6
90021834:	2b04      	cmp	r3, #4
90021836:	bf08      	it	eq
90021838:	1aad      	subeq	r5, r5, r2
9002183a:	68a3      	ldr	r3, [r4, #8]
9002183c:	6922      	ldr	r2, [r4, #16]
9002183e:	bf0c      	ite	eq
90021840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90021844:	2500      	movne	r5, #0
90021846:	4293      	cmp	r3, r2
90021848:	bfc4      	itt	gt
9002184a:	1a9b      	subgt	r3, r3, r2
9002184c:	18ed      	addgt	r5, r5, r3
9002184e:	2600      	movs	r6, #0
90021850:	341a      	adds	r4, #26
90021852:	42b5      	cmp	r5, r6
90021854:	d11a      	bne.n	9002188c <_printf_common+0xc8>
90021856:	2000      	movs	r0, #0
90021858:	e008      	b.n	9002186c <_printf_common+0xa8>
9002185a:	2301      	movs	r3, #1
9002185c:	4652      	mov	r2, sl
9002185e:	4649      	mov	r1, r9
90021860:	4638      	mov	r0, r7
90021862:	47c0      	blx	r8
90021864:	3001      	adds	r0, #1
90021866:	d103      	bne.n	90021870 <_printf_common+0xac>
90021868:	f04f 30ff 	mov.w	r0, #4294967295
9002186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90021870:	3501      	adds	r5, #1
90021872:	e7c6      	b.n	90021802 <_printf_common+0x3e>
90021874:	18e1      	adds	r1, r4, r3
90021876:	1c5a      	adds	r2, r3, #1
90021878:	2030      	movs	r0, #48	; 0x30
9002187a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9002187e:	4422      	add	r2, r4
90021880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90021884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90021888:	3302      	adds	r3, #2
9002188a:	e7c7      	b.n	9002181c <_printf_common+0x58>
9002188c:	2301      	movs	r3, #1
9002188e:	4622      	mov	r2, r4
90021890:	4649      	mov	r1, r9
90021892:	4638      	mov	r0, r7
90021894:	47c0      	blx	r8
90021896:	3001      	adds	r0, #1
90021898:	d0e6      	beq.n	90021868 <_printf_common+0xa4>
9002189a:	3601      	adds	r6, #1
9002189c:	e7d9      	b.n	90021852 <_printf_common+0x8e>
	...

900218a0 <_printf_i>:
900218a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900218a4:	7e0f      	ldrb	r7, [r1, #24]
900218a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900218a8:	2f78      	cmp	r7, #120	; 0x78
900218aa:	4691      	mov	r9, r2
900218ac:	4680      	mov	r8, r0
900218ae:	460c      	mov	r4, r1
900218b0:	469a      	mov	sl, r3
900218b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
900218b6:	d807      	bhi.n	900218c8 <_printf_i+0x28>
900218b8:	2f62      	cmp	r7, #98	; 0x62
900218ba:	d80a      	bhi.n	900218d2 <_printf_i+0x32>
900218bc:	2f00      	cmp	r7, #0
900218be:	f000 80d8 	beq.w	90021a72 <_printf_i+0x1d2>
900218c2:	2f58      	cmp	r7, #88	; 0x58
900218c4:	f000 80a3 	beq.w	90021a0e <_printf_i+0x16e>
900218c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
900218cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900218d0:	e03a      	b.n	90021948 <_printf_i+0xa8>
900218d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900218d6:	2b15      	cmp	r3, #21
900218d8:	d8f6      	bhi.n	900218c8 <_printf_i+0x28>
900218da:	a101      	add	r1, pc, #4	; (adr r1, 900218e0 <_printf_i+0x40>)
900218dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
900218e0:	90021939 	.word	0x90021939
900218e4:	9002194d 	.word	0x9002194d
900218e8:	900218c9 	.word	0x900218c9
900218ec:	900218c9 	.word	0x900218c9
900218f0:	900218c9 	.word	0x900218c9
900218f4:	900218c9 	.word	0x900218c9
900218f8:	9002194d 	.word	0x9002194d
900218fc:	900218c9 	.word	0x900218c9
90021900:	900218c9 	.word	0x900218c9
90021904:	900218c9 	.word	0x900218c9
90021908:	900218c9 	.word	0x900218c9
9002190c:	90021a59 	.word	0x90021a59
90021910:	9002197d 	.word	0x9002197d
90021914:	90021a3b 	.word	0x90021a3b
90021918:	900218c9 	.word	0x900218c9
9002191c:	900218c9 	.word	0x900218c9
90021920:	90021a7b 	.word	0x90021a7b
90021924:	900218c9 	.word	0x900218c9
90021928:	9002197d 	.word	0x9002197d
9002192c:	900218c9 	.word	0x900218c9
90021930:	900218c9 	.word	0x900218c9
90021934:	90021a43 	.word	0x90021a43
90021938:	682b      	ldr	r3, [r5, #0]
9002193a:	1d1a      	adds	r2, r3, #4
9002193c:	681b      	ldr	r3, [r3, #0]
9002193e:	602a      	str	r2, [r5, #0]
90021940:	f104 0542 	add.w	r5, r4, #66	; 0x42
90021944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90021948:	2301      	movs	r3, #1
9002194a:	e0a3      	b.n	90021a94 <_printf_i+0x1f4>
9002194c:	6820      	ldr	r0, [r4, #0]
9002194e:	6829      	ldr	r1, [r5, #0]
90021950:	0606      	lsls	r6, r0, #24
90021952:	f101 0304 	add.w	r3, r1, #4
90021956:	d50a      	bpl.n	9002196e <_printf_i+0xce>
90021958:	680e      	ldr	r6, [r1, #0]
9002195a:	602b      	str	r3, [r5, #0]
9002195c:	2e00      	cmp	r6, #0
9002195e:	da03      	bge.n	90021968 <_printf_i+0xc8>
90021960:	232d      	movs	r3, #45	; 0x2d
90021962:	4276      	negs	r6, r6
90021964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90021968:	485e      	ldr	r0, [pc, #376]	; (90021ae4 <_printf_i+0x244>)
9002196a:	230a      	movs	r3, #10
9002196c:	e019      	b.n	900219a2 <_printf_i+0x102>
9002196e:	680e      	ldr	r6, [r1, #0]
90021970:	602b      	str	r3, [r5, #0]
90021972:	f010 0f40 	tst.w	r0, #64	; 0x40
90021976:	bf18      	it	ne
90021978:	b236      	sxthne	r6, r6
9002197a:	e7ef      	b.n	9002195c <_printf_i+0xbc>
9002197c:	682b      	ldr	r3, [r5, #0]
9002197e:	6820      	ldr	r0, [r4, #0]
90021980:	1d19      	adds	r1, r3, #4
90021982:	6029      	str	r1, [r5, #0]
90021984:	0601      	lsls	r1, r0, #24
90021986:	d501      	bpl.n	9002198c <_printf_i+0xec>
90021988:	681e      	ldr	r6, [r3, #0]
9002198a:	e002      	b.n	90021992 <_printf_i+0xf2>
9002198c:	0646      	lsls	r6, r0, #25
9002198e:	d5fb      	bpl.n	90021988 <_printf_i+0xe8>
90021990:	881e      	ldrh	r6, [r3, #0]
90021992:	4854      	ldr	r0, [pc, #336]	; (90021ae4 <_printf_i+0x244>)
90021994:	2f6f      	cmp	r7, #111	; 0x6f
90021996:	bf0c      	ite	eq
90021998:	2308      	moveq	r3, #8
9002199a:	230a      	movne	r3, #10
9002199c:	2100      	movs	r1, #0
9002199e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900219a2:	6865      	ldr	r5, [r4, #4]
900219a4:	60a5      	str	r5, [r4, #8]
900219a6:	2d00      	cmp	r5, #0
900219a8:	bfa2      	ittt	ge
900219aa:	6821      	ldrge	r1, [r4, #0]
900219ac:	f021 0104 	bicge.w	r1, r1, #4
900219b0:	6021      	strge	r1, [r4, #0]
900219b2:	b90e      	cbnz	r6, 900219b8 <_printf_i+0x118>
900219b4:	2d00      	cmp	r5, #0
900219b6:	d04d      	beq.n	90021a54 <_printf_i+0x1b4>
900219b8:	4615      	mov	r5, r2
900219ba:	fbb6 f1f3 	udiv	r1, r6, r3
900219be:	fb03 6711 	mls	r7, r3, r1, r6
900219c2:	5dc7      	ldrb	r7, [r0, r7]
900219c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
900219c8:	4637      	mov	r7, r6
900219ca:	42bb      	cmp	r3, r7
900219cc:	460e      	mov	r6, r1
900219ce:	d9f4      	bls.n	900219ba <_printf_i+0x11a>
900219d0:	2b08      	cmp	r3, #8
900219d2:	d10b      	bne.n	900219ec <_printf_i+0x14c>
900219d4:	6823      	ldr	r3, [r4, #0]
900219d6:	07de      	lsls	r6, r3, #31
900219d8:	d508      	bpl.n	900219ec <_printf_i+0x14c>
900219da:	6923      	ldr	r3, [r4, #16]
900219dc:	6861      	ldr	r1, [r4, #4]
900219de:	4299      	cmp	r1, r3
900219e0:	bfde      	ittt	le
900219e2:	2330      	movle	r3, #48	; 0x30
900219e4:	f805 3c01 	strble.w	r3, [r5, #-1]
900219e8:	f105 35ff 	addle.w	r5, r5, #4294967295
900219ec:	1b52      	subs	r2, r2, r5
900219ee:	6122      	str	r2, [r4, #16]
900219f0:	f8cd a000 	str.w	sl, [sp]
900219f4:	464b      	mov	r3, r9
900219f6:	aa03      	add	r2, sp, #12
900219f8:	4621      	mov	r1, r4
900219fa:	4640      	mov	r0, r8
900219fc:	f7ff fee2 	bl	900217c4 <_printf_common>
90021a00:	3001      	adds	r0, #1
90021a02:	d14c      	bne.n	90021a9e <_printf_i+0x1fe>
90021a04:	f04f 30ff 	mov.w	r0, #4294967295
90021a08:	b004      	add	sp, #16
90021a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90021a0e:	4835      	ldr	r0, [pc, #212]	; (90021ae4 <_printf_i+0x244>)
90021a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
90021a14:	6829      	ldr	r1, [r5, #0]
90021a16:	6823      	ldr	r3, [r4, #0]
90021a18:	f851 6b04 	ldr.w	r6, [r1], #4
90021a1c:	6029      	str	r1, [r5, #0]
90021a1e:	061d      	lsls	r5, r3, #24
90021a20:	d514      	bpl.n	90021a4c <_printf_i+0x1ac>
90021a22:	07df      	lsls	r7, r3, #31
90021a24:	bf44      	itt	mi
90021a26:	f043 0320 	orrmi.w	r3, r3, #32
90021a2a:	6023      	strmi	r3, [r4, #0]
90021a2c:	b91e      	cbnz	r6, 90021a36 <_printf_i+0x196>
90021a2e:	6823      	ldr	r3, [r4, #0]
90021a30:	f023 0320 	bic.w	r3, r3, #32
90021a34:	6023      	str	r3, [r4, #0]
90021a36:	2310      	movs	r3, #16
90021a38:	e7b0      	b.n	9002199c <_printf_i+0xfc>
90021a3a:	6823      	ldr	r3, [r4, #0]
90021a3c:	f043 0320 	orr.w	r3, r3, #32
90021a40:	6023      	str	r3, [r4, #0]
90021a42:	2378      	movs	r3, #120	; 0x78
90021a44:	4828      	ldr	r0, [pc, #160]	; (90021ae8 <_printf_i+0x248>)
90021a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90021a4a:	e7e3      	b.n	90021a14 <_printf_i+0x174>
90021a4c:	0659      	lsls	r1, r3, #25
90021a4e:	bf48      	it	mi
90021a50:	b2b6      	uxthmi	r6, r6
90021a52:	e7e6      	b.n	90021a22 <_printf_i+0x182>
90021a54:	4615      	mov	r5, r2
90021a56:	e7bb      	b.n	900219d0 <_printf_i+0x130>
90021a58:	682b      	ldr	r3, [r5, #0]
90021a5a:	6826      	ldr	r6, [r4, #0]
90021a5c:	6961      	ldr	r1, [r4, #20]
90021a5e:	1d18      	adds	r0, r3, #4
90021a60:	6028      	str	r0, [r5, #0]
90021a62:	0635      	lsls	r5, r6, #24
90021a64:	681b      	ldr	r3, [r3, #0]
90021a66:	d501      	bpl.n	90021a6c <_printf_i+0x1cc>
90021a68:	6019      	str	r1, [r3, #0]
90021a6a:	e002      	b.n	90021a72 <_printf_i+0x1d2>
90021a6c:	0670      	lsls	r0, r6, #25
90021a6e:	d5fb      	bpl.n	90021a68 <_printf_i+0x1c8>
90021a70:	8019      	strh	r1, [r3, #0]
90021a72:	2300      	movs	r3, #0
90021a74:	6123      	str	r3, [r4, #16]
90021a76:	4615      	mov	r5, r2
90021a78:	e7ba      	b.n	900219f0 <_printf_i+0x150>
90021a7a:	682b      	ldr	r3, [r5, #0]
90021a7c:	1d1a      	adds	r2, r3, #4
90021a7e:	602a      	str	r2, [r5, #0]
90021a80:	681d      	ldr	r5, [r3, #0]
90021a82:	6862      	ldr	r2, [r4, #4]
90021a84:	2100      	movs	r1, #0
90021a86:	4628      	mov	r0, r5
90021a88:	f7de fc2a 	bl	900002e0 <memchr>
90021a8c:	b108      	cbz	r0, 90021a92 <_printf_i+0x1f2>
90021a8e:	1b40      	subs	r0, r0, r5
90021a90:	6060      	str	r0, [r4, #4]
90021a92:	6863      	ldr	r3, [r4, #4]
90021a94:	6123      	str	r3, [r4, #16]
90021a96:	2300      	movs	r3, #0
90021a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90021a9c:	e7a8      	b.n	900219f0 <_printf_i+0x150>
90021a9e:	6923      	ldr	r3, [r4, #16]
90021aa0:	462a      	mov	r2, r5
90021aa2:	4649      	mov	r1, r9
90021aa4:	4640      	mov	r0, r8
90021aa6:	47d0      	blx	sl
90021aa8:	3001      	adds	r0, #1
90021aaa:	d0ab      	beq.n	90021a04 <_printf_i+0x164>
90021aac:	6823      	ldr	r3, [r4, #0]
90021aae:	079b      	lsls	r3, r3, #30
90021ab0:	d413      	bmi.n	90021ada <_printf_i+0x23a>
90021ab2:	68e0      	ldr	r0, [r4, #12]
90021ab4:	9b03      	ldr	r3, [sp, #12]
90021ab6:	4298      	cmp	r0, r3
90021ab8:	bfb8      	it	lt
90021aba:	4618      	movlt	r0, r3
90021abc:	e7a4      	b.n	90021a08 <_printf_i+0x168>
90021abe:	2301      	movs	r3, #1
90021ac0:	4632      	mov	r2, r6
90021ac2:	4649      	mov	r1, r9
90021ac4:	4640      	mov	r0, r8
90021ac6:	47d0      	blx	sl
90021ac8:	3001      	adds	r0, #1
90021aca:	d09b      	beq.n	90021a04 <_printf_i+0x164>
90021acc:	3501      	adds	r5, #1
90021ace:	68e3      	ldr	r3, [r4, #12]
90021ad0:	9903      	ldr	r1, [sp, #12]
90021ad2:	1a5b      	subs	r3, r3, r1
90021ad4:	42ab      	cmp	r3, r5
90021ad6:	dcf2      	bgt.n	90021abe <_printf_i+0x21e>
90021ad8:	e7eb      	b.n	90021ab2 <_printf_i+0x212>
90021ada:	2500      	movs	r5, #0
90021adc:	f104 0619 	add.w	r6, r4, #25
90021ae0:	e7f5      	b.n	90021ace <_printf_i+0x22e>
90021ae2:	bf00      	nop
90021ae4:	90025451 	.word	0x90025451
90021ae8:	90025462 	.word	0x90025462

90021aec <_sbrk_r>:
90021aec:	b538      	push	{r3, r4, r5, lr}
90021aee:	4d06      	ldr	r5, [pc, #24]	; (90021b08 <_sbrk_r+0x1c>)
90021af0:	2300      	movs	r3, #0
90021af2:	4604      	mov	r4, r0
90021af4:	4608      	mov	r0, r1
90021af6:	602b      	str	r3, [r5, #0]
90021af8:	f7e2 ff8c 	bl	90004a14 <_sbrk>
90021afc:	1c43      	adds	r3, r0, #1
90021afe:	d102      	bne.n	90021b06 <_sbrk_r+0x1a>
90021b00:	682b      	ldr	r3, [r5, #0]
90021b02:	b103      	cbz	r3, 90021b06 <_sbrk_r+0x1a>
90021b04:	6023      	str	r3, [r4, #0]
90021b06:	bd38      	pop	{r3, r4, r5, pc}
90021b08:	24026784 	.word	0x24026784

90021b0c <_raise_r>:
90021b0c:	291f      	cmp	r1, #31
90021b0e:	b538      	push	{r3, r4, r5, lr}
90021b10:	4604      	mov	r4, r0
90021b12:	460d      	mov	r5, r1
90021b14:	d904      	bls.n	90021b20 <_raise_r+0x14>
90021b16:	2316      	movs	r3, #22
90021b18:	6003      	str	r3, [r0, #0]
90021b1a:	f04f 30ff 	mov.w	r0, #4294967295
90021b1e:	bd38      	pop	{r3, r4, r5, pc}
90021b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
90021b22:	b112      	cbz	r2, 90021b2a <_raise_r+0x1e>
90021b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90021b28:	b94b      	cbnz	r3, 90021b3e <_raise_r+0x32>
90021b2a:	4620      	mov	r0, r4
90021b2c:	f000 f830 	bl	90021b90 <_getpid_r>
90021b30:	462a      	mov	r2, r5
90021b32:	4601      	mov	r1, r0
90021b34:	4620      	mov	r0, r4
90021b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90021b3a:	f000 b817 	b.w	90021b6c <_kill_r>
90021b3e:	2b01      	cmp	r3, #1
90021b40:	d00a      	beq.n	90021b58 <_raise_r+0x4c>
90021b42:	1c59      	adds	r1, r3, #1
90021b44:	d103      	bne.n	90021b4e <_raise_r+0x42>
90021b46:	2316      	movs	r3, #22
90021b48:	6003      	str	r3, [r0, #0]
90021b4a:	2001      	movs	r0, #1
90021b4c:	e7e7      	b.n	90021b1e <_raise_r+0x12>
90021b4e:	2400      	movs	r4, #0
90021b50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90021b54:	4628      	mov	r0, r5
90021b56:	4798      	blx	r3
90021b58:	2000      	movs	r0, #0
90021b5a:	e7e0      	b.n	90021b1e <_raise_r+0x12>

90021b5c <raise>:
90021b5c:	4b02      	ldr	r3, [pc, #8]	; (90021b68 <raise+0xc>)
90021b5e:	4601      	mov	r1, r0
90021b60:	6818      	ldr	r0, [r3, #0]
90021b62:	f7ff bfd3 	b.w	90021b0c <_raise_r>
90021b66:	bf00      	nop
90021b68:	240000e0 	.word	0x240000e0

90021b6c <_kill_r>:
90021b6c:	b538      	push	{r3, r4, r5, lr}
90021b6e:	4d07      	ldr	r5, [pc, #28]	; (90021b8c <_kill_r+0x20>)
90021b70:	2300      	movs	r3, #0
90021b72:	4604      	mov	r4, r0
90021b74:	4608      	mov	r0, r1
90021b76:	4611      	mov	r1, r2
90021b78:	602b      	str	r3, [r5, #0]
90021b7a:	f7e2 ff11 	bl	900049a0 <_kill>
90021b7e:	1c43      	adds	r3, r0, #1
90021b80:	d102      	bne.n	90021b88 <_kill_r+0x1c>
90021b82:	682b      	ldr	r3, [r5, #0]
90021b84:	b103      	cbz	r3, 90021b88 <_kill_r+0x1c>
90021b86:	6023      	str	r3, [r4, #0]
90021b88:	bd38      	pop	{r3, r4, r5, pc}
90021b8a:	bf00      	nop
90021b8c:	24026784 	.word	0x24026784

90021b90 <_getpid_r>:
90021b90:	f7e2 bf04 	b.w	9000499c <_getpid>

90021b94 <strncmp>:
90021b94:	b510      	push	{r4, lr}
90021b96:	b17a      	cbz	r2, 90021bb8 <strncmp+0x24>
90021b98:	4603      	mov	r3, r0
90021b9a:	3901      	subs	r1, #1
90021b9c:	1884      	adds	r4, r0, r2
90021b9e:	f813 0b01 	ldrb.w	r0, [r3], #1
90021ba2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
90021ba6:	4290      	cmp	r0, r2
90021ba8:	d101      	bne.n	90021bae <strncmp+0x1a>
90021baa:	42a3      	cmp	r3, r4
90021bac:	d101      	bne.n	90021bb2 <strncmp+0x1e>
90021bae:	1a80      	subs	r0, r0, r2
90021bb0:	bd10      	pop	{r4, pc}
90021bb2:	2800      	cmp	r0, #0
90021bb4:	d1f3      	bne.n	90021b9e <strncmp+0xa>
90021bb6:	e7fa      	b.n	90021bae <strncmp+0x1a>
90021bb8:	4610      	mov	r0, r2
90021bba:	e7f9      	b.n	90021bb0 <strncmp+0x1c>

90021bbc <__swbuf_r>:
90021bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90021bbe:	460e      	mov	r6, r1
90021bc0:	4614      	mov	r4, r2
90021bc2:	4605      	mov	r5, r0
90021bc4:	b118      	cbz	r0, 90021bce <__swbuf_r+0x12>
90021bc6:	6983      	ldr	r3, [r0, #24]
90021bc8:	b90b      	cbnz	r3, 90021bce <__swbuf_r+0x12>
90021bca:	f000 fa33 	bl	90022034 <__sinit>
90021bce:	4b21      	ldr	r3, [pc, #132]	; (90021c54 <__swbuf_r+0x98>)
90021bd0:	429c      	cmp	r4, r3
90021bd2:	d12b      	bne.n	90021c2c <__swbuf_r+0x70>
90021bd4:	686c      	ldr	r4, [r5, #4]
90021bd6:	69a3      	ldr	r3, [r4, #24]
90021bd8:	60a3      	str	r3, [r4, #8]
90021bda:	89a3      	ldrh	r3, [r4, #12]
90021bdc:	071a      	lsls	r2, r3, #28
90021bde:	d52f      	bpl.n	90021c40 <__swbuf_r+0x84>
90021be0:	6923      	ldr	r3, [r4, #16]
90021be2:	b36b      	cbz	r3, 90021c40 <__swbuf_r+0x84>
90021be4:	6923      	ldr	r3, [r4, #16]
90021be6:	6820      	ldr	r0, [r4, #0]
90021be8:	1ac0      	subs	r0, r0, r3
90021bea:	6963      	ldr	r3, [r4, #20]
90021bec:	b2f6      	uxtb	r6, r6
90021bee:	4283      	cmp	r3, r0
90021bf0:	4637      	mov	r7, r6
90021bf2:	dc04      	bgt.n	90021bfe <__swbuf_r+0x42>
90021bf4:	4621      	mov	r1, r4
90021bf6:	4628      	mov	r0, r5
90021bf8:	f000 f988 	bl	90021f0c <_fflush_r>
90021bfc:	bb30      	cbnz	r0, 90021c4c <__swbuf_r+0x90>
90021bfe:	68a3      	ldr	r3, [r4, #8]
90021c00:	3b01      	subs	r3, #1
90021c02:	60a3      	str	r3, [r4, #8]
90021c04:	6823      	ldr	r3, [r4, #0]
90021c06:	1c5a      	adds	r2, r3, #1
90021c08:	6022      	str	r2, [r4, #0]
90021c0a:	701e      	strb	r6, [r3, #0]
90021c0c:	6963      	ldr	r3, [r4, #20]
90021c0e:	3001      	adds	r0, #1
90021c10:	4283      	cmp	r3, r0
90021c12:	d004      	beq.n	90021c1e <__swbuf_r+0x62>
90021c14:	89a3      	ldrh	r3, [r4, #12]
90021c16:	07db      	lsls	r3, r3, #31
90021c18:	d506      	bpl.n	90021c28 <__swbuf_r+0x6c>
90021c1a:	2e0a      	cmp	r6, #10
90021c1c:	d104      	bne.n	90021c28 <__swbuf_r+0x6c>
90021c1e:	4621      	mov	r1, r4
90021c20:	4628      	mov	r0, r5
90021c22:	f000 f973 	bl	90021f0c <_fflush_r>
90021c26:	b988      	cbnz	r0, 90021c4c <__swbuf_r+0x90>
90021c28:	4638      	mov	r0, r7
90021c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90021c2c:	4b0a      	ldr	r3, [pc, #40]	; (90021c58 <__swbuf_r+0x9c>)
90021c2e:	429c      	cmp	r4, r3
90021c30:	d101      	bne.n	90021c36 <__swbuf_r+0x7a>
90021c32:	68ac      	ldr	r4, [r5, #8]
90021c34:	e7cf      	b.n	90021bd6 <__swbuf_r+0x1a>
90021c36:	4b09      	ldr	r3, [pc, #36]	; (90021c5c <__swbuf_r+0xa0>)
90021c38:	429c      	cmp	r4, r3
90021c3a:	bf08      	it	eq
90021c3c:	68ec      	ldreq	r4, [r5, #12]
90021c3e:	e7ca      	b.n	90021bd6 <__swbuf_r+0x1a>
90021c40:	4621      	mov	r1, r4
90021c42:	4628      	mov	r0, r5
90021c44:	f000 f80c 	bl	90021c60 <__swsetup_r>
90021c48:	2800      	cmp	r0, #0
90021c4a:	d0cb      	beq.n	90021be4 <__swbuf_r+0x28>
90021c4c:	f04f 37ff 	mov.w	r7, #4294967295
90021c50:	e7ea      	b.n	90021c28 <__swbuf_r+0x6c>
90021c52:	bf00      	nop
90021c54:	90025498 	.word	0x90025498
90021c58:	900254b8 	.word	0x900254b8
90021c5c:	90025478 	.word	0x90025478

90021c60 <__swsetup_r>:
90021c60:	4b32      	ldr	r3, [pc, #200]	; (90021d2c <__swsetup_r+0xcc>)
90021c62:	b570      	push	{r4, r5, r6, lr}
90021c64:	681d      	ldr	r5, [r3, #0]
90021c66:	4606      	mov	r6, r0
90021c68:	460c      	mov	r4, r1
90021c6a:	b125      	cbz	r5, 90021c76 <__swsetup_r+0x16>
90021c6c:	69ab      	ldr	r3, [r5, #24]
90021c6e:	b913      	cbnz	r3, 90021c76 <__swsetup_r+0x16>
90021c70:	4628      	mov	r0, r5
90021c72:	f000 f9df 	bl	90022034 <__sinit>
90021c76:	4b2e      	ldr	r3, [pc, #184]	; (90021d30 <__swsetup_r+0xd0>)
90021c78:	429c      	cmp	r4, r3
90021c7a:	d10f      	bne.n	90021c9c <__swsetup_r+0x3c>
90021c7c:	686c      	ldr	r4, [r5, #4]
90021c7e:	89a3      	ldrh	r3, [r4, #12]
90021c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90021c84:	0719      	lsls	r1, r3, #28
90021c86:	d42c      	bmi.n	90021ce2 <__swsetup_r+0x82>
90021c88:	06dd      	lsls	r5, r3, #27
90021c8a:	d411      	bmi.n	90021cb0 <__swsetup_r+0x50>
90021c8c:	2309      	movs	r3, #9
90021c8e:	6033      	str	r3, [r6, #0]
90021c90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90021c94:	81a3      	strh	r3, [r4, #12]
90021c96:	f04f 30ff 	mov.w	r0, #4294967295
90021c9a:	e03e      	b.n	90021d1a <__swsetup_r+0xba>
90021c9c:	4b25      	ldr	r3, [pc, #148]	; (90021d34 <__swsetup_r+0xd4>)
90021c9e:	429c      	cmp	r4, r3
90021ca0:	d101      	bne.n	90021ca6 <__swsetup_r+0x46>
90021ca2:	68ac      	ldr	r4, [r5, #8]
90021ca4:	e7eb      	b.n	90021c7e <__swsetup_r+0x1e>
90021ca6:	4b24      	ldr	r3, [pc, #144]	; (90021d38 <__swsetup_r+0xd8>)
90021ca8:	429c      	cmp	r4, r3
90021caa:	bf08      	it	eq
90021cac:	68ec      	ldreq	r4, [r5, #12]
90021cae:	e7e6      	b.n	90021c7e <__swsetup_r+0x1e>
90021cb0:	0758      	lsls	r0, r3, #29
90021cb2:	d512      	bpl.n	90021cda <__swsetup_r+0x7a>
90021cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
90021cb6:	b141      	cbz	r1, 90021cca <__swsetup_r+0x6a>
90021cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
90021cbc:	4299      	cmp	r1, r3
90021cbe:	d002      	beq.n	90021cc6 <__swsetup_r+0x66>
90021cc0:	4630      	mov	r0, r6
90021cc2:	f7ff fb45 	bl	90021350 <_free_r>
90021cc6:	2300      	movs	r3, #0
90021cc8:	6363      	str	r3, [r4, #52]	; 0x34
90021cca:	89a3      	ldrh	r3, [r4, #12]
90021ccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90021cd0:	81a3      	strh	r3, [r4, #12]
90021cd2:	2300      	movs	r3, #0
90021cd4:	6063      	str	r3, [r4, #4]
90021cd6:	6923      	ldr	r3, [r4, #16]
90021cd8:	6023      	str	r3, [r4, #0]
90021cda:	89a3      	ldrh	r3, [r4, #12]
90021cdc:	f043 0308 	orr.w	r3, r3, #8
90021ce0:	81a3      	strh	r3, [r4, #12]
90021ce2:	6923      	ldr	r3, [r4, #16]
90021ce4:	b94b      	cbnz	r3, 90021cfa <__swsetup_r+0x9a>
90021ce6:	89a3      	ldrh	r3, [r4, #12]
90021ce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
90021cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90021cf0:	d003      	beq.n	90021cfa <__swsetup_r+0x9a>
90021cf2:	4621      	mov	r1, r4
90021cf4:	4630      	mov	r0, r6
90021cf6:	f000 fa5f 	bl	900221b8 <__smakebuf_r>
90021cfa:	89a0      	ldrh	r0, [r4, #12]
90021cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90021d00:	f010 0301 	ands.w	r3, r0, #1
90021d04:	d00a      	beq.n	90021d1c <__swsetup_r+0xbc>
90021d06:	2300      	movs	r3, #0
90021d08:	60a3      	str	r3, [r4, #8]
90021d0a:	6963      	ldr	r3, [r4, #20]
90021d0c:	425b      	negs	r3, r3
90021d0e:	61a3      	str	r3, [r4, #24]
90021d10:	6923      	ldr	r3, [r4, #16]
90021d12:	b943      	cbnz	r3, 90021d26 <__swsetup_r+0xc6>
90021d14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90021d18:	d1ba      	bne.n	90021c90 <__swsetup_r+0x30>
90021d1a:	bd70      	pop	{r4, r5, r6, pc}
90021d1c:	0781      	lsls	r1, r0, #30
90021d1e:	bf58      	it	pl
90021d20:	6963      	ldrpl	r3, [r4, #20]
90021d22:	60a3      	str	r3, [r4, #8]
90021d24:	e7f4      	b.n	90021d10 <__swsetup_r+0xb0>
90021d26:	2000      	movs	r0, #0
90021d28:	e7f7      	b.n	90021d1a <__swsetup_r+0xba>
90021d2a:	bf00      	nop
90021d2c:	240000e0 	.word	0x240000e0
90021d30:	90025498 	.word	0x90025498
90021d34:	900254b8 	.word	0x900254b8
90021d38:	90025478 	.word	0x90025478

90021d3c <__register_exitproc>:
90021d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90021d40:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90021dfc <__register_exitproc+0xc0>
90021d44:	4606      	mov	r6, r0
90021d46:	f8d8 0000 	ldr.w	r0, [r8]
90021d4a:	461f      	mov	r7, r3
90021d4c:	460d      	mov	r5, r1
90021d4e:	4691      	mov	r9, r2
90021d50:	f7ff fad5 	bl	900212fe <__retarget_lock_acquire_recursive>
90021d54:	4b25      	ldr	r3, [pc, #148]	; (90021dec <__register_exitproc+0xb0>)
90021d56:	681c      	ldr	r4, [r3, #0]
90021d58:	b934      	cbnz	r4, 90021d68 <__register_exitproc+0x2c>
90021d5a:	4c25      	ldr	r4, [pc, #148]	; (90021df0 <__register_exitproc+0xb4>)
90021d5c:	601c      	str	r4, [r3, #0]
90021d5e:	4b25      	ldr	r3, [pc, #148]	; (90021df4 <__register_exitproc+0xb8>)
90021d60:	b113      	cbz	r3, 90021d68 <__register_exitproc+0x2c>
90021d62:	681b      	ldr	r3, [r3, #0]
90021d64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90021d68:	6863      	ldr	r3, [r4, #4]
90021d6a:	2b1f      	cmp	r3, #31
90021d6c:	dd07      	ble.n	90021d7e <__register_exitproc+0x42>
90021d6e:	f8d8 0000 	ldr.w	r0, [r8]
90021d72:	f7ff fac6 	bl	90021302 <__retarget_lock_release_recursive>
90021d76:	f04f 30ff 	mov.w	r0, #4294967295
90021d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90021d7e:	b34e      	cbz	r6, 90021dd4 <__register_exitproc+0x98>
90021d80:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90021d84:	b988      	cbnz	r0, 90021daa <__register_exitproc+0x6e>
90021d86:	4b1c      	ldr	r3, [pc, #112]	; (90021df8 <__register_exitproc+0xbc>)
90021d88:	b923      	cbnz	r3, 90021d94 <__register_exitproc+0x58>
90021d8a:	f8d8 0000 	ldr.w	r0, [r8]
90021d8e:	f7ff fab7 	bl	90021300 <__retarget_lock_release>
90021d92:	e7f0      	b.n	90021d76 <__register_exitproc+0x3a>
90021d94:	f44f 7084 	mov.w	r0, #264	; 0x108
90021d98:	f7ff fab4 	bl	90021304 <malloc>
90021d9c:	2800      	cmp	r0, #0
90021d9e:	d0f4      	beq.n	90021d8a <__register_exitproc+0x4e>
90021da0:	2300      	movs	r3, #0
90021da2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90021da6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90021daa:	6863      	ldr	r3, [r4, #4]
90021dac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90021db0:	2201      	movs	r2, #1
90021db2:	409a      	lsls	r2, r3
90021db4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90021db8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90021dbc:	4313      	orrs	r3, r2
90021dbe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90021dc2:	2e02      	cmp	r6, #2
90021dc4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90021dc8:	bf02      	ittt	eq
90021dca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90021dce:	4313      	orreq	r3, r2
90021dd0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90021dd4:	6863      	ldr	r3, [r4, #4]
90021dd6:	f8d8 0000 	ldr.w	r0, [r8]
90021dda:	1c5a      	adds	r2, r3, #1
90021ddc:	3302      	adds	r3, #2
90021dde:	6062      	str	r2, [r4, #4]
90021de0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90021de4:	f7ff fa8d 	bl	90021302 <__retarget_lock_release_recursive>
90021de8:	2000      	movs	r0, #0
90021dea:	e7c6      	b.n	90021d7a <__register_exitproc+0x3e>
90021dec:	24026780 	.word	0x24026780
90021df0:	240266f4 	.word	0x240266f4
90021df4:	90025474 	.word	0x90025474
90021df8:	90021305 	.word	0x90021305
90021dfc:	24000144 	.word	0x24000144

90021e00 <__sflush_r>:
90021e00:	898a      	ldrh	r2, [r1, #12]
90021e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90021e06:	4605      	mov	r5, r0
90021e08:	0710      	lsls	r0, r2, #28
90021e0a:	460c      	mov	r4, r1
90021e0c:	d458      	bmi.n	90021ec0 <__sflush_r+0xc0>
90021e0e:	684b      	ldr	r3, [r1, #4]
90021e10:	2b00      	cmp	r3, #0
90021e12:	dc05      	bgt.n	90021e20 <__sflush_r+0x20>
90021e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90021e16:	2b00      	cmp	r3, #0
90021e18:	dc02      	bgt.n	90021e20 <__sflush_r+0x20>
90021e1a:	2000      	movs	r0, #0
90021e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90021e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90021e22:	2e00      	cmp	r6, #0
90021e24:	d0f9      	beq.n	90021e1a <__sflush_r+0x1a>
90021e26:	2300      	movs	r3, #0
90021e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90021e2c:	682f      	ldr	r7, [r5, #0]
90021e2e:	602b      	str	r3, [r5, #0]
90021e30:	d032      	beq.n	90021e98 <__sflush_r+0x98>
90021e32:	6d60      	ldr	r0, [r4, #84]	; 0x54
90021e34:	89a3      	ldrh	r3, [r4, #12]
90021e36:	075a      	lsls	r2, r3, #29
90021e38:	d505      	bpl.n	90021e46 <__sflush_r+0x46>
90021e3a:	6863      	ldr	r3, [r4, #4]
90021e3c:	1ac0      	subs	r0, r0, r3
90021e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
90021e40:	b10b      	cbz	r3, 90021e46 <__sflush_r+0x46>
90021e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
90021e44:	1ac0      	subs	r0, r0, r3
90021e46:	2300      	movs	r3, #0
90021e48:	4602      	mov	r2, r0
90021e4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90021e4c:	6a21      	ldr	r1, [r4, #32]
90021e4e:	4628      	mov	r0, r5
90021e50:	47b0      	blx	r6
90021e52:	1c43      	adds	r3, r0, #1
90021e54:	89a3      	ldrh	r3, [r4, #12]
90021e56:	d106      	bne.n	90021e66 <__sflush_r+0x66>
90021e58:	6829      	ldr	r1, [r5, #0]
90021e5a:	291d      	cmp	r1, #29
90021e5c:	d82c      	bhi.n	90021eb8 <__sflush_r+0xb8>
90021e5e:	4a2a      	ldr	r2, [pc, #168]	; (90021f08 <__sflush_r+0x108>)
90021e60:	40ca      	lsrs	r2, r1
90021e62:	07d6      	lsls	r6, r2, #31
90021e64:	d528      	bpl.n	90021eb8 <__sflush_r+0xb8>
90021e66:	2200      	movs	r2, #0
90021e68:	6062      	str	r2, [r4, #4]
90021e6a:	04d9      	lsls	r1, r3, #19
90021e6c:	6922      	ldr	r2, [r4, #16]
90021e6e:	6022      	str	r2, [r4, #0]
90021e70:	d504      	bpl.n	90021e7c <__sflush_r+0x7c>
90021e72:	1c42      	adds	r2, r0, #1
90021e74:	d101      	bne.n	90021e7a <__sflush_r+0x7a>
90021e76:	682b      	ldr	r3, [r5, #0]
90021e78:	b903      	cbnz	r3, 90021e7c <__sflush_r+0x7c>
90021e7a:	6560      	str	r0, [r4, #84]	; 0x54
90021e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
90021e7e:	602f      	str	r7, [r5, #0]
90021e80:	2900      	cmp	r1, #0
90021e82:	d0ca      	beq.n	90021e1a <__sflush_r+0x1a>
90021e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
90021e88:	4299      	cmp	r1, r3
90021e8a:	d002      	beq.n	90021e92 <__sflush_r+0x92>
90021e8c:	4628      	mov	r0, r5
90021e8e:	f7ff fa5f 	bl	90021350 <_free_r>
90021e92:	2000      	movs	r0, #0
90021e94:	6360      	str	r0, [r4, #52]	; 0x34
90021e96:	e7c1      	b.n	90021e1c <__sflush_r+0x1c>
90021e98:	6a21      	ldr	r1, [r4, #32]
90021e9a:	2301      	movs	r3, #1
90021e9c:	4628      	mov	r0, r5
90021e9e:	47b0      	blx	r6
90021ea0:	1c41      	adds	r1, r0, #1
90021ea2:	d1c7      	bne.n	90021e34 <__sflush_r+0x34>
90021ea4:	682b      	ldr	r3, [r5, #0]
90021ea6:	2b00      	cmp	r3, #0
90021ea8:	d0c4      	beq.n	90021e34 <__sflush_r+0x34>
90021eaa:	2b1d      	cmp	r3, #29
90021eac:	d001      	beq.n	90021eb2 <__sflush_r+0xb2>
90021eae:	2b16      	cmp	r3, #22
90021eb0:	d101      	bne.n	90021eb6 <__sflush_r+0xb6>
90021eb2:	602f      	str	r7, [r5, #0]
90021eb4:	e7b1      	b.n	90021e1a <__sflush_r+0x1a>
90021eb6:	89a3      	ldrh	r3, [r4, #12]
90021eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90021ebc:	81a3      	strh	r3, [r4, #12]
90021ebe:	e7ad      	b.n	90021e1c <__sflush_r+0x1c>
90021ec0:	690f      	ldr	r7, [r1, #16]
90021ec2:	2f00      	cmp	r7, #0
90021ec4:	d0a9      	beq.n	90021e1a <__sflush_r+0x1a>
90021ec6:	0793      	lsls	r3, r2, #30
90021ec8:	680e      	ldr	r6, [r1, #0]
90021eca:	bf08      	it	eq
90021ecc:	694b      	ldreq	r3, [r1, #20]
90021ece:	600f      	str	r7, [r1, #0]
90021ed0:	bf18      	it	ne
90021ed2:	2300      	movne	r3, #0
90021ed4:	eba6 0807 	sub.w	r8, r6, r7
90021ed8:	608b      	str	r3, [r1, #8]
90021eda:	f1b8 0f00 	cmp.w	r8, #0
90021ede:	dd9c      	ble.n	90021e1a <__sflush_r+0x1a>
90021ee0:	6a21      	ldr	r1, [r4, #32]
90021ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90021ee4:	4643      	mov	r3, r8
90021ee6:	463a      	mov	r2, r7
90021ee8:	4628      	mov	r0, r5
90021eea:	47b0      	blx	r6
90021eec:	2800      	cmp	r0, #0
90021eee:	dc06      	bgt.n	90021efe <__sflush_r+0xfe>
90021ef0:	89a3      	ldrh	r3, [r4, #12]
90021ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90021ef6:	81a3      	strh	r3, [r4, #12]
90021ef8:	f04f 30ff 	mov.w	r0, #4294967295
90021efc:	e78e      	b.n	90021e1c <__sflush_r+0x1c>
90021efe:	4407      	add	r7, r0
90021f00:	eba8 0800 	sub.w	r8, r8, r0
90021f04:	e7e9      	b.n	90021eda <__sflush_r+0xda>
90021f06:	bf00      	nop
90021f08:	20400001 	.word	0x20400001

90021f0c <_fflush_r>:
90021f0c:	b538      	push	{r3, r4, r5, lr}
90021f0e:	690b      	ldr	r3, [r1, #16]
90021f10:	4605      	mov	r5, r0
90021f12:	460c      	mov	r4, r1
90021f14:	b913      	cbnz	r3, 90021f1c <_fflush_r+0x10>
90021f16:	2500      	movs	r5, #0
90021f18:	4628      	mov	r0, r5
90021f1a:	bd38      	pop	{r3, r4, r5, pc}
90021f1c:	b118      	cbz	r0, 90021f26 <_fflush_r+0x1a>
90021f1e:	6983      	ldr	r3, [r0, #24]
90021f20:	b90b      	cbnz	r3, 90021f26 <_fflush_r+0x1a>
90021f22:	f000 f887 	bl	90022034 <__sinit>
90021f26:	4b14      	ldr	r3, [pc, #80]	; (90021f78 <_fflush_r+0x6c>)
90021f28:	429c      	cmp	r4, r3
90021f2a:	d11b      	bne.n	90021f64 <_fflush_r+0x58>
90021f2c:	686c      	ldr	r4, [r5, #4]
90021f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90021f32:	2b00      	cmp	r3, #0
90021f34:	d0ef      	beq.n	90021f16 <_fflush_r+0xa>
90021f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
90021f38:	07d0      	lsls	r0, r2, #31
90021f3a:	d404      	bmi.n	90021f46 <_fflush_r+0x3a>
90021f3c:	0599      	lsls	r1, r3, #22
90021f3e:	d402      	bmi.n	90021f46 <_fflush_r+0x3a>
90021f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
90021f42:	f7ff f9dc 	bl	900212fe <__retarget_lock_acquire_recursive>
90021f46:	4628      	mov	r0, r5
90021f48:	4621      	mov	r1, r4
90021f4a:	f7ff ff59 	bl	90021e00 <__sflush_r>
90021f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90021f50:	07da      	lsls	r2, r3, #31
90021f52:	4605      	mov	r5, r0
90021f54:	d4e0      	bmi.n	90021f18 <_fflush_r+0xc>
90021f56:	89a3      	ldrh	r3, [r4, #12]
90021f58:	059b      	lsls	r3, r3, #22
90021f5a:	d4dd      	bmi.n	90021f18 <_fflush_r+0xc>
90021f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90021f5e:	f7ff f9d0 	bl	90021302 <__retarget_lock_release_recursive>
90021f62:	e7d9      	b.n	90021f18 <_fflush_r+0xc>
90021f64:	4b05      	ldr	r3, [pc, #20]	; (90021f7c <_fflush_r+0x70>)
90021f66:	429c      	cmp	r4, r3
90021f68:	d101      	bne.n	90021f6e <_fflush_r+0x62>
90021f6a:	68ac      	ldr	r4, [r5, #8]
90021f6c:	e7df      	b.n	90021f2e <_fflush_r+0x22>
90021f6e:	4b04      	ldr	r3, [pc, #16]	; (90021f80 <_fflush_r+0x74>)
90021f70:	429c      	cmp	r4, r3
90021f72:	bf08      	it	eq
90021f74:	68ec      	ldreq	r4, [r5, #12]
90021f76:	e7da      	b.n	90021f2e <_fflush_r+0x22>
90021f78:	90025498 	.word	0x90025498
90021f7c:	900254b8 	.word	0x900254b8
90021f80:	90025478 	.word	0x90025478

90021f84 <std>:
90021f84:	2300      	movs	r3, #0
90021f86:	b510      	push	{r4, lr}
90021f88:	4604      	mov	r4, r0
90021f8a:	e9c0 3300 	strd	r3, r3, [r0]
90021f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
90021f92:	6083      	str	r3, [r0, #8]
90021f94:	8181      	strh	r1, [r0, #12]
90021f96:	6643      	str	r3, [r0, #100]	; 0x64
90021f98:	81c2      	strh	r2, [r0, #14]
90021f9a:	6183      	str	r3, [r0, #24]
90021f9c:	4619      	mov	r1, r3
90021f9e:	2208      	movs	r2, #8
90021fa0:	305c      	adds	r0, #92	; 0x5c
90021fa2:	f7ff f9cd 	bl	90021340 <memset>
90021fa6:	4b05      	ldr	r3, [pc, #20]	; (90021fbc <std+0x38>)
90021fa8:	6263      	str	r3, [r4, #36]	; 0x24
90021faa:	4b05      	ldr	r3, [pc, #20]	; (90021fc0 <std+0x3c>)
90021fac:	62a3      	str	r3, [r4, #40]	; 0x28
90021fae:	4b05      	ldr	r3, [pc, #20]	; (90021fc4 <std+0x40>)
90021fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
90021fb2:	4b05      	ldr	r3, [pc, #20]	; (90021fc8 <std+0x44>)
90021fb4:	6224      	str	r4, [r4, #32]
90021fb6:	6323      	str	r3, [r4, #48]	; 0x30
90021fb8:	bd10      	pop	{r4, pc}
90021fba:	bf00      	nop
90021fbc:	90022251 	.word	0x90022251
90021fc0:	90022273 	.word	0x90022273
90021fc4:	900222ab 	.word	0x900222ab
90021fc8:	900222cf 	.word	0x900222cf

90021fcc <_cleanup_r>:
90021fcc:	4901      	ldr	r1, [pc, #4]	; (90021fd4 <_cleanup_r+0x8>)
90021fce:	f000 b8af 	b.w	90022130 <_fwalk_reent>
90021fd2:	bf00      	nop
90021fd4:	90021f0d 	.word	0x90021f0d

90021fd8 <__sfmoreglue>:
90021fd8:	b570      	push	{r4, r5, r6, lr}
90021fda:	2268      	movs	r2, #104	; 0x68
90021fdc:	1e4d      	subs	r5, r1, #1
90021fde:	4355      	muls	r5, r2
90021fe0:	460e      	mov	r6, r1
90021fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
90021fe6:	f7ff fa1f 	bl	90021428 <_malloc_r>
90021fea:	4604      	mov	r4, r0
90021fec:	b140      	cbz	r0, 90022000 <__sfmoreglue+0x28>
90021fee:	2100      	movs	r1, #0
90021ff0:	e9c0 1600 	strd	r1, r6, [r0]
90021ff4:	300c      	adds	r0, #12
90021ff6:	60a0      	str	r0, [r4, #8]
90021ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
90021ffc:	f7ff f9a0 	bl	90021340 <memset>
90022000:	4620      	mov	r0, r4
90022002:	bd70      	pop	{r4, r5, r6, pc}

90022004 <__sfp_lock_acquire>:
90022004:	4801      	ldr	r0, [pc, #4]	; (9002200c <__sfp_lock_acquire+0x8>)
90022006:	f7ff b97a 	b.w	900212fe <__retarget_lock_acquire_recursive>
9002200a:	bf00      	nop
9002200c:	240265e2 	.word	0x240265e2

90022010 <__sfp_lock_release>:
90022010:	4801      	ldr	r0, [pc, #4]	; (90022018 <__sfp_lock_release+0x8>)
90022012:	f7ff b976 	b.w	90021302 <__retarget_lock_release_recursive>
90022016:	bf00      	nop
90022018:	240265e2 	.word	0x240265e2

9002201c <__sinit_lock_acquire>:
9002201c:	4801      	ldr	r0, [pc, #4]	; (90022024 <__sinit_lock_acquire+0x8>)
9002201e:	f7ff b96e 	b.w	900212fe <__retarget_lock_acquire_recursive>
90022022:	bf00      	nop
90022024:	240265e3 	.word	0x240265e3

90022028 <__sinit_lock_release>:
90022028:	4801      	ldr	r0, [pc, #4]	; (90022030 <__sinit_lock_release+0x8>)
9002202a:	f7ff b96a 	b.w	90021302 <__retarget_lock_release_recursive>
9002202e:	bf00      	nop
90022030:	240265e3 	.word	0x240265e3

90022034 <__sinit>:
90022034:	b510      	push	{r4, lr}
90022036:	4604      	mov	r4, r0
90022038:	f7ff fff0 	bl	9002201c <__sinit_lock_acquire>
9002203c:	69a3      	ldr	r3, [r4, #24]
9002203e:	b11b      	cbz	r3, 90022048 <__sinit+0x14>
90022040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90022044:	f7ff bff0 	b.w	90022028 <__sinit_lock_release>
90022048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
9002204c:	6523      	str	r3, [r4, #80]	; 0x50
9002204e:	4b13      	ldr	r3, [pc, #76]	; (9002209c <__sinit+0x68>)
90022050:	4a13      	ldr	r2, [pc, #76]	; (900220a0 <__sinit+0x6c>)
90022052:	681b      	ldr	r3, [r3, #0]
90022054:	62a2      	str	r2, [r4, #40]	; 0x28
90022056:	42a3      	cmp	r3, r4
90022058:	bf04      	itt	eq
9002205a:	2301      	moveq	r3, #1
9002205c:	61a3      	streq	r3, [r4, #24]
9002205e:	4620      	mov	r0, r4
90022060:	f000 f820 	bl	900220a4 <__sfp>
90022064:	6060      	str	r0, [r4, #4]
90022066:	4620      	mov	r0, r4
90022068:	f000 f81c 	bl	900220a4 <__sfp>
9002206c:	60a0      	str	r0, [r4, #8]
9002206e:	4620      	mov	r0, r4
90022070:	f000 f818 	bl	900220a4 <__sfp>
90022074:	2200      	movs	r2, #0
90022076:	60e0      	str	r0, [r4, #12]
90022078:	2104      	movs	r1, #4
9002207a:	6860      	ldr	r0, [r4, #4]
9002207c:	f7ff ff82 	bl	90021f84 <std>
90022080:	68a0      	ldr	r0, [r4, #8]
90022082:	2201      	movs	r2, #1
90022084:	2109      	movs	r1, #9
90022086:	f7ff ff7d 	bl	90021f84 <std>
9002208a:	68e0      	ldr	r0, [r4, #12]
9002208c:	2202      	movs	r2, #2
9002208e:	2112      	movs	r1, #18
90022090:	f7ff ff78 	bl	90021f84 <std>
90022094:	2301      	movs	r3, #1
90022096:	61a3      	str	r3, [r4, #24]
90022098:	e7d2      	b.n	90022040 <__sinit+0xc>
9002209a:	bf00      	nop
9002209c:	9002543c 	.word	0x9002543c
900220a0:	90021fcd 	.word	0x90021fcd

900220a4 <__sfp>:
900220a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900220a6:	4607      	mov	r7, r0
900220a8:	f7ff ffac 	bl	90022004 <__sfp_lock_acquire>
900220ac:	4b1e      	ldr	r3, [pc, #120]	; (90022128 <__sfp+0x84>)
900220ae:	681e      	ldr	r6, [r3, #0]
900220b0:	69b3      	ldr	r3, [r6, #24]
900220b2:	b913      	cbnz	r3, 900220ba <__sfp+0x16>
900220b4:	4630      	mov	r0, r6
900220b6:	f7ff ffbd 	bl	90022034 <__sinit>
900220ba:	3648      	adds	r6, #72	; 0x48
900220bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
900220c0:	3b01      	subs	r3, #1
900220c2:	d503      	bpl.n	900220cc <__sfp+0x28>
900220c4:	6833      	ldr	r3, [r6, #0]
900220c6:	b30b      	cbz	r3, 9002210c <__sfp+0x68>
900220c8:	6836      	ldr	r6, [r6, #0]
900220ca:	e7f7      	b.n	900220bc <__sfp+0x18>
900220cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
900220d0:	b9d5      	cbnz	r5, 90022108 <__sfp+0x64>
900220d2:	4b16      	ldr	r3, [pc, #88]	; (9002212c <__sfp+0x88>)
900220d4:	60e3      	str	r3, [r4, #12]
900220d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
900220da:	6665      	str	r5, [r4, #100]	; 0x64
900220dc:	f7ff f90e 	bl	900212fc <__retarget_lock_init_recursive>
900220e0:	f7ff ff96 	bl	90022010 <__sfp_lock_release>
900220e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
900220e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
900220ec:	6025      	str	r5, [r4, #0]
900220ee:	61a5      	str	r5, [r4, #24]
900220f0:	2208      	movs	r2, #8
900220f2:	4629      	mov	r1, r5
900220f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
900220f8:	f7ff f922 	bl	90021340 <memset>
900220fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90022100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90022104:	4620      	mov	r0, r4
90022106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90022108:	3468      	adds	r4, #104	; 0x68
9002210a:	e7d9      	b.n	900220c0 <__sfp+0x1c>
9002210c:	2104      	movs	r1, #4
9002210e:	4638      	mov	r0, r7
90022110:	f7ff ff62 	bl	90021fd8 <__sfmoreglue>
90022114:	4604      	mov	r4, r0
90022116:	6030      	str	r0, [r6, #0]
90022118:	2800      	cmp	r0, #0
9002211a:	d1d5      	bne.n	900220c8 <__sfp+0x24>
9002211c:	f7ff ff78 	bl	90022010 <__sfp_lock_release>
90022120:	230c      	movs	r3, #12
90022122:	603b      	str	r3, [r7, #0]
90022124:	e7ee      	b.n	90022104 <__sfp+0x60>
90022126:	bf00      	nop
90022128:	9002543c 	.word	0x9002543c
9002212c:	ffff0001 	.word	0xffff0001

90022130 <_fwalk_reent>:
90022130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90022134:	4606      	mov	r6, r0
90022136:	4688      	mov	r8, r1
90022138:	f100 0448 	add.w	r4, r0, #72	; 0x48
9002213c:	2700      	movs	r7, #0
9002213e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90022142:	f1b9 0901 	subs.w	r9, r9, #1
90022146:	d505      	bpl.n	90022154 <_fwalk_reent+0x24>
90022148:	6824      	ldr	r4, [r4, #0]
9002214a:	2c00      	cmp	r4, #0
9002214c:	d1f7      	bne.n	9002213e <_fwalk_reent+0xe>
9002214e:	4638      	mov	r0, r7
90022150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90022154:	89ab      	ldrh	r3, [r5, #12]
90022156:	2b01      	cmp	r3, #1
90022158:	d907      	bls.n	9002216a <_fwalk_reent+0x3a>
9002215a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9002215e:	3301      	adds	r3, #1
90022160:	d003      	beq.n	9002216a <_fwalk_reent+0x3a>
90022162:	4629      	mov	r1, r5
90022164:	4630      	mov	r0, r6
90022166:	47c0      	blx	r8
90022168:	4307      	orrs	r7, r0
9002216a:	3568      	adds	r5, #104	; 0x68
9002216c:	e7e9      	b.n	90022142 <_fwalk_reent+0x12>

9002216e <__swhatbuf_r>:
9002216e:	b570      	push	{r4, r5, r6, lr}
90022170:	460e      	mov	r6, r1
90022172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90022176:	2900      	cmp	r1, #0
90022178:	b096      	sub	sp, #88	; 0x58
9002217a:	4614      	mov	r4, r2
9002217c:	461d      	mov	r5, r3
9002217e:	da08      	bge.n	90022192 <__swhatbuf_r+0x24>
90022180:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90022184:	2200      	movs	r2, #0
90022186:	602a      	str	r2, [r5, #0]
90022188:	061a      	lsls	r2, r3, #24
9002218a:	d410      	bmi.n	900221ae <__swhatbuf_r+0x40>
9002218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
90022190:	e00e      	b.n	900221b0 <__swhatbuf_r+0x42>
90022192:	466a      	mov	r2, sp
90022194:	f000 f8c2 	bl	9002231c <_fstat_r>
90022198:	2800      	cmp	r0, #0
9002219a:	dbf1      	blt.n	90022180 <__swhatbuf_r+0x12>
9002219c:	9a01      	ldr	r2, [sp, #4]
9002219e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
900221a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
900221a6:	425a      	negs	r2, r3
900221a8:	415a      	adcs	r2, r3
900221aa:	602a      	str	r2, [r5, #0]
900221ac:	e7ee      	b.n	9002218c <__swhatbuf_r+0x1e>
900221ae:	2340      	movs	r3, #64	; 0x40
900221b0:	2000      	movs	r0, #0
900221b2:	6023      	str	r3, [r4, #0]
900221b4:	b016      	add	sp, #88	; 0x58
900221b6:	bd70      	pop	{r4, r5, r6, pc}

900221b8 <__smakebuf_r>:
900221b8:	898b      	ldrh	r3, [r1, #12]
900221ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
900221bc:	079d      	lsls	r5, r3, #30
900221be:	4606      	mov	r6, r0
900221c0:	460c      	mov	r4, r1
900221c2:	d507      	bpl.n	900221d4 <__smakebuf_r+0x1c>
900221c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
900221c8:	6023      	str	r3, [r4, #0]
900221ca:	6123      	str	r3, [r4, #16]
900221cc:	2301      	movs	r3, #1
900221ce:	6163      	str	r3, [r4, #20]
900221d0:	b002      	add	sp, #8
900221d2:	bd70      	pop	{r4, r5, r6, pc}
900221d4:	ab01      	add	r3, sp, #4
900221d6:	466a      	mov	r2, sp
900221d8:	f7ff ffc9 	bl	9002216e <__swhatbuf_r>
900221dc:	9900      	ldr	r1, [sp, #0]
900221de:	4605      	mov	r5, r0
900221e0:	4630      	mov	r0, r6
900221e2:	f7ff f921 	bl	90021428 <_malloc_r>
900221e6:	b948      	cbnz	r0, 900221fc <__smakebuf_r+0x44>
900221e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900221ec:	059a      	lsls	r2, r3, #22
900221ee:	d4ef      	bmi.n	900221d0 <__smakebuf_r+0x18>
900221f0:	f023 0303 	bic.w	r3, r3, #3
900221f4:	f043 0302 	orr.w	r3, r3, #2
900221f8:	81a3      	strh	r3, [r4, #12]
900221fa:	e7e3      	b.n	900221c4 <__smakebuf_r+0xc>
900221fc:	4b0d      	ldr	r3, [pc, #52]	; (90022234 <__smakebuf_r+0x7c>)
900221fe:	62b3      	str	r3, [r6, #40]	; 0x28
90022200:	89a3      	ldrh	r3, [r4, #12]
90022202:	6020      	str	r0, [r4, #0]
90022204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90022208:	81a3      	strh	r3, [r4, #12]
9002220a:	9b00      	ldr	r3, [sp, #0]
9002220c:	6163      	str	r3, [r4, #20]
9002220e:	9b01      	ldr	r3, [sp, #4]
90022210:	6120      	str	r0, [r4, #16]
90022212:	b15b      	cbz	r3, 9002222c <__smakebuf_r+0x74>
90022214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90022218:	4630      	mov	r0, r6
9002221a:	f000 f891 	bl	90022340 <_isatty_r>
9002221e:	b128      	cbz	r0, 9002222c <__smakebuf_r+0x74>
90022220:	89a3      	ldrh	r3, [r4, #12]
90022222:	f023 0303 	bic.w	r3, r3, #3
90022226:	f043 0301 	orr.w	r3, r3, #1
9002222a:	81a3      	strh	r3, [r4, #12]
9002222c:	89a0      	ldrh	r0, [r4, #12]
9002222e:	4305      	orrs	r5, r0
90022230:	81a5      	strh	r5, [r4, #12]
90022232:	e7cd      	b.n	900221d0 <__smakebuf_r+0x18>
90022234:	90021fcd 	.word	0x90021fcd

90022238 <__malloc_lock>:
90022238:	4801      	ldr	r0, [pc, #4]	; (90022240 <__malloc_lock+0x8>)
9002223a:	f7ff b860 	b.w	900212fe <__retarget_lock_acquire_recursive>
9002223e:	bf00      	nop
90022240:	240265e1 	.word	0x240265e1

90022244 <__malloc_unlock>:
90022244:	4801      	ldr	r0, [pc, #4]	; (9002224c <__malloc_unlock+0x8>)
90022246:	f7ff b85c 	b.w	90021302 <__retarget_lock_release_recursive>
9002224a:	bf00      	nop
9002224c:	240265e1 	.word	0x240265e1

90022250 <__sread>:
90022250:	b510      	push	{r4, lr}
90022252:	460c      	mov	r4, r1
90022254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90022258:	f000 f894 	bl	90022384 <_read_r>
9002225c:	2800      	cmp	r0, #0
9002225e:	bfab      	itete	ge
90022260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90022262:	89a3      	ldrhlt	r3, [r4, #12]
90022264:	181b      	addge	r3, r3, r0
90022266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9002226a:	bfac      	ite	ge
9002226c:	6563      	strge	r3, [r4, #84]	; 0x54
9002226e:	81a3      	strhlt	r3, [r4, #12]
90022270:	bd10      	pop	{r4, pc}

90022272 <__swrite>:
90022272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90022276:	461f      	mov	r7, r3
90022278:	898b      	ldrh	r3, [r1, #12]
9002227a:	05db      	lsls	r3, r3, #23
9002227c:	4605      	mov	r5, r0
9002227e:	460c      	mov	r4, r1
90022280:	4616      	mov	r6, r2
90022282:	d505      	bpl.n	90022290 <__swrite+0x1e>
90022284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90022288:	2302      	movs	r3, #2
9002228a:	2200      	movs	r2, #0
9002228c:	f000 f868 	bl	90022360 <_lseek_r>
90022290:	89a3      	ldrh	r3, [r4, #12]
90022292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90022296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9002229a:	81a3      	strh	r3, [r4, #12]
9002229c:	4632      	mov	r2, r6
9002229e:	463b      	mov	r3, r7
900222a0:	4628      	mov	r0, r5
900222a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
900222a6:	f000 b817 	b.w	900222d8 <_write_r>

900222aa <__sseek>:
900222aa:	b510      	push	{r4, lr}
900222ac:	460c      	mov	r4, r1
900222ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900222b2:	f000 f855 	bl	90022360 <_lseek_r>
900222b6:	1c43      	adds	r3, r0, #1
900222b8:	89a3      	ldrh	r3, [r4, #12]
900222ba:	bf15      	itete	ne
900222bc:	6560      	strne	r0, [r4, #84]	; 0x54
900222be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
900222c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
900222c6:	81a3      	strheq	r3, [r4, #12]
900222c8:	bf18      	it	ne
900222ca:	81a3      	strhne	r3, [r4, #12]
900222cc:	bd10      	pop	{r4, pc}

900222ce <__sclose>:
900222ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900222d2:	f000 b813 	b.w	900222fc <_close_r>
	...

900222d8 <_write_r>:
900222d8:	b538      	push	{r3, r4, r5, lr}
900222da:	4d07      	ldr	r5, [pc, #28]	; (900222f8 <_write_r+0x20>)
900222dc:	4604      	mov	r4, r0
900222de:	4608      	mov	r0, r1
900222e0:	4611      	mov	r1, r2
900222e2:	2200      	movs	r2, #0
900222e4:	602a      	str	r2, [r5, #0]
900222e6:	461a      	mov	r2, r3
900222e8:	f7e2 fb78 	bl	900049dc <_write>
900222ec:	1c43      	adds	r3, r0, #1
900222ee:	d102      	bne.n	900222f6 <_write_r+0x1e>
900222f0:	682b      	ldr	r3, [r5, #0]
900222f2:	b103      	cbz	r3, 900222f6 <_write_r+0x1e>
900222f4:	6023      	str	r3, [r4, #0]
900222f6:	bd38      	pop	{r3, r4, r5, pc}
900222f8:	24026784 	.word	0x24026784

900222fc <_close_r>:
900222fc:	b538      	push	{r3, r4, r5, lr}
900222fe:	4d06      	ldr	r5, [pc, #24]	; (90022318 <_close_r+0x1c>)
90022300:	2300      	movs	r3, #0
90022302:	4604      	mov	r4, r0
90022304:	4608      	mov	r0, r1
90022306:	602b      	str	r3, [r5, #0]
90022308:	f7e2 fb76 	bl	900049f8 <_close>
9002230c:	1c43      	adds	r3, r0, #1
9002230e:	d102      	bne.n	90022316 <_close_r+0x1a>
90022310:	682b      	ldr	r3, [r5, #0]
90022312:	b103      	cbz	r3, 90022316 <_close_r+0x1a>
90022314:	6023      	str	r3, [r4, #0]
90022316:	bd38      	pop	{r3, r4, r5, pc}
90022318:	24026784 	.word	0x24026784

9002231c <_fstat_r>:
9002231c:	b538      	push	{r3, r4, r5, lr}
9002231e:	4d07      	ldr	r5, [pc, #28]	; (9002233c <_fstat_r+0x20>)
90022320:	2300      	movs	r3, #0
90022322:	4604      	mov	r4, r0
90022324:	4608      	mov	r0, r1
90022326:	4611      	mov	r1, r2
90022328:	602b      	str	r3, [r5, #0]
9002232a:	f7e2 fb69 	bl	90004a00 <_fstat>
9002232e:	1c43      	adds	r3, r0, #1
90022330:	d102      	bne.n	90022338 <_fstat_r+0x1c>
90022332:	682b      	ldr	r3, [r5, #0]
90022334:	b103      	cbz	r3, 90022338 <_fstat_r+0x1c>
90022336:	6023      	str	r3, [r4, #0]
90022338:	bd38      	pop	{r3, r4, r5, pc}
9002233a:	bf00      	nop
9002233c:	24026784 	.word	0x24026784

90022340 <_isatty_r>:
90022340:	b538      	push	{r3, r4, r5, lr}
90022342:	4d06      	ldr	r5, [pc, #24]	; (9002235c <_isatty_r+0x1c>)
90022344:	2300      	movs	r3, #0
90022346:	4604      	mov	r4, r0
90022348:	4608      	mov	r0, r1
9002234a:	602b      	str	r3, [r5, #0]
9002234c:	f7e2 fb5e 	bl	90004a0c <_isatty>
90022350:	1c43      	adds	r3, r0, #1
90022352:	d102      	bne.n	9002235a <_isatty_r+0x1a>
90022354:	682b      	ldr	r3, [r5, #0]
90022356:	b103      	cbz	r3, 9002235a <_isatty_r+0x1a>
90022358:	6023      	str	r3, [r4, #0]
9002235a:	bd38      	pop	{r3, r4, r5, pc}
9002235c:	24026784 	.word	0x24026784

90022360 <_lseek_r>:
90022360:	b538      	push	{r3, r4, r5, lr}
90022362:	4d07      	ldr	r5, [pc, #28]	; (90022380 <_lseek_r+0x20>)
90022364:	4604      	mov	r4, r0
90022366:	4608      	mov	r0, r1
90022368:	4611      	mov	r1, r2
9002236a:	2200      	movs	r2, #0
9002236c:	602a      	str	r2, [r5, #0]
9002236e:	461a      	mov	r2, r3
90022370:	f7e2 fb4e 	bl	90004a10 <_lseek>
90022374:	1c43      	adds	r3, r0, #1
90022376:	d102      	bne.n	9002237e <_lseek_r+0x1e>
90022378:	682b      	ldr	r3, [r5, #0]
9002237a:	b103      	cbz	r3, 9002237e <_lseek_r+0x1e>
9002237c:	6023      	str	r3, [r4, #0]
9002237e:	bd38      	pop	{r3, r4, r5, pc}
90022380:	24026784 	.word	0x24026784

90022384 <_read_r>:
90022384:	b538      	push	{r3, r4, r5, lr}
90022386:	4d07      	ldr	r5, [pc, #28]	; (900223a4 <_read_r+0x20>)
90022388:	4604      	mov	r4, r0
9002238a:	4608      	mov	r0, r1
9002238c:	4611      	mov	r1, r2
9002238e:	2200      	movs	r2, #0
90022390:	602a      	str	r2, [r5, #0]
90022392:	461a      	mov	r2, r3
90022394:	f7e2 fb14 	bl	900049c0 <_read>
90022398:	1c43      	adds	r3, r0, #1
9002239a:	d102      	bne.n	900223a2 <_read_r+0x1e>
9002239c:	682b      	ldr	r3, [r5, #0]
9002239e:	b103      	cbz	r3, 900223a2 <_read_r+0x1e>
900223a0:	6023      	str	r3, [r4, #0]
900223a2:	bd38      	pop	{r3, r4, r5, pc}
900223a4:	24026784 	.word	0x24026784

900223a8 <_init>:
900223a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900223aa:	bf00      	nop
900223ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
900223ae:	bc08      	pop	{r3}
900223b0:	469e      	mov	lr, r3
900223b2:	4770      	bx	lr

900223b4 <_fini>:
900223b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900223b6:	bf00      	nop
900223b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
900223ba:	bc08      	pop	{r3}
900223bc:	469e      	mov	lr, r3
900223be:	4770      	bx	lr
